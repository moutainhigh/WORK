/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComCalculateService {

  public interface Iface {

    public String obtainPIDForMaxMonth(int comId, int accountingYear) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CusComBalanceSheetCalculateDTO> obtainLeftCusComBSLCalculatesByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CusComBalanceSheetCalculateDTO> obtainRightCusComBSLCalculatesByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public Map<Integer,Double> obtainLeftCusComBSLCalculatesMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public Map<Integer,Double> obtainRightCusComBSLCalculatesMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CusComIncomeReportCalculateDTO> obtainIncomeReportCalculateByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public Map<Integer,Double> obtainIncomeReportCalculateMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CusComCashFlowReportCalculateDTO> obtainCashFlowCalculateByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public Map<Integer,Double> obtainCashFlowCalculateMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CusComCashFlowReportCalculateDTO> obtainSupplementCashFlowCalculateByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public Map<Integer,Double> obtainSupplementCashFlowCalculateMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void obtainPIDForMaxMonth(int comId, int accountingYear, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainLeftCusComBSLCalculatesByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainRightCusComBSLCalculatesByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainLeftCusComBSLCalculatesMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainRightCusComBSLCalculatesMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainIncomeReportCalculateByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainIncomeReportCalculateMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainCashFlowCalculateByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainCashFlowCalculateMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainSupplementCashFlowCalculateByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void obtainSupplementCashFlowCalculateMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String obtainPIDForMaxMonth(int comId, int accountingYear) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainPIDForMaxMonth(comId, accountingYear);
      return recv_obtainPIDForMaxMonth();
    }

    public void send_obtainPIDForMaxMonth(int comId, int accountingYear) throws org.apache.thrift.TException
    {
      obtainPIDForMaxMonth_args args = new obtainPIDForMaxMonth_args();
      args.setComId(comId);
      args.setAccountingYear(accountingYear);
      sendBase("obtainPIDForMaxMonth", args);
    }

    public String recv_obtainPIDForMaxMonth() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainPIDForMaxMonth_result result = new obtainPIDForMaxMonth_result();
      receiveBase(result, "obtainPIDForMaxMonth");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainPIDForMaxMonth failed: unknown result");
    }

    public List<CusComBalanceSheetCalculateDTO> obtainLeftCusComBSLCalculatesByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainLeftCusComBSLCalculatesByReportId(reportId);
      return recv_obtainLeftCusComBSLCalculatesByReportId();
    }

    public void send_obtainLeftCusComBSLCalculatesByReportId(int reportId) throws org.apache.thrift.TException
    {
      obtainLeftCusComBSLCalculatesByReportId_args args = new obtainLeftCusComBSLCalculatesByReportId_args();
      args.setReportId(reportId);
      sendBase("obtainLeftCusComBSLCalculatesByReportId", args);
    }

    public List<CusComBalanceSheetCalculateDTO> recv_obtainLeftCusComBSLCalculatesByReportId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainLeftCusComBSLCalculatesByReportId_result result = new obtainLeftCusComBSLCalculatesByReportId_result();
      receiveBase(result, "obtainLeftCusComBSLCalculatesByReportId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainLeftCusComBSLCalculatesByReportId failed: unknown result");
    }

    public List<CusComBalanceSheetCalculateDTO> obtainRightCusComBSLCalculatesByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainRightCusComBSLCalculatesByReportId(reportId);
      return recv_obtainRightCusComBSLCalculatesByReportId();
    }

    public void send_obtainRightCusComBSLCalculatesByReportId(int reportId) throws org.apache.thrift.TException
    {
      obtainRightCusComBSLCalculatesByReportId_args args = new obtainRightCusComBSLCalculatesByReportId_args();
      args.setReportId(reportId);
      sendBase("obtainRightCusComBSLCalculatesByReportId", args);
    }

    public List<CusComBalanceSheetCalculateDTO> recv_obtainRightCusComBSLCalculatesByReportId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainRightCusComBSLCalculatesByReportId_result result = new obtainRightCusComBSLCalculatesByReportId_result();
      receiveBase(result, "obtainRightCusComBSLCalculatesByReportId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainRightCusComBSLCalculatesByReportId failed: unknown result");
    }

    public Map<Integer,Double> obtainLeftCusComBSLCalculatesMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainLeftCusComBSLCalculatesMap(reportId);
      return recv_obtainLeftCusComBSLCalculatesMap();
    }

    public void send_obtainLeftCusComBSLCalculatesMap(int reportId) throws org.apache.thrift.TException
    {
      obtainLeftCusComBSLCalculatesMap_args args = new obtainLeftCusComBSLCalculatesMap_args();
      args.setReportId(reportId);
      sendBase("obtainLeftCusComBSLCalculatesMap", args);
    }

    public Map<Integer,Double> recv_obtainLeftCusComBSLCalculatesMap() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainLeftCusComBSLCalculatesMap_result result = new obtainLeftCusComBSLCalculatesMap_result();
      receiveBase(result, "obtainLeftCusComBSLCalculatesMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainLeftCusComBSLCalculatesMap failed: unknown result");
    }

    public Map<Integer,Double> obtainRightCusComBSLCalculatesMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainRightCusComBSLCalculatesMap(reportId);
      return recv_obtainRightCusComBSLCalculatesMap();
    }

    public void send_obtainRightCusComBSLCalculatesMap(int reportId) throws org.apache.thrift.TException
    {
      obtainRightCusComBSLCalculatesMap_args args = new obtainRightCusComBSLCalculatesMap_args();
      args.setReportId(reportId);
      sendBase("obtainRightCusComBSLCalculatesMap", args);
    }

    public Map<Integer,Double> recv_obtainRightCusComBSLCalculatesMap() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainRightCusComBSLCalculatesMap_result result = new obtainRightCusComBSLCalculatesMap_result();
      receiveBase(result, "obtainRightCusComBSLCalculatesMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainRightCusComBSLCalculatesMap failed: unknown result");
    }

    public List<CusComIncomeReportCalculateDTO> obtainIncomeReportCalculateByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainIncomeReportCalculateByReportId(reportId);
      return recv_obtainIncomeReportCalculateByReportId();
    }

    public void send_obtainIncomeReportCalculateByReportId(int reportId) throws org.apache.thrift.TException
    {
      obtainIncomeReportCalculateByReportId_args args = new obtainIncomeReportCalculateByReportId_args();
      args.setReportId(reportId);
      sendBase("obtainIncomeReportCalculateByReportId", args);
    }

    public List<CusComIncomeReportCalculateDTO> recv_obtainIncomeReportCalculateByReportId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainIncomeReportCalculateByReportId_result result = new obtainIncomeReportCalculateByReportId_result();
      receiveBase(result, "obtainIncomeReportCalculateByReportId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainIncomeReportCalculateByReportId failed: unknown result");
    }

    public Map<Integer,Double> obtainIncomeReportCalculateMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainIncomeReportCalculateMap(reportId);
      return recv_obtainIncomeReportCalculateMap();
    }

    public void send_obtainIncomeReportCalculateMap(int reportId) throws org.apache.thrift.TException
    {
      obtainIncomeReportCalculateMap_args args = new obtainIncomeReportCalculateMap_args();
      args.setReportId(reportId);
      sendBase("obtainIncomeReportCalculateMap", args);
    }

    public Map<Integer,Double> recv_obtainIncomeReportCalculateMap() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainIncomeReportCalculateMap_result result = new obtainIncomeReportCalculateMap_result();
      receiveBase(result, "obtainIncomeReportCalculateMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainIncomeReportCalculateMap failed: unknown result");
    }

    public List<CusComCashFlowReportCalculateDTO> obtainCashFlowCalculateByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainCashFlowCalculateByReportId(reportId);
      return recv_obtainCashFlowCalculateByReportId();
    }

    public void send_obtainCashFlowCalculateByReportId(int reportId) throws org.apache.thrift.TException
    {
      obtainCashFlowCalculateByReportId_args args = new obtainCashFlowCalculateByReportId_args();
      args.setReportId(reportId);
      sendBase("obtainCashFlowCalculateByReportId", args);
    }

    public List<CusComCashFlowReportCalculateDTO> recv_obtainCashFlowCalculateByReportId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainCashFlowCalculateByReportId_result result = new obtainCashFlowCalculateByReportId_result();
      receiveBase(result, "obtainCashFlowCalculateByReportId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainCashFlowCalculateByReportId failed: unknown result");
    }

    public Map<Integer,Double> obtainCashFlowCalculateMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainCashFlowCalculateMap(reportId);
      return recv_obtainCashFlowCalculateMap();
    }

    public void send_obtainCashFlowCalculateMap(int reportId) throws org.apache.thrift.TException
    {
      obtainCashFlowCalculateMap_args args = new obtainCashFlowCalculateMap_args();
      args.setReportId(reportId);
      sendBase("obtainCashFlowCalculateMap", args);
    }

    public Map<Integer,Double> recv_obtainCashFlowCalculateMap() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainCashFlowCalculateMap_result result = new obtainCashFlowCalculateMap_result();
      receiveBase(result, "obtainCashFlowCalculateMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainCashFlowCalculateMap failed: unknown result");
    }

    public List<CusComCashFlowReportCalculateDTO> obtainSupplementCashFlowCalculateByReportId(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainSupplementCashFlowCalculateByReportId(reportId);
      return recv_obtainSupplementCashFlowCalculateByReportId();
    }

    public void send_obtainSupplementCashFlowCalculateByReportId(int reportId) throws org.apache.thrift.TException
    {
      obtainSupplementCashFlowCalculateByReportId_args args = new obtainSupplementCashFlowCalculateByReportId_args();
      args.setReportId(reportId);
      sendBase("obtainSupplementCashFlowCalculateByReportId", args);
    }

    public List<CusComCashFlowReportCalculateDTO> recv_obtainSupplementCashFlowCalculateByReportId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainSupplementCashFlowCalculateByReportId_result result = new obtainSupplementCashFlowCalculateByReportId_result();
      receiveBase(result, "obtainSupplementCashFlowCalculateByReportId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainSupplementCashFlowCalculateByReportId failed: unknown result");
    }

    public Map<Integer,Double> obtainSupplementCashFlowCalculateMap(int reportId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_obtainSupplementCashFlowCalculateMap(reportId);
      return recv_obtainSupplementCashFlowCalculateMap();
    }

    public void send_obtainSupplementCashFlowCalculateMap(int reportId) throws org.apache.thrift.TException
    {
      obtainSupplementCashFlowCalculateMap_args args = new obtainSupplementCashFlowCalculateMap_args();
      args.setReportId(reportId);
      sendBase("obtainSupplementCashFlowCalculateMap", args);
    }

    public Map<Integer,Double> recv_obtainSupplementCashFlowCalculateMap() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      obtainSupplementCashFlowCalculateMap_result result = new obtainSupplementCashFlowCalculateMap_result();
      receiveBase(result, "obtainSupplementCashFlowCalculateMap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "obtainSupplementCashFlowCalculateMap failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void obtainPIDForMaxMonth(int comId, int accountingYear, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainPIDForMaxMonth_call method_call = new obtainPIDForMaxMonth_call(comId, accountingYear, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainPIDForMaxMonth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int comId;
      private int accountingYear;
      public obtainPIDForMaxMonth_call(int comId, int accountingYear, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.comId = comId;
        this.accountingYear = accountingYear;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainPIDForMaxMonth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainPIDForMaxMonth_args args = new obtainPIDForMaxMonth_args();
        args.setComId(comId);
        args.setAccountingYear(accountingYear);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainPIDForMaxMonth();
      }
    }

    public void obtainLeftCusComBSLCalculatesByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainLeftCusComBSLCalculatesByReportId_call method_call = new obtainLeftCusComBSLCalculatesByReportId_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainLeftCusComBSLCalculatesByReportId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainLeftCusComBSLCalculatesByReportId_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainLeftCusComBSLCalculatesByReportId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainLeftCusComBSLCalculatesByReportId_args args = new obtainLeftCusComBSLCalculatesByReportId_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CusComBalanceSheetCalculateDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainLeftCusComBSLCalculatesByReportId();
      }
    }

    public void obtainRightCusComBSLCalculatesByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainRightCusComBSLCalculatesByReportId_call method_call = new obtainRightCusComBSLCalculatesByReportId_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainRightCusComBSLCalculatesByReportId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainRightCusComBSLCalculatesByReportId_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainRightCusComBSLCalculatesByReportId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainRightCusComBSLCalculatesByReportId_args args = new obtainRightCusComBSLCalculatesByReportId_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CusComBalanceSheetCalculateDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainRightCusComBSLCalculatesByReportId();
      }
    }

    public void obtainLeftCusComBSLCalculatesMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainLeftCusComBSLCalculatesMap_call method_call = new obtainLeftCusComBSLCalculatesMap_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainLeftCusComBSLCalculatesMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainLeftCusComBSLCalculatesMap_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainLeftCusComBSLCalculatesMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainLeftCusComBSLCalculatesMap_args args = new obtainLeftCusComBSLCalculatesMap_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainLeftCusComBSLCalculatesMap();
      }
    }

    public void obtainRightCusComBSLCalculatesMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainRightCusComBSLCalculatesMap_call method_call = new obtainRightCusComBSLCalculatesMap_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainRightCusComBSLCalculatesMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainRightCusComBSLCalculatesMap_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainRightCusComBSLCalculatesMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainRightCusComBSLCalculatesMap_args args = new obtainRightCusComBSLCalculatesMap_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainRightCusComBSLCalculatesMap();
      }
    }

    public void obtainIncomeReportCalculateByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainIncomeReportCalculateByReportId_call method_call = new obtainIncomeReportCalculateByReportId_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainIncomeReportCalculateByReportId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainIncomeReportCalculateByReportId_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainIncomeReportCalculateByReportId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainIncomeReportCalculateByReportId_args args = new obtainIncomeReportCalculateByReportId_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CusComIncomeReportCalculateDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainIncomeReportCalculateByReportId();
      }
    }

    public void obtainIncomeReportCalculateMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainIncomeReportCalculateMap_call method_call = new obtainIncomeReportCalculateMap_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainIncomeReportCalculateMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainIncomeReportCalculateMap_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainIncomeReportCalculateMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainIncomeReportCalculateMap_args args = new obtainIncomeReportCalculateMap_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainIncomeReportCalculateMap();
      }
    }

    public void obtainCashFlowCalculateByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainCashFlowCalculateByReportId_call method_call = new obtainCashFlowCalculateByReportId_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainCashFlowCalculateByReportId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainCashFlowCalculateByReportId_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainCashFlowCalculateByReportId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainCashFlowCalculateByReportId_args args = new obtainCashFlowCalculateByReportId_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CusComCashFlowReportCalculateDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainCashFlowCalculateByReportId();
      }
    }

    public void obtainCashFlowCalculateMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainCashFlowCalculateMap_call method_call = new obtainCashFlowCalculateMap_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainCashFlowCalculateMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainCashFlowCalculateMap_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainCashFlowCalculateMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainCashFlowCalculateMap_args args = new obtainCashFlowCalculateMap_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainCashFlowCalculateMap();
      }
    }

    public void obtainSupplementCashFlowCalculateByReportId(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainSupplementCashFlowCalculateByReportId_call method_call = new obtainSupplementCashFlowCalculateByReportId_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainSupplementCashFlowCalculateByReportId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainSupplementCashFlowCalculateByReportId_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainSupplementCashFlowCalculateByReportId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainSupplementCashFlowCalculateByReportId_args args = new obtainSupplementCashFlowCalculateByReportId_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CusComCashFlowReportCalculateDTO> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainSupplementCashFlowCalculateByReportId();
      }
    }

    public void obtainSupplementCashFlowCalculateMap(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      obtainSupplementCashFlowCalculateMap_call method_call = new obtainSupplementCashFlowCalculateMap_call(reportId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class obtainSupplementCashFlowCalculateMap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int reportId;
      public obtainSupplementCashFlowCalculateMap_call(int reportId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reportId = reportId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("obtainSupplementCashFlowCalculateMap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        obtainSupplementCashFlowCalculateMap_args args = new obtainSupplementCashFlowCalculateMap_args();
        args.setReportId(reportId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_obtainSupplementCashFlowCalculateMap();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("obtainPIDForMaxMonth", new obtainPIDForMaxMonth());
      processMap.put("obtainLeftCusComBSLCalculatesByReportId", new obtainLeftCusComBSLCalculatesByReportId());
      processMap.put("obtainRightCusComBSLCalculatesByReportId", new obtainRightCusComBSLCalculatesByReportId());
      processMap.put("obtainLeftCusComBSLCalculatesMap", new obtainLeftCusComBSLCalculatesMap());
      processMap.put("obtainRightCusComBSLCalculatesMap", new obtainRightCusComBSLCalculatesMap());
      processMap.put("obtainIncomeReportCalculateByReportId", new obtainIncomeReportCalculateByReportId());
      processMap.put("obtainIncomeReportCalculateMap", new obtainIncomeReportCalculateMap());
      processMap.put("obtainCashFlowCalculateByReportId", new obtainCashFlowCalculateByReportId());
      processMap.put("obtainCashFlowCalculateMap", new obtainCashFlowCalculateMap());
      processMap.put("obtainSupplementCashFlowCalculateByReportId", new obtainSupplementCashFlowCalculateByReportId());
      processMap.put("obtainSupplementCashFlowCalculateMap", new obtainSupplementCashFlowCalculateMap());
      return processMap;
    }

    public static class obtainPIDForMaxMonth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainPIDForMaxMonth_args> {
      public obtainPIDForMaxMonth() {
        super("obtainPIDForMaxMonth");
      }

      public obtainPIDForMaxMonth_args getEmptyArgsInstance() {
        return new obtainPIDForMaxMonth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainPIDForMaxMonth_result getResult(I iface, obtainPIDForMaxMonth_args args) throws org.apache.thrift.TException {
        obtainPIDForMaxMonth_result result = new obtainPIDForMaxMonth_result();
        try {
          result.success = iface.obtainPIDForMaxMonth(args.comId, args.accountingYear);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainLeftCusComBSLCalculatesByReportId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainLeftCusComBSLCalculatesByReportId_args> {
      public obtainLeftCusComBSLCalculatesByReportId() {
        super("obtainLeftCusComBSLCalculatesByReportId");
      }

      public obtainLeftCusComBSLCalculatesByReportId_args getEmptyArgsInstance() {
        return new obtainLeftCusComBSLCalculatesByReportId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainLeftCusComBSLCalculatesByReportId_result getResult(I iface, obtainLeftCusComBSLCalculatesByReportId_args args) throws org.apache.thrift.TException {
        obtainLeftCusComBSLCalculatesByReportId_result result = new obtainLeftCusComBSLCalculatesByReportId_result();
        try {
          result.success = iface.obtainLeftCusComBSLCalculatesByReportId(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainRightCusComBSLCalculatesByReportId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainRightCusComBSLCalculatesByReportId_args> {
      public obtainRightCusComBSLCalculatesByReportId() {
        super("obtainRightCusComBSLCalculatesByReportId");
      }

      public obtainRightCusComBSLCalculatesByReportId_args getEmptyArgsInstance() {
        return new obtainRightCusComBSLCalculatesByReportId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainRightCusComBSLCalculatesByReportId_result getResult(I iface, obtainRightCusComBSLCalculatesByReportId_args args) throws org.apache.thrift.TException {
        obtainRightCusComBSLCalculatesByReportId_result result = new obtainRightCusComBSLCalculatesByReportId_result();
        try {
          result.success = iface.obtainRightCusComBSLCalculatesByReportId(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainLeftCusComBSLCalculatesMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainLeftCusComBSLCalculatesMap_args> {
      public obtainLeftCusComBSLCalculatesMap() {
        super("obtainLeftCusComBSLCalculatesMap");
      }

      public obtainLeftCusComBSLCalculatesMap_args getEmptyArgsInstance() {
        return new obtainLeftCusComBSLCalculatesMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainLeftCusComBSLCalculatesMap_result getResult(I iface, obtainLeftCusComBSLCalculatesMap_args args) throws org.apache.thrift.TException {
        obtainLeftCusComBSLCalculatesMap_result result = new obtainLeftCusComBSLCalculatesMap_result();
        try {
          result.success = iface.obtainLeftCusComBSLCalculatesMap(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainRightCusComBSLCalculatesMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainRightCusComBSLCalculatesMap_args> {
      public obtainRightCusComBSLCalculatesMap() {
        super("obtainRightCusComBSLCalculatesMap");
      }

      public obtainRightCusComBSLCalculatesMap_args getEmptyArgsInstance() {
        return new obtainRightCusComBSLCalculatesMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainRightCusComBSLCalculatesMap_result getResult(I iface, obtainRightCusComBSLCalculatesMap_args args) throws org.apache.thrift.TException {
        obtainRightCusComBSLCalculatesMap_result result = new obtainRightCusComBSLCalculatesMap_result();
        try {
          result.success = iface.obtainRightCusComBSLCalculatesMap(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainIncomeReportCalculateByReportId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainIncomeReportCalculateByReportId_args> {
      public obtainIncomeReportCalculateByReportId() {
        super("obtainIncomeReportCalculateByReportId");
      }

      public obtainIncomeReportCalculateByReportId_args getEmptyArgsInstance() {
        return new obtainIncomeReportCalculateByReportId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainIncomeReportCalculateByReportId_result getResult(I iface, obtainIncomeReportCalculateByReportId_args args) throws org.apache.thrift.TException {
        obtainIncomeReportCalculateByReportId_result result = new obtainIncomeReportCalculateByReportId_result();
        try {
          result.success = iface.obtainIncomeReportCalculateByReportId(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainIncomeReportCalculateMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainIncomeReportCalculateMap_args> {
      public obtainIncomeReportCalculateMap() {
        super("obtainIncomeReportCalculateMap");
      }

      public obtainIncomeReportCalculateMap_args getEmptyArgsInstance() {
        return new obtainIncomeReportCalculateMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainIncomeReportCalculateMap_result getResult(I iface, obtainIncomeReportCalculateMap_args args) throws org.apache.thrift.TException {
        obtainIncomeReportCalculateMap_result result = new obtainIncomeReportCalculateMap_result();
        try {
          result.success = iface.obtainIncomeReportCalculateMap(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainCashFlowCalculateByReportId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainCashFlowCalculateByReportId_args> {
      public obtainCashFlowCalculateByReportId() {
        super("obtainCashFlowCalculateByReportId");
      }

      public obtainCashFlowCalculateByReportId_args getEmptyArgsInstance() {
        return new obtainCashFlowCalculateByReportId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainCashFlowCalculateByReportId_result getResult(I iface, obtainCashFlowCalculateByReportId_args args) throws org.apache.thrift.TException {
        obtainCashFlowCalculateByReportId_result result = new obtainCashFlowCalculateByReportId_result();
        try {
          result.success = iface.obtainCashFlowCalculateByReportId(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainCashFlowCalculateMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainCashFlowCalculateMap_args> {
      public obtainCashFlowCalculateMap() {
        super("obtainCashFlowCalculateMap");
      }

      public obtainCashFlowCalculateMap_args getEmptyArgsInstance() {
        return new obtainCashFlowCalculateMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainCashFlowCalculateMap_result getResult(I iface, obtainCashFlowCalculateMap_args args) throws org.apache.thrift.TException {
        obtainCashFlowCalculateMap_result result = new obtainCashFlowCalculateMap_result();
        try {
          result.success = iface.obtainCashFlowCalculateMap(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainSupplementCashFlowCalculateByReportId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainSupplementCashFlowCalculateByReportId_args> {
      public obtainSupplementCashFlowCalculateByReportId() {
        super("obtainSupplementCashFlowCalculateByReportId");
      }

      public obtainSupplementCashFlowCalculateByReportId_args getEmptyArgsInstance() {
        return new obtainSupplementCashFlowCalculateByReportId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainSupplementCashFlowCalculateByReportId_result getResult(I iface, obtainSupplementCashFlowCalculateByReportId_args args) throws org.apache.thrift.TException {
        obtainSupplementCashFlowCalculateByReportId_result result = new obtainSupplementCashFlowCalculateByReportId_result();
        try {
          result.success = iface.obtainSupplementCashFlowCalculateByReportId(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class obtainSupplementCashFlowCalculateMap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, obtainSupplementCashFlowCalculateMap_args> {
      public obtainSupplementCashFlowCalculateMap() {
        super("obtainSupplementCashFlowCalculateMap");
      }

      public obtainSupplementCashFlowCalculateMap_args getEmptyArgsInstance() {
        return new obtainSupplementCashFlowCalculateMap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public obtainSupplementCashFlowCalculateMap_result getResult(I iface, obtainSupplementCashFlowCalculateMap_args args) throws org.apache.thrift.TException {
        obtainSupplementCashFlowCalculateMap_result result = new obtainSupplementCashFlowCalculateMap_result();
        try {
          result.success = iface.obtainSupplementCashFlowCalculateMap(args.reportId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("obtainPIDForMaxMonth", new obtainPIDForMaxMonth());
      processMap.put("obtainLeftCusComBSLCalculatesByReportId", new obtainLeftCusComBSLCalculatesByReportId());
      processMap.put("obtainRightCusComBSLCalculatesByReportId", new obtainRightCusComBSLCalculatesByReportId());
      processMap.put("obtainLeftCusComBSLCalculatesMap", new obtainLeftCusComBSLCalculatesMap());
      processMap.put("obtainRightCusComBSLCalculatesMap", new obtainRightCusComBSLCalculatesMap());
      processMap.put("obtainIncomeReportCalculateByReportId", new obtainIncomeReportCalculateByReportId());
      processMap.put("obtainIncomeReportCalculateMap", new obtainIncomeReportCalculateMap());
      processMap.put("obtainCashFlowCalculateByReportId", new obtainCashFlowCalculateByReportId());
      processMap.put("obtainCashFlowCalculateMap", new obtainCashFlowCalculateMap());
      processMap.put("obtainSupplementCashFlowCalculateByReportId", new obtainSupplementCashFlowCalculateByReportId());
      processMap.put("obtainSupplementCashFlowCalculateMap", new obtainSupplementCashFlowCalculateMap());
      return processMap;
    }

    public static class obtainPIDForMaxMonth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainPIDForMaxMonth_args, String> {
      public obtainPIDForMaxMonth() {
        super("obtainPIDForMaxMonth");
      }

      public obtainPIDForMaxMonth_args getEmptyArgsInstance() {
        return new obtainPIDForMaxMonth_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            obtainPIDForMaxMonth_result result = new obtainPIDForMaxMonth_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainPIDForMaxMonth_result result = new obtainPIDForMaxMonth_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainPIDForMaxMonth_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.obtainPIDForMaxMonth(args.comId, args.accountingYear,resultHandler);
      }
    }

    public static class obtainLeftCusComBSLCalculatesByReportId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainLeftCusComBSLCalculatesByReportId_args, List<CusComBalanceSheetCalculateDTO>> {
      public obtainLeftCusComBSLCalculatesByReportId() {
        super("obtainLeftCusComBSLCalculatesByReportId");
      }

      public obtainLeftCusComBSLCalculatesByReportId_args getEmptyArgsInstance() {
        return new obtainLeftCusComBSLCalculatesByReportId_args();
      }

      public AsyncMethodCallback<List<CusComBalanceSheetCalculateDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CusComBalanceSheetCalculateDTO>>() { 
          public void onComplete(List<CusComBalanceSheetCalculateDTO> o) {
            obtainLeftCusComBSLCalculatesByReportId_result result = new obtainLeftCusComBSLCalculatesByReportId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainLeftCusComBSLCalculatesByReportId_result result = new obtainLeftCusComBSLCalculatesByReportId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainLeftCusComBSLCalculatesByReportId_args args, org.apache.thrift.async.AsyncMethodCallback<List<CusComBalanceSheetCalculateDTO>> resultHandler) throws TException {
        iface.obtainLeftCusComBSLCalculatesByReportId(args.reportId,resultHandler);
      }
    }

    public static class obtainRightCusComBSLCalculatesByReportId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainRightCusComBSLCalculatesByReportId_args, List<CusComBalanceSheetCalculateDTO>> {
      public obtainRightCusComBSLCalculatesByReportId() {
        super("obtainRightCusComBSLCalculatesByReportId");
      }

      public obtainRightCusComBSLCalculatesByReportId_args getEmptyArgsInstance() {
        return new obtainRightCusComBSLCalculatesByReportId_args();
      }

      public AsyncMethodCallback<List<CusComBalanceSheetCalculateDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CusComBalanceSheetCalculateDTO>>() { 
          public void onComplete(List<CusComBalanceSheetCalculateDTO> o) {
            obtainRightCusComBSLCalculatesByReportId_result result = new obtainRightCusComBSLCalculatesByReportId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainRightCusComBSLCalculatesByReportId_result result = new obtainRightCusComBSLCalculatesByReportId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainRightCusComBSLCalculatesByReportId_args args, org.apache.thrift.async.AsyncMethodCallback<List<CusComBalanceSheetCalculateDTO>> resultHandler) throws TException {
        iface.obtainRightCusComBSLCalculatesByReportId(args.reportId,resultHandler);
      }
    }

    public static class obtainLeftCusComBSLCalculatesMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainLeftCusComBSLCalculatesMap_args, Map<Integer,Double>> {
      public obtainLeftCusComBSLCalculatesMap() {
        super("obtainLeftCusComBSLCalculatesMap");
      }

      public obtainLeftCusComBSLCalculatesMap_args getEmptyArgsInstance() {
        return new obtainLeftCusComBSLCalculatesMap_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            obtainLeftCusComBSLCalculatesMap_result result = new obtainLeftCusComBSLCalculatesMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainLeftCusComBSLCalculatesMap_result result = new obtainLeftCusComBSLCalculatesMap_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainLeftCusComBSLCalculatesMap_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.obtainLeftCusComBSLCalculatesMap(args.reportId,resultHandler);
      }
    }

    public static class obtainRightCusComBSLCalculatesMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainRightCusComBSLCalculatesMap_args, Map<Integer,Double>> {
      public obtainRightCusComBSLCalculatesMap() {
        super("obtainRightCusComBSLCalculatesMap");
      }

      public obtainRightCusComBSLCalculatesMap_args getEmptyArgsInstance() {
        return new obtainRightCusComBSLCalculatesMap_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            obtainRightCusComBSLCalculatesMap_result result = new obtainRightCusComBSLCalculatesMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainRightCusComBSLCalculatesMap_result result = new obtainRightCusComBSLCalculatesMap_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainRightCusComBSLCalculatesMap_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.obtainRightCusComBSLCalculatesMap(args.reportId,resultHandler);
      }
    }

    public static class obtainIncomeReportCalculateByReportId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainIncomeReportCalculateByReportId_args, List<CusComIncomeReportCalculateDTO>> {
      public obtainIncomeReportCalculateByReportId() {
        super("obtainIncomeReportCalculateByReportId");
      }

      public obtainIncomeReportCalculateByReportId_args getEmptyArgsInstance() {
        return new obtainIncomeReportCalculateByReportId_args();
      }

      public AsyncMethodCallback<List<CusComIncomeReportCalculateDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CusComIncomeReportCalculateDTO>>() { 
          public void onComplete(List<CusComIncomeReportCalculateDTO> o) {
            obtainIncomeReportCalculateByReportId_result result = new obtainIncomeReportCalculateByReportId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainIncomeReportCalculateByReportId_result result = new obtainIncomeReportCalculateByReportId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainIncomeReportCalculateByReportId_args args, org.apache.thrift.async.AsyncMethodCallback<List<CusComIncomeReportCalculateDTO>> resultHandler) throws TException {
        iface.obtainIncomeReportCalculateByReportId(args.reportId,resultHandler);
      }
    }

    public static class obtainIncomeReportCalculateMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainIncomeReportCalculateMap_args, Map<Integer,Double>> {
      public obtainIncomeReportCalculateMap() {
        super("obtainIncomeReportCalculateMap");
      }

      public obtainIncomeReportCalculateMap_args getEmptyArgsInstance() {
        return new obtainIncomeReportCalculateMap_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            obtainIncomeReportCalculateMap_result result = new obtainIncomeReportCalculateMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainIncomeReportCalculateMap_result result = new obtainIncomeReportCalculateMap_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainIncomeReportCalculateMap_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.obtainIncomeReportCalculateMap(args.reportId,resultHandler);
      }
    }

    public static class obtainCashFlowCalculateByReportId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainCashFlowCalculateByReportId_args, List<CusComCashFlowReportCalculateDTO>> {
      public obtainCashFlowCalculateByReportId() {
        super("obtainCashFlowCalculateByReportId");
      }

      public obtainCashFlowCalculateByReportId_args getEmptyArgsInstance() {
        return new obtainCashFlowCalculateByReportId_args();
      }

      public AsyncMethodCallback<List<CusComCashFlowReportCalculateDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CusComCashFlowReportCalculateDTO>>() { 
          public void onComplete(List<CusComCashFlowReportCalculateDTO> o) {
            obtainCashFlowCalculateByReportId_result result = new obtainCashFlowCalculateByReportId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainCashFlowCalculateByReportId_result result = new obtainCashFlowCalculateByReportId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainCashFlowCalculateByReportId_args args, org.apache.thrift.async.AsyncMethodCallback<List<CusComCashFlowReportCalculateDTO>> resultHandler) throws TException {
        iface.obtainCashFlowCalculateByReportId(args.reportId,resultHandler);
      }
    }

    public static class obtainCashFlowCalculateMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainCashFlowCalculateMap_args, Map<Integer,Double>> {
      public obtainCashFlowCalculateMap() {
        super("obtainCashFlowCalculateMap");
      }

      public obtainCashFlowCalculateMap_args getEmptyArgsInstance() {
        return new obtainCashFlowCalculateMap_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            obtainCashFlowCalculateMap_result result = new obtainCashFlowCalculateMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainCashFlowCalculateMap_result result = new obtainCashFlowCalculateMap_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainCashFlowCalculateMap_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.obtainCashFlowCalculateMap(args.reportId,resultHandler);
      }
    }

    public static class obtainSupplementCashFlowCalculateByReportId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainSupplementCashFlowCalculateByReportId_args, List<CusComCashFlowReportCalculateDTO>> {
      public obtainSupplementCashFlowCalculateByReportId() {
        super("obtainSupplementCashFlowCalculateByReportId");
      }

      public obtainSupplementCashFlowCalculateByReportId_args getEmptyArgsInstance() {
        return new obtainSupplementCashFlowCalculateByReportId_args();
      }

      public AsyncMethodCallback<List<CusComCashFlowReportCalculateDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CusComCashFlowReportCalculateDTO>>() { 
          public void onComplete(List<CusComCashFlowReportCalculateDTO> o) {
            obtainSupplementCashFlowCalculateByReportId_result result = new obtainSupplementCashFlowCalculateByReportId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainSupplementCashFlowCalculateByReportId_result result = new obtainSupplementCashFlowCalculateByReportId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainSupplementCashFlowCalculateByReportId_args args, org.apache.thrift.async.AsyncMethodCallback<List<CusComCashFlowReportCalculateDTO>> resultHandler) throws TException {
        iface.obtainSupplementCashFlowCalculateByReportId(args.reportId,resultHandler);
      }
    }

    public static class obtainSupplementCashFlowCalculateMap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, obtainSupplementCashFlowCalculateMap_args, Map<Integer,Double>> {
      public obtainSupplementCashFlowCalculateMap() {
        super("obtainSupplementCashFlowCalculateMap");
      }

      public obtainSupplementCashFlowCalculateMap_args getEmptyArgsInstance() {
        return new obtainSupplementCashFlowCalculateMap_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            obtainSupplementCashFlowCalculateMap_result result = new obtainSupplementCashFlowCalculateMap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            obtainSupplementCashFlowCalculateMap_result result = new obtainSupplementCashFlowCalculateMap_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, obtainSupplementCashFlowCalculateMap_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.obtainSupplementCashFlowCalculateMap(args.reportId,resultHandler);
      }
    }

  }

  public static class obtainPIDForMaxMonth_args implements org.apache.thrift.TBase<obtainPIDForMaxMonth_args, obtainPIDForMaxMonth_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainPIDForMaxMonth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainPIDForMaxMonth_args");

    private static final org.apache.thrift.protocol.TField COM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACCOUNTING_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("accountingYear", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainPIDForMaxMonth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainPIDForMaxMonth_argsTupleSchemeFactory());
    }

    public int comId; // required
    public int accountingYear; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COM_ID((short)1, "comId"),
      ACCOUNTING_YEAR((short)2, "accountingYear");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COM_ID
            return COM_ID;
          case 2: // ACCOUNTING_YEAR
            return ACCOUNTING_YEAR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COMID_ISSET_ID = 0;
    private static final int __ACCOUNTINGYEAR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COM_ID, new org.apache.thrift.meta_data.FieldMetaData("comId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCOUNTING_YEAR, new org.apache.thrift.meta_data.FieldMetaData("accountingYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainPIDForMaxMonth_args.class, metaDataMap);
    }

    public obtainPIDForMaxMonth_args() {
    }

    public obtainPIDForMaxMonth_args(
      int comId,
      int accountingYear)
    {
      this();
      this.comId = comId;
      setComIdIsSet(true);
      this.accountingYear = accountingYear;
      setAccountingYearIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainPIDForMaxMonth_args(obtainPIDForMaxMonth_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.comId = other.comId;
      this.accountingYear = other.accountingYear;
    }

    public obtainPIDForMaxMonth_args deepCopy() {
      return new obtainPIDForMaxMonth_args(this);
    }

    @Override
    public void clear() {
      setComIdIsSet(false);
      this.comId = 0;
      setAccountingYearIsSet(false);
      this.accountingYear = 0;
    }

    public int getComId() {
      return this.comId;
    }

    public obtainPIDForMaxMonth_args setComId(int comId) {
      this.comId = comId;
      setComIdIsSet(true);
      return this;
    }

    public void unsetComId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMID_ISSET_ID);
    }

    /** Returns true if field comId is set (has been assigned a value) and false otherwise */
    public boolean isSetComId() {
      return EncodingUtils.testBit(__isset_bitfield, __COMID_ISSET_ID);
    }

    public void setComIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMID_ISSET_ID, value);
    }

    public int getAccountingYear() {
      return this.accountingYear;
    }

    public obtainPIDForMaxMonth_args setAccountingYear(int accountingYear) {
      this.accountingYear = accountingYear;
      setAccountingYearIsSet(true);
      return this;
    }

    public void unsetAccountingYear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTINGYEAR_ISSET_ID);
    }

    /** Returns true if field accountingYear is set (has been assigned a value) and false otherwise */
    public boolean isSetAccountingYear() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTINGYEAR_ISSET_ID);
    }

    public void setAccountingYearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTINGYEAR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COM_ID:
        if (value == null) {
          unsetComId();
        } else {
          setComId((Integer)value);
        }
        break;

      case ACCOUNTING_YEAR:
        if (value == null) {
          unsetAccountingYear();
        } else {
          setAccountingYear((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COM_ID:
        return Integer.valueOf(getComId());

      case ACCOUNTING_YEAR:
        return Integer.valueOf(getAccountingYear());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COM_ID:
        return isSetComId();
      case ACCOUNTING_YEAR:
        return isSetAccountingYear();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainPIDForMaxMonth_args)
        return this.equals((obtainPIDForMaxMonth_args)that);
      return false;
    }

    public boolean equals(obtainPIDForMaxMonth_args that) {
      if (that == null)
        return false;

      boolean this_present_comId = true;
      boolean that_present_comId = true;
      if (this_present_comId || that_present_comId) {
        if (!(this_present_comId && that_present_comId))
          return false;
        if (this.comId != that.comId)
          return false;
      }

      boolean this_present_accountingYear = true;
      boolean that_present_accountingYear = true;
      if (this_present_accountingYear || that_present_accountingYear) {
        if (!(this_present_accountingYear && that_present_accountingYear))
          return false;
        if (this.accountingYear != that.accountingYear)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_comId = true;
      list.add(present_comId);
      if (present_comId)
        list.add(comId);

      boolean present_accountingYear = true;
      list.add(present_accountingYear);
      if (present_accountingYear)
        list.add(accountingYear);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainPIDForMaxMonth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetComId()).compareTo(other.isSetComId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetComId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comId, other.comId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAccountingYear()).compareTo(other.isSetAccountingYear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccountingYear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountingYear, other.accountingYear);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainPIDForMaxMonth_args(");
      boolean first = true;

      sb.append("comId:");
      sb.append(this.comId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("accountingYear:");
      sb.append(this.accountingYear);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainPIDForMaxMonth_argsStandardSchemeFactory implements SchemeFactory {
      public obtainPIDForMaxMonth_argsStandardScheme getScheme() {
        return new obtainPIDForMaxMonth_argsStandardScheme();
      }
    }

    private static class obtainPIDForMaxMonth_argsStandardScheme extends StandardScheme<obtainPIDForMaxMonth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainPIDForMaxMonth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.comId = iprot.readI32();
                struct.setComIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACCOUNTING_YEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.accountingYear = iprot.readI32();
                struct.setAccountingYearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainPIDForMaxMonth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COM_ID_FIELD_DESC);
        oprot.writeI32(struct.comId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ACCOUNTING_YEAR_FIELD_DESC);
        oprot.writeI32(struct.accountingYear);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainPIDForMaxMonth_argsTupleSchemeFactory implements SchemeFactory {
      public obtainPIDForMaxMonth_argsTupleScheme getScheme() {
        return new obtainPIDForMaxMonth_argsTupleScheme();
      }
    }

    private static class obtainPIDForMaxMonth_argsTupleScheme extends TupleScheme<obtainPIDForMaxMonth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainPIDForMaxMonth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetComId()) {
          optionals.set(0);
        }
        if (struct.isSetAccountingYear()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetComId()) {
          oprot.writeI32(struct.comId);
        }
        if (struct.isSetAccountingYear()) {
          oprot.writeI32(struct.accountingYear);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainPIDForMaxMonth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.comId = iprot.readI32();
          struct.setComIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.accountingYear = iprot.readI32();
          struct.setAccountingYearIsSet(true);
        }
      }
    }

  }

  public static class obtainPIDForMaxMonth_result implements org.apache.thrift.TBase<obtainPIDForMaxMonth_result, obtainPIDForMaxMonth_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainPIDForMaxMonth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainPIDForMaxMonth_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainPIDForMaxMonth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainPIDForMaxMonth_resultTupleSchemeFactory());
    }

    public String success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainPIDForMaxMonth_result.class, metaDataMap);
    }

    public obtainPIDForMaxMonth_result() {
    }

    public obtainPIDForMaxMonth_result(
      String success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainPIDForMaxMonth_result(obtainPIDForMaxMonth_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainPIDForMaxMonth_result deepCopy() {
      return new obtainPIDForMaxMonth_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public obtainPIDForMaxMonth_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainPIDForMaxMonth_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainPIDForMaxMonth_result)
        return this.equals((obtainPIDForMaxMonth_result)that);
      return false;
    }

    public boolean equals(obtainPIDForMaxMonth_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainPIDForMaxMonth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainPIDForMaxMonth_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainPIDForMaxMonth_resultStandardSchemeFactory implements SchemeFactory {
      public obtainPIDForMaxMonth_resultStandardScheme getScheme() {
        return new obtainPIDForMaxMonth_resultStandardScheme();
      }
    }

    private static class obtainPIDForMaxMonth_resultStandardScheme extends StandardScheme<obtainPIDForMaxMonth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainPIDForMaxMonth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainPIDForMaxMonth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainPIDForMaxMonth_resultTupleSchemeFactory implements SchemeFactory {
      public obtainPIDForMaxMonth_resultTupleScheme getScheme() {
        return new obtainPIDForMaxMonth_resultTupleScheme();
      }
    }

    private static class obtainPIDForMaxMonth_resultTupleScheme extends TupleScheme<obtainPIDForMaxMonth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainPIDForMaxMonth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainPIDForMaxMonth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainLeftCusComBSLCalculatesByReportId_args implements org.apache.thrift.TBase<obtainLeftCusComBSLCalculatesByReportId_args, obtainLeftCusComBSLCalculatesByReportId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainLeftCusComBSLCalculatesByReportId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainLeftCusComBSLCalculatesByReportId_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainLeftCusComBSLCalculatesByReportId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainLeftCusComBSLCalculatesByReportId_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainLeftCusComBSLCalculatesByReportId_args.class, metaDataMap);
    }

    public obtainLeftCusComBSLCalculatesByReportId_args() {
    }

    public obtainLeftCusComBSLCalculatesByReportId_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainLeftCusComBSLCalculatesByReportId_args(obtainLeftCusComBSLCalculatesByReportId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainLeftCusComBSLCalculatesByReportId_args deepCopy() {
      return new obtainLeftCusComBSLCalculatesByReportId_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainLeftCusComBSLCalculatesByReportId_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainLeftCusComBSLCalculatesByReportId_args)
        return this.equals((obtainLeftCusComBSLCalculatesByReportId_args)that);
      return false;
    }

    public boolean equals(obtainLeftCusComBSLCalculatesByReportId_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainLeftCusComBSLCalculatesByReportId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainLeftCusComBSLCalculatesByReportId_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainLeftCusComBSLCalculatesByReportId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesByReportId_argsStandardScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesByReportId_argsStandardScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesByReportId_argsStandardScheme extends StandardScheme<obtainLeftCusComBSLCalculatesByReportId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainLeftCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainLeftCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainLeftCusComBSLCalculatesByReportId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesByReportId_argsTupleScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesByReportId_argsTupleScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesByReportId_argsTupleScheme extends TupleScheme<obtainLeftCusComBSLCalculatesByReportId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainLeftCusComBSLCalculatesByReportId_result implements org.apache.thrift.TBase<obtainLeftCusComBSLCalculatesByReportId_result, obtainLeftCusComBSLCalculatesByReportId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainLeftCusComBSLCalculatesByReportId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainLeftCusComBSLCalculatesByReportId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainLeftCusComBSLCalculatesByReportId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainLeftCusComBSLCalculatesByReportId_resultTupleSchemeFactory());
    }

    public List<CusComBalanceSheetCalculateDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBalanceSheetCalculateDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainLeftCusComBSLCalculatesByReportId_result.class, metaDataMap);
    }

    public obtainLeftCusComBSLCalculatesByReportId_result() {
    }

    public obtainLeftCusComBSLCalculatesByReportId_result(
      List<CusComBalanceSheetCalculateDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainLeftCusComBSLCalculatesByReportId_result(obtainLeftCusComBSLCalculatesByReportId_result other) {
      if (other.isSetSuccess()) {
        List<CusComBalanceSheetCalculateDTO> __this__success = new ArrayList<CusComBalanceSheetCalculateDTO>(other.success.size());
        for (CusComBalanceSheetCalculateDTO other_element : other.success) {
          __this__success.add(new CusComBalanceSheetCalculateDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainLeftCusComBSLCalculatesByReportId_result deepCopy() {
      return new obtainLeftCusComBSLCalculatesByReportId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CusComBalanceSheetCalculateDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CusComBalanceSheetCalculateDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CusComBalanceSheetCalculateDTO>();
      }
      this.success.add(elem);
    }

    public List<CusComBalanceSheetCalculateDTO> getSuccess() {
      return this.success;
    }

    public obtainLeftCusComBSLCalculatesByReportId_result setSuccess(List<CusComBalanceSheetCalculateDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainLeftCusComBSLCalculatesByReportId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CusComBalanceSheetCalculateDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainLeftCusComBSLCalculatesByReportId_result)
        return this.equals((obtainLeftCusComBSLCalculatesByReportId_result)that);
      return false;
    }

    public boolean equals(obtainLeftCusComBSLCalculatesByReportId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainLeftCusComBSLCalculatesByReportId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainLeftCusComBSLCalculatesByReportId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainLeftCusComBSLCalculatesByReportId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesByReportId_resultStandardScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesByReportId_resultStandardScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesByReportId_resultStandardScheme extends StandardScheme<obtainLeftCusComBSLCalculatesByReportId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainLeftCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list822 = iprot.readListBegin();
                  struct.success = new ArrayList<CusComBalanceSheetCalculateDTO>(_list822.size);
                  CusComBalanceSheetCalculateDTO _elem823;
                  for (int _i824 = 0; _i824 < _list822.size; ++_i824)
                  {
                    _elem823 = new CusComBalanceSheetCalculateDTO();
                    _elem823.read(iprot);
                    struct.success.add(_elem823);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainLeftCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CusComBalanceSheetCalculateDTO _iter825 : struct.success)
            {
              _iter825.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainLeftCusComBSLCalculatesByReportId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesByReportId_resultTupleScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesByReportId_resultTupleScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesByReportId_resultTupleScheme extends TupleScheme<obtainLeftCusComBSLCalculatesByReportId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CusComBalanceSheetCalculateDTO _iter826 : struct.success)
            {
              _iter826.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list827 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CusComBalanceSheetCalculateDTO>(_list827.size);
            CusComBalanceSheetCalculateDTO _elem828;
            for (int _i829 = 0; _i829 < _list827.size; ++_i829)
            {
              _elem828 = new CusComBalanceSheetCalculateDTO();
              _elem828.read(iprot);
              struct.success.add(_elem828);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainRightCusComBSLCalculatesByReportId_args implements org.apache.thrift.TBase<obtainRightCusComBSLCalculatesByReportId_args, obtainRightCusComBSLCalculatesByReportId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainRightCusComBSLCalculatesByReportId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainRightCusComBSLCalculatesByReportId_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainRightCusComBSLCalculatesByReportId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainRightCusComBSLCalculatesByReportId_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainRightCusComBSLCalculatesByReportId_args.class, metaDataMap);
    }

    public obtainRightCusComBSLCalculatesByReportId_args() {
    }

    public obtainRightCusComBSLCalculatesByReportId_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainRightCusComBSLCalculatesByReportId_args(obtainRightCusComBSLCalculatesByReportId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainRightCusComBSLCalculatesByReportId_args deepCopy() {
      return new obtainRightCusComBSLCalculatesByReportId_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainRightCusComBSLCalculatesByReportId_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainRightCusComBSLCalculatesByReportId_args)
        return this.equals((obtainRightCusComBSLCalculatesByReportId_args)that);
      return false;
    }

    public boolean equals(obtainRightCusComBSLCalculatesByReportId_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainRightCusComBSLCalculatesByReportId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainRightCusComBSLCalculatesByReportId_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainRightCusComBSLCalculatesByReportId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesByReportId_argsStandardScheme getScheme() {
        return new obtainRightCusComBSLCalculatesByReportId_argsStandardScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesByReportId_argsStandardScheme extends StandardScheme<obtainRightCusComBSLCalculatesByReportId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainRightCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainRightCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainRightCusComBSLCalculatesByReportId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesByReportId_argsTupleScheme getScheme() {
        return new obtainRightCusComBSLCalculatesByReportId_argsTupleScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesByReportId_argsTupleScheme extends TupleScheme<obtainRightCusComBSLCalculatesByReportId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainRightCusComBSLCalculatesByReportId_result implements org.apache.thrift.TBase<obtainRightCusComBSLCalculatesByReportId_result, obtainRightCusComBSLCalculatesByReportId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainRightCusComBSLCalculatesByReportId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainRightCusComBSLCalculatesByReportId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainRightCusComBSLCalculatesByReportId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainRightCusComBSLCalculatesByReportId_resultTupleSchemeFactory());
    }

    public List<CusComBalanceSheetCalculateDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBalanceSheetCalculateDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainRightCusComBSLCalculatesByReportId_result.class, metaDataMap);
    }

    public obtainRightCusComBSLCalculatesByReportId_result() {
    }

    public obtainRightCusComBSLCalculatesByReportId_result(
      List<CusComBalanceSheetCalculateDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainRightCusComBSLCalculatesByReportId_result(obtainRightCusComBSLCalculatesByReportId_result other) {
      if (other.isSetSuccess()) {
        List<CusComBalanceSheetCalculateDTO> __this__success = new ArrayList<CusComBalanceSheetCalculateDTO>(other.success.size());
        for (CusComBalanceSheetCalculateDTO other_element : other.success) {
          __this__success.add(new CusComBalanceSheetCalculateDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainRightCusComBSLCalculatesByReportId_result deepCopy() {
      return new obtainRightCusComBSLCalculatesByReportId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CusComBalanceSheetCalculateDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CusComBalanceSheetCalculateDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CusComBalanceSheetCalculateDTO>();
      }
      this.success.add(elem);
    }

    public List<CusComBalanceSheetCalculateDTO> getSuccess() {
      return this.success;
    }

    public obtainRightCusComBSLCalculatesByReportId_result setSuccess(List<CusComBalanceSheetCalculateDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainRightCusComBSLCalculatesByReportId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CusComBalanceSheetCalculateDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainRightCusComBSLCalculatesByReportId_result)
        return this.equals((obtainRightCusComBSLCalculatesByReportId_result)that);
      return false;
    }

    public boolean equals(obtainRightCusComBSLCalculatesByReportId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainRightCusComBSLCalculatesByReportId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainRightCusComBSLCalculatesByReportId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainRightCusComBSLCalculatesByReportId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesByReportId_resultStandardScheme getScheme() {
        return new obtainRightCusComBSLCalculatesByReportId_resultStandardScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesByReportId_resultStandardScheme extends StandardScheme<obtainRightCusComBSLCalculatesByReportId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainRightCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list830 = iprot.readListBegin();
                  struct.success = new ArrayList<CusComBalanceSheetCalculateDTO>(_list830.size);
                  CusComBalanceSheetCalculateDTO _elem831;
                  for (int _i832 = 0; _i832 < _list830.size; ++_i832)
                  {
                    _elem831 = new CusComBalanceSheetCalculateDTO();
                    _elem831.read(iprot);
                    struct.success.add(_elem831);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainRightCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CusComBalanceSheetCalculateDTO _iter833 : struct.success)
            {
              _iter833.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainRightCusComBSLCalculatesByReportId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesByReportId_resultTupleScheme getScheme() {
        return new obtainRightCusComBSLCalculatesByReportId_resultTupleScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesByReportId_resultTupleScheme extends TupleScheme<obtainRightCusComBSLCalculatesByReportId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CusComBalanceSheetCalculateDTO _iter834 : struct.success)
            {
              _iter834.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list835 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CusComBalanceSheetCalculateDTO>(_list835.size);
            CusComBalanceSheetCalculateDTO _elem836;
            for (int _i837 = 0; _i837 < _list835.size; ++_i837)
            {
              _elem836 = new CusComBalanceSheetCalculateDTO();
              _elem836.read(iprot);
              struct.success.add(_elem836);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainLeftCusComBSLCalculatesMap_args implements org.apache.thrift.TBase<obtainLeftCusComBSLCalculatesMap_args, obtainLeftCusComBSLCalculatesMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainLeftCusComBSLCalculatesMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainLeftCusComBSLCalculatesMap_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainLeftCusComBSLCalculatesMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainLeftCusComBSLCalculatesMap_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainLeftCusComBSLCalculatesMap_args.class, metaDataMap);
    }

    public obtainLeftCusComBSLCalculatesMap_args() {
    }

    public obtainLeftCusComBSLCalculatesMap_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainLeftCusComBSLCalculatesMap_args(obtainLeftCusComBSLCalculatesMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainLeftCusComBSLCalculatesMap_args deepCopy() {
      return new obtainLeftCusComBSLCalculatesMap_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainLeftCusComBSLCalculatesMap_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainLeftCusComBSLCalculatesMap_args)
        return this.equals((obtainLeftCusComBSLCalculatesMap_args)that);
      return false;
    }

    public boolean equals(obtainLeftCusComBSLCalculatesMap_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainLeftCusComBSLCalculatesMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainLeftCusComBSLCalculatesMap_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainLeftCusComBSLCalculatesMap_argsStandardSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesMap_argsStandardScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesMap_argsStandardScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesMap_argsStandardScheme extends StandardScheme<obtainLeftCusComBSLCalculatesMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainLeftCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainLeftCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainLeftCusComBSLCalculatesMap_argsTupleSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesMap_argsTupleScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesMap_argsTupleScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesMap_argsTupleScheme extends TupleScheme<obtainLeftCusComBSLCalculatesMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainLeftCusComBSLCalculatesMap_result implements org.apache.thrift.TBase<obtainLeftCusComBSLCalculatesMap_result, obtainLeftCusComBSLCalculatesMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainLeftCusComBSLCalculatesMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainLeftCusComBSLCalculatesMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainLeftCusComBSLCalculatesMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainLeftCusComBSLCalculatesMap_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainLeftCusComBSLCalculatesMap_result.class, metaDataMap);
    }

    public obtainLeftCusComBSLCalculatesMap_result() {
    }

    public obtainLeftCusComBSLCalculatesMap_result(
      Map<Integer,Double> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainLeftCusComBSLCalculatesMap_result(obtainLeftCusComBSLCalculatesMap_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainLeftCusComBSLCalculatesMap_result deepCopy() {
      return new obtainLeftCusComBSLCalculatesMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public obtainLeftCusComBSLCalculatesMap_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainLeftCusComBSLCalculatesMap_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainLeftCusComBSLCalculatesMap_result)
        return this.equals((obtainLeftCusComBSLCalculatesMap_result)that);
      return false;
    }

    public boolean equals(obtainLeftCusComBSLCalculatesMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainLeftCusComBSLCalculatesMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainLeftCusComBSLCalculatesMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainLeftCusComBSLCalculatesMap_resultStandardSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesMap_resultStandardScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesMap_resultStandardScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesMap_resultStandardScheme extends StandardScheme<obtainLeftCusComBSLCalculatesMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainLeftCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map838 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map838.size);
                  int _key839;
                  double _val840;
                  for (int _i841 = 0; _i841 < _map838.size; ++_i841)
                  {
                    _key839 = iprot.readI32();
                    _val840 = iprot.readDouble();
                    struct.success.put(_key839, _val840);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainLeftCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter842 : struct.success.entrySet())
            {
              oprot.writeI32(_iter842.getKey());
              oprot.writeDouble(_iter842.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainLeftCusComBSLCalculatesMap_resultTupleSchemeFactory implements SchemeFactory {
      public obtainLeftCusComBSLCalculatesMap_resultTupleScheme getScheme() {
        return new obtainLeftCusComBSLCalculatesMap_resultTupleScheme();
      }
    }

    private static class obtainLeftCusComBSLCalculatesMap_resultTupleScheme extends TupleScheme<obtainLeftCusComBSLCalculatesMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter843 : struct.success.entrySet())
            {
              oprot.writeI32(_iter843.getKey());
              oprot.writeDouble(_iter843.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainLeftCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map844 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map844.size);
            int _key845;
            double _val846;
            for (int _i847 = 0; _i847 < _map844.size; ++_i847)
            {
              _key845 = iprot.readI32();
              _val846 = iprot.readDouble();
              struct.success.put(_key845, _val846);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainRightCusComBSLCalculatesMap_args implements org.apache.thrift.TBase<obtainRightCusComBSLCalculatesMap_args, obtainRightCusComBSLCalculatesMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainRightCusComBSLCalculatesMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainRightCusComBSLCalculatesMap_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainRightCusComBSLCalculatesMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainRightCusComBSLCalculatesMap_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainRightCusComBSLCalculatesMap_args.class, metaDataMap);
    }

    public obtainRightCusComBSLCalculatesMap_args() {
    }

    public obtainRightCusComBSLCalculatesMap_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainRightCusComBSLCalculatesMap_args(obtainRightCusComBSLCalculatesMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainRightCusComBSLCalculatesMap_args deepCopy() {
      return new obtainRightCusComBSLCalculatesMap_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainRightCusComBSLCalculatesMap_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainRightCusComBSLCalculatesMap_args)
        return this.equals((obtainRightCusComBSLCalculatesMap_args)that);
      return false;
    }

    public boolean equals(obtainRightCusComBSLCalculatesMap_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainRightCusComBSLCalculatesMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainRightCusComBSLCalculatesMap_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainRightCusComBSLCalculatesMap_argsStandardSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesMap_argsStandardScheme getScheme() {
        return new obtainRightCusComBSLCalculatesMap_argsStandardScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesMap_argsStandardScheme extends StandardScheme<obtainRightCusComBSLCalculatesMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainRightCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainRightCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainRightCusComBSLCalculatesMap_argsTupleSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesMap_argsTupleScheme getScheme() {
        return new obtainRightCusComBSLCalculatesMap_argsTupleScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesMap_argsTupleScheme extends TupleScheme<obtainRightCusComBSLCalculatesMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainRightCusComBSLCalculatesMap_result implements org.apache.thrift.TBase<obtainRightCusComBSLCalculatesMap_result, obtainRightCusComBSLCalculatesMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainRightCusComBSLCalculatesMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainRightCusComBSLCalculatesMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainRightCusComBSLCalculatesMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainRightCusComBSLCalculatesMap_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainRightCusComBSLCalculatesMap_result.class, metaDataMap);
    }

    public obtainRightCusComBSLCalculatesMap_result() {
    }

    public obtainRightCusComBSLCalculatesMap_result(
      Map<Integer,Double> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainRightCusComBSLCalculatesMap_result(obtainRightCusComBSLCalculatesMap_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainRightCusComBSLCalculatesMap_result deepCopy() {
      return new obtainRightCusComBSLCalculatesMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public obtainRightCusComBSLCalculatesMap_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainRightCusComBSLCalculatesMap_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainRightCusComBSLCalculatesMap_result)
        return this.equals((obtainRightCusComBSLCalculatesMap_result)that);
      return false;
    }

    public boolean equals(obtainRightCusComBSLCalculatesMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainRightCusComBSLCalculatesMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainRightCusComBSLCalculatesMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainRightCusComBSLCalculatesMap_resultStandardSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesMap_resultStandardScheme getScheme() {
        return new obtainRightCusComBSLCalculatesMap_resultStandardScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesMap_resultStandardScheme extends StandardScheme<obtainRightCusComBSLCalculatesMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainRightCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map848 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map848.size);
                  int _key849;
                  double _val850;
                  for (int _i851 = 0; _i851 < _map848.size; ++_i851)
                  {
                    _key849 = iprot.readI32();
                    _val850 = iprot.readDouble();
                    struct.success.put(_key849, _val850);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainRightCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter852 : struct.success.entrySet())
            {
              oprot.writeI32(_iter852.getKey());
              oprot.writeDouble(_iter852.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainRightCusComBSLCalculatesMap_resultTupleSchemeFactory implements SchemeFactory {
      public obtainRightCusComBSLCalculatesMap_resultTupleScheme getScheme() {
        return new obtainRightCusComBSLCalculatesMap_resultTupleScheme();
      }
    }

    private static class obtainRightCusComBSLCalculatesMap_resultTupleScheme extends TupleScheme<obtainRightCusComBSLCalculatesMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter853 : struct.success.entrySet())
            {
              oprot.writeI32(_iter853.getKey());
              oprot.writeDouble(_iter853.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainRightCusComBSLCalculatesMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map854 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map854.size);
            int _key855;
            double _val856;
            for (int _i857 = 0; _i857 < _map854.size; ++_i857)
            {
              _key855 = iprot.readI32();
              _val856 = iprot.readDouble();
              struct.success.put(_key855, _val856);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainIncomeReportCalculateByReportId_args implements org.apache.thrift.TBase<obtainIncomeReportCalculateByReportId_args, obtainIncomeReportCalculateByReportId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainIncomeReportCalculateByReportId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainIncomeReportCalculateByReportId_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainIncomeReportCalculateByReportId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainIncomeReportCalculateByReportId_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainIncomeReportCalculateByReportId_args.class, metaDataMap);
    }

    public obtainIncomeReportCalculateByReportId_args() {
    }

    public obtainIncomeReportCalculateByReportId_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainIncomeReportCalculateByReportId_args(obtainIncomeReportCalculateByReportId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainIncomeReportCalculateByReportId_args deepCopy() {
      return new obtainIncomeReportCalculateByReportId_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainIncomeReportCalculateByReportId_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainIncomeReportCalculateByReportId_args)
        return this.equals((obtainIncomeReportCalculateByReportId_args)that);
      return false;
    }

    public boolean equals(obtainIncomeReportCalculateByReportId_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainIncomeReportCalculateByReportId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainIncomeReportCalculateByReportId_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainIncomeReportCalculateByReportId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateByReportId_argsStandardScheme getScheme() {
        return new obtainIncomeReportCalculateByReportId_argsStandardScheme();
      }
    }

    private static class obtainIncomeReportCalculateByReportId_argsStandardScheme extends StandardScheme<obtainIncomeReportCalculateByReportId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainIncomeReportCalculateByReportId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainIncomeReportCalculateByReportId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainIncomeReportCalculateByReportId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateByReportId_argsTupleScheme getScheme() {
        return new obtainIncomeReportCalculateByReportId_argsTupleScheme();
      }
    }

    private static class obtainIncomeReportCalculateByReportId_argsTupleScheme extends TupleScheme<obtainIncomeReportCalculateByReportId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainIncomeReportCalculateByReportId_result implements org.apache.thrift.TBase<obtainIncomeReportCalculateByReportId_result, obtainIncomeReportCalculateByReportId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainIncomeReportCalculateByReportId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainIncomeReportCalculateByReportId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainIncomeReportCalculateByReportId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainIncomeReportCalculateByReportId_resultTupleSchemeFactory());
    }

    public List<CusComIncomeReportCalculateDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComIncomeReportCalculateDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainIncomeReportCalculateByReportId_result.class, metaDataMap);
    }

    public obtainIncomeReportCalculateByReportId_result() {
    }

    public obtainIncomeReportCalculateByReportId_result(
      List<CusComIncomeReportCalculateDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainIncomeReportCalculateByReportId_result(obtainIncomeReportCalculateByReportId_result other) {
      if (other.isSetSuccess()) {
        List<CusComIncomeReportCalculateDTO> __this__success = new ArrayList<CusComIncomeReportCalculateDTO>(other.success.size());
        for (CusComIncomeReportCalculateDTO other_element : other.success) {
          __this__success.add(new CusComIncomeReportCalculateDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainIncomeReportCalculateByReportId_result deepCopy() {
      return new obtainIncomeReportCalculateByReportId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CusComIncomeReportCalculateDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CusComIncomeReportCalculateDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CusComIncomeReportCalculateDTO>();
      }
      this.success.add(elem);
    }

    public List<CusComIncomeReportCalculateDTO> getSuccess() {
      return this.success;
    }

    public obtainIncomeReportCalculateByReportId_result setSuccess(List<CusComIncomeReportCalculateDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainIncomeReportCalculateByReportId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CusComIncomeReportCalculateDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainIncomeReportCalculateByReportId_result)
        return this.equals((obtainIncomeReportCalculateByReportId_result)that);
      return false;
    }

    public boolean equals(obtainIncomeReportCalculateByReportId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainIncomeReportCalculateByReportId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainIncomeReportCalculateByReportId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainIncomeReportCalculateByReportId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateByReportId_resultStandardScheme getScheme() {
        return new obtainIncomeReportCalculateByReportId_resultStandardScheme();
      }
    }

    private static class obtainIncomeReportCalculateByReportId_resultStandardScheme extends StandardScheme<obtainIncomeReportCalculateByReportId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainIncomeReportCalculateByReportId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list858 = iprot.readListBegin();
                  struct.success = new ArrayList<CusComIncomeReportCalculateDTO>(_list858.size);
                  CusComIncomeReportCalculateDTO _elem859;
                  for (int _i860 = 0; _i860 < _list858.size; ++_i860)
                  {
                    _elem859 = new CusComIncomeReportCalculateDTO();
                    _elem859.read(iprot);
                    struct.success.add(_elem859);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainIncomeReportCalculateByReportId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CusComIncomeReportCalculateDTO _iter861 : struct.success)
            {
              _iter861.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainIncomeReportCalculateByReportId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateByReportId_resultTupleScheme getScheme() {
        return new obtainIncomeReportCalculateByReportId_resultTupleScheme();
      }
    }

    private static class obtainIncomeReportCalculateByReportId_resultTupleScheme extends TupleScheme<obtainIncomeReportCalculateByReportId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CusComIncomeReportCalculateDTO _iter862 : struct.success)
            {
              _iter862.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list863 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CusComIncomeReportCalculateDTO>(_list863.size);
            CusComIncomeReportCalculateDTO _elem864;
            for (int _i865 = 0; _i865 < _list863.size; ++_i865)
            {
              _elem864 = new CusComIncomeReportCalculateDTO();
              _elem864.read(iprot);
              struct.success.add(_elem864);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainIncomeReportCalculateMap_args implements org.apache.thrift.TBase<obtainIncomeReportCalculateMap_args, obtainIncomeReportCalculateMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainIncomeReportCalculateMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainIncomeReportCalculateMap_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainIncomeReportCalculateMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainIncomeReportCalculateMap_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainIncomeReportCalculateMap_args.class, metaDataMap);
    }

    public obtainIncomeReportCalculateMap_args() {
    }

    public obtainIncomeReportCalculateMap_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainIncomeReportCalculateMap_args(obtainIncomeReportCalculateMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainIncomeReportCalculateMap_args deepCopy() {
      return new obtainIncomeReportCalculateMap_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainIncomeReportCalculateMap_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainIncomeReportCalculateMap_args)
        return this.equals((obtainIncomeReportCalculateMap_args)that);
      return false;
    }

    public boolean equals(obtainIncomeReportCalculateMap_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainIncomeReportCalculateMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainIncomeReportCalculateMap_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainIncomeReportCalculateMap_argsStandardSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateMap_argsStandardScheme getScheme() {
        return new obtainIncomeReportCalculateMap_argsStandardScheme();
      }
    }

    private static class obtainIncomeReportCalculateMap_argsStandardScheme extends StandardScheme<obtainIncomeReportCalculateMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainIncomeReportCalculateMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainIncomeReportCalculateMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainIncomeReportCalculateMap_argsTupleSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateMap_argsTupleScheme getScheme() {
        return new obtainIncomeReportCalculateMap_argsTupleScheme();
      }
    }

    private static class obtainIncomeReportCalculateMap_argsTupleScheme extends TupleScheme<obtainIncomeReportCalculateMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainIncomeReportCalculateMap_result implements org.apache.thrift.TBase<obtainIncomeReportCalculateMap_result, obtainIncomeReportCalculateMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainIncomeReportCalculateMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainIncomeReportCalculateMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainIncomeReportCalculateMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainIncomeReportCalculateMap_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainIncomeReportCalculateMap_result.class, metaDataMap);
    }

    public obtainIncomeReportCalculateMap_result() {
    }

    public obtainIncomeReportCalculateMap_result(
      Map<Integer,Double> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainIncomeReportCalculateMap_result(obtainIncomeReportCalculateMap_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainIncomeReportCalculateMap_result deepCopy() {
      return new obtainIncomeReportCalculateMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public obtainIncomeReportCalculateMap_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainIncomeReportCalculateMap_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainIncomeReportCalculateMap_result)
        return this.equals((obtainIncomeReportCalculateMap_result)that);
      return false;
    }

    public boolean equals(obtainIncomeReportCalculateMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainIncomeReportCalculateMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainIncomeReportCalculateMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainIncomeReportCalculateMap_resultStandardSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateMap_resultStandardScheme getScheme() {
        return new obtainIncomeReportCalculateMap_resultStandardScheme();
      }
    }

    private static class obtainIncomeReportCalculateMap_resultStandardScheme extends StandardScheme<obtainIncomeReportCalculateMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainIncomeReportCalculateMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map866 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map866.size);
                  int _key867;
                  double _val868;
                  for (int _i869 = 0; _i869 < _map866.size; ++_i869)
                  {
                    _key867 = iprot.readI32();
                    _val868 = iprot.readDouble();
                    struct.success.put(_key867, _val868);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainIncomeReportCalculateMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter870 : struct.success.entrySet())
            {
              oprot.writeI32(_iter870.getKey());
              oprot.writeDouble(_iter870.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainIncomeReportCalculateMap_resultTupleSchemeFactory implements SchemeFactory {
      public obtainIncomeReportCalculateMap_resultTupleScheme getScheme() {
        return new obtainIncomeReportCalculateMap_resultTupleScheme();
      }
    }

    private static class obtainIncomeReportCalculateMap_resultTupleScheme extends TupleScheme<obtainIncomeReportCalculateMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter871 : struct.success.entrySet())
            {
              oprot.writeI32(_iter871.getKey());
              oprot.writeDouble(_iter871.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainIncomeReportCalculateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map872 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map872.size);
            int _key873;
            double _val874;
            for (int _i875 = 0; _i875 < _map872.size; ++_i875)
            {
              _key873 = iprot.readI32();
              _val874 = iprot.readDouble();
              struct.success.put(_key873, _val874);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainCashFlowCalculateByReportId_args implements org.apache.thrift.TBase<obtainCashFlowCalculateByReportId_args, obtainCashFlowCalculateByReportId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainCashFlowCalculateByReportId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainCashFlowCalculateByReportId_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainCashFlowCalculateByReportId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainCashFlowCalculateByReportId_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainCashFlowCalculateByReportId_args.class, metaDataMap);
    }

    public obtainCashFlowCalculateByReportId_args() {
    }

    public obtainCashFlowCalculateByReportId_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainCashFlowCalculateByReportId_args(obtainCashFlowCalculateByReportId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainCashFlowCalculateByReportId_args deepCopy() {
      return new obtainCashFlowCalculateByReportId_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainCashFlowCalculateByReportId_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainCashFlowCalculateByReportId_args)
        return this.equals((obtainCashFlowCalculateByReportId_args)that);
      return false;
    }

    public boolean equals(obtainCashFlowCalculateByReportId_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainCashFlowCalculateByReportId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainCashFlowCalculateByReportId_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainCashFlowCalculateByReportId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateByReportId_argsStandardScheme getScheme() {
        return new obtainCashFlowCalculateByReportId_argsStandardScheme();
      }
    }

    private static class obtainCashFlowCalculateByReportId_argsStandardScheme extends StandardScheme<obtainCashFlowCalculateByReportId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainCashFlowCalculateByReportId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateByReportId_argsTupleScheme getScheme() {
        return new obtainCashFlowCalculateByReportId_argsTupleScheme();
      }
    }

    private static class obtainCashFlowCalculateByReportId_argsTupleScheme extends TupleScheme<obtainCashFlowCalculateByReportId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainCashFlowCalculateByReportId_result implements org.apache.thrift.TBase<obtainCashFlowCalculateByReportId_result, obtainCashFlowCalculateByReportId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainCashFlowCalculateByReportId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainCashFlowCalculateByReportId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainCashFlowCalculateByReportId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainCashFlowCalculateByReportId_resultTupleSchemeFactory());
    }

    public List<CusComCashFlowReportCalculateDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComCashFlowReportCalculateDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainCashFlowCalculateByReportId_result.class, metaDataMap);
    }

    public obtainCashFlowCalculateByReportId_result() {
    }

    public obtainCashFlowCalculateByReportId_result(
      List<CusComCashFlowReportCalculateDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainCashFlowCalculateByReportId_result(obtainCashFlowCalculateByReportId_result other) {
      if (other.isSetSuccess()) {
        List<CusComCashFlowReportCalculateDTO> __this__success = new ArrayList<CusComCashFlowReportCalculateDTO>(other.success.size());
        for (CusComCashFlowReportCalculateDTO other_element : other.success) {
          __this__success.add(new CusComCashFlowReportCalculateDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainCashFlowCalculateByReportId_result deepCopy() {
      return new obtainCashFlowCalculateByReportId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CusComCashFlowReportCalculateDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CusComCashFlowReportCalculateDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CusComCashFlowReportCalculateDTO>();
      }
      this.success.add(elem);
    }

    public List<CusComCashFlowReportCalculateDTO> getSuccess() {
      return this.success;
    }

    public obtainCashFlowCalculateByReportId_result setSuccess(List<CusComCashFlowReportCalculateDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainCashFlowCalculateByReportId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CusComCashFlowReportCalculateDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainCashFlowCalculateByReportId_result)
        return this.equals((obtainCashFlowCalculateByReportId_result)that);
      return false;
    }

    public boolean equals(obtainCashFlowCalculateByReportId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainCashFlowCalculateByReportId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainCashFlowCalculateByReportId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainCashFlowCalculateByReportId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateByReportId_resultStandardScheme getScheme() {
        return new obtainCashFlowCalculateByReportId_resultStandardScheme();
      }
    }

    private static class obtainCashFlowCalculateByReportId_resultStandardScheme extends StandardScheme<obtainCashFlowCalculateByReportId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list876 = iprot.readListBegin();
                  struct.success = new ArrayList<CusComCashFlowReportCalculateDTO>(_list876.size);
                  CusComCashFlowReportCalculateDTO _elem877;
                  for (int _i878 = 0; _i878 < _list876.size; ++_i878)
                  {
                    _elem877 = new CusComCashFlowReportCalculateDTO();
                    _elem877.read(iprot);
                    struct.success.add(_elem877);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CusComCashFlowReportCalculateDTO _iter879 : struct.success)
            {
              _iter879.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainCashFlowCalculateByReportId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateByReportId_resultTupleScheme getScheme() {
        return new obtainCashFlowCalculateByReportId_resultTupleScheme();
      }
    }

    private static class obtainCashFlowCalculateByReportId_resultTupleScheme extends TupleScheme<obtainCashFlowCalculateByReportId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CusComCashFlowReportCalculateDTO _iter880 : struct.success)
            {
              _iter880.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list881 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CusComCashFlowReportCalculateDTO>(_list881.size);
            CusComCashFlowReportCalculateDTO _elem882;
            for (int _i883 = 0; _i883 < _list881.size; ++_i883)
            {
              _elem882 = new CusComCashFlowReportCalculateDTO();
              _elem882.read(iprot);
              struct.success.add(_elem882);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainCashFlowCalculateMap_args implements org.apache.thrift.TBase<obtainCashFlowCalculateMap_args, obtainCashFlowCalculateMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainCashFlowCalculateMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainCashFlowCalculateMap_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainCashFlowCalculateMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainCashFlowCalculateMap_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainCashFlowCalculateMap_args.class, metaDataMap);
    }

    public obtainCashFlowCalculateMap_args() {
    }

    public obtainCashFlowCalculateMap_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainCashFlowCalculateMap_args(obtainCashFlowCalculateMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainCashFlowCalculateMap_args deepCopy() {
      return new obtainCashFlowCalculateMap_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainCashFlowCalculateMap_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainCashFlowCalculateMap_args)
        return this.equals((obtainCashFlowCalculateMap_args)that);
      return false;
    }

    public boolean equals(obtainCashFlowCalculateMap_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainCashFlowCalculateMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainCashFlowCalculateMap_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainCashFlowCalculateMap_argsStandardSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateMap_argsStandardScheme getScheme() {
        return new obtainCashFlowCalculateMap_argsStandardScheme();
      }
    }

    private static class obtainCashFlowCalculateMap_argsStandardScheme extends StandardScheme<obtainCashFlowCalculateMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainCashFlowCalculateMap_argsTupleSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateMap_argsTupleScheme getScheme() {
        return new obtainCashFlowCalculateMap_argsTupleScheme();
      }
    }

    private static class obtainCashFlowCalculateMap_argsTupleScheme extends TupleScheme<obtainCashFlowCalculateMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainCashFlowCalculateMap_result implements org.apache.thrift.TBase<obtainCashFlowCalculateMap_result, obtainCashFlowCalculateMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainCashFlowCalculateMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainCashFlowCalculateMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainCashFlowCalculateMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainCashFlowCalculateMap_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainCashFlowCalculateMap_result.class, metaDataMap);
    }

    public obtainCashFlowCalculateMap_result() {
    }

    public obtainCashFlowCalculateMap_result(
      Map<Integer,Double> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainCashFlowCalculateMap_result(obtainCashFlowCalculateMap_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainCashFlowCalculateMap_result deepCopy() {
      return new obtainCashFlowCalculateMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public obtainCashFlowCalculateMap_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainCashFlowCalculateMap_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainCashFlowCalculateMap_result)
        return this.equals((obtainCashFlowCalculateMap_result)that);
      return false;
    }

    public boolean equals(obtainCashFlowCalculateMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainCashFlowCalculateMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainCashFlowCalculateMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainCashFlowCalculateMap_resultStandardSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateMap_resultStandardScheme getScheme() {
        return new obtainCashFlowCalculateMap_resultStandardScheme();
      }
    }

    private static class obtainCashFlowCalculateMap_resultStandardScheme extends StandardScheme<obtainCashFlowCalculateMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map884 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map884.size);
                  int _key885;
                  double _val886;
                  for (int _i887 = 0; _i887 < _map884.size; ++_i887)
                  {
                    _key885 = iprot.readI32();
                    _val886 = iprot.readDouble();
                    struct.success.put(_key885, _val886);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter888 : struct.success.entrySet())
            {
              oprot.writeI32(_iter888.getKey());
              oprot.writeDouble(_iter888.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainCashFlowCalculateMap_resultTupleSchemeFactory implements SchemeFactory {
      public obtainCashFlowCalculateMap_resultTupleScheme getScheme() {
        return new obtainCashFlowCalculateMap_resultTupleScheme();
      }
    }

    private static class obtainCashFlowCalculateMap_resultTupleScheme extends TupleScheme<obtainCashFlowCalculateMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter889 : struct.success.entrySet())
            {
              oprot.writeI32(_iter889.getKey());
              oprot.writeDouble(_iter889.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map890 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map890.size);
            int _key891;
            double _val892;
            for (int _i893 = 0; _i893 < _map890.size; ++_i893)
            {
              _key891 = iprot.readI32();
              _val892 = iprot.readDouble();
              struct.success.put(_key891, _val892);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainSupplementCashFlowCalculateByReportId_args implements org.apache.thrift.TBase<obtainSupplementCashFlowCalculateByReportId_args, obtainSupplementCashFlowCalculateByReportId_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainSupplementCashFlowCalculateByReportId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainSupplementCashFlowCalculateByReportId_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainSupplementCashFlowCalculateByReportId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainSupplementCashFlowCalculateByReportId_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainSupplementCashFlowCalculateByReportId_args.class, metaDataMap);
    }

    public obtainSupplementCashFlowCalculateByReportId_args() {
    }

    public obtainSupplementCashFlowCalculateByReportId_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainSupplementCashFlowCalculateByReportId_args(obtainSupplementCashFlowCalculateByReportId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainSupplementCashFlowCalculateByReportId_args deepCopy() {
      return new obtainSupplementCashFlowCalculateByReportId_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainSupplementCashFlowCalculateByReportId_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainSupplementCashFlowCalculateByReportId_args)
        return this.equals((obtainSupplementCashFlowCalculateByReportId_args)that);
      return false;
    }

    public boolean equals(obtainSupplementCashFlowCalculateByReportId_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainSupplementCashFlowCalculateByReportId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainSupplementCashFlowCalculateByReportId_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainSupplementCashFlowCalculateByReportId_argsStandardSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateByReportId_argsStandardScheme getScheme() {
        return new obtainSupplementCashFlowCalculateByReportId_argsStandardScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateByReportId_argsStandardScheme extends StandardScheme<obtainSupplementCashFlowCalculateByReportId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainSupplementCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainSupplementCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainSupplementCashFlowCalculateByReportId_argsTupleSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateByReportId_argsTupleScheme getScheme() {
        return new obtainSupplementCashFlowCalculateByReportId_argsTupleScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateByReportId_argsTupleScheme extends TupleScheme<obtainSupplementCashFlowCalculateByReportId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateByReportId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainSupplementCashFlowCalculateByReportId_result implements org.apache.thrift.TBase<obtainSupplementCashFlowCalculateByReportId_result, obtainSupplementCashFlowCalculateByReportId_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainSupplementCashFlowCalculateByReportId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainSupplementCashFlowCalculateByReportId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainSupplementCashFlowCalculateByReportId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainSupplementCashFlowCalculateByReportId_resultTupleSchemeFactory());
    }

    public List<CusComCashFlowReportCalculateDTO> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComCashFlowReportCalculateDTO.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainSupplementCashFlowCalculateByReportId_result.class, metaDataMap);
    }

    public obtainSupplementCashFlowCalculateByReportId_result() {
    }

    public obtainSupplementCashFlowCalculateByReportId_result(
      List<CusComCashFlowReportCalculateDTO> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainSupplementCashFlowCalculateByReportId_result(obtainSupplementCashFlowCalculateByReportId_result other) {
      if (other.isSetSuccess()) {
        List<CusComCashFlowReportCalculateDTO> __this__success = new ArrayList<CusComCashFlowReportCalculateDTO>(other.success.size());
        for (CusComCashFlowReportCalculateDTO other_element : other.success) {
          __this__success.add(new CusComCashFlowReportCalculateDTO(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainSupplementCashFlowCalculateByReportId_result deepCopy() {
      return new obtainSupplementCashFlowCalculateByReportId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CusComCashFlowReportCalculateDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CusComCashFlowReportCalculateDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<CusComCashFlowReportCalculateDTO>();
      }
      this.success.add(elem);
    }

    public List<CusComCashFlowReportCalculateDTO> getSuccess() {
      return this.success;
    }

    public obtainSupplementCashFlowCalculateByReportId_result setSuccess(List<CusComCashFlowReportCalculateDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainSupplementCashFlowCalculateByReportId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CusComCashFlowReportCalculateDTO>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainSupplementCashFlowCalculateByReportId_result)
        return this.equals((obtainSupplementCashFlowCalculateByReportId_result)that);
      return false;
    }

    public boolean equals(obtainSupplementCashFlowCalculateByReportId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainSupplementCashFlowCalculateByReportId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainSupplementCashFlowCalculateByReportId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainSupplementCashFlowCalculateByReportId_resultStandardSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateByReportId_resultStandardScheme getScheme() {
        return new obtainSupplementCashFlowCalculateByReportId_resultStandardScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateByReportId_resultStandardScheme extends StandardScheme<obtainSupplementCashFlowCalculateByReportId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainSupplementCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list894 = iprot.readListBegin();
                  struct.success = new ArrayList<CusComCashFlowReportCalculateDTO>(_list894.size);
                  CusComCashFlowReportCalculateDTO _elem895;
                  for (int _i896 = 0; _i896 < _list894.size; ++_i896)
                  {
                    _elem895 = new CusComCashFlowReportCalculateDTO();
                    _elem895.read(iprot);
                    struct.success.add(_elem895);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainSupplementCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CusComCashFlowReportCalculateDTO _iter897 : struct.success)
            {
              _iter897.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainSupplementCashFlowCalculateByReportId_resultTupleSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateByReportId_resultTupleScheme getScheme() {
        return new obtainSupplementCashFlowCalculateByReportId_resultTupleScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateByReportId_resultTupleScheme extends TupleScheme<obtainSupplementCashFlowCalculateByReportId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CusComCashFlowReportCalculateDTO _iter898 : struct.success)
            {
              _iter898.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateByReportId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list899 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CusComCashFlowReportCalculateDTO>(_list899.size);
            CusComCashFlowReportCalculateDTO _elem900;
            for (int _i901 = 0; _i901 < _list899.size; ++_i901)
            {
              _elem900 = new CusComCashFlowReportCalculateDTO();
              _elem900.read(iprot);
              struct.success.add(_elem900);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class obtainSupplementCashFlowCalculateMap_args implements org.apache.thrift.TBase<obtainSupplementCashFlowCalculateMap_args, obtainSupplementCashFlowCalculateMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<obtainSupplementCashFlowCalculateMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainSupplementCashFlowCalculateMap_args");

    private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainSupplementCashFlowCalculateMap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainSupplementCashFlowCalculateMap_argsTupleSchemeFactory());
    }

    public int reportId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPORT_ID((short)1, "reportId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPORT_ID
            return REPORT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPORTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainSupplementCashFlowCalculateMap_args.class, metaDataMap);
    }

    public obtainSupplementCashFlowCalculateMap_args() {
    }

    public obtainSupplementCashFlowCalculateMap_args(
      int reportId)
    {
      this();
      this.reportId = reportId;
      setReportIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainSupplementCashFlowCalculateMap_args(obtainSupplementCashFlowCalculateMap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.reportId = other.reportId;
    }

    public obtainSupplementCashFlowCalculateMap_args deepCopy() {
      return new obtainSupplementCashFlowCalculateMap_args(this);
    }

    @Override
    public void clear() {
      setReportIdIsSet(false);
      this.reportId = 0;
    }

    public int getReportId() {
      return this.reportId;
    }

    public obtainSupplementCashFlowCalculateMap_args setReportId(int reportId) {
      this.reportId = reportId;
      setReportIdIsSet(true);
      return this;
    }

    public void unsetReportId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
    public boolean isSetReportId() {
      return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
    }

    public void setReportIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPORT_ID:
        if (value == null) {
          unsetReportId();
        } else {
          setReportId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPORT_ID:
        return Integer.valueOf(getReportId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPORT_ID:
        return isSetReportId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainSupplementCashFlowCalculateMap_args)
        return this.equals((obtainSupplementCashFlowCalculateMap_args)that);
      return false;
    }

    public boolean equals(obtainSupplementCashFlowCalculateMap_args that) {
      if (that == null)
        return false;

      boolean this_present_reportId = true;
      boolean that_present_reportId = true;
      if (this_present_reportId || that_present_reportId) {
        if (!(this_present_reportId && that_present_reportId))
          return false;
        if (this.reportId != that.reportId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_reportId = true;
      list.add(present_reportId);
      if (present_reportId)
        list.add(reportId);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainSupplementCashFlowCalculateMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReportId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainSupplementCashFlowCalculateMap_args(");
      boolean first = true;

      sb.append("reportId:");
      sb.append(this.reportId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainSupplementCashFlowCalculateMap_argsStandardSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateMap_argsStandardScheme getScheme() {
        return new obtainSupplementCashFlowCalculateMap_argsStandardScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateMap_argsStandardScheme extends StandardScheme<obtainSupplementCashFlowCalculateMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainSupplementCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPORT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reportId = iprot.readI32();
                struct.setReportIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainSupplementCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
        oprot.writeI32(struct.reportId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainSupplementCashFlowCalculateMap_argsTupleSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateMap_argsTupleScheme getScheme() {
        return new obtainSupplementCashFlowCalculateMap_argsTupleScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateMap_argsTupleScheme extends TupleScheme<obtainSupplementCashFlowCalculateMap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReportId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReportId()) {
          oprot.writeI32(struct.reportId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateMap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reportId = iprot.readI32();
          struct.setReportIdIsSet(true);
        }
      }
    }

  }

  public static class obtainSupplementCashFlowCalculateMap_result implements org.apache.thrift.TBase<obtainSupplementCashFlowCalculateMap_result, obtainSupplementCashFlowCalculateMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<obtainSupplementCashFlowCalculateMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("obtainSupplementCashFlowCalculateMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new obtainSupplementCashFlowCalculateMap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new obtainSupplementCashFlowCalculateMap_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(obtainSupplementCashFlowCalculateMap_result.class, metaDataMap);
    }

    public obtainSupplementCashFlowCalculateMap_result() {
    }

    public obtainSupplementCashFlowCalculateMap_result(
      Map<Integer,Double> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public obtainSupplementCashFlowCalculateMap_result(obtainSupplementCashFlowCalculateMap_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public obtainSupplementCashFlowCalculateMap_result deepCopy() {
      return new obtainSupplementCashFlowCalculateMap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public obtainSupplementCashFlowCalculateMap_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public obtainSupplementCashFlowCalculateMap_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof obtainSupplementCashFlowCalculateMap_result)
        return this.equals((obtainSupplementCashFlowCalculateMap_result)that);
      return false;
    }

    public boolean equals(obtainSupplementCashFlowCalculateMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(obtainSupplementCashFlowCalculateMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("obtainSupplementCashFlowCalculateMap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class obtainSupplementCashFlowCalculateMap_resultStandardSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateMap_resultStandardScheme getScheme() {
        return new obtainSupplementCashFlowCalculateMap_resultStandardScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateMap_resultStandardScheme extends StandardScheme<obtainSupplementCashFlowCalculateMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, obtainSupplementCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map902 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map902.size);
                  int _key903;
                  double _val904;
                  for (int _i905 = 0; _i905 < _map902.size; ++_i905)
                  {
                    _key903 = iprot.readI32();
                    _val904 = iprot.readDouble();
                    struct.success.put(_key903, _val904);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, obtainSupplementCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter906 : struct.success.entrySet())
            {
              oprot.writeI32(_iter906.getKey());
              oprot.writeDouble(_iter906.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class obtainSupplementCashFlowCalculateMap_resultTupleSchemeFactory implements SchemeFactory {
      public obtainSupplementCashFlowCalculateMap_resultTupleScheme getScheme() {
        return new obtainSupplementCashFlowCalculateMap_resultTupleScheme();
      }
    }

    private static class obtainSupplementCashFlowCalculateMap_resultTupleScheme extends TupleScheme<obtainSupplementCashFlowCalculateMap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter907 : struct.success.entrySet())
            {
              oprot.writeI32(_iter907.getKey());
              oprot.writeDouble(_iter907.getValue());
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, obtainSupplementCashFlowCalculateMap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map908 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map908.size);
            int _key909;
            double _val910;
            for (int _i911 = 0; _i911 < _map908.size; ++_i911)
            {
              _key909 = iprot.readI32();
              _val910 = iprot.readDouble();
              struct.success.put(_key909, _val910);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

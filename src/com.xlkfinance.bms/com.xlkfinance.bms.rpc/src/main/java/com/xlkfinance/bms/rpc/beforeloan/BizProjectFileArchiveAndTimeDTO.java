/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectFileArchiveAndTimeDTO implements org.apache.thrift.TBase<BizProjectFileArchiveAndTimeDTO, BizProjectFileArchiveAndTimeDTO._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectFileArchiveAndTimeDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectFileArchiveAndTimeDTO");

  private static final org.apache.thrift.protocol.TField PROJECT_FILE_ARCHIVE_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectFileArchivePid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ARCHIVE_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveCatelog", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ARCHIVE_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveFileName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ARCHIVE_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveLocation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OFFLINE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineCnt", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ONLINE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineCnt", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField IS_ARCHIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isArchive", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IS_ARCHIVE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("isArchiveVal", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LOOKUP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupVal", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BIZ_FILE_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("bizFilePid", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectFileArchiveAndTimeDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectFileArchiveAndTimeDTOTupleSchemeFactory());
  }

  public int projectFileArchivePid; // required
  public int projectId; // required
  public int fileId; // required
  public String archiveCatelog; // required
  public String archiveFileName; // required
  public String archiveLocation; // required
  public int offlineCnt; // required
  public int onlineCnt; // required
  public int isArchive; // required
  public String isArchiveVal; // required
  public String remark; // required
  public int status; // required
  public String lookupVal; // required
  public int bizFilePid; // required
  public String fileUrl; // required
  public String uploadDttm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_FILE_ARCHIVE_PID((short)1, "projectFileArchivePid"),
    PROJECT_ID((short)2, "projectId"),
    FILE_ID((short)3, "fileId"),
    ARCHIVE_CATELOG((short)4, "archiveCatelog"),
    ARCHIVE_FILE_NAME((short)5, "archiveFileName"),
    ARCHIVE_LOCATION((short)6, "archiveLocation"),
    OFFLINE_CNT((short)7, "offlineCnt"),
    ONLINE_CNT((short)8, "onlineCnt"),
    IS_ARCHIVE((short)9, "isArchive"),
    IS_ARCHIVE_VAL((short)10, "isArchiveVal"),
    REMARK((short)11, "remark"),
    STATUS((short)12, "status"),
    LOOKUP_VAL((short)13, "lookupVal"),
    BIZ_FILE_PID((short)14, "bizFilePid"),
    FILE_URL((short)15, "fileUrl"),
    UPLOAD_DTTM((short)16, "uploadDttm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_FILE_ARCHIVE_PID
          return PROJECT_FILE_ARCHIVE_PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // FILE_ID
          return FILE_ID;
        case 4: // ARCHIVE_CATELOG
          return ARCHIVE_CATELOG;
        case 5: // ARCHIVE_FILE_NAME
          return ARCHIVE_FILE_NAME;
        case 6: // ARCHIVE_LOCATION
          return ARCHIVE_LOCATION;
        case 7: // OFFLINE_CNT
          return OFFLINE_CNT;
        case 8: // ONLINE_CNT
          return ONLINE_CNT;
        case 9: // IS_ARCHIVE
          return IS_ARCHIVE;
        case 10: // IS_ARCHIVE_VAL
          return IS_ARCHIVE_VAL;
        case 11: // REMARK
          return REMARK;
        case 12: // STATUS
          return STATUS;
        case 13: // LOOKUP_VAL
          return LOOKUP_VAL;
        case 14: // BIZ_FILE_PID
          return BIZ_FILE_PID;
        case 15: // FILE_URL
          return FILE_URL;
        case 16: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTFILEARCHIVEPID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __OFFLINECNT_ISSET_ID = 3;
  private static final int __ONLINECNT_ISSET_ID = 4;
  private static final int __ISARCHIVE_ISSET_ID = 5;
  private static final int __STATUS_ISSET_ID = 6;
  private static final int __BIZFILEPID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_FILE_ARCHIVE_PID, new org.apache.thrift.meta_data.FieldMetaData("projectFileArchivePid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVE_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("archiveCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVE_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("archiveFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARCHIVE_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("archiveLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFLINE_CNT, new org.apache.thrift.meta_data.FieldMetaData("offlineCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_CNT, new org.apache.thrift.meta_data.FieldMetaData("onlineCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ARCHIVE, new org.apache.thrift.meta_data.FieldMetaData("isArchive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ARCHIVE_VAL, new org.apache.thrift.meta_data.FieldMetaData("isArchiveVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOOKUP_VAL, new org.apache.thrift.meta_data.FieldMetaData("lookupVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZ_FILE_PID, new org.apache.thrift.meta_data.FieldMetaData("bizFilePid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectFileArchiveAndTimeDTO.class, metaDataMap);
  }

  public BizProjectFileArchiveAndTimeDTO() {
  }

  public BizProjectFileArchiveAndTimeDTO(
    int projectFileArchivePid,
    int projectId,
    int fileId,
    String archiveCatelog,
    String archiveFileName,
    String archiveLocation,
    int offlineCnt,
    int onlineCnt,
    int isArchive,
    String isArchiveVal,
    String remark,
    int status,
    String lookupVal,
    int bizFilePid,
    String fileUrl,
    String uploadDttm)
  {
    this();
    this.projectFileArchivePid = projectFileArchivePid;
    setProjectFileArchivePidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.archiveCatelog = archiveCatelog;
    this.archiveFileName = archiveFileName;
    this.archiveLocation = archiveLocation;
    this.offlineCnt = offlineCnt;
    setOfflineCntIsSet(true);
    this.onlineCnt = onlineCnt;
    setOnlineCntIsSet(true);
    this.isArchive = isArchive;
    setIsArchiveIsSet(true);
    this.isArchiveVal = isArchiveVal;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.lookupVal = lookupVal;
    this.bizFilePid = bizFilePid;
    setBizFilePidIsSet(true);
    this.fileUrl = fileUrl;
    this.uploadDttm = uploadDttm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectFileArchiveAndTimeDTO(BizProjectFileArchiveAndTimeDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectFileArchivePid = other.projectFileArchivePid;
    this.projectId = other.projectId;
    this.fileId = other.fileId;
    if (other.isSetArchiveCatelog()) {
      this.archiveCatelog = other.archiveCatelog;
    }
    if (other.isSetArchiveFileName()) {
      this.archiveFileName = other.archiveFileName;
    }
    if (other.isSetArchiveLocation()) {
      this.archiveLocation = other.archiveLocation;
    }
    this.offlineCnt = other.offlineCnt;
    this.onlineCnt = other.onlineCnt;
    this.isArchive = other.isArchive;
    if (other.isSetIsArchiveVal()) {
      this.isArchiveVal = other.isArchiveVal;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetLookupVal()) {
      this.lookupVal = other.lookupVal;
    }
    this.bizFilePid = other.bizFilePid;
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
  }

  public BizProjectFileArchiveAndTimeDTO deepCopy() {
    return new BizProjectFileArchiveAndTimeDTO(this);
  }

  @Override
  public void clear() {
    setProjectFileArchivePidIsSet(false);
    this.projectFileArchivePid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setFileIdIsSet(false);
    this.fileId = 0;
    this.archiveCatelog = null;
    this.archiveFileName = null;
    this.archiveLocation = null;
    setOfflineCntIsSet(false);
    this.offlineCnt = 0;
    setOnlineCntIsSet(false);
    this.onlineCnt = 0;
    setIsArchiveIsSet(false);
    this.isArchive = 0;
    this.isArchiveVal = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.lookupVal = null;
    setBizFilePidIsSet(false);
    this.bizFilePid = 0;
    this.fileUrl = null;
    this.uploadDttm = null;
  }

  public int getProjectFileArchivePid() {
    return this.projectFileArchivePid;
  }

  public BizProjectFileArchiveAndTimeDTO setProjectFileArchivePid(int projectFileArchivePid) {
    this.projectFileArchivePid = projectFileArchivePid;
    setProjectFileArchivePidIsSet(true);
    return this;
  }

  public void unsetProjectFileArchivePid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTFILEARCHIVEPID_ISSET_ID);
  }

  /** Returns true if field projectFileArchivePid is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectFileArchivePid() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTFILEARCHIVEPID_ISSET_ID);
  }

  public void setProjectFileArchivePidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTFILEARCHIVEPID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectFileArchiveAndTimeDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getFileId() {
    return this.fileId;
  }

  public BizProjectFileArchiveAndTimeDTO setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public String getArchiveCatelog() {
    return this.archiveCatelog;
  }

  public BizProjectFileArchiveAndTimeDTO setArchiveCatelog(String archiveCatelog) {
    this.archiveCatelog = archiveCatelog;
    return this;
  }

  public void unsetArchiveCatelog() {
    this.archiveCatelog = null;
  }

  /** Returns true if field archiveCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveCatelog() {
    return this.archiveCatelog != null;
  }

  public void setArchiveCatelogIsSet(boolean value) {
    if (!value) {
      this.archiveCatelog = null;
    }
  }

  public String getArchiveFileName() {
    return this.archiveFileName;
  }

  public BizProjectFileArchiveAndTimeDTO setArchiveFileName(String archiveFileName) {
    this.archiveFileName = archiveFileName;
    return this;
  }

  public void unsetArchiveFileName() {
    this.archiveFileName = null;
  }

  /** Returns true if field archiveFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveFileName() {
    return this.archiveFileName != null;
  }

  public void setArchiveFileNameIsSet(boolean value) {
    if (!value) {
      this.archiveFileName = null;
    }
  }

  public String getArchiveLocation() {
    return this.archiveLocation;
  }

  public BizProjectFileArchiveAndTimeDTO setArchiveLocation(String archiveLocation) {
    this.archiveLocation = archiveLocation;
    return this;
  }

  public void unsetArchiveLocation() {
    this.archiveLocation = null;
  }

  /** Returns true if field archiveLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveLocation() {
    return this.archiveLocation != null;
  }

  public void setArchiveLocationIsSet(boolean value) {
    if (!value) {
      this.archiveLocation = null;
    }
  }

  public int getOfflineCnt() {
    return this.offlineCnt;
  }

  public BizProjectFileArchiveAndTimeDTO setOfflineCnt(int offlineCnt) {
    this.offlineCnt = offlineCnt;
    setOfflineCntIsSet(true);
    return this;
  }

  public void unsetOfflineCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFLINECNT_ISSET_ID);
  }

  /** Returns true if field offlineCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFLINECNT_ISSET_ID);
  }

  public void setOfflineCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFLINECNT_ISSET_ID, value);
  }

  public int getOnlineCnt() {
    return this.onlineCnt;
  }

  public BizProjectFileArchiveAndTimeDTO setOnlineCnt(int onlineCnt) {
    this.onlineCnt = onlineCnt;
    setOnlineCntIsSet(true);
    return this;
  }

  public void unsetOnlineCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINECNT_ISSET_ID);
  }

  /** Returns true if field onlineCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINECNT_ISSET_ID);
  }

  public void setOnlineCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINECNT_ISSET_ID, value);
  }

  public int getIsArchive() {
    return this.isArchive;
  }

  public BizProjectFileArchiveAndTimeDTO setIsArchive(int isArchive) {
    this.isArchive = isArchive;
    setIsArchiveIsSet(true);
    return this;
  }

  public void unsetIsArchive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISARCHIVE_ISSET_ID);
  }

  /** Returns true if field isArchive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArchive() {
    return EncodingUtils.testBit(__isset_bitfield, __ISARCHIVE_ISSET_ID);
  }

  public void setIsArchiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISARCHIVE_ISSET_ID, value);
  }

  public String getIsArchiveVal() {
    return this.isArchiveVal;
  }

  public BizProjectFileArchiveAndTimeDTO setIsArchiveVal(String isArchiveVal) {
    this.isArchiveVal = isArchiveVal;
    return this;
  }

  public void unsetIsArchiveVal() {
    this.isArchiveVal = null;
  }

  /** Returns true if field isArchiveVal is set (has been assigned a value) and false otherwise */
  public boolean isSetIsArchiveVal() {
    return this.isArchiveVal != null;
  }

  public void setIsArchiveValIsSet(boolean value) {
    if (!value) {
      this.isArchiveVal = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public BizProjectFileArchiveAndTimeDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectFileArchiveAndTimeDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getLookupVal() {
    return this.lookupVal;
  }

  public BizProjectFileArchiveAndTimeDTO setLookupVal(String lookupVal) {
    this.lookupVal = lookupVal;
    return this;
  }

  public void unsetLookupVal() {
    this.lookupVal = null;
  }

  /** Returns true if field lookupVal is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupVal() {
    return this.lookupVal != null;
  }

  public void setLookupValIsSet(boolean value) {
    if (!value) {
      this.lookupVal = null;
    }
  }

  public int getBizFilePid() {
    return this.bizFilePid;
  }

  public BizProjectFileArchiveAndTimeDTO setBizFilePid(int bizFilePid) {
    this.bizFilePid = bizFilePid;
    setBizFilePidIsSet(true);
    return this;
  }

  public void unsetBizFilePid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZFILEPID_ISSET_ID);
  }

  /** Returns true if field bizFilePid is set (has been assigned a value) and false otherwise */
  public boolean isSetBizFilePid() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZFILEPID_ISSET_ID);
  }

  public void setBizFilePidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZFILEPID_ISSET_ID, value);
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public BizProjectFileArchiveAndTimeDTO setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public BizProjectFileArchiveAndTimeDTO setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_FILE_ARCHIVE_PID:
      if (value == null) {
        unsetProjectFileArchivePid();
      } else {
        setProjectFileArchivePid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case ARCHIVE_CATELOG:
      if (value == null) {
        unsetArchiveCatelog();
      } else {
        setArchiveCatelog((String)value);
      }
      break;

    case ARCHIVE_FILE_NAME:
      if (value == null) {
        unsetArchiveFileName();
      } else {
        setArchiveFileName((String)value);
      }
      break;

    case ARCHIVE_LOCATION:
      if (value == null) {
        unsetArchiveLocation();
      } else {
        setArchiveLocation((String)value);
      }
      break;

    case OFFLINE_CNT:
      if (value == null) {
        unsetOfflineCnt();
      } else {
        setOfflineCnt((Integer)value);
      }
      break;

    case ONLINE_CNT:
      if (value == null) {
        unsetOnlineCnt();
      } else {
        setOnlineCnt((Integer)value);
      }
      break;

    case IS_ARCHIVE:
      if (value == null) {
        unsetIsArchive();
      } else {
        setIsArchive((Integer)value);
      }
      break;

    case IS_ARCHIVE_VAL:
      if (value == null) {
        unsetIsArchiveVal();
      } else {
        setIsArchiveVal((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case LOOKUP_VAL:
      if (value == null) {
        unsetLookupVal();
      } else {
        setLookupVal((String)value);
      }
      break;

    case BIZ_FILE_PID:
      if (value == null) {
        unsetBizFilePid();
      } else {
        setBizFilePid((Integer)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_FILE_ARCHIVE_PID:
      return Integer.valueOf(getProjectFileArchivePid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case ARCHIVE_CATELOG:
      return getArchiveCatelog();

    case ARCHIVE_FILE_NAME:
      return getArchiveFileName();

    case ARCHIVE_LOCATION:
      return getArchiveLocation();

    case OFFLINE_CNT:
      return Integer.valueOf(getOfflineCnt());

    case ONLINE_CNT:
      return Integer.valueOf(getOnlineCnt());

    case IS_ARCHIVE:
      return Integer.valueOf(getIsArchive());

    case IS_ARCHIVE_VAL:
      return getIsArchiveVal();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case LOOKUP_VAL:
      return getLookupVal();

    case BIZ_FILE_PID:
      return Integer.valueOf(getBizFilePid());

    case FILE_URL:
      return getFileUrl();

    case UPLOAD_DTTM:
      return getUploadDttm();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_FILE_ARCHIVE_PID:
      return isSetProjectFileArchivePid();
    case PROJECT_ID:
      return isSetProjectId();
    case FILE_ID:
      return isSetFileId();
    case ARCHIVE_CATELOG:
      return isSetArchiveCatelog();
    case ARCHIVE_FILE_NAME:
      return isSetArchiveFileName();
    case ARCHIVE_LOCATION:
      return isSetArchiveLocation();
    case OFFLINE_CNT:
      return isSetOfflineCnt();
    case ONLINE_CNT:
      return isSetOnlineCnt();
    case IS_ARCHIVE:
      return isSetIsArchive();
    case IS_ARCHIVE_VAL:
      return isSetIsArchiveVal();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case LOOKUP_VAL:
      return isSetLookupVal();
    case BIZ_FILE_PID:
      return isSetBizFilePid();
    case FILE_URL:
      return isSetFileUrl();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectFileArchiveAndTimeDTO)
      return this.equals((BizProjectFileArchiveAndTimeDTO)that);
    return false;
  }

  public boolean equals(BizProjectFileArchiveAndTimeDTO that) {
    if (that == null)
      return false;

    boolean this_present_projectFileArchivePid = true;
    boolean that_present_projectFileArchivePid = true;
    if (this_present_projectFileArchivePid || that_present_projectFileArchivePid) {
      if (!(this_present_projectFileArchivePid && that_present_projectFileArchivePid))
        return false;
      if (this.projectFileArchivePid != that.projectFileArchivePid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_archiveCatelog = true && this.isSetArchiveCatelog();
    boolean that_present_archiveCatelog = true && that.isSetArchiveCatelog();
    if (this_present_archiveCatelog || that_present_archiveCatelog) {
      if (!(this_present_archiveCatelog && that_present_archiveCatelog))
        return false;
      if (!this.archiveCatelog.equals(that.archiveCatelog))
        return false;
    }

    boolean this_present_archiveFileName = true && this.isSetArchiveFileName();
    boolean that_present_archiveFileName = true && that.isSetArchiveFileName();
    if (this_present_archiveFileName || that_present_archiveFileName) {
      if (!(this_present_archiveFileName && that_present_archiveFileName))
        return false;
      if (!this.archiveFileName.equals(that.archiveFileName))
        return false;
    }

    boolean this_present_archiveLocation = true && this.isSetArchiveLocation();
    boolean that_present_archiveLocation = true && that.isSetArchiveLocation();
    if (this_present_archiveLocation || that_present_archiveLocation) {
      if (!(this_present_archiveLocation && that_present_archiveLocation))
        return false;
      if (!this.archiveLocation.equals(that.archiveLocation))
        return false;
    }

    boolean this_present_offlineCnt = true;
    boolean that_present_offlineCnt = true;
    if (this_present_offlineCnt || that_present_offlineCnt) {
      if (!(this_present_offlineCnt && that_present_offlineCnt))
        return false;
      if (this.offlineCnt != that.offlineCnt)
        return false;
    }

    boolean this_present_onlineCnt = true;
    boolean that_present_onlineCnt = true;
    if (this_present_onlineCnt || that_present_onlineCnt) {
      if (!(this_present_onlineCnt && that_present_onlineCnt))
        return false;
      if (this.onlineCnt != that.onlineCnt)
        return false;
    }

    boolean this_present_isArchive = true;
    boolean that_present_isArchive = true;
    if (this_present_isArchive || that_present_isArchive) {
      if (!(this_present_isArchive && that_present_isArchive))
        return false;
      if (this.isArchive != that.isArchive)
        return false;
    }

    boolean this_present_isArchiveVal = true && this.isSetIsArchiveVal();
    boolean that_present_isArchiveVal = true && that.isSetIsArchiveVal();
    if (this_present_isArchiveVal || that_present_isArchiveVal) {
      if (!(this_present_isArchiveVal && that_present_isArchiveVal))
        return false;
      if (!this.isArchiveVal.equals(that.isArchiveVal))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_lookupVal = true && this.isSetLookupVal();
    boolean that_present_lookupVal = true && that.isSetLookupVal();
    if (this_present_lookupVal || that_present_lookupVal) {
      if (!(this_present_lookupVal && that_present_lookupVal))
        return false;
      if (!this.lookupVal.equals(that.lookupVal))
        return false;
    }

    boolean this_present_bizFilePid = true;
    boolean that_present_bizFilePid = true;
    if (this_present_bizFilePid || that_present_bizFilePid) {
      if (!(this_present_bizFilePid && that_present_bizFilePid))
        return false;
      if (this.bizFilePid != that.bizFilePid)
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectFileArchivePid = true;
    list.add(present_projectFileArchivePid);
    if (present_projectFileArchivePid)
      list.add(projectFileArchivePid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_archiveCatelog = true && (isSetArchiveCatelog());
    list.add(present_archiveCatelog);
    if (present_archiveCatelog)
      list.add(archiveCatelog);

    boolean present_archiveFileName = true && (isSetArchiveFileName());
    list.add(present_archiveFileName);
    if (present_archiveFileName)
      list.add(archiveFileName);

    boolean present_archiveLocation = true && (isSetArchiveLocation());
    list.add(present_archiveLocation);
    if (present_archiveLocation)
      list.add(archiveLocation);

    boolean present_offlineCnt = true;
    list.add(present_offlineCnt);
    if (present_offlineCnt)
      list.add(offlineCnt);

    boolean present_onlineCnt = true;
    list.add(present_onlineCnt);
    if (present_onlineCnt)
      list.add(onlineCnt);

    boolean present_isArchive = true;
    list.add(present_isArchive);
    if (present_isArchive)
      list.add(isArchive);

    boolean present_isArchiveVal = true && (isSetIsArchiveVal());
    list.add(present_isArchiveVal);
    if (present_isArchiveVal)
      list.add(isArchiveVal);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_lookupVal = true && (isSetLookupVal());
    list.add(present_lookupVal);
    if (present_lookupVal)
      list.add(lookupVal);

    boolean present_bizFilePid = true;
    list.add(present_bizFilePid);
    if (present_bizFilePid)
      list.add(bizFilePid);

    boolean present_fileUrl = true && (isSetFileUrl());
    list.add(present_fileUrl);
    if (present_fileUrl)
      list.add(fileUrl);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectFileArchiveAndTimeDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectFileArchivePid()).compareTo(other.isSetProjectFileArchivePid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectFileArchivePid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectFileArchivePid, other.projectFileArchivePid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveCatelog()).compareTo(other.isSetArchiveCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveCatelog, other.archiveCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveFileName()).compareTo(other.isSetArchiveFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveFileName, other.archiveFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveLocation()).compareTo(other.isSetArchiveLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveLocation, other.archiveLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfflineCnt()).compareTo(other.isSetOfflineCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineCnt, other.offlineCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineCnt()).compareTo(other.isSetOnlineCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineCnt, other.onlineCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArchive()).compareTo(other.isSetIsArchive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArchive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArchive, other.isArchive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsArchiveVal()).compareTo(other.isSetIsArchiveVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsArchiveVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isArchiveVal, other.isArchiveVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupVal()).compareTo(other.isSetLookupVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupVal, other.lookupVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizFilePid()).compareTo(other.isSetBizFilePid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizFilePid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizFilePid, other.bizFilePid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectFileArchiveAndTimeDTO(");
    boolean first = true;

    sb.append("projectFileArchivePid:");
    sb.append(this.projectFileArchivePid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveCatelog:");
    if (this.archiveCatelog == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveCatelog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveFileName:");
    if (this.archiveFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveFileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveLocation:");
    if (this.archiveLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.archiveLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offlineCnt:");
    sb.append(this.offlineCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineCnt:");
    sb.append(this.onlineCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArchive:");
    sb.append(this.isArchive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isArchiveVal:");
    if (this.isArchiveVal == null) {
      sb.append("null");
    } else {
      sb.append(this.isArchiveVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lookupVal:");
    if (this.lookupVal == null) {
      sb.append("null");
    } else {
      sb.append(this.lookupVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizFilePid:");
    sb.append(this.bizFilePid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectFileArchiveAndTimeDTOStandardSchemeFactory implements SchemeFactory {
    public BizProjectFileArchiveAndTimeDTOStandardScheme getScheme() {
      return new BizProjectFileArchiveAndTimeDTOStandardScheme();
    }
  }

  private static class BizProjectFileArchiveAndTimeDTOStandardScheme extends StandardScheme<BizProjectFileArchiveAndTimeDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectFileArchiveAndTimeDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_FILE_ARCHIVE_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectFileArchivePid = iprot.readI32();
              struct.setProjectFileArchivePidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARCHIVE_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveCatelog = iprot.readString();
              struct.setArchiveCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARCHIVE_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveFileName = iprot.readString();
              struct.setArchiveFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARCHIVE_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.archiveLocation = iprot.readString();
              struct.setArchiveLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OFFLINE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offlineCnt = iprot.readI32();
              struct.setOfflineCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ONLINE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onlineCnt = iprot.readI32();
              struct.setOnlineCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_ARCHIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isArchive = iprot.readI32();
              struct.setIsArchiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_ARCHIVE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isArchiveVal = iprot.readString();
              struct.setIsArchiveValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LOOKUP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupVal = iprot.readString();
              struct.setLookupValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BIZ_FILE_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizFilePid = iprot.readI32();
              struct.setBizFilePidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectFileArchiveAndTimeDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_FILE_ARCHIVE_PID_FIELD_DESC);
      oprot.writeI32(struct.projectFileArchivePid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      if (struct.archiveCatelog != null) {
        oprot.writeFieldBegin(ARCHIVE_CATELOG_FIELD_DESC);
        oprot.writeString(struct.archiveCatelog);
        oprot.writeFieldEnd();
      }
      if (struct.archiveFileName != null) {
        oprot.writeFieldBegin(ARCHIVE_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.archiveFileName);
        oprot.writeFieldEnd();
      }
      if (struct.archiveLocation != null) {
        oprot.writeFieldBegin(ARCHIVE_LOCATION_FIELD_DESC);
        oprot.writeString(struct.archiveLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFLINE_CNT_FIELD_DESC);
      oprot.writeI32(struct.offlineCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_CNT_FIELD_DESC);
      oprot.writeI32(struct.onlineCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ARCHIVE_FIELD_DESC);
      oprot.writeI32(struct.isArchive);
      oprot.writeFieldEnd();
      if (struct.isArchiveVal != null) {
        oprot.writeFieldBegin(IS_ARCHIVE_VAL_FIELD_DESC);
        oprot.writeString(struct.isArchiveVal);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.lookupVal != null) {
        oprot.writeFieldBegin(LOOKUP_VAL_FIELD_DESC);
        oprot.writeString(struct.lookupVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIZ_FILE_PID_FIELD_DESC);
      oprot.writeI32(struct.bizFilePid);
      oprot.writeFieldEnd();
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectFileArchiveAndTimeDTOTupleSchemeFactory implements SchemeFactory {
    public BizProjectFileArchiveAndTimeDTOTupleScheme getScheme() {
      return new BizProjectFileArchiveAndTimeDTOTupleScheme();
    }
  }

  private static class BizProjectFileArchiveAndTimeDTOTupleScheme extends TupleScheme<BizProjectFileArchiveAndTimeDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectFileArchiveAndTimeDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectFileArchivePid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetFileId()) {
        optionals.set(2);
      }
      if (struct.isSetArchiveCatelog()) {
        optionals.set(3);
      }
      if (struct.isSetArchiveFileName()) {
        optionals.set(4);
      }
      if (struct.isSetArchiveLocation()) {
        optionals.set(5);
      }
      if (struct.isSetOfflineCnt()) {
        optionals.set(6);
      }
      if (struct.isSetOnlineCnt()) {
        optionals.set(7);
      }
      if (struct.isSetIsArchive()) {
        optionals.set(8);
      }
      if (struct.isSetIsArchiveVal()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      if (struct.isSetLookupVal()) {
        optionals.set(12);
      }
      if (struct.isSetBizFilePid()) {
        optionals.set(13);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(14);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetProjectFileArchivePid()) {
        oprot.writeI32(struct.projectFileArchivePid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetArchiveCatelog()) {
        oprot.writeString(struct.archiveCatelog);
      }
      if (struct.isSetArchiveFileName()) {
        oprot.writeString(struct.archiveFileName);
      }
      if (struct.isSetArchiveLocation()) {
        oprot.writeString(struct.archiveLocation);
      }
      if (struct.isSetOfflineCnt()) {
        oprot.writeI32(struct.offlineCnt);
      }
      if (struct.isSetOnlineCnt()) {
        oprot.writeI32(struct.onlineCnt);
      }
      if (struct.isSetIsArchive()) {
        oprot.writeI32(struct.isArchive);
      }
      if (struct.isSetIsArchiveVal()) {
        oprot.writeString(struct.isArchiveVal);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetLookupVal()) {
        oprot.writeString(struct.lookupVal);
      }
      if (struct.isSetBizFilePid()) {
        oprot.writeI32(struct.bizFilePid);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectFileArchiveAndTimeDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.projectFileArchivePid = iprot.readI32();
        struct.setProjectFileArchivePidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.archiveCatelog = iprot.readString();
        struct.setArchiveCatelogIsSet(true);
      }
      if (incoming.get(4)) {
        struct.archiveFileName = iprot.readString();
        struct.setArchiveFileNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.archiveLocation = iprot.readString();
        struct.setArchiveLocationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.offlineCnt = iprot.readI32();
        struct.setOfflineCntIsSet(true);
      }
      if (incoming.get(7)) {
        struct.onlineCnt = iprot.readI32();
        struct.setOnlineCntIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isArchive = iprot.readI32();
        struct.setIsArchiveIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isArchiveVal = iprot.readString();
        struct.setIsArchiveValIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lookupVal = iprot.readString();
        struct.setLookupValIsSet(true);
      }
      if (incoming.get(13)) {
        struct.bizFilePid = iprot.readI32();
        struct.setBizFilePidIsSet(true);
      }
      if (incoming.get(14)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
    }
  }

}


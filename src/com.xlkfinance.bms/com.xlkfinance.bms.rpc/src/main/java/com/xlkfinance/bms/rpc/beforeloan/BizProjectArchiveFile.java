/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectArchiveFile implements org.apache.thrift.TBase<BizProjectArchiveFile, BizProjectArchiveFile._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectArchiveFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectArchiveFile");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ARCHIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("archiveId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_BUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBusType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FILE_BUS_TYPE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileBusTypeValue", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("fileRemark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_ARCHIVE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileArchiveId", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectArchiveFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectArchiveFileTupleSchemeFactory());
  }

  public int pid; // required
  public int archiveId; // required
  public int fileId; // required
  public int fileBusType; // required
  public String fileBusTypeValue; // required
  public String fileRemark; // required
  public int status; // required
  public int fileArchiveId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ARCHIVE_ID((short)2, "archiveId"),
    FILE_ID((short)3, "fileId"),
    FILE_BUS_TYPE((short)4, "fileBusType"),
    FILE_BUS_TYPE_VALUE((short)5, "fileBusTypeValue"),
    FILE_REMARK((short)6, "fileRemark"),
    STATUS((short)7, "status"),
    FILE_ARCHIVE_ID((short)8, "fileArchiveId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ARCHIVE_ID
          return ARCHIVE_ID;
        case 3: // FILE_ID
          return FILE_ID;
        case 4: // FILE_BUS_TYPE
          return FILE_BUS_TYPE;
        case 5: // FILE_BUS_TYPE_VALUE
          return FILE_BUS_TYPE_VALUE;
        case 6: // FILE_REMARK
          return FILE_REMARK;
        case 7: // STATUS
          return STATUS;
        case 8: // FILE_ARCHIVE_ID
          return FILE_ARCHIVE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ARCHIVEID_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __FILEBUSTYPE_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __FILEARCHIVEID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARCHIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("archiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_BUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileBusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_BUS_TYPE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("fileBusTypeValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("fileRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_ARCHIVE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileArchiveId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectArchiveFile.class, metaDataMap);
  }

  public BizProjectArchiveFile() {
  }

  public BizProjectArchiveFile(
    int pid,
    int archiveId,
    int fileId,
    int fileBusType,
    String fileBusTypeValue,
    String fileRemark,
    int status,
    int fileArchiveId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.archiveId = archiveId;
    setArchiveIdIsSet(true);
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.fileBusType = fileBusType;
    setFileBusTypeIsSet(true);
    this.fileBusTypeValue = fileBusTypeValue;
    this.fileRemark = fileRemark;
    this.status = status;
    setStatusIsSet(true);
    this.fileArchiveId = fileArchiveId;
    setFileArchiveIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectArchiveFile(BizProjectArchiveFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.archiveId = other.archiveId;
    this.fileId = other.fileId;
    this.fileBusType = other.fileBusType;
    if (other.isSetFileBusTypeValue()) {
      this.fileBusTypeValue = other.fileBusTypeValue;
    }
    if (other.isSetFileRemark()) {
      this.fileRemark = other.fileRemark;
    }
    this.status = other.status;
    this.fileArchiveId = other.fileArchiveId;
  }

  public BizProjectArchiveFile deepCopy() {
    return new BizProjectArchiveFile(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setArchiveIdIsSet(false);
    this.archiveId = 0;
    setFileIdIsSet(false);
    this.fileId = 0;
    setFileBusTypeIsSet(false);
    this.fileBusType = 0;
    this.fileBusTypeValue = null;
    this.fileRemark = null;
    setStatusIsSet(false);
    this.status = 0;
    setFileArchiveIdIsSet(false);
    this.fileArchiveId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectArchiveFile setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getArchiveId() {
    return this.archiveId;
  }

  public BizProjectArchiveFile setArchiveId(int archiveId) {
    this.archiveId = archiveId;
    setArchiveIdIsSet(true);
    return this;
  }

  public void unsetArchiveId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEID_ISSET_ID);
  }

  /** Returns true if field archiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetArchiveId() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEID_ISSET_ID);
  }

  public void setArchiveIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEID_ISSET_ID, value);
  }

  public int getFileId() {
    return this.fileId;
  }

  public BizProjectArchiveFile setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public int getFileBusType() {
    return this.fileBusType;
  }

  public BizProjectArchiveFile setFileBusType(int fileBusType) {
    this.fileBusType = fileBusType;
    setFileBusTypeIsSet(true);
    return this;
  }

  public void unsetFileBusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEBUSTYPE_ISSET_ID);
  }

  /** Returns true if field fileBusType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileBusType() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEBUSTYPE_ISSET_ID);
  }

  public void setFileBusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEBUSTYPE_ISSET_ID, value);
  }

  public String getFileBusTypeValue() {
    return this.fileBusTypeValue;
  }

  public BizProjectArchiveFile setFileBusTypeValue(String fileBusTypeValue) {
    this.fileBusTypeValue = fileBusTypeValue;
    return this;
  }

  public void unsetFileBusTypeValue() {
    this.fileBusTypeValue = null;
  }

  /** Returns true if field fileBusTypeValue is set (has been assigned a value) and false otherwise */
  public boolean isSetFileBusTypeValue() {
    return this.fileBusTypeValue != null;
  }

  public void setFileBusTypeValueIsSet(boolean value) {
    if (!value) {
      this.fileBusTypeValue = null;
    }
  }

  public String getFileRemark() {
    return this.fileRemark;
  }

  public BizProjectArchiveFile setFileRemark(String fileRemark) {
    this.fileRemark = fileRemark;
    return this;
  }

  public void unsetFileRemark() {
    this.fileRemark = null;
  }

  /** Returns true if field fileRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetFileRemark() {
    return this.fileRemark != null;
  }

  public void setFileRemarkIsSet(boolean value) {
    if (!value) {
      this.fileRemark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizProjectArchiveFile setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getFileArchiveId() {
    return this.fileArchiveId;
  }

  public BizProjectArchiveFile setFileArchiveId(int fileArchiveId) {
    this.fileArchiveId = fileArchiveId;
    setFileArchiveIdIsSet(true);
    return this;
  }

  public void unsetFileArchiveId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEARCHIVEID_ISSET_ID);
  }

  /** Returns true if field fileArchiveId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileArchiveId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEARCHIVEID_ISSET_ID);
  }

  public void setFileArchiveIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEARCHIVEID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ARCHIVE_ID:
      if (value == null) {
        unsetArchiveId();
      } else {
        setArchiveId((Integer)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case FILE_BUS_TYPE:
      if (value == null) {
        unsetFileBusType();
      } else {
        setFileBusType((Integer)value);
      }
      break;

    case FILE_BUS_TYPE_VALUE:
      if (value == null) {
        unsetFileBusTypeValue();
      } else {
        setFileBusTypeValue((String)value);
      }
      break;

    case FILE_REMARK:
      if (value == null) {
        unsetFileRemark();
      } else {
        setFileRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FILE_ARCHIVE_ID:
      if (value == null) {
        unsetFileArchiveId();
      } else {
        setFileArchiveId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ARCHIVE_ID:
      return Integer.valueOf(getArchiveId());

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case FILE_BUS_TYPE:
      return Integer.valueOf(getFileBusType());

    case FILE_BUS_TYPE_VALUE:
      return getFileBusTypeValue();

    case FILE_REMARK:
      return getFileRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case FILE_ARCHIVE_ID:
      return Integer.valueOf(getFileArchiveId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ARCHIVE_ID:
      return isSetArchiveId();
    case FILE_ID:
      return isSetFileId();
    case FILE_BUS_TYPE:
      return isSetFileBusType();
    case FILE_BUS_TYPE_VALUE:
      return isSetFileBusTypeValue();
    case FILE_REMARK:
      return isSetFileRemark();
    case STATUS:
      return isSetStatus();
    case FILE_ARCHIVE_ID:
      return isSetFileArchiveId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectArchiveFile)
      return this.equals((BizProjectArchiveFile)that);
    return false;
  }

  public boolean equals(BizProjectArchiveFile that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_archiveId = true;
    boolean that_present_archiveId = true;
    if (this_present_archiveId || that_present_archiveId) {
      if (!(this_present_archiveId && that_present_archiveId))
        return false;
      if (this.archiveId != that.archiveId)
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_fileBusType = true;
    boolean that_present_fileBusType = true;
    if (this_present_fileBusType || that_present_fileBusType) {
      if (!(this_present_fileBusType && that_present_fileBusType))
        return false;
      if (this.fileBusType != that.fileBusType)
        return false;
    }

    boolean this_present_fileBusTypeValue = true && this.isSetFileBusTypeValue();
    boolean that_present_fileBusTypeValue = true && that.isSetFileBusTypeValue();
    if (this_present_fileBusTypeValue || that_present_fileBusTypeValue) {
      if (!(this_present_fileBusTypeValue && that_present_fileBusTypeValue))
        return false;
      if (!this.fileBusTypeValue.equals(that.fileBusTypeValue))
        return false;
    }

    boolean this_present_fileRemark = true && this.isSetFileRemark();
    boolean that_present_fileRemark = true && that.isSetFileRemark();
    if (this_present_fileRemark || that_present_fileRemark) {
      if (!(this_present_fileRemark && that_present_fileRemark))
        return false;
      if (!this.fileRemark.equals(that.fileRemark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_fileArchiveId = true;
    boolean that_present_fileArchiveId = true;
    if (this_present_fileArchiveId || that_present_fileArchiveId) {
      if (!(this_present_fileArchiveId && that_present_fileArchiveId))
        return false;
      if (this.fileArchiveId != that.fileArchiveId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_archiveId = true;
    list.add(present_archiveId);
    if (present_archiveId)
      list.add(archiveId);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_fileBusType = true;
    list.add(present_fileBusType);
    if (present_fileBusType)
      list.add(fileBusType);

    boolean present_fileBusTypeValue = true && (isSetFileBusTypeValue());
    list.add(present_fileBusTypeValue);
    if (present_fileBusTypeValue)
      list.add(fileBusTypeValue);

    boolean present_fileRemark = true && (isSetFileRemark());
    list.add(present_fileRemark);
    if (present_fileRemark)
      list.add(fileRemark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_fileArchiveId = true;
    list.add(present_fileArchiveId);
    if (present_fileArchiveId)
      list.add(fileArchiveId);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectArchiveFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchiveId()).compareTo(other.isSetArchiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archiveId, other.archiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileBusType()).compareTo(other.isSetFileBusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileBusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBusType, other.fileBusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileBusTypeValue()).compareTo(other.isSetFileBusTypeValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileBusTypeValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileBusTypeValue, other.fileBusTypeValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileRemark()).compareTo(other.isSetFileRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileRemark, other.fileRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileArchiveId()).compareTo(other.isSetFileArchiveId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileArchiveId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileArchiveId, other.fileArchiveId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectArchiveFile(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("archiveId:");
    sb.append(this.archiveId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileBusType:");
    sb.append(this.fileBusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileBusTypeValue:");
    if (this.fileBusTypeValue == null) {
      sb.append("null");
    } else {
      sb.append(this.fileBusTypeValue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileRemark:");
    if (this.fileRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.fileRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileArchiveId:");
    sb.append(this.fileArchiveId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectArchiveFileStandardSchemeFactory implements SchemeFactory {
    public BizProjectArchiveFileStandardScheme getScheme() {
      return new BizProjectArchiveFileStandardScheme();
    }
  }

  private static class BizProjectArchiveFileStandardScheme extends StandardScheme<BizProjectArchiveFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectArchiveFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARCHIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.archiveId = iprot.readI32();
              struct.setArchiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_BUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileBusType = iprot.readI32();
              struct.setFileBusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FILE_BUS_TYPE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileBusTypeValue = iprot.readString();
              struct.setFileBusTypeValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileRemark = iprot.readString();
              struct.setFileRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_ARCHIVE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileArchiveId = iprot.readI32();
              struct.setFileArchiveIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectArchiveFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARCHIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.archiveId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_BUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.fileBusType);
      oprot.writeFieldEnd();
      if (struct.fileBusTypeValue != null) {
        oprot.writeFieldBegin(FILE_BUS_TYPE_VALUE_FIELD_DESC);
        oprot.writeString(struct.fileBusTypeValue);
        oprot.writeFieldEnd();
      }
      if (struct.fileRemark != null) {
        oprot.writeFieldBegin(FILE_REMARK_FIELD_DESC);
        oprot.writeString(struct.fileRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FILE_ARCHIVE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileArchiveId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectArchiveFileTupleSchemeFactory implements SchemeFactory {
    public BizProjectArchiveFileTupleScheme getScheme() {
      return new BizProjectArchiveFileTupleScheme();
    }
  }

  private static class BizProjectArchiveFileTupleScheme extends TupleScheme<BizProjectArchiveFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectArchiveFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetArchiveId()) {
        optionals.set(1);
      }
      if (struct.isSetFileId()) {
        optionals.set(2);
      }
      if (struct.isSetFileBusType()) {
        optionals.set(3);
      }
      if (struct.isSetFileBusTypeValue()) {
        optionals.set(4);
      }
      if (struct.isSetFileRemark()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetFileArchiveId()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetArchiveId()) {
        oprot.writeI32(struct.archiveId);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetFileBusType()) {
        oprot.writeI32(struct.fileBusType);
      }
      if (struct.isSetFileBusTypeValue()) {
        oprot.writeString(struct.fileBusTypeValue);
      }
      if (struct.isSetFileRemark()) {
        oprot.writeString(struct.fileRemark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFileArchiveId()) {
        oprot.writeI32(struct.fileArchiveId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectArchiveFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.archiveId = iprot.readI32();
        struct.setArchiveIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileBusType = iprot.readI32();
        struct.setFileBusTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.fileBusTypeValue = iprot.readString();
        struct.setFileBusTypeValueIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileRemark = iprot.readString();
        struct.setFileRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileArchiveId = iprot.readI32();
        struct.setFileArchiveIdIsSet(true);
      }
    }
  }

}


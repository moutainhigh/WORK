/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 系统用户
 * 表：SYS_USER
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysUser implements org.apache.thrift.TBase<SysUser, SysUser._Fields>, java.io.Serializable, Cloneable, Comparable<SysUser> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysUser");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField JOB_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTitle", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mail", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("photoUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PERSONAL_QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("personalQQ", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ENTERPRISE_QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("enterpriseQQ", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField WORK_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("workPhone", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField EXTENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("extension", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField SUPERIOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("superiorId", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField SUPERIOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("superiorName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField DEVICE_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceToken", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ROLES_FIELD_DESC = new org.apache.thrift.protocol.TField("roles", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField ROLE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("roleCode", org.apache.thrift.protocol.TType.STRING, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysUserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysUserTupleSchemeFactory());
  }

  public int pid; // required
  public String userName; // required
  public String realName; // required
  public String memberId; // required
  public int status; // required
  public String department; // required
  public String jobTitle; // required
  public String mail; // required
  public String pwd; // required
  public String photoUrl; // required
  public String token; // required
  public String personalQQ; // required
  public String enterpriseQQ; // required
  public String phone; // required
  public String workPhone; // required
  public String extension; // required
  public int superiorId; // required
  public String superiorName; // required
  public int orgId; // required
  public int page; // required
  public int rows; // required
  public String deviceToken; // required
  public String orgName; // required
  public List<SysRole> roles; // required
  public List<Integer> userIds; // required
  public String roleCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    USER_NAME((short)2, "userName"),
    REAL_NAME((short)3, "realName"),
    MEMBER_ID((short)4, "memberId"),
    STATUS((short)5, "status"),
    DEPARTMENT((short)6, "department"),
    JOB_TITLE((short)7, "jobTitle"),
    MAIL((short)8, "mail"),
    PWD((short)9, "pwd"),
    PHOTO_URL((short)10, "photoUrl"),
    TOKEN((short)11, "token"),
    PERSONAL_QQ((short)12, "personalQQ"),
    ENTERPRISE_QQ((short)13, "enterpriseQQ"),
    PHONE((short)14, "phone"),
    WORK_PHONE((short)15, "workPhone"),
    EXTENSION((short)16, "extension"),
    SUPERIOR_ID((short)17, "superiorId"),
    SUPERIOR_NAME((short)18, "superiorName"),
    ORG_ID((short)19, "orgId"),
    PAGE((short)20, "page"),
    ROWS((short)21, "rows"),
    DEVICE_TOKEN((short)22, "deviceToken"),
    ORG_NAME((short)23, "orgName"),
    ROLES((short)24, "roles"),
    USER_IDS((short)25, "userIds"),
    ROLE_CODE((short)26, "roleCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // REAL_NAME
          return REAL_NAME;
        case 4: // MEMBER_ID
          return MEMBER_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // DEPARTMENT
          return DEPARTMENT;
        case 7: // JOB_TITLE
          return JOB_TITLE;
        case 8: // MAIL
          return MAIL;
        case 9: // PWD
          return PWD;
        case 10: // PHOTO_URL
          return PHOTO_URL;
        case 11: // TOKEN
          return TOKEN;
        case 12: // PERSONAL_QQ
          return PERSONAL_QQ;
        case 13: // ENTERPRISE_QQ
          return ENTERPRISE_QQ;
        case 14: // PHONE
          return PHONE;
        case 15: // WORK_PHONE
          return WORK_PHONE;
        case 16: // EXTENSION
          return EXTENSION;
        case 17: // SUPERIOR_ID
          return SUPERIOR_ID;
        case 18: // SUPERIOR_NAME
          return SUPERIOR_NAME;
        case 19: // ORG_ID
          return ORG_ID;
        case 20: // PAGE
          return PAGE;
        case 21: // ROWS
          return ROWS;
        case 22: // DEVICE_TOKEN
          return DEVICE_TOKEN;
        case 23: // ORG_NAME
          return ORG_NAME;
        case 24: // ROLES
          return ROLES;
        case 25: // USER_IDS
          return USER_IDS;
        case 26: // ROLE_CODE
          return ROLE_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __SUPERIORID_ISSET_ID = 2;
  private static final int __ORGID_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TITLE, new org.apache.thrift.meta_data.FieldMetaData("jobTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL, new org.apache.thrift.meta_data.FieldMetaData("mail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("photoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSONAL_QQ, new org.apache.thrift.meta_data.FieldMetaData("personalQQ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTERPRISE_QQ, new org.apache.thrift.meta_data.FieldMetaData("enterpriseQQ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_PHONE, new org.apache.thrift.meta_data.FieldMetaData("workPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION, new org.apache.thrift.meta_data.FieldMetaData("extension", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUPERIOR_ID, new org.apache.thrift.meta_data.FieldMetaData("superiorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPERIOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("superiorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("deviceToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLES, new org.apache.thrift.meta_data.FieldMetaData("roles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SysRole.class))));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ROLE_CODE, new org.apache.thrift.meta_data.FieldMetaData("roleCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysUser.class, metaDataMap);
  }

  public SysUser() {
  }

  public SysUser(
    int pid,
    String userName,
    String realName,
    String memberId,
    int status,
    String department,
    String jobTitle,
    String mail,
    String pwd,
    String photoUrl,
    String token,
    String personalQQ,
    String enterpriseQQ,
    String phone,
    String workPhone,
    String extension,
    int superiorId,
    String superiorName,
    int orgId,
    int page,
    int rows,
    String deviceToken,
    String orgName,
    List<SysRole> roles,
    List<Integer> userIds,
    String roleCode)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.userName = userName;
    this.realName = realName;
    this.memberId = memberId;
    this.status = status;
    setStatusIsSet(true);
    this.department = department;
    this.jobTitle = jobTitle;
    this.mail = mail;
    this.pwd = pwd;
    this.photoUrl = photoUrl;
    this.token = token;
    this.personalQQ = personalQQ;
    this.enterpriseQQ = enterpriseQQ;
    this.phone = phone;
    this.workPhone = workPhone;
    this.extension = extension;
    this.superiorId = superiorId;
    setSuperiorIdIsSet(true);
    this.superiorName = superiorName;
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.deviceToken = deviceToken;
    this.orgName = orgName;
    this.roles = roles;
    this.userIds = userIds;
    this.roleCode = roleCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysUser(SysUser other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetMemberId()) {
      this.memberId = other.memberId;
    }
    this.status = other.status;
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetJobTitle()) {
      this.jobTitle = other.jobTitle;
    }
    if (other.isSetMail()) {
      this.mail = other.mail;
    }
    if (other.isSetPwd()) {
      this.pwd = other.pwd;
    }
    if (other.isSetPhotoUrl()) {
      this.photoUrl = other.photoUrl;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetPersonalQQ()) {
      this.personalQQ = other.personalQQ;
    }
    if (other.isSetEnterpriseQQ()) {
      this.enterpriseQQ = other.enterpriseQQ;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetWorkPhone()) {
      this.workPhone = other.workPhone;
    }
    if (other.isSetExtension()) {
      this.extension = other.extension;
    }
    this.superiorId = other.superiorId;
    if (other.isSetSuperiorName()) {
      this.superiorName = other.superiorName;
    }
    this.orgId = other.orgId;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetDeviceToken()) {
      this.deviceToken = other.deviceToken;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetRoles()) {
      List<SysRole> __this__roles = new ArrayList<SysRole>(other.roles.size());
      for (SysRole other_element : other.roles) {
        __this__roles.add(new SysRole(other_element));
      }
      this.roles = __this__roles;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    if (other.isSetRoleCode()) {
      this.roleCode = other.roleCode;
    }
  }

  public SysUser deepCopy() {
    return new SysUser(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.userName = null;
    this.realName = null;
    this.memberId = null;
    setStatusIsSet(false);
    this.status = 0;
    this.department = null;
    this.jobTitle = null;
    this.mail = null;
    this.pwd = null;
    this.photoUrl = null;
    this.token = null;
    this.personalQQ = null;
    this.enterpriseQQ = null;
    this.phone = null;
    this.workPhone = null;
    this.extension = null;
    setSuperiorIdIsSet(false);
    this.superiorId = 0;
    this.superiorName = null;
    setOrgIdIsSet(false);
    this.orgId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.deviceToken = null;
    this.orgName = null;
    this.roles = null;
    this.userIds = null;
    this.roleCode = null;
  }

  public int getPid() {
    return this.pid;
  }

  public SysUser setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public SysUser setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public SysUser setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getMemberId() {
    return this.memberId;
  }

  public SysUser setMemberId(String memberId) {
    this.memberId = memberId;
    return this;
  }

  public void unsetMemberId() {
    this.memberId = null;
  }

  /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberId() {
    return this.memberId != null;
  }

  public void setMemberIdIsSet(boolean value) {
    if (!value) {
      this.memberId = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SysUser setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getDepartment() {
    return this.department;
  }

  public SysUser setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public String getJobTitle() {
    return this.jobTitle;
  }

  public SysUser setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  public void unsetJobTitle() {
    this.jobTitle = null;
  }

  /** Returns true if field jobTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTitle() {
    return this.jobTitle != null;
  }

  public void setJobTitleIsSet(boolean value) {
    if (!value) {
      this.jobTitle = null;
    }
  }

  public String getMail() {
    return this.mail;
  }

  public SysUser setMail(String mail) {
    this.mail = mail;
    return this;
  }

  public void unsetMail() {
    this.mail = null;
  }

  /** Returns true if field mail is set (has been assigned a value) and false otherwise */
  public boolean isSetMail() {
    return this.mail != null;
  }

  public void setMailIsSet(boolean value) {
    if (!value) {
      this.mail = null;
    }
  }

  public String getPwd() {
    return this.pwd;
  }

  public SysUser setPwd(String pwd) {
    this.pwd = pwd;
    return this;
  }

  public void unsetPwd() {
    this.pwd = null;
  }

  /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPwd() {
    return this.pwd != null;
  }

  public void setPwdIsSet(boolean value) {
    if (!value) {
      this.pwd = null;
    }
  }

  public String getPhotoUrl() {
    return this.photoUrl;
  }

  public SysUser setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  public void unsetPhotoUrl() {
    this.photoUrl = null;
  }

  /** Returns true if field photoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoUrl() {
    return this.photoUrl != null;
  }

  public void setPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.photoUrl = null;
    }
  }

  public String getToken() {
    return this.token;
  }

  public SysUser setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getPersonalQQ() {
    return this.personalQQ;
  }

  public SysUser setPersonalQQ(String personalQQ) {
    this.personalQQ = personalQQ;
    return this;
  }

  public void unsetPersonalQQ() {
    this.personalQQ = null;
  }

  /** Returns true if field personalQQ is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonalQQ() {
    return this.personalQQ != null;
  }

  public void setPersonalQQIsSet(boolean value) {
    if (!value) {
      this.personalQQ = null;
    }
  }

  public String getEnterpriseQQ() {
    return this.enterpriseQQ;
  }

  public SysUser setEnterpriseQQ(String enterpriseQQ) {
    this.enterpriseQQ = enterpriseQQ;
    return this;
  }

  public void unsetEnterpriseQQ() {
    this.enterpriseQQ = null;
  }

  /** Returns true if field enterpriseQQ is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterpriseQQ() {
    return this.enterpriseQQ != null;
  }

  public void setEnterpriseQQIsSet(boolean value) {
    if (!value) {
      this.enterpriseQQ = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public SysUser setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getWorkPhone() {
    return this.workPhone;
  }

  public SysUser setWorkPhone(String workPhone) {
    this.workPhone = workPhone;
    return this;
  }

  public void unsetWorkPhone() {
    this.workPhone = null;
  }

  /** Returns true if field workPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkPhone() {
    return this.workPhone != null;
  }

  public void setWorkPhoneIsSet(boolean value) {
    if (!value) {
      this.workPhone = null;
    }
  }

  public String getExtension() {
    return this.extension;
  }

  public SysUser setExtension(String extension) {
    this.extension = extension;
    return this;
  }

  public void unsetExtension() {
    this.extension = null;
  }

  /** Returns true if field extension is set (has been assigned a value) and false otherwise */
  public boolean isSetExtension() {
    return this.extension != null;
  }

  public void setExtensionIsSet(boolean value) {
    if (!value) {
      this.extension = null;
    }
  }

  public int getSuperiorId() {
    return this.superiorId;
  }

  public SysUser setSuperiorId(int superiorId) {
    this.superiorId = superiorId;
    setSuperiorIdIsSet(true);
    return this;
  }

  public void unsetSuperiorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERIORID_ISSET_ID);
  }

  /** Returns true if field superiorId is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERIORID_ISSET_ID);
  }

  public void setSuperiorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERIORID_ISSET_ID, value);
  }

  public String getSuperiorName() {
    return this.superiorName;
  }

  public SysUser setSuperiorName(String superiorName) {
    this.superiorName = superiorName;
    return this;
  }

  public void unsetSuperiorName() {
    this.superiorName = null;
  }

  /** Returns true if field superiorName is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorName() {
    return this.superiorName != null;
  }

  public void setSuperiorNameIsSet(boolean value) {
    if (!value) {
      this.superiorName = null;
    }
  }

  public int getOrgId() {
    return this.orgId;
  }

  public SysUser setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public SysUser setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysUser setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getDeviceToken() {
    return this.deviceToken;
  }

  public SysUser setDeviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  public void unsetDeviceToken() {
    this.deviceToken = null;
  }

  /** Returns true if field deviceToken is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceToken() {
    return this.deviceToken != null;
  }

  public void setDeviceTokenIsSet(boolean value) {
    if (!value) {
      this.deviceToken = null;
    }
  }

  public String getOrgName() {
    return this.orgName;
  }

  public SysUser setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public int getRolesSize() {
    return (this.roles == null) ? 0 : this.roles.size();
  }

  public java.util.Iterator<SysRole> getRolesIterator() {
    return (this.roles == null) ? null : this.roles.iterator();
  }

  public void addToRoles(SysRole elem) {
    if (this.roles == null) {
      this.roles = new ArrayList<SysRole>();
    }
    this.roles.add(elem);
  }

  public List<SysRole> getRoles() {
    return this.roles;
  }

  public SysUser setRoles(List<SysRole> roles) {
    this.roles = roles;
    return this;
  }

  public void unsetRoles() {
    this.roles = null;
  }

  /** Returns true if field roles is set (has been assigned a value) and false otherwise */
  public boolean isSetRoles() {
    return this.roles != null;
  }

  public void setRolesIsSet(boolean value) {
    if (!value) {
      this.roles = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public SysUser setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public String getRoleCode() {
    return this.roleCode;
  }

  public SysUser setRoleCode(String roleCode) {
    this.roleCode = roleCode;
    return this;
  }

  public void unsetRoleCode() {
    this.roleCode = null;
  }

  /** Returns true if field roleCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleCode() {
    return this.roleCode != null;
  }

  public void setRoleCodeIsSet(boolean value) {
    if (!value) {
      this.roleCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case MEMBER_ID:
      if (value == null) {
        unsetMemberId();
      } else {
        setMemberId((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case JOB_TITLE:
      if (value == null) {
        unsetJobTitle();
      } else {
        setJobTitle((String)value);
      }
      break;

    case MAIL:
      if (value == null) {
        unsetMail();
      } else {
        setMail((String)value);
      }
      break;

    case PWD:
      if (value == null) {
        unsetPwd();
      } else {
        setPwd((String)value);
      }
      break;

    case PHOTO_URL:
      if (value == null) {
        unsetPhotoUrl();
      } else {
        setPhotoUrl((String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case PERSONAL_QQ:
      if (value == null) {
        unsetPersonalQQ();
      } else {
        setPersonalQQ((String)value);
      }
      break;

    case ENTERPRISE_QQ:
      if (value == null) {
        unsetEnterpriseQQ();
      } else {
        setEnterpriseQQ((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case WORK_PHONE:
      if (value == null) {
        unsetWorkPhone();
      } else {
        setWorkPhone((String)value);
      }
      break;

    case EXTENSION:
      if (value == null) {
        unsetExtension();
      } else {
        setExtension((String)value);
      }
      break;

    case SUPERIOR_ID:
      if (value == null) {
        unsetSuperiorId();
      } else {
        setSuperiorId((Integer)value);
      }
      break;

    case SUPERIOR_NAME:
      if (value == null) {
        unsetSuperiorName();
      } else {
        setSuperiorName((String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case DEVICE_TOKEN:
      if (value == null) {
        unsetDeviceToken();
      } else {
        setDeviceToken((String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case ROLES:
      if (value == null) {
        unsetRoles();
      } else {
        setRoles((List<SysRole>)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case ROLE_CODE:
      if (value == null) {
        unsetRoleCode();
      } else {
        setRoleCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case USER_NAME:
      return getUserName();

    case REAL_NAME:
      return getRealName();

    case MEMBER_ID:
      return getMemberId();

    case STATUS:
      return Integer.valueOf(getStatus());

    case DEPARTMENT:
      return getDepartment();

    case JOB_TITLE:
      return getJobTitle();

    case MAIL:
      return getMail();

    case PWD:
      return getPwd();

    case PHOTO_URL:
      return getPhotoUrl();

    case TOKEN:
      return getToken();

    case PERSONAL_QQ:
      return getPersonalQQ();

    case ENTERPRISE_QQ:
      return getEnterpriseQQ();

    case PHONE:
      return getPhone();

    case WORK_PHONE:
      return getWorkPhone();

    case EXTENSION:
      return getExtension();

    case SUPERIOR_ID:
      return Integer.valueOf(getSuperiorId());

    case SUPERIOR_NAME:
      return getSuperiorName();

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case DEVICE_TOKEN:
      return getDeviceToken();

    case ORG_NAME:
      return getOrgName();

    case ROLES:
      return getRoles();

    case USER_IDS:
      return getUserIds();

    case ROLE_CODE:
      return getRoleCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case USER_NAME:
      return isSetUserName();
    case REAL_NAME:
      return isSetRealName();
    case MEMBER_ID:
      return isSetMemberId();
    case STATUS:
      return isSetStatus();
    case DEPARTMENT:
      return isSetDepartment();
    case JOB_TITLE:
      return isSetJobTitle();
    case MAIL:
      return isSetMail();
    case PWD:
      return isSetPwd();
    case PHOTO_URL:
      return isSetPhotoUrl();
    case TOKEN:
      return isSetToken();
    case PERSONAL_QQ:
      return isSetPersonalQQ();
    case ENTERPRISE_QQ:
      return isSetEnterpriseQQ();
    case PHONE:
      return isSetPhone();
    case WORK_PHONE:
      return isSetWorkPhone();
    case EXTENSION:
      return isSetExtension();
    case SUPERIOR_ID:
      return isSetSuperiorId();
    case SUPERIOR_NAME:
      return isSetSuperiorName();
    case ORG_ID:
      return isSetOrgId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case DEVICE_TOKEN:
      return isSetDeviceToken();
    case ORG_NAME:
      return isSetOrgName();
    case ROLES:
      return isSetRoles();
    case USER_IDS:
      return isSetUserIds();
    case ROLE_CODE:
      return isSetRoleCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysUser)
      return this.equals((SysUser)that);
    return false;
  }

  public boolean equals(SysUser that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_memberId = true && this.isSetMemberId();
    boolean that_present_memberId = true && that.isSetMemberId();
    if (this_present_memberId || that_present_memberId) {
      if (!(this_present_memberId && that_present_memberId))
        return false;
      if (!this.memberId.equals(that.memberId))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_jobTitle = true && this.isSetJobTitle();
    boolean that_present_jobTitle = true && that.isSetJobTitle();
    if (this_present_jobTitle || that_present_jobTitle) {
      if (!(this_present_jobTitle && that_present_jobTitle))
        return false;
      if (!this.jobTitle.equals(that.jobTitle))
        return false;
    }

    boolean this_present_mail = true && this.isSetMail();
    boolean that_present_mail = true && that.isSetMail();
    if (this_present_mail || that_present_mail) {
      if (!(this_present_mail && that_present_mail))
        return false;
      if (!this.mail.equals(that.mail))
        return false;
    }

    boolean this_present_pwd = true && this.isSetPwd();
    boolean that_present_pwd = true && that.isSetPwd();
    if (this_present_pwd || that_present_pwd) {
      if (!(this_present_pwd && that_present_pwd))
        return false;
      if (!this.pwd.equals(that.pwd))
        return false;
    }

    boolean this_present_photoUrl = true && this.isSetPhotoUrl();
    boolean that_present_photoUrl = true && that.isSetPhotoUrl();
    if (this_present_photoUrl || that_present_photoUrl) {
      if (!(this_present_photoUrl && that_present_photoUrl))
        return false;
      if (!this.photoUrl.equals(that.photoUrl))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_personalQQ = true && this.isSetPersonalQQ();
    boolean that_present_personalQQ = true && that.isSetPersonalQQ();
    if (this_present_personalQQ || that_present_personalQQ) {
      if (!(this_present_personalQQ && that_present_personalQQ))
        return false;
      if (!this.personalQQ.equals(that.personalQQ))
        return false;
    }

    boolean this_present_enterpriseQQ = true && this.isSetEnterpriseQQ();
    boolean that_present_enterpriseQQ = true && that.isSetEnterpriseQQ();
    if (this_present_enterpriseQQ || that_present_enterpriseQQ) {
      if (!(this_present_enterpriseQQ && that_present_enterpriseQQ))
        return false;
      if (!this.enterpriseQQ.equals(that.enterpriseQQ))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_workPhone = true && this.isSetWorkPhone();
    boolean that_present_workPhone = true && that.isSetWorkPhone();
    if (this_present_workPhone || that_present_workPhone) {
      if (!(this_present_workPhone && that_present_workPhone))
        return false;
      if (!this.workPhone.equals(that.workPhone))
        return false;
    }

    boolean this_present_extension = true && this.isSetExtension();
    boolean that_present_extension = true && that.isSetExtension();
    if (this_present_extension || that_present_extension) {
      if (!(this_present_extension && that_present_extension))
        return false;
      if (!this.extension.equals(that.extension))
        return false;
    }

    boolean this_present_superiorId = true;
    boolean that_present_superiorId = true;
    if (this_present_superiorId || that_present_superiorId) {
      if (!(this_present_superiorId && that_present_superiorId))
        return false;
      if (this.superiorId != that.superiorId)
        return false;
    }

    boolean this_present_superiorName = true && this.isSetSuperiorName();
    boolean that_present_superiorName = true && that.isSetSuperiorName();
    if (this_present_superiorName || that_present_superiorName) {
      if (!(this_present_superiorName && that_present_superiorName))
        return false;
      if (!this.superiorName.equals(that.superiorName))
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_deviceToken = true && this.isSetDeviceToken();
    boolean that_present_deviceToken = true && that.isSetDeviceToken();
    if (this_present_deviceToken || that_present_deviceToken) {
      if (!(this_present_deviceToken && that_present_deviceToken))
        return false;
      if (!this.deviceToken.equals(that.deviceToken))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_roles = true && this.isSetRoles();
    boolean that_present_roles = true && that.isSetRoles();
    if (this_present_roles || that_present_roles) {
      if (!(this_present_roles && that_present_roles))
        return false;
      if (!this.roles.equals(that.roles))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_roleCode = true && this.isSetRoleCode();
    boolean that_present_roleCode = true && that.isSetRoleCode();
    if (this_present_roleCode || that_present_roleCode) {
      if (!(this_present_roleCode && that_present_roleCode))
        return false;
      if (!this.roleCode.equals(that.roleCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_memberId = true && (isSetMemberId());
    list.add(present_memberId);
    if (present_memberId)
      list.add(memberId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_department = true && (isSetDepartment());
    list.add(present_department);
    if (present_department)
      list.add(department);

    boolean present_jobTitle = true && (isSetJobTitle());
    list.add(present_jobTitle);
    if (present_jobTitle)
      list.add(jobTitle);

    boolean present_mail = true && (isSetMail());
    list.add(present_mail);
    if (present_mail)
      list.add(mail);

    boolean present_pwd = true && (isSetPwd());
    list.add(present_pwd);
    if (present_pwd)
      list.add(pwd);

    boolean present_photoUrl = true && (isSetPhotoUrl());
    list.add(present_photoUrl);
    if (present_photoUrl)
      list.add(photoUrl);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_personalQQ = true && (isSetPersonalQQ());
    list.add(present_personalQQ);
    if (present_personalQQ)
      list.add(personalQQ);

    boolean present_enterpriseQQ = true && (isSetEnterpriseQQ());
    list.add(present_enterpriseQQ);
    if (present_enterpriseQQ)
      list.add(enterpriseQQ);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_workPhone = true && (isSetWorkPhone());
    list.add(present_workPhone);
    if (present_workPhone)
      list.add(workPhone);

    boolean present_extension = true && (isSetExtension());
    list.add(present_extension);
    if (present_extension)
      list.add(extension);

    boolean present_superiorId = true;
    list.add(present_superiorId);
    if (present_superiorId)
      list.add(superiorId);

    boolean present_superiorName = true && (isSetSuperiorName());
    list.add(present_superiorName);
    if (present_superiorName)
      list.add(superiorName);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_deviceToken = true && (isSetDeviceToken());
    list.add(present_deviceToken);
    if (present_deviceToken)
      list.add(deviceToken);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_roles = true && (isSetRoles());
    list.add(present_roles);
    if (present_roles)
      list.add(roles);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_roleCode = true && (isSetRoleCode());
    list.add(present_roleCode);
    if (present_roleCode)
      list.add(roleCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysUser other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberId()).compareTo(other.isSetMemberId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTitle()).compareTo(other.isSetJobTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTitle, other.jobTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMail()).compareTo(other.isSetMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mail, other.mail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoUrl()).compareTo(other.isSetPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoUrl, other.photoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonalQQ()).compareTo(other.isSetPersonalQQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonalQQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personalQQ, other.personalQQ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterpriseQQ()).compareTo(other.isSetEnterpriseQQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterpriseQQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterpriseQQ, other.enterpriseQQ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkPhone()).compareTo(other.isSetWorkPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workPhone, other.workPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtension()).compareTo(other.isSetExtension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extension, other.extension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorId()).compareTo(other.isSetSuperiorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorId, other.superiorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorName()).compareTo(other.isSetSuperiorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorName, other.superiorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceToken()).compareTo(other.isSetDeviceToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceToken, other.deviceToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoles()).compareTo(other.isSetRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roles, other.roles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleCode()).compareTo(other.isSetRoleCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleCode, other.roleCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysUser(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberId:");
    if (this.memberId == null) {
      sb.append("null");
    } else {
      sb.append(this.memberId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("department:");
    if (this.department == null) {
      sb.append("null");
    } else {
      sb.append(this.department);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTitle:");
    if (this.jobTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.jobTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mail:");
    if (this.mail == null) {
      sb.append("null");
    } else {
      sb.append(this.mail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwd:");
    if (this.pwd == null) {
      sb.append("null");
    } else {
      sb.append(this.pwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photoUrl:");
    if (this.photoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.photoUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personalQQ:");
    if (this.personalQQ == null) {
      sb.append("null");
    } else {
      sb.append(this.personalQQ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterpriseQQ:");
    if (this.enterpriseQQ == null) {
      sb.append("null");
    } else {
      sb.append(this.enterpriseQQ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workPhone:");
    if (this.workPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.workPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extension:");
    if (this.extension == null) {
      sb.append("null");
    } else {
      sb.append(this.extension);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("superiorId:");
    sb.append(this.superiorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superiorName:");
    if (this.superiorName == null) {
      sb.append("null");
    } else {
      sb.append(this.superiorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceToken:");
    if (this.deviceToken == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roles:");
    if (this.roles == null) {
      sb.append("null");
    } else {
      sb.append(this.roles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleCode:");
    if (this.roleCode == null) {
      sb.append("null");
    } else {
      sb.append(this.roleCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysUserStandardSchemeFactory implements SchemeFactory {
    public SysUserStandardScheme getScheme() {
      return new SysUserStandardScheme();
    }
  }

  private static class SysUserStandardScheme extends StandardScheme<SysUser> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysUser struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEMBER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberId = iprot.readString();
              struct.setMemberIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOB_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobTitle = iprot.readString();
              struct.setJobTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mail = iprot.readString();
              struct.setMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pwd = iprot.readString();
              struct.setPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photoUrl = iprot.readString();
              struct.setPhotoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PERSONAL_QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personalQQ = iprot.readString();
              struct.setPersonalQQIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENTERPRISE_QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enterpriseQQ = iprot.readString();
              struct.setEnterpriseQQIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORK_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workPhone = iprot.readString();
              struct.setWorkPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXTENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extension = iprot.readString();
              struct.setExtensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SUPERIOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.superiorId = iprot.readI32();
              struct.setSuperiorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SUPERIOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superiorName = iprot.readString();
              struct.setSuperiorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // DEVICE_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceToken = iprot.readString();
              struct.setDeviceTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ROLES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.roles = new ArrayList<SysRole>(_list0.size);
                SysRole _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new SysRole();
                  _elem1.read(iprot);
                  struct.roles.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setRolesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.userIds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ROLE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleCode = iprot.readString();
              struct.setRoleCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysUser struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.memberId != null) {
        oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
        oprot.writeString(struct.memberId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.department != null) {
        oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.department);
        oprot.writeFieldEnd();
      }
      if (struct.jobTitle != null) {
        oprot.writeFieldBegin(JOB_TITLE_FIELD_DESC);
        oprot.writeString(struct.jobTitle);
        oprot.writeFieldEnd();
      }
      if (struct.mail != null) {
        oprot.writeFieldBegin(MAIL_FIELD_DESC);
        oprot.writeString(struct.mail);
        oprot.writeFieldEnd();
      }
      if (struct.pwd != null) {
        oprot.writeFieldBegin(PWD_FIELD_DESC);
        oprot.writeString(struct.pwd);
        oprot.writeFieldEnd();
      }
      if (struct.photoUrl != null) {
        oprot.writeFieldBegin(PHOTO_URL_FIELD_DESC);
        oprot.writeString(struct.photoUrl);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.personalQQ != null) {
        oprot.writeFieldBegin(PERSONAL_QQ_FIELD_DESC);
        oprot.writeString(struct.personalQQ);
        oprot.writeFieldEnd();
      }
      if (struct.enterpriseQQ != null) {
        oprot.writeFieldBegin(ENTERPRISE_QQ_FIELD_DESC);
        oprot.writeString(struct.enterpriseQQ);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.workPhone != null) {
        oprot.writeFieldBegin(WORK_PHONE_FIELD_DESC);
        oprot.writeString(struct.workPhone);
        oprot.writeFieldEnd();
      }
      if (struct.extension != null) {
        oprot.writeFieldBegin(EXTENSION_FIELD_DESC);
        oprot.writeString(struct.extension);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUPERIOR_ID_FIELD_DESC);
      oprot.writeI32(struct.superiorId);
      oprot.writeFieldEnd();
      if (struct.superiorName != null) {
        oprot.writeFieldBegin(SUPERIOR_NAME_FIELD_DESC);
        oprot.writeString(struct.superiorName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.deviceToken != null) {
        oprot.writeFieldBegin(DEVICE_TOKEN_FIELD_DESC);
        oprot.writeString(struct.deviceToken);
        oprot.writeFieldEnd();
      }
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.roles != null) {
        oprot.writeFieldBegin(ROLES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.roles.size()));
          for (SysRole _iter6 : struct.roles)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter7 : struct.userIds)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.roleCode != null) {
        oprot.writeFieldBegin(ROLE_CODE_FIELD_DESC);
        oprot.writeString(struct.roleCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysUserTupleSchemeFactory implements SchemeFactory {
    public SysUserTupleScheme getScheme() {
      return new SysUserTupleScheme();
    }
  }

  private static class SysUserTupleScheme extends TupleScheme<SysUser> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysUser struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetRealName()) {
        optionals.set(2);
      }
      if (struct.isSetMemberId()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetDepartment()) {
        optionals.set(5);
      }
      if (struct.isSetJobTitle()) {
        optionals.set(6);
      }
      if (struct.isSetMail()) {
        optionals.set(7);
      }
      if (struct.isSetPwd()) {
        optionals.set(8);
      }
      if (struct.isSetPhotoUrl()) {
        optionals.set(9);
      }
      if (struct.isSetToken()) {
        optionals.set(10);
      }
      if (struct.isSetPersonalQQ()) {
        optionals.set(11);
      }
      if (struct.isSetEnterpriseQQ()) {
        optionals.set(12);
      }
      if (struct.isSetPhone()) {
        optionals.set(13);
      }
      if (struct.isSetWorkPhone()) {
        optionals.set(14);
      }
      if (struct.isSetExtension()) {
        optionals.set(15);
      }
      if (struct.isSetSuperiorId()) {
        optionals.set(16);
      }
      if (struct.isSetSuperiorName()) {
        optionals.set(17);
      }
      if (struct.isSetOrgId()) {
        optionals.set(18);
      }
      if (struct.isSetPage()) {
        optionals.set(19);
      }
      if (struct.isSetRows()) {
        optionals.set(20);
      }
      if (struct.isSetDeviceToken()) {
        optionals.set(21);
      }
      if (struct.isSetOrgName()) {
        optionals.set(22);
      }
      if (struct.isSetRoles()) {
        optionals.set(23);
      }
      if (struct.isSetUserIds()) {
        optionals.set(24);
      }
      if (struct.isSetRoleCode()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetMemberId()) {
        oprot.writeString(struct.memberId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetJobTitle()) {
        oprot.writeString(struct.jobTitle);
      }
      if (struct.isSetMail()) {
        oprot.writeString(struct.mail);
      }
      if (struct.isSetPwd()) {
        oprot.writeString(struct.pwd);
      }
      if (struct.isSetPhotoUrl()) {
        oprot.writeString(struct.photoUrl);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetPersonalQQ()) {
        oprot.writeString(struct.personalQQ);
      }
      if (struct.isSetEnterpriseQQ()) {
        oprot.writeString(struct.enterpriseQQ);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetWorkPhone()) {
        oprot.writeString(struct.workPhone);
      }
      if (struct.isSetExtension()) {
        oprot.writeString(struct.extension);
      }
      if (struct.isSetSuperiorId()) {
        oprot.writeI32(struct.superiorId);
      }
      if (struct.isSetSuperiorName()) {
        oprot.writeString(struct.superiorName);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetDeviceToken()) {
        oprot.writeString(struct.deviceToken);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetRoles()) {
        {
          oprot.writeI32(struct.roles.size());
          for (SysRole _iter8 : struct.roles)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter9 : struct.userIds)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
      if (struct.isSetRoleCode()) {
        oprot.writeString(struct.roleCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysUser struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.memberId = iprot.readString();
        struct.setMemberIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jobTitle = iprot.readString();
        struct.setJobTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mail = iprot.readString();
        struct.setMailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pwd = iprot.readString();
        struct.setPwdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.photoUrl = iprot.readString();
        struct.setPhotoUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(11)) {
        struct.personalQQ = iprot.readString();
        struct.setPersonalQQIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enterpriseQQ = iprot.readString();
        struct.setEnterpriseQQIsSet(true);
      }
      if (incoming.get(13)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(14)) {
        struct.workPhone = iprot.readString();
        struct.setWorkPhoneIsSet(true);
      }
      if (incoming.get(15)) {
        struct.extension = iprot.readString();
        struct.setExtensionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.superiorId = iprot.readI32();
        struct.setSuperiorIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.superiorName = iprot.readString();
        struct.setSuperiorNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(20)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(21)) {
        struct.deviceToken = iprot.readString();
        struct.setDeviceTokenIsSet(true);
      }
      if (incoming.get(22)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.roles = new ArrayList<SysRole>(_list10.size);
          SysRole _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new SysRole();
            _elem11.read(iprot);
            struct.roles.add(_elem11);
          }
        }
        struct.setRolesIsSet(true);
      }
      if (incoming.get(24)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.userIds.add(_elem14);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.roleCode = iprot.readString();
        struct.setRoleCodeIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectAssure implements org.apache.thrift.TBase<ProjectAssure, ProjectAssure._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectAssure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectAssure");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ASSURE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("assureType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ASSURE_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("assureTypeText", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_OBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("dataObject", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REF_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("refIds", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chinaName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SEX_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("sexText", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("certTypeText", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("telephone", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MOBILE_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobilePhone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OCCUPATION_FIELD_DESC = new org.apache.thrift.protocol.TField("occupation", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField WORK_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("workUnit", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField UNIT_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitPhone", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField UNIT_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("unitAddr", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CPY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpyName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BUS_LIC_CERT_FIELD_DESC = new org.apache.thrift.protocol.TField("busLicCert", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField COM_ALL_NATURE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("comAllNatureText", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField COM_OWN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("comOwnName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REG_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("regMoney", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CUS_TELEPHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusTelephone", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField FOUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("foundDate", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField CPY_ABBR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cpyAbbrName", org.apache.thrift.protocol.TType.STRING, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectAssureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectAssureTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int assureType; // required
  public String assureTypeText; // required
  public int refId; // required
  public int status; // required
  public String dataObject; // required
  public String refIds; // required
  public String chinaName; // required
  public String sexText; // required
  public String certTypeText; // required
  public String telephone; // required
  public String mobilePhone; // required
  public String occupation; // required
  public String workUnit; // required
  public String unitPhone; // required
  public String unitAddr; // required
  public String cpyName; // required
  public String orgCode; // required
  public String busLicCert; // required
  public String comAllNatureText; // required
  public String comOwnName; // required
  public String regMoney; // required
  public String cusTelephone; // required
  public String foundDate; // required
  public String cpyAbbrName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    ASSURE_TYPE((short)3, "assureType"),
    ASSURE_TYPE_TEXT((short)4, "assureTypeText"),
    REF_ID((short)5, "refId"),
    STATUS((short)6, "status"),
    DATA_OBJECT((short)7, "dataObject"),
    REF_IDS((short)8, "refIds"),
    CHINA_NAME((short)9, "chinaName"),
    SEX_TEXT((short)10, "sexText"),
    CERT_TYPE_TEXT((short)11, "certTypeText"),
    TELEPHONE((short)12, "telephone"),
    MOBILE_PHONE((short)13, "mobilePhone"),
    OCCUPATION((short)14, "occupation"),
    WORK_UNIT((short)15, "workUnit"),
    UNIT_PHONE((short)16, "unitPhone"),
    UNIT_ADDR((short)17, "unitAddr"),
    CPY_NAME((short)18, "cpyName"),
    ORG_CODE((short)19, "orgCode"),
    BUS_LIC_CERT((short)20, "busLicCert"),
    COM_ALL_NATURE_TEXT((short)21, "comAllNatureText"),
    COM_OWN_NAME((short)22, "comOwnName"),
    REG_MONEY((short)23, "regMoney"),
    CUS_TELEPHONE((short)24, "cusTelephone"),
    FOUND_DATE((short)25, "foundDate"),
    CPY_ABBR_NAME((short)26, "cpyAbbrName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // ASSURE_TYPE
          return ASSURE_TYPE;
        case 4: // ASSURE_TYPE_TEXT
          return ASSURE_TYPE_TEXT;
        case 5: // REF_ID
          return REF_ID;
        case 6: // STATUS
          return STATUS;
        case 7: // DATA_OBJECT
          return DATA_OBJECT;
        case 8: // REF_IDS
          return REF_IDS;
        case 9: // CHINA_NAME
          return CHINA_NAME;
        case 10: // SEX_TEXT
          return SEX_TEXT;
        case 11: // CERT_TYPE_TEXT
          return CERT_TYPE_TEXT;
        case 12: // TELEPHONE
          return TELEPHONE;
        case 13: // MOBILE_PHONE
          return MOBILE_PHONE;
        case 14: // OCCUPATION
          return OCCUPATION;
        case 15: // WORK_UNIT
          return WORK_UNIT;
        case 16: // UNIT_PHONE
          return UNIT_PHONE;
        case 17: // UNIT_ADDR
          return UNIT_ADDR;
        case 18: // CPY_NAME
          return CPY_NAME;
        case 19: // ORG_CODE
          return ORG_CODE;
        case 20: // BUS_LIC_CERT
          return BUS_LIC_CERT;
        case 21: // COM_ALL_NATURE_TEXT
          return COM_ALL_NATURE_TEXT;
        case 22: // COM_OWN_NAME
          return COM_OWN_NAME;
        case 23: // REG_MONEY
          return REG_MONEY;
        case 24: // CUS_TELEPHONE
          return CUS_TELEPHONE;
        case 25: // FOUND_DATE
          return FOUND_DATE;
        case 26: // CPY_ABBR_NAME
          return CPY_ABBR_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __ASSURETYPE_ISSET_ID = 2;
  private static final int __REFID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSURE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("assureType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASSURE_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("assureTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA_OBJECT, new org.apache.thrift.meta_data.FieldMetaData("dataObject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_IDS, new org.apache.thrift.meta_data.FieldMetaData("refIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("chinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX_TEXT, new org.apache.thrift.meta_data.FieldMetaData("sexText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("certTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("telephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_PHONE, new org.apache.thrift.meta_data.FieldMetaData("mobilePhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OCCUPATION, new org.apache.thrift.meta_data.FieldMetaData("occupation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_UNIT, new org.apache.thrift.meta_data.FieldMetaData("workUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_PHONE, new org.apache.thrift.meta_data.FieldMetaData("unitPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT_ADDR, new org.apache.thrift.meta_data.FieldMetaData("unitAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPY_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpyName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUS_LIC_CERT, new org.apache.thrift.meta_data.FieldMetaData("busLicCert", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COM_ALL_NATURE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("comAllNatureText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COM_OWN_NAME, new org.apache.thrift.meta_data.FieldMetaData("comOwnName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REG_MONEY, new org.apache.thrift.meta_data.FieldMetaData("regMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TELEPHONE, new org.apache.thrift.meta_data.FieldMetaData("cusTelephone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("foundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPY_ABBR_NAME, new org.apache.thrift.meta_data.FieldMetaData("cpyAbbrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectAssure.class, metaDataMap);
  }

  public ProjectAssure() {
  }

  public ProjectAssure(
    int pid,
    int projectId,
    int assureType,
    String assureTypeText,
    int refId,
    int status,
    String dataObject,
    String refIds,
    String chinaName,
    String sexText,
    String certTypeText,
    String telephone,
    String mobilePhone,
    String occupation,
    String workUnit,
    String unitPhone,
    String unitAddr,
    String cpyName,
    String orgCode,
    String busLicCert,
    String comAllNatureText,
    String comOwnName,
    String regMoney,
    String cusTelephone,
    String foundDate,
    String cpyAbbrName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.assureType = assureType;
    setAssureTypeIsSet(true);
    this.assureTypeText = assureTypeText;
    this.refId = refId;
    setRefIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.dataObject = dataObject;
    this.refIds = refIds;
    this.chinaName = chinaName;
    this.sexText = sexText;
    this.certTypeText = certTypeText;
    this.telephone = telephone;
    this.mobilePhone = mobilePhone;
    this.occupation = occupation;
    this.workUnit = workUnit;
    this.unitPhone = unitPhone;
    this.unitAddr = unitAddr;
    this.cpyName = cpyName;
    this.orgCode = orgCode;
    this.busLicCert = busLicCert;
    this.comAllNatureText = comAllNatureText;
    this.comOwnName = comOwnName;
    this.regMoney = regMoney;
    this.cusTelephone = cusTelephone;
    this.foundDate = foundDate;
    this.cpyAbbrName = cpyAbbrName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectAssure(ProjectAssure other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.assureType = other.assureType;
    if (other.isSetAssureTypeText()) {
      this.assureTypeText = other.assureTypeText;
    }
    this.refId = other.refId;
    this.status = other.status;
    if (other.isSetDataObject()) {
      this.dataObject = other.dataObject;
    }
    if (other.isSetRefIds()) {
      this.refIds = other.refIds;
    }
    if (other.isSetChinaName()) {
      this.chinaName = other.chinaName;
    }
    if (other.isSetSexText()) {
      this.sexText = other.sexText;
    }
    if (other.isSetCertTypeText()) {
      this.certTypeText = other.certTypeText;
    }
    if (other.isSetTelephone()) {
      this.telephone = other.telephone;
    }
    if (other.isSetMobilePhone()) {
      this.mobilePhone = other.mobilePhone;
    }
    if (other.isSetOccupation()) {
      this.occupation = other.occupation;
    }
    if (other.isSetWorkUnit()) {
      this.workUnit = other.workUnit;
    }
    if (other.isSetUnitPhone()) {
      this.unitPhone = other.unitPhone;
    }
    if (other.isSetUnitAddr()) {
      this.unitAddr = other.unitAddr;
    }
    if (other.isSetCpyName()) {
      this.cpyName = other.cpyName;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetBusLicCert()) {
      this.busLicCert = other.busLicCert;
    }
    if (other.isSetComAllNatureText()) {
      this.comAllNatureText = other.comAllNatureText;
    }
    if (other.isSetComOwnName()) {
      this.comOwnName = other.comOwnName;
    }
    if (other.isSetRegMoney()) {
      this.regMoney = other.regMoney;
    }
    if (other.isSetCusTelephone()) {
      this.cusTelephone = other.cusTelephone;
    }
    if (other.isSetFoundDate()) {
      this.foundDate = other.foundDate;
    }
    if (other.isSetCpyAbbrName()) {
      this.cpyAbbrName = other.cpyAbbrName;
    }
  }

  public ProjectAssure deepCopy() {
    return new ProjectAssure(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setAssureTypeIsSet(false);
    this.assureType = 0;
    this.assureTypeText = null;
    setRefIdIsSet(false);
    this.refId = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.dataObject = null;
    this.refIds = null;
    this.chinaName = null;
    this.sexText = null;
    this.certTypeText = null;
    this.telephone = null;
    this.mobilePhone = null;
    this.occupation = null;
    this.workUnit = null;
    this.unitPhone = null;
    this.unitAddr = null;
    this.cpyName = null;
    this.orgCode = null;
    this.busLicCert = null;
    this.comAllNatureText = null;
    this.comOwnName = null;
    this.regMoney = null;
    this.cusTelephone = null;
    this.foundDate = null;
    this.cpyAbbrName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectAssure setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectAssure setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getAssureType() {
    return this.assureType;
  }

  public ProjectAssure setAssureType(int assureType) {
    this.assureType = assureType;
    setAssureTypeIsSet(true);
    return this;
  }

  public void unsetAssureType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSURETYPE_ISSET_ID);
  }

  /** Returns true if field assureType is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureType() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSURETYPE_ISSET_ID);
  }

  public void setAssureTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSURETYPE_ISSET_ID, value);
  }

  public String getAssureTypeText() {
    return this.assureTypeText;
  }

  public ProjectAssure setAssureTypeText(String assureTypeText) {
    this.assureTypeText = assureTypeText;
    return this;
  }

  public void unsetAssureTypeText() {
    this.assureTypeText = null;
  }

  /** Returns true if field assureTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetAssureTypeText() {
    return this.assureTypeText != null;
  }

  public void setAssureTypeTextIsSet(boolean value) {
    if (!value) {
      this.assureTypeText = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public ProjectAssure setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectAssure setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getDataObject() {
    return this.dataObject;
  }

  public ProjectAssure setDataObject(String dataObject) {
    this.dataObject = dataObject;
    return this;
  }

  public void unsetDataObject() {
    this.dataObject = null;
  }

  /** Returns true if field dataObject is set (has been assigned a value) and false otherwise */
  public boolean isSetDataObject() {
    return this.dataObject != null;
  }

  public void setDataObjectIsSet(boolean value) {
    if (!value) {
      this.dataObject = null;
    }
  }

  public String getRefIds() {
    return this.refIds;
  }

  public ProjectAssure setRefIds(String refIds) {
    this.refIds = refIds;
    return this;
  }

  public void unsetRefIds() {
    this.refIds = null;
  }

  /** Returns true if field refIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRefIds() {
    return this.refIds != null;
  }

  public void setRefIdsIsSet(boolean value) {
    if (!value) {
      this.refIds = null;
    }
  }

  public String getChinaName() {
    return this.chinaName;
  }

  public ProjectAssure setChinaName(String chinaName) {
    this.chinaName = chinaName;
    return this;
  }

  public void unsetChinaName() {
    this.chinaName = null;
  }

  /** Returns true if field chinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.chinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.chinaName = null;
    }
  }

  public String getSexText() {
    return this.sexText;
  }

  public ProjectAssure setSexText(String sexText) {
    this.sexText = sexText;
    return this;
  }

  public void unsetSexText() {
    this.sexText = null;
  }

  /** Returns true if field sexText is set (has been assigned a value) and false otherwise */
  public boolean isSetSexText() {
    return this.sexText != null;
  }

  public void setSexTextIsSet(boolean value) {
    if (!value) {
      this.sexText = null;
    }
  }

  public String getCertTypeText() {
    return this.certTypeText;
  }

  public ProjectAssure setCertTypeText(String certTypeText) {
    this.certTypeText = certTypeText;
    return this;
  }

  public void unsetCertTypeText() {
    this.certTypeText = null;
  }

  /** Returns true if field certTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetCertTypeText() {
    return this.certTypeText != null;
  }

  public void setCertTypeTextIsSet(boolean value) {
    if (!value) {
      this.certTypeText = null;
    }
  }

  public String getTelephone() {
    return this.telephone;
  }

  public ProjectAssure setTelephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  public void unsetTelephone() {
    this.telephone = null;
  }

  /** Returns true if field telephone is set (has been assigned a value) and false otherwise */
  public boolean isSetTelephone() {
    return this.telephone != null;
  }

  public void setTelephoneIsSet(boolean value) {
    if (!value) {
      this.telephone = null;
    }
  }

  public String getMobilePhone() {
    return this.mobilePhone;
  }

  public ProjectAssure setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
    return this;
  }

  public void unsetMobilePhone() {
    this.mobilePhone = null;
  }

  /** Returns true if field mobilePhone is set (has been assigned a value) and false otherwise */
  public boolean isSetMobilePhone() {
    return this.mobilePhone != null;
  }

  public void setMobilePhoneIsSet(boolean value) {
    if (!value) {
      this.mobilePhone = null;
    }
  }

  public String getOccupation() {
    return this.occupation;
  }

  public ProjectAssure setOccupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

  public void unsetOccupation() {
    this.occupation = null;
  }

  /** Returns true if field occupation is set (has been assigned a value) and false otherwise */
  public boolean isSetOccupation() {
    return this.occupation != null;
  }

  public void setOccupationIsSet(boolean value) {
    if (!value) {
      this.occupation = null;
    }
  }

  public String getWorkUnit() {
    return this.workUnit;
  }

  public ProjectAssure setWorkUnit(String workUnit) {
    this.workUnit = workUnit;
    return this;
  }

  public void unsetWorkUnit() {
    this.workUnit = null;
  }

  /** Returns true if field workUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkUnit() {
    return this.workUnit != null;
  }

  public void setWorkUnitIsSet(boolean value) {
    if (!value) {
      this.workUnit = null;
    }
  }

  public String getUnitPhone() {
    return this.unitPhone;
  }

  public ProjectAssure setUnitPhone(String unitPhone) {
    this.unitPhone = unitPhone;
    return this;
  }

  public void unsetUnitPhone() {
    this.unitPhone = null;
  }

  /** Returns true if field unitPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitPhone() {
    return this.unitPhone != null;
  }

  public void setUnitPhoneIsSet(boolean value) {
    if (!value) {
      this.unitPhone = null;
    }
  }

  public String getUnitAddr() {
    return this.unitAddr;
  }

  public ProjectAssure setUnitAddr(String unitAddr) {
    this.unitAddr = unitAddr;
    return this;
  }

  public void unsetUnitAddr() {
    this.unitAddr = null;
  }

  /** Returns true if field unitAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitAddr() {
    return this.unitAddr != null;
  }

  public void setUnitAddrIsSet(boolean value) {
    if (!value) {
      this.unitAddr = null;
    }
  }

  public String getCpyName() {
    return this.cpyName;
  }

  public ProjectAssure setCpyName(String cpyName) {
    this.cpyName = cpyName;
    return this;
  }

  public void unsetCpyName() {
    this.cpyName = null;
  }

  /** Returns true if field cpyName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpyName() {
    return this.cpyName != null;
  }

  public void setCpyNameIsSet(boolean value) {
    if (!value) {
      this.cpyName = null;
    }
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public ProjectAssure setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public String getBusLicCert() {
    return this.busLicCert;
  }

  public ProjectAssure setBusLicCert(String busLicCert) {
    this.busLicCert = busLicCert;
    return this;
  }

  public void unsetBusLicCert() {
    this.busLicCert = null;
  }

  /** Returns true if field busLicCert is set (has been assigned a value) and false otherwise */
  public boolean isSetBusLicCert() {
    return this.busLicCert != null;
  }

  public void setBusLicCertIsSet(boolean value) {
    if (!value) {
      this.busLicCert = null;
    }
  }

  public String getComAllNatureText() {
    return this.comAllNatureText;
  }

  public ProjectAssure setComAllNatureText(String comAllNatureText) {
    this.comAllNatureText = comAllNatureText;
    return this;
  }

  public void unsetComAllNatureText() {
    this.comAllNatureText = null;
  }

  /** Returns true if field comAllNatureText is set (has been assigned a value) and false otherwise */
  public boolean isSetComAllNatureText() {
    return this.comAllNatureText != null;
  }

  public void setComAllNatureTextIsSet(boolean value) {
    if (!value) {
      this.comAllNatureText = null;
    }
  }

  public String getComOwnName() {
    return this.comOwnName;
  }

  public ProjectAssure setComOwnName(String comOwnName) {
    this.comOwnName = comOwnName;
    return this;
  }

  public void unsetComOwnName() {
    this.comOwnName = null;
  }

  /** Returns true if field comOwnName is set (has been assigned a value) and false otherwise */
  public boolean isSetComOwnName() {
    return this.comOwnName != null;
  }

  public void setComOwnNameIsSet(boolean value) {
    if (!value) {
      this.comOwnName = null;
    }
  }

  public String getRegMoney() {
    return this.regMoney;
  }

  public ProjectAssure setRegMoney(String regMoney) {
    this.regMoney = regMoney;
    return this;
  }

  public void unsetRegMoney() {
    this.regMoney = null;
  }

  /** Returns true if field regMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRegMoney() {
    return this.regMoney != null;
  }

  public void setRegMoneyIsSet(boolean value) {
    if (!value) {
      this.regMoney = null;
    }
  }

  public String getCusTelephone() {
    return this.cusTelephone;
  }

  public ProjectAssure setCusTelephone(String cusTelephone) {
    this.cusTelephone = cusTelephone;
    return this;
  }

  public void unsetCusTelephone() {
    this.cusTelephone = null;
  }

  /** Returns true if field cusTelephone is set (has been assigned a value) and false otherwise */
  public boolean isSetCusTelephone() {
    return this.cusTelephone != null;
  }

  public void setCusTelephoneIsSet(boolean value) {
    if (!value) {
      this.cusTelephone = null;
    }
  }

  public String getFoundDate() {
    return this.foundDate;
  }

  public ProjectAssure setFoundDate(String foundDate) {
    this.foundDate = foundDate;
    return this;
  }

  public void unsetFoundDate() {
    this.foundDate = null;
  }

  /** Returns true if field foundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFoundDate() {
    return this.foundDate != null;
  }

  public void setFoundDateIsSet(boolean value) {
    if (!value) {
      this.foundDate = null;
    }
  }

  public String getCpyAbbrName() {
    return this.cpyAbbrName;
  }

  public ProjectAssure setCpyAbbrName(String cpyAbbrName) {
    this.cpyAbbrName = cpyAbbrName;
    return this;
  }

  public void unsetCpyAbbrName() {
    this.cpyAbbrName = null;
  }

  /** Returns true if field cpyAbbrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCpyAbbrName() {
    return this.cpyAbbrName != null;
  }

  public void setCpyAbbrNameIsSet(boolean value) {
    if (!value) {
      this.cpyAbbrName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ASSURE_TYPE:
      if (value == null) {
        unsetAssureType();
      } else {
        setAssureType((Integer)value);
      }
      break;

    case ASSURE_TYPE_TEXT:
      if (value == null) {
        unsetAssureTypeText();
      } else {
        setAssureTypeText((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DATA_OBJECT:
      if (value == null) {
        unsetDataObject();
      } else {
        setDataObject((String)value);
      }
      break;

    case REF_IDS:
      if (value == null) {
        unsetRefIds();
      } else {
        setRefIds((String)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case SEX_TEXT:
      if (value == null) {
        unsetSexText();
      } else {
        setSexText((String)value);
      }
      break;

    case CERT_TYPE_TEXT:
      if (value == null) {
        unsetCertTypeText();
      } else {
        setCertTypeText((String)value);
      }
      break;

    case TELEPHONE:
      if (value == null) {
        unsetTelephone();
      } else {
        setTelephone((String)value);
      }
      break;

    case MOBILE_PHONE:
      if (value == null) {
        unsetMobilePhone();
      } else {
        setMobilePhone((String)value);
      }
      break;

    case OCCUPATION:
      if (value == null) {
        unsetOccupation();
      } else {
        setOccupation((String)value);
      }
      break;

    case WORK_UNIT:
      if (value == null) {
        unsetWorkUnit();
      } else {
        setWorkUnit((String)value);
      }
      break;

    case UNIT_PHONE:
      if (value == null) {
        unsetUnitPhone();
      } else {
        setUnitPhone((String)value);
      }
      break;

    case UNIT_ADDR:
      if (value == null) {
        unsetUnitAddr();
      } else {
        setUnitAddr((String)value);
      }
      break;

    case CPY_NAME:
      if (value == null) {
        unsetCpyName();
      } else {
        setCpyName((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case BUS_LIC_CERT:
      if (value == null) {
        unsetBusLicCert();
      } else {
        setBusLicCert((String)value);
      }
      break;

    case COM_ALL_NATURE_TEXT:
      if (value == null) {
        unsetComAllNatureText();
      } else {
        setComAllNatureText((String)value);
      }
      break;

    case COM_OWN_NAME:
      if (value == null) {
        unsetComOwnName();
      } else {
        setComOwnName((String)value);
      }
      break;

    case REG_MONEY:
      if (value == null) {
        unsetRegMoney();
      } else {
        setRegMoney((String)value);
      }
      break;

    case CUS_TELEPHONE:
      if (value == null) {
        unsetCusTelephone();
      } else {
        setCusTelephone((String)value);
      }
      break;

    case FOUND_DATE:
      if (value == null) {
        unsetFoundDate();
      } else {
        setFoundDate((String)value);
      }
      break;

    case CPY_ABBR_NAME:
      if (value == null) {
        unsetCpyAbbrName();
      } else {
        setCpyAbbrName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ASSURE_TYPE:
      return Integer.valueOf(getAssureType());

    case ASSURE_TYPE_TEXT:
      return getAssureTypeText();

    case REF_ID:
      return Integer.valueOf(getRefId());

    case STATUS:
      return Integer.valueOf(getStatus());

    case DATA_OBJECT:
      return getDataObject();

    case REF_IDS:
      return getRefIds();

    case CHINA_NAME:
      return getChinaName();

    case SEX_TEXT:
      return getSexText();

    case CERT_TYPE_TEXT:
      return getCertTypeText();

    case TELEPHONE:
      return getTelephone();

    case MOBILE_PHONE:
      return getMobilePhone();

    case OCCUPATION:
      return getOccupation();

    case WORK_UNIT:
      return getWorkUnit();

    case UNIT_PHONE:
      return getUnitPhone();

    case UNIT_ADDR:
      return getUnitAddr();

    case CPY_NAME:
      return getCpyName();

    case ORG_CODE:
      return getOrgCode();

    case BUS_LIC_CERT:
      return getBusLicCert();

    case COM_ALL_NATURE_TEXT:
      return getComAllNatureText();

    case COM_OWN_NAME:
      return getComOwnName();

    case REG_MONEY:
      return getRegMoney();

    case CUS_TELEPHONE:
      return getCusTelephone();

    case FOUND_DATE:
      return getFoundDate();

    case CPY_ABBR_NAME:
      return getCpyAbbrName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case ASSURE_TYPE:
      return isSetAssureType();
    case ASSURE_TYPE_TEXT:
      return isSetAssureTypeText();
    case REF_ID:
      return isSetRefId();
    case STATUS:
      return isSetStatus();
    case DATA_OBJECT:
      return isSetDataObject();
    case REF_IDS:
      return isSetRefIds();
    case CHINA_NAME:
      return isSetChinaName();
    case SEX_TEXT:
      return isSetSexText();
    case CERT_TYPE_TEXT:
      return isSetCertTypeText();
    case TELEPHONE:
      return isSetTelephone();
    case MOBILE_PHONE:
      return isSetMobilePhone();
    case OCCUPATION:
      return isSetOccupation();
    case WORK_UNIT:
      return isSetWorkUnit();
    case UNIT_PHONE:
      return isSetUnitPhone();
    case UNIT_ADDR:
      return isSetUnitAddr();
    case CPY_NAME:
      return isSetCpyName();
    case ORG_CODE:
      return isSetOrgCode();
    case BUS_LIC_CERT:
      return isSetBusLicCert();
    case COM_ALL_NATURE_TEXT:
      return isSetComAllNatureText();
    case COM_OWN_NAME:
      return isSetComOwnName();
    case REG_MONEY:
      return isSetRegMoney();
    case CUS_TELEPHONE:
      return isSetCusTelephone();
    case FOUND_DATE:
      return isSetFoundDate();
    case CPY_ABBR_NAME:
      return isSetCpyAbbrName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectAssure)
      return this.equals((ProjectAssure)that);
    return false;
  }

  public boolean equals(ProjectAssure that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_assureType = true;
    boolean that_present_assureType = true;
    if (this_present_assureType || that_present_assureType) {
      if (!(this_present_assureType && that_present_assureType))
        return false;
      if (this.assureType != that.assureType)
        return false;
    }

    boolean this_present_assureTypeText = true && this.isSetAssureTypeText();
    boolean that_present_assureTypeText = true && that.isSetAssureTypeText();
    if (this_present_assureTypeText || that_present_assureTypeText) {
      if (!(this_present_assureTypeText && that_present_assureTypeText))
        return false;
      if (!this.assureTypeText.equals(that.assureTypeText))
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_dataObject = true && this.isSetDataObject();
    boolean that_present_dataObject = true && that.isSetDataObject();
    if (this_present_dataObject || that_present_dataObject) {
      if (!(this_present_dataObject && that_present_dataObject))
        return false;
      if (!this.dataObject.equals(that.dataObject))
        return false;
    }

    boolean this_present_refIds = true && this.isSetRefIds();
    boolean that_present_refIds = true && that.isSetRefIds();
    if (this_present_refIds || that_present_refIds) {
      if (!(this_present_refIds && that_present_refIds))
        return false;
      if (!this.refIds.equals(that.refIds))
        return false;
    }

    boolean this_present_chinaName = true && this.isSetChinaName();
    boolean that_present_chinaName = true && that.isSetChinaName();
    if (this_present_chinaName || that_present_chinaName) {
      if (!(this_present_chinaName && that_present_chinaName))
        return false;
      if (!this.chinaName.equals(that.chinaName))
        return false;
    }

    boolean this_present_sexText = true && this.isSetSexText();
    boolean that_present_sexText = true && that.isSetSexText();
    if (this_present_sexText || that_present_sexText) {
      if (!(this_present_sexText && that_present_sexText))
        return false;
      if (!this.sexText.equals(that.sexText))
        return false;
    }

    boolean this_present_certTypeText = true && this.isSetCertTypeText();
    boolean that_present_certTypeText = true && that.isSetCertTypeText();
    if (this_present_certTypeText || that_present_certTypeText) {
      if (!(this_present_certTypeText && that_present_certTypeText))
        return false;
      if (!this.certTypeText.equals(that.certTypeText))
        return false;
    }

    boolean this_present_telephone = true && this.isSetTelephone();
    boolean that_present_telephone = true && that.isSetTelephone();
    if (this_present_telephone || that_present_telephone) {
      if (!(this_present_telephone && that_present_telephone))
        return false;
      if (!this.telephone.equals(that.telephone))
        return false;
    }

    boolean this_present_mobilePhone = true && this.isSetMobilePhone();
    boolean that_present_mobilePhone = true && that.isSetMobilePhone();
    if (this_present_mobilePhone || that_present_mobilePhone) {
      if (!(this_present_mobilePhone && that_present_mobilePhone))
        return false;
      if (!this.mobilePhone.equals(that.mobilePhone))
        return false;
    }

    boolean this_present_occupation = true && this.isSetOccupation();
    boolean that_present_occupation = true && that.isSetOccupation();
    if (this_present_occupation || that_present_occupation) {
      if (!(this_present_occupation && that_present_occupation))
        return false;
      if (!this.occupation.equals(that.occupation))
        return false;
    }

    boolean this_present_workUnit = true && this.isSetWorkUnit();
    boolean that_present_workUnit = true && that.isSetWorkUnit();
    if (this_present_workUnit || that_present_workUnit) {
      if (!(this_present_workUnit && that_present_workUnit))
        return false;
      if (!this.workUnit.equals(that.workUnit))
        return false;
    }

    boolean this_present_unitPhone = true && this.isSetUnitPhone();
    boolean that_present_unitPhone = true && that.isSetUnitPhone();
    if (this_present_unitPhone || that_present_unitPhone) {
      if (!(this_present_unitPhone && that_present_unitPhone))
        return false;
      if (!this.unitPhone.equals(that.unitPhone))
        return false;
    }

    boolean this_present_unitAddr = true && this.isSetUnitAddr();
    boolean that_present_unitAddr = true && that.isSetUnitAddr();
    if (this_present_unitAddr || that_present_unitAddr) {
      if (!(this_present_unitAddr && that_present_unitAddr))
        return false;
      if (!this.unitAddr.equals(that.unitAddr))
        return false;
    }

    boolean this_present_cpyName = true && this.isSetCpyName();
    boolean that_present_cpyName = true && that.isSetCpyName();
    if (this_present_cpyName || that_present_cpyName) {
      if (!(this_present_cpyName && that_present_cpyName))
        return false;
      if (!this.cpyName.equals(that.cpyName))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_busLicCert = true && this.isSetBusLicCert();
    boolean that_present_busLicCert = true && that.isSetBusLicCert();
    if (this_present_busLicCert || that_present_busLicCert) {
      if (!(this_present_busLicCert && that_present_busLicCert))
        return false;
      if (!this.busLicCert.equals(that.busLicCert))
        return false;
    }

    boolean this_present_comAllNatureText = true && this.isSetComAllNatureText();
    boolean that_present_comAllNatureText = true && that.isSetComAllNatureText();
    if (this_present_comAllNatureText || that_present_comAllNatureText) {
      if (!(this_present_comAllNatureText && that_present_comAllNatureText))
        return false;
      if (!this.comAllNatureText.equals(that.comAllNatureText))
        return false;
    }

    boolean this_present_comOwnName = true && this.isSetComOwnName();
    boolean that_present_comOwnName = true && that.isSetComOwnName();
    if (this_present_comOwnName || that_present_comOwnName) {
      if (!(this_present_comOwnName && that_present_comOwnName))
        return false;
      if (!this.comOwnName.equals(that.comOwnName))
        return false;
    }

    boolean this_present_regMoney = true && this.isSetRegMoney();
    boolean that_present_regMoney = true && that.isSetRegMoney();
    if (this_present_regMoney || that_present_regMoney) {
      if (!(this_present_regMoney && that_present_regMoney))
        return false;
      if (!this.regMoney.equals(that.regMoney))
        return false;
    }

    boolean this_present_cusTelephone = true && this.isSetCusTelephone();
    boolean that_present_cusTelephone = true && that.isSetCusTelephone();
    if (this_present_cusTelephone || that_present_cusTelephone) {
      if (!(this_present_cusTelephone && that_present_cusTelephone))
        return false;
      if (!this.cusTelephone.equals(that.cusTelephone))
        return false;
    }

    boolean this_present_foundDate = true && this.isSetFoundDate();
    boolean that_present_foundDate = true && that.isSetFoundDate();
    if (this_present_foundDate || that_present_foundDate) {
      if (!(this_present_foundDate && that_present_foundDate))
        return false;
      if (!this.foundDate.equals(that.foundDate))
        return false;
    }

    boolean this_present_cpyAbbrName = true && this.isSetCpyAbbrName();
    boolean that_present_cpyAbbrName = true && that.isSetCpyAbbrName();
    if (this_present_cpyAbbrName || that_present_cpyAbbrName) {
      if (!(this_present_cpyAbbrName && that_present_cpyAbbrName))
        return false;
      if (!this.cpyAbbrName.equals(that.cpyAbbrName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_assureType = true;
    list.add(present_assureType);
    if (present_assureType)
      list.add(assureType);

    boolean present_assureTypeText = true && (isSetAssureTypeText());
    list.add(present_assureTypeText);
    if (present_assureTypeText)
      list.add(assureTypeText);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_dataObject = true && (isSetDataObject());
    list.add(present_dataObject);
    if (present_dataObject)
      list.add(dataObject);

    boolean present_refIds = true && (isSetRefIds());
    list.add(present_refIds);
    if (present_refIds)
      list.add(refIds);

    boolean present_chinaName = true && (isSetChinaName());
    list.add(present_chinaName);
    if (present_chinaName)
      list.add(chinaName);

    boolean present_sexText = true && (isSetSexText());
    list.add(present_sexText);
    if (present_sexText)
      list.add(sexText);

    boolean present_certTypeText = true && (isSetCertTypeText());
    list.add(present_certTypeText);
    if (present_certTypeText)
      list.add(certTypeText);

    boolean present_telephone = true && (isSetTelephone());
    list.add(present_telephone);
    if (present_telephone)
      list.add(telephone);

    boolean present_mobilePhone = true && (isSetMobilePhone());
    list.add(present_mobilePhone);
    if (present_mobilePhone)
      list.add(mobilePhone);

    boolean present_occupation = true && (isSetOccupation());
    list.add(present_occupation);
    if (present_occupation)
      list.add(occupation);

    boolean present_workUnit = true && (isSetWorkUnit());
    list.add(present_workUnit);
    if (present_workUnit)
      list.add(workUnit);

    boolean present_unitPhone = true && (isSetUnitPhone());
    list.add(present_unitPhone);
    if (present_unitPhone)
      list.add(unitPhone);

    boolean present_unitAddr = true && (isSetUnitAddr());
    list.add(present_unitAddr);
    if (present_unitAddr)
      list.add(unitAddr);

    boolean present_cpyName = true && (isSetCpyName());
    list.add(present_cpyName);
    if (present_cpyName)
      list.add(cpyName);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_busLicCert = true && (isSetBusLicCert());
    list.add(present_busLicCert);
    if (present_busLicCert)
      list.add(busLicCert);

    boolean present_comAllNatureText = true && (isSetComAllNatureText());
    list.add(present_comAllNatureText);
    if (present_comAllNatureText)
      list.add(comAllNatureText);

    boolean present_comOwnName = true && (isSetComOwnName());
    list.add(present_comOwnName);
    if (present_comOwnName)
      list.add(comOwnName);

    boolean present_regMoney = true && (isSetRegMoney());
    list.add(present_regMoney);
    if (present_regMoney)
      list.add(regMoney);

    boolean present_cusTelephone = true && (isSetCusTelephone());
    list.add(present_cusTelephone);
    if (present_cusTelephone)
      list.add(cusTelephone);

    boolean present_foundDate = true && (isSetFoundDate());
    list.add(present_foundDate);
    if (present_foundDate)
      list.add(foundDate);

    boolean present_cpyAbbrName = true && (isSetCpyAbbrName());
    list.add(present_cpyAbbrName);
    if (present_cpyAbbrName)
      list.add(cpyAbbrName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectAssure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureType()).compareTo(other.isSetAssureType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureType, other.assureType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssureTypeText()).compareTo(other.isSetAssureTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssureTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assureTypeText, other.assureTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataObject()).compareTo(other.isSetDataObject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataObject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataObject, other.dataObject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefIds()).compareTo(other.isSetRefIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refIds, other.refIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinaName, other.chinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSexText()).compareTo(other.isSetSexText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSexText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sexText, other.sexText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertTypeText()).compareTo(other.isSetCertTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certTypeText, other.certTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTelephone()).compareTo(other.isSetTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.telephone, other.telephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobilePhone()).compareTo(other.isSetMobilePhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobilePhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobilePhone, other.mobilePhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOccupation()).compareTo(other.isSetOccupation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOccupation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.occupation, other.occupation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkUnit()).compareTo(other.isSetWorkUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workUnit, other.workUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitPhone()).compareTo(other.isSetUnitPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitPhone, other.unitPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitAddr()).compareTo(other.isSetUnitAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitAddr, other.unitAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpyName()).compareTo(other.isSetCpyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpyName, other.cpyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusLicCert()).compareTo(other.isSetBusLicCert());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusLicCert()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.busLicCert, other.busLicCert);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComAllNatureText()).compareTo(other.isSetComAllNatureText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComAllNatureText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comAllNatureText, other.comAllNatureText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComOwnName()).compareTo(other.isSetComOwnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComOwnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comOwnName, other.comOwnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegMoney()).compareTo(other.isSetRegMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regMoney, other.regMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusTelephone()).compareTo(other.isSetCusTelephone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusTelephone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusTelephone, other.cusTelephone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFoundDate()).compareTo(other.isSetFoundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFoundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foundDate, other.foundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpyAbbrName()).compareTo(other.isSetCpyAbbrName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpyAbbrName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpyAbbrName, other.cpyAbbrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectAssure(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureType:");
    sb.append(this.assureType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assureTypeText:");
    if (this.assureTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.assureTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataObject:");
    if (this.dataObject == null) {
      sb.append("null");
    } else {
      sb.append(this.dataObject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refIds:");
    if (this.refIds == null) {
      sb.append("null");
    } else {
      sb.append(this.refIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinaName:");
    if (this.chinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.chinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sexText:");
    if (this.sexText == null) {
      sb.append("null");
    } else {
      sb.append(this.sexText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certTypeText:");
    if (this.certTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.certTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("telephone:");
    if (this.telephone == null) {
      sb.append("null");
    } else {
      sb.append(this.telephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mobilePhone:");
    if (this.mobilePhone == null) {
      sb.append("null");
    } else {
      sb.append(this.mobilePhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("occupation:");
    if (this.occupation == null) {
      sb.append("null");
    } else {
      sb.append(this.occupation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workUnit:");
    if (this.workUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.workUnit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitPhone:");
    if (this.unitPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.unitPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitAddr:");
    if (this.unitAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.unitAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpyName:");
    if (this.cpyName == null) {
      sb.append("null");
    } else {
      sb.append(this.cpyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("busLicCert:");
    if (this.busLicCert == null) {
      sb.append("null");
    } else {
      sb.append(this.busLicCert);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comAllNatureText:");
    if (this.comAllNatureText == null) {
      sb.append("null");
    } else {
      sb.append(this.comAllNatureText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comOwnName:");
    if (this.comOwnName == null) {
      sb.append("null");
    } else {
      sb.append(this.comOwnName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regMoney:");
    if (this.regMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.regMoney);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusTelephone:");
    if (this.cusTelephone == null) {
      sb.append("null");
    } else {
      sb.append(this.cusTelephone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foundDate:");
    if (this.foundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.foundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpyAbbrName:");
    if (this.cpyAbbrName == null) {
      sb.append("null");
    } else {
      sb.append(this.cpyAbbrName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectAssureStandardSchemeFactory implements SchemeFactory {
    public ProjectAssureStandardScheme getScheme() {
      return new ProjectAssureStandardScheme();
    }
  }

  private static class ProjectAssureStandardScheme extends StandardScheme<ProjectAssure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectAssure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ASSURE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assureType = iprot.readI32();
              struct.setAssureTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASSURE_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assureTypeText = iprot.readString();
              struct.setAssureTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_OBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataObject = iprot.readString();
              struct.setDataObjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REF_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refIds = iprot.readString();
              struct.setRefIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SEX_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sexText = iprot.readString();
              struct.setSexTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CERT_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certTypeText = iprot.readString();
              struct.setCertTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.telephone = iprot.readString();
              struct.setTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MOBILE_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobilePhone = iprot.readString();
              struct.setMobilePhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OCCUPATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.occupation = iprot.readString();
              struct.setOccupationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORK_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workUnit = iprot.readString();
              struct.setWorkUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UNIT_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitPhone = iprot.readString();
              struct.setUnitPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UNIT_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unitAddr = iprot.readString();
              struct.setUnitAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CPY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpyName = iprot.readString();
              struct.setCpyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUS_LIC_CERT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.busLicCert = iprot.readString();
              struct.setBusLicCertIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // COM_ALL_NATURE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comAllNatureText = iprot.readString();
              struct.setComAllNatureTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // COM_OWN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comOwnName = iprot.readString();
              struct.setComOwnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REG_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regMoney = iprot.readString();
              struct.setRegMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CUS_TELEPHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusTelephone = iprot.readString();
              struct.setCusTelephoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // FOUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.foundDate = iprot.readString();
              struct.setFoundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CPY_ABBR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cpyAbbrName = iprot.readString();
              struct.setCpyAbbrNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectAssure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASSURE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.assureType);
      oprot.writeFieldEnd();
      if (struct.assureTypeText != null) {
        oprot.writeFieldBegin(ASSURE_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.assureTypeText);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.dataObject != null) {
        oprot.writeFieldBegin(DATA_OBJECT_FIELD_DESC);
        oprot.writeString(struct.dataObject);
        oprot.writeFieldEnd();
      }
      if (struct.refIds != null) {
        oprot.writeFieldBegin(REF_IDS_FIELD_DESC);
        oprot.writeString(struct.refIds);
        oprot.writeFieldEnd();
      }
      if (struct.chinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.chinaName);
        oprot.writeFieldEnd();
      }
      if (struct.sexText != null) {
        oprot.writeFieldBegin(SEX_TEXT_FIELD_DESC);
        oprot.writeString(struct.sexText);
        oprot.writeFieldEnd();
      }
      if (struct.certTypeText != null) {
        oprot.writeFieldBegin(CERT_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.certTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.telephone != null) {
        oprot.writeFieldBegin(TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.telephone);
        oprot.writeFieldEnd();
      }
      if (struct.mobilePhone != null) {
        oprot.writeFieldBegin(MOBILE_PHONE_FIELD_DESC);
        oprot.writeString(struct.mobilePhone);
        oprot.writeFieldEnd();
      }
      if (struct.occupation != null) {
        oprot.writeFieldBegin(OCCUPATION_FIELD_DESC);
        oprot.writeString(struct.occupation);
        oprot.writeFieldEnd();
      }
      if (struct.workUnit != null) {
        oprot.writeFieldBegin(WORK_UNIT_FIELD_DESC);
        oprot.writeString(struct.workUnit);
        oprot.writeFieldEnd();
      }
      if (struct.unitPhone != null) {
        oprot.writeFieldBegin(UNIT_PHONE_FIELD_DESC);
        oprot.writeString(struct.unitPhone);
        oprot.writeFieldEnd();
      }
      if (struct.unitAddr != null) {
        oprot.writeFieldBegin(UNIT_ADDR_FIELD_DESC);
        oprot.writeString(struct.unitAddr);
        oprot.writeFieldEnd();
      }
      if (struct.cpyName != null) {
        oprot.writeFieldBegin(CPY_NAME_FIELD_DESC);
        oprot.writeString(struct.cpyName);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.busLicCert != null) {
        oprot.writeFieldBegin(BUS_LIC_CERT_FIELD_DESC);
        oprot.writeString(struct.busLicCert);
        oprot.writeFieldEnd();
      }
      if (struct.comAllNatureText != null) {
        oprot.writeFieldBegin(COM_ALL_NATURE_TEXT_FIELD_DESC);
        oprot.writeString(struct.comAllNatureText);
        oprot.writeFieldEnd();
      }
      if (struct.comOwnName != null) {
        oprot.writeFieldBegin(COM_OWN_NAME_FIELD_DESC);
        oprot.writeString(struct.comOwnName);
        oprot.writeFieldEnd();
      }
      if (struct.regMoney != null) {
        oprot.writeFieldBegin(REG_MONEY_FIELD_DESC);
        oprot.writeString(struct.regMoney);
        oprot.writeFieldEnd();
      }
      if (struct.cusTelephone != null) {
        oprot.writeFieldBegin(CUS_TELEPHONE_FIELD_DESC);
        oprot.writeString(struct.cusTelephone);
        oprot.writeFieldEnd();
      }
      if (struct.foundDate != null) {
        oprot.writeFieldBegin(FOUND_DATE_FIELD_DESC);
        oprot.writeString(struct.foundDate);
        oprot.writeFieldEnd();
      }
      if (struct.cpyAbbrName != null) {
        oprot.writeFieldBegin(CPY_ABBR_NAME_FIELD_DESC);
        oprot.writeString(struct.cpyAbbrName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectAssureTupleSchemeFactory implements SchemeFactory {
    public ProjectAssureTupleScheme getScheme() {
      return new ProjectAssureTupleScheme();
    }
  }

  private static class ProjectAssureTupleScheme extends TupleScheme<ProjectAssure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectAssure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetAssureType()) {
        optionals.set(2);
      }
      if (struct.isSetAssureTypeText()) {
        optionals.set(3);
      }
      if (struct.isSetRefId()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetDataObject()) {
        optionals.set(6);
      }
      if (struct.isSetRefIds()) {
        optionals.set(7);
      }
      if (struct.isSetChinaName()) {
        optionals.set(8);
      }
      if (struct.isSetSexText()) {
        optionals.set(9);
      }
      if (struct.isSetCertTypeText()) {
        optionals.set(10);
      }
      if (struct.isSetTelephone()) {
        optionals.set(11);
      }
      if (struct.isSetMobilePhone()) {
        optionals.set(12);
      }
      if (struct.isSetOccupation()) {
        optionals.set(13);
      }
      if (struct.isSetWorkUnit()) {
        optionals.set(14);
      }
      if (struct.isSetUnitPhone()) {
        optionals.set(15);
      }
      if (struct.isSetUnitAddr()) {
        optionals.set(16);
      }
      if (struct.isSetCpyName()) {
        optionals.set(17);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(18);
      }
      if (struct.isSetBusLicCert()) {
        optionals.set(19);
      }
      if (struct.isSetComAllNatureText()) {
        optionals.set(20);
      }
      if (struct.isSetComOwnName()) {
        optionals.set(21);
      }
      if (struct.isSetRegMoney()) {
        optionals.set(22);
      }
      if (struct.isSetCusTelephone()) {
        optionals.set(23);
      }
      if (struct.isSetFoundDate()) {
        optionals.set(24);
      }
      if (struct.isSetCpyAbbrName()) {
        optionals.set(25);
      }
      oprot.writeBitSet(optionals, 26);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetAssureType()) {
        oprot.writeI32(struct.assureType);
      }
      if (struct.isSetAssureTypeText()) {
        oprot.writeString(struct.assureTypeText);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDataObject()) {
        oprot.writeString(struct.dataObject);
      }
      if (struct.isSetRefIds()) {
        oprot.writeString(struct.refIds);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.chinaName);
      }
      if (struct.isSetSexText()) {
        oprot.writeString(struct.sexText);
      }
      if (struct.isSetCertTypeText()) {
        oprot.writeString(struct.certTypeText);
      }
      if (struct.isSetTelephone()) {
        oprot.writeString(struct.telephone);
      }
      if (struct.isSetMobilePhone()) {
        oprot.writeString(struct.mobilePhone);
      }
      if (struct.isSetOccupation()) {
        oprot.writeString(struct.occupation);
      }
      if (struct.isSetWorkUnit()) {
        oprot.writeString(struct.workUnit);
      }
      if (struct.isSetUnitPhone()) {
        oprot.writeString(struct.unitPhone);
      }
      if (struct.isSetUnitAddr()) {
        oprot.writeString(struct.unitAddr);
      }
      if (struct.isSetCpyName()) {
        oprot.writeString(struct.cpyName);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetBusLicCert()) {
        oprot.writeString(struct.busLicCert);
      }
      if (struct.isSetComAllNatureText()) {
        oprot.writeString(struct.comAllNatureText);
      }
      if (struct.isSetComOwnName()) {
        oprot.writeString(struct.comOwnName);
      }
      if (struct.isSetRegMoney()) {
        oprot.writeString(struct.regMoney);
      }
      if (struct.isSetCusTelephone()) {
        oprot.writeString(struct.cusTelephone);
      }
      if (struct.isSetFoundDate()) {
        oprot.writeString(struct.foundDate);
      }
      if (struct.isSetCpyAbbrName()) {
        oprot.writeString(struct.cpyAbbrName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectAssure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(26);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.assureType = iprot.readI32();
        struct.setAssureTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.assureTypeText = iprot.readString();
        struct.setAssureTypeTextIsSet(true);
      }
      if (incoming.get(4)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataObject = iprot.readString();
        struct.setDataObjectIsSet(true);
      }
      if (incoming.get(7)) {
        struct.refIds = iprot.readString();
        struct.setRefIdsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.chinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sexText = iprot.readString();
        struct.setSexTextIsSet(true);
      }
      if (incoming.get(10)) {
        struct.certTypeText = iprot.readString();
        struct.setCertTypeTextIsSet(true);
      }
      if (incoming.get(11)) {
        struct.telephone = iprot.readString();
        struct.setTelephoneIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mobilePhone = iprot.readString();
        struct.setMobilePhoneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.occupation = iprot.readString();
        struct.setOccupationIsSet(true);
      }
      if (incoming.get(14)) {
        struct.workUnit = iprot.readString();
        struct.setWorkUnitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.unitPhone = iprot.readString();
        struct.setUnitPhoneIsSet(true);
      }
      if (incoming.get(16)) {
        struct.unitAddr = iprot.readString();
        struct.setUnitAddrIsSet(true);
      }
      if (incoming.get(17)) {
        struct.cpyName = iprot.readString();
        struct.setCpyNameIsSet(true);
      }
      if (incoming.get(18)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.busLicCert = iprot.readString();
        struct.setBusLicCertIsSet(true);
      }
      if (incoming.get(20)) {
        struct.comAllNatureText = iprot.readString();
        struct.setComAllNatureTextIsSet(true);
      }
      if (incoming.get(21)) {
        struct.comOwnName = iprot.readString();
        struct.setComOwnNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.regMoney = iprot.readString();
        struct.setRegMoneyIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cusTelephone = iprot.readString();
        struct.setCusTelephoneIsSet(true);
      }
      if (incoming.get(24)) {
        struct.foundDate = iprot.readString();
        struct.setFoundDateIsSet(true);
      }
      if (incoming.get(25)) {
        struct.cpyAbbrName = iprot.readString();
        struct.setCpyAbbrNameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class Credit implements org.apache.thrift.TBase<Credit, Credit._Fields>, java.io.Serializable, Cloneable, Comparable<Credit> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Credit");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CREDTI_START_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("credtiStartDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CREDTI_END_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("credtiEndDt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IS_HOOP_FIELD_DESC = new org.apache.thrift.protocol.TField("isHoop", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COMPLETE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("completeDttm", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREDIT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("creditStatus", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreditStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreditTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public double creditAmt; // required
  public String credtiStartDt; // required
  public String credtiEndDt; // required
  public int isHoop; // required
  public int status; // required
  public int requestStatus; // required
  public String requestDttm; // required
  public String completeDttm; // required
  public int creditStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    CREDIT_AMT((short)3, "creditAmt"),
    CREDTI_START_DT((short)4, "credtiStartDt"),
    CREDTI_END_DT((short)5, "credtiEndDt"),
    IS_HOOP((short)6, "isHoop"),
    STATUS((short)7, "status"),
    REQUEST_STATUS((short)8, "requestStatus"),
    REQUEST_DTTM((short)9, "requestDttm"),
    COMPLETE_DTTM((short)10, "completeDttm"),
    CREDIT_STATUS((short)11, "creditStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // CREDIT_AMT
          return CREDIT_AMT;
        case 4: // CREDTI_START_DT
          return CREDTI_START_DT;
        case 5: // CREDTI_END_DT
          return CREDTI_END_DT;
        case 6: // IS_HOOP
          return IS_HOOP;
        case 7: // STATUS
          return STATUS;
        case 8: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 9: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 10: // COMPLETE_DTTM
          return COMPLETE_DTTM;
        case 11: // CREDIT_STATUS
          return CREDIT_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __CREDITAMT_ISSET_ID = 2;
  private static final int __ISHOOP_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __REQUESTSTATUS_ISSET_ID = 5;
  private static final int __CREDITSTATUS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREDTI_START_DT, new org.apache.thrift.meta_data.FieldMetaData("credtiStartDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDTI_END_DT, new org.apache.thrift.meta_data.FieldMetaData("credtiEndDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_HOOP, new org.apache.thrift.meta_data.FieldMetaData("isHoop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPLETE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("completeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("creditStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Credit.class, metaDataMap);
  }

  public Credit() {
  }

  public Credit(
    int pid,
    int projectId,
    double creditAmt,
    String credtiStartDt,
    String credtiEndDt,
    int isHoop,
    int status,
    int requestStatus,
    String requestDttm,
    String completeDttm,
    int creditStatus)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.credtiStartDt = credtiStartDt;
    this.credtiEndDt = credtiEndDt;
    this.isHoop = isHoop;
    setIsHoopIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.requestDttm = requestDttm;
    this.completeDttm = completeDttm;
    this.creditStatus = creditStatus;
    setCreditStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Credit(Credit other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.creditAmt = other.creditAmt;
    if (other.isSetCredtiStartDt()) {
      this.credtiStartDt = other.credtiStartDt;
    }
    if (other.isSetCredtiEndDt()) {
      this.credtiEndDt = other.credtiEndDt;
    }
    this.isHoop = other.isHoop;
    this.status = other.status;
    this.requestStatus = other.requestStatus;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetCompleteDttm()) {
      this.completeDttm = other.completeDttm;
    }
    this.creditStatus = other.creditStatus;
  }

  public Credit deepCopy() {
    return new Credit(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    this.credtiStartDt = null;
    this.credtiEndDt = null;
    setIsHoopIsSet(false);
    this.isHoop = 0;
    setStatusIsSet(false);
    this.status = 0;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.requestDttm = null;
    this.completeDttm = null;
    setCreditStatusIsSet(false);
    this.creditStatus = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public Credit setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public Credit setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public Credit setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public String getCredtiStartDt() {
    return this.credtiStartDt;
  }

  public Credit setCredtiStartDt(String credtiStartDt) {
    this.credtiStartDt = credtiStartDt;
    return this;
  }

  public void unsetCredtiStartDt() {
    this.credtiStartDt = null;
  }

  /** Returns true if field credtiStartDt is set (has been assigned a value) and false otherwise */
  public boolean isSetCredtiStartDt() {
    return this.credtiStartDt != null;
  }

  public void setCredtiStartDtIsSet(boolean value) {
    if (!value) {
      this.credtiStartDt = null;
    }
  }

  public String getCredtiEndDt() {
    return this.credtiEndDt;
  }

  public Credit setCredtiEndDt(String credtiEndDt) {
    this.credtiEndDt = credtiEndDt;
    return this;
  }

  public void unsetCredtiEndDt() {
    this.credtiEndDt = null;
  }

  /** Returns true if field credtiEndDt is set (has been assigned a value) and false otherwise */
  public boolean isSetCredtiEndDt() {
    return this.credtiEndDt != null;
  }

  public void setCredtiEndDtIsSet(boolean value) {
    if (!value) {
      this.credtiEndDt = null;
    }
  }

  public int getIsHoop() {
    return this.isHoop;
  }

  public Credit setIsHoop(int isHoop) {
    this.isHoop = isHoop;
    setIsHoopIsSet(true);
    return this;
  }

  public void unsetIsHoop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHOOP_ISSET_ID);
  }

  /** Returns true if field isHoop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHoop() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHOOP_ISSET_ID);
  }

  public void setIsHoopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHOOP_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public Credit setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public Credit setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public Credit setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getCompleteDttm() {
    return this.completeDttm;
  }

  public Credit setCompleteDttm(String completeDttm) {
    this.completeDttm = completeDttm;
    return this;
  }

  public void unsetCompleteDttm() {
    this.completeDttm = null;
  }

  /** Returns true if field completeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteDttm() {
    return this.completeDttm != null;
  }

  public void setCompleteDttmIsSet(boolean value) {
    if (!value) {
      this.completeDttm = null;
    }
  }

  public int getCreditStatus() {
    return this.creditStatus;
  }

  public Credit setCreditStatus(int creditStatus) {
    this.creditStatus = creditStatus;
    setCreditStatusIsSet(true);
    return this;
  }

  public void unsetCreditStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITSTATUS_ISSET_ID);
  }

  /** Returns true if field creditStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITSTATUS_ISSET_ID);
  }

  public void setCreditStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITSTATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case CREDTI_START_DT:
      if (value == null) {
        unsetCredtiStartDt();
      } else {
        setCredtiStartDt((String)value);
      }
      break;

    case CREDTI_END_DT:
      if (value == null) {
        unsetCredtiEndDt();
      } else {
        setCredtiEndDt((String)value);
      }
      break;

    case IS_HOOP:
      if (value == null) {
        unsetIsHoop();
      } else {
        setIsHoop((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case COMPLETE_DTTM:
      if (value == null) {
        unsetCompleteDttm();
      } else {
        setCompleteDttm((String)value);
      }
      break;

    case CREDIT_STATUS:
      if (value == null) {
        unsetCreditStatus();
      } else {
        setCreditStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case CREDTI_START_DT:
      return getCredtiStartDt();

    case CREDTI_END_DT:
      return getCredtiEndDt();

    case IS_HOOP:
      return Integer.valueOf(getIsHoop());

    case STATUS:
      return Integer.valueOf(getStatus());

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case REQUEST_DTTM:
      return getRequestDttm();

    case COMPLETE_DTTM:
      return getCompleteDttm();

    case CREDIT_STATUS:
      return Integer.valueOf(getCreditStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case CREDTI_START_DT:
      return isSetCredtiStartDt();
    case CREDTI_END_DT:
      return isSetCredtiEndDt();
    case IS_HOOP:
      return isSetIsHoop();
    case STATUS:
      return isSetStatus();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case COMPLETE_DTTM:
      return isSetCompleteDttm();
    case CREDIT_STATUS:
      return isSetCreditStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Credit)
      return this.equals((Credit)that);
    return false;
  }

  public boolean equals(Credit that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_credtiStartDt = true && this.isSetCredtiStartDt();
    boolean that_present_credtiStartDt = true && that.isSetCredtiStartDt();
    if (this_present_credtiStartDt || that_present_credtiStartDt) {
      if (!(this_present_credtiStartDt && that_present_credtiStartDt))
        return false;
      if (!this.credtiStartDt.equals(that.credtiStartDt))
        return false;
    }

    boolean this_present_credtiEndDt = true && this.isSetCredtiEndDt();
    boolean that_present_credtiEndDt = true && that.isSetCredtiEndDt();
    if (this_present_credtiEndDt || that_present_credtiEndDt) {
      if (!(this_present_credtiEndDt && that_present_credtiEndDt))
        return false;
      if (!this.credtiEndDt.equals(that.credtiEndDt))
        return false;
    }

    boolean this_present_isHoop = true;
    boolean that_present_isHoop = true;
    if (this_present_isHoop || that_present_isHoop) {
      if (!(this_present_isHoop && that_present_isHoop))
        return false;
      if (this.isHoop != that.isHoop)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_completeDttm = true && this.isSetCompleteDttm();
    boolean that_present_completeDttm = true && that.isSetCompleteDttm();
    if (this_present_completeDttm || that_present_completeDttm) {
      if (!(this_present_completeDttm && that_present_completeDttm))
        return false;
      if (!this.completeDttm.equals(that.completeDttm))
        return false;
    }

    boolean this_present_creditStatus = true;
    boolean that_present_creditStatus = true;
    if (this_present_creditStatus || that_present_creditStatus) {
      if (!(this_present_creditStatus && that_present_creditStatus))
        return false;
      if (this.creditStatus != that.creditStatus)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_credtiStartDt = true && (isSetCredtiStartDt());
    list.add(present_credtiStartDt);
    if (present_credtiStartDt)
      list.add(credtiStartDt);

    boolean present_credtiEndDt = true && (isSetCredtiEndDt());
    list.add(present_credtiEndDt);
    if (present_credtiEndDt)
      list.add(credtiEndDt);

    boolean present_isHoop = true;
    list.add(present_isHoop);
    if (present_isHoop)
      list.add(isHoop);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_completeDttm = true && (isSetCompleteDttm());
    list.add(present_completeDttm);
    if (present_completeDttm)
      list.add(completeDttm);

    boolean present_creditStatus = true;
    list.add(present_creditStatus);
    if (present_creditStatus)
      list.add(creditStatus);

    return list.hashCode();
  }

  @Override
  public int compareTo(Credit other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredtiStartDt()).compareTo(other.isSetCredtiStartDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredtiStartDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credtiStartDt, other.credtiStartDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredtiEndDt()).compareTo(other.isSetCredtiEndDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredtiEndDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credtiEndDt, other.credtiEndDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHoop()).compareTo(other.isSetIsHoop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHoop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isHoop, other.isHoop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteDttm()).compareTo(other.isSetCompleteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeDttm, other.completeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditStatus()).compareTo(other.isSetCreditStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditStatus, other.creditStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Credit(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("credtiStartDt:");
    if (this.credtiStartDt == null) {
      sb.append("null");
    } else {
      sb.append(this.credtiStartDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("credtiEndDt:");
    if (this.credtiEndDt == null) {
      sb.append("null");
    } else {
      sb.append(this.credtiEndDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isHoop:");
    sb.append(this.isHoop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeDttm:");
    if (this.completeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.completeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditStatus:");
    sb.append(this.creditStatus);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditStandardSchemeFactory implements SchemeFactory {
    public CreditStandardScheme getScheme() {
      return new CreditStandardScheme();
    }
  }

  private static class CreditStandardScheme extends StandardScheme<Credit> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Credit struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDTI_START_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credtiStartDt = iprot.readString();
              struct.setCredtiStartDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREDTI_END_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.credtiEndDt = iprot.readString();
              struct.setCredtiEndDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_HOOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isHoop = iprot.readI32();
              struct.setIsHoopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPLETE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.completeDttm = iprot.readString();
              struct.setCompleteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREDIT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creditStatus = iprot.readI32();
              struct.setCreditStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Credit struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      if (struct.credtiStartDt != null) {
        oprot.writeFieldBegin(CREDTI_START_DT_FIELD_DESC);
        oprot.writeString(struct.credtiStartDt);
        oprot.writeFieldEnd();
      }
      if (struct.credtiEndDt != null) {
        oprot.writeFieldBegin(CREDTI_END_DT_FIELD_DESC);
        oprot.writeString(struct.credtiEndDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_HOOP_FIELD_DESC);
      oprot.writeI32(struct.isHoop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.completeDttm != null) {
        oprot.writeFieldBegin(COMPLETE_DTTM_FIELD_DESC);
        oprot.writeString(struct.completeDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_STATUS_FIELD_DESC);
      oprot.writeI32(struct.creditStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditTupleSchemeFactory implements SchemeFactory {
    public CreditTupleScheme getScheme() {
      return new CreditTupleScheme();
    }
  }

  private static class CreditTupleScheme extends TupleScheme<Credit> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Credit struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(2);
      }
      if (struct.isSetCredtiStartDt()) {
        optionals.set(3);
      }
      if (struct.isSetCredtiEndDt()) {
        optionals.set(4);
      }
      if (struct.isSetIsHoop()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(7);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(8);
      }
      if (struct.isSetCompleteDttm()) {
        optionals.set(9);
      }
      if (struct.isSetCreditStatus()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetCredtiStartDt()) {
        oprot.writeString(struct.credtiStartDt);
      }
      if (struct.isSetCredtiEndDt()) {
        oprot.writeString(struct.credtiEndDt);
      }
      if (struct.isSetIsHoop()) {
        oprot.writeI32(struct.isHoop);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetCompleteDttm()) {
        oprot.writeString(struct.completeDttm);
      }
      if (struct.isSetCreditStatus()) {
        oprot.writeI32(struct.creditStatus);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Credit struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.credtiStartDt = iprot.readString();
        struct.setCredtiStartDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.credtiEndDt = iprot.readString();
        struct.setCredtiEndDtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isHoop = iprot.readI32();
        struct.setIsHoopIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.completeDttm = iprot.readString();
        struct.setCompleteDttmIsSet(true);
      }
      if (incoming.get(10)) {
        struct.creditStatus = iprot.readI32();
        struct.setCreditStatusIsSet(true);
      }
    }
  }

}


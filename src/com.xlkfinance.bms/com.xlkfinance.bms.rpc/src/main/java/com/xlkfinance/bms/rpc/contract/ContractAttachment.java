/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractAttachment implements org.apache.thrift.TBase<ContractAttachment, ContractAttachment._Fields>, java.io.Serializable, Cloneable, Comparable<ContractAttachment> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractAttachment");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("attachmentFileName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("attachmentLocation", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OFFLINE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("offlineCnt", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ONLINE_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineCnt", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractAttachmentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractAttachmentTupleSchemeFactory());
  }

  public int pid; // required
  public int contractId; // required
  public String attachmentFileName; // required
  public String attachmentLocation; // required
  public int offlineCnt; // required
  public int onlineCnt; // required
  public String remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CONTRACT_ID((short)2, "contractId"),
    ATTACHMENT_FILE_NAME((short)3, "attachmentFileName"),
    ATTACHMENT_LOCATION((short)4, "attachmentLocation"),
    OFFLINE_CNT((short)5, "offlineCnt"),
    ONLINE_CNT((short)6, "onlineCnt"),
    REMARK((short)7, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CONTRACT_ID
          return CONTRACT_ID;
        case 3: // ATTACHMENT_FILE_NAME
          return ATTACHMENT_FILE_NAME;
        case 4: // ATTACHMENT_LOCATION
          return ATTACHMENT_LOCATION;
        case 5: // OFFLINE_CNT
          return OFFLINE_CNT;
        case 6: // ONLINE_CNT
          return ONLINE_CNT;
        case 7: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CONTRACTID_ISSET_ID = 1;
  private static final int __OFFLINECNT_ISSET_ID = 2;
  private static final int __ONLINECNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ATTACHMENT_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("attachmentFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENT_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("attachmentLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFLINE_CNT, new org.apache.thrift.meta_data.FieldMetaData("offlineCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_CNT, new org.apache.thrift.meta_data.FieldMetaData("onlineCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractAttachment.class, metaDataMap);
  }

  public ContractAttachment() {
  }

  public ContractAttachment(
    int pid,
    int contractId,
    String attachmentFileName,
    String attachmentLocation,
    int offlineCnt,
    int onlineCnt,
    String remark)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.contractId = contractId;
    setContractIdIsSet(true);
    this.attachmentFileName = attachmentFileName;
    this.attachmentLocation = attachmentLocation;
    this.offlineCnt = offlineCnt;
    setOfflineCntIsSet(true);
    this.onlineCnt = onlineCnt;
    setOnlineCntIsSet(true);
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractAttachment(ContractAttachment other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.contractId = other.contractId;
    if (other.isSetAttachmentFileName()) {
      this.attachmentFileName = other.attachmentFileName;
    }
    if (other.isSetAttachmentLocation()) {
      this.attachmentLocation = other.attachmentLocation;
    }
    this.offlineCnt = other.offlineCnt;
    this.onlineCnt = other.onlineCnt;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public ContractAttachment deepCopy() {
    return new ContractAttachment(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setContractIdIsSet(false);
    this.contractId = 0;
    this.attachmentFileName = null;
    this.attachmentLocation = null;
    setOfflineCntIsSet(false);
    this.offlineCnt = 0;
    setOnlineCntIsSet(false);
    this.onlineCnt = 0;
    this.remark = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ContractAttachment setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getContractId() {
    return this.contractId;
  }

  public ContractAttachment setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public String getAttachmentFileName() {
    return this.attachmentFileName;
  }

  public ContractAttachment setAttachmentFileName(String attachmentFileName) {
    this.attachmentFileName = attachmentFileName;
    return this;
  }

  public void unsetAttachmentFileName() {
    this.attachmentFileName = null;
  }

  /** Returns true if field attachmentFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachmentFileName() {
    return this.attachmentFileName != null;
  }

  public void setAttachmentFileNameIsSet(boolean value) {
    if (!value) {
      this.attachmentFileName = null;
    }
  }

  public String getAttachmentLocation() {
    return this.attachmentLocation;
  }

  public ContractAttachment setAttachmentLocation(String attachmentLocation) {
    this.attachmentLocation = attachmentLocation;
    return this;
  }

  public void unsetAttachmentLocation() {
    this.attachmentLocation = null;
  }

  /** Returns true if field attachmentLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachmentLocation() {
    return this.attachmentLocation != null;
  }

  public void setAttachmentLocationIsSet(boolean value) {
    if (!value) {
      this.attachmentLocation = null;
    }
  }

  public int getOfflineCnt() {
    return this.offlineCnt;
  }

  public ContractAttachment setOfflineCnt(int offlineCnt) {
    this.offlineCnt = offlineCnt;
    setOfflineCntIsSet(true);
    return this;
  }

  public void unsetOfflineCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFLINECNT_ISSET_ID);
  }

  /** Returns true if field offlineCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetOfflineCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFLINECNT_ISSET_ID);
  }

  public void setOfflineCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFLINECNT_ISSET_ID, value);
  }

  public int getOnlineCnt() {
    return this.onlineCnt;
  }

  public ContractAttachment setOnlineCnt(int onlineCnt) {
    this.onlineCnt = onlineCnt;
    setOnlineCntIsSet(true);
    return this;
  }

  public void unsetOnlineCnt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINECNT_ISSET_ID);
  }

  /** Returns true if field onlineCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineCnt() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINECNT_ISSET_ID);
  }

  public void setOnlineCntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINECNT_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public ContractAttachment setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case ATTACHMENT_FILE_NAME:
      if (value == null) {
        unsetAttachmentFileName();
      } else {
        setAttachmentFileName((String)value);
      }
      break;

    case ATTACHMENT_LOCATION:
      if (value == null) {
        unsetAttachmentLocation();
      } else {
        setAttachmentLocation((String)value);
      }
      break;

    case OFFLINE_CNT:
      if (value == null) {
        unsetOfflineCnt();
      } else {
        setOfflineCnt((Integer)value);
      }
      break;

    case ONLINE_CNT:
      if (value == null) {
        unsetOnlineCnt();
      } else {
        setOnlineCnt((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case ATTACHMENT_FILE_NAME:
      return getAttachmentFileName();

    case ATTACHMENT_LOCATION:
      return getAttachmentLocation();

    case OFFLINE_CNT:
      return Integer.valueOf(getOfflineCnt());

    case ONLINE_CNT:
      return Integer.valueOf(getOnlineCnt());

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CONTRACT_ID:
      return isSetContractId();
    case ATTACHMENT_FILE_NAME:
      return isSetAttachmentFileName();
    case ATTACHMENT_LOCATION:
      return isSetAttachmentLocation();
    case OFFLINE_CNT:
      return isSetOfflineCnt();
    case ONLINE_CNT:
      return isSetOnlineCnt();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractAttachment)
      return this.equals((ContractAttachment)that);
    return false;
  }

  public boolean equals(ContractAttachment that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_attachmentFileName = true && this.isSetAttachmentFileName();
    boolean that_present_attachmentFileName = true && that.isSetAttachmentFileName();
    if (this_present_attachmentFileName || that_present_attachmentFileName) {
      if (!(this_present_attachmentFileName && that_present_attachmentFileName))
        return false;
      if (!this.attachmentFileName.equals(that.attachmentFileName))
        return false;
    }

    boolean this_present_attachmentLocation = true && this.isSetAttachmentLocation();
    boolean that_present_attachmentLocation = true && that.isSetAttachmentLocation();
    if (this_present_attachmentLocation || that_present_attachmentLocation) {
      if (!(this_present_attachmentLocation && that_present_attachmentLocation))
        return false;
      if (!this.attachmentLocation.equals(that.attachmentLocation))
        return false;
    }

    boolean this_present_offlineCnt = true;
    boolean that_present_offlineCnt = true;
    if (this_present_offlineCnt || that_present_offlineCnt) {
      if (!(this_present_offlineCnt && that_present_offlineCnt))
        return false;
      if (this.offlineCnt != that.offlineCnt)
        return false;
    }

    boolean this_present_onlineCnt = true;
    boolean that_present_onlineCnt = true;
    if (this_present_onlineCnt || that_present_onlineCnt) {
      if (!(this_present_onlineCnt && that_present_onlineCnt))
        return false;
      if (this.onlineCnt != that.onlineCnt)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_contractId = true;
    list.add(present_contractId);
    if (present_contractId)
      list.add(contractId);

    boolean present_attachmentFileName = true && (isSetAttachmentFileName());
    list.add(present_attachmentFileName);
    if (present_attachmentFileName)
      list.add(attachmentFileName);

    boolean present_attachmentLocation = true && (isSetAttachmentLocation());
    list.add(present_attachmentLocation);
    if (present_attachmentLocation)
      list.add(attachmentLocation);

    boolean present_offlineCnt = true;
    list.add(present_offlineCnt);
    if (present_offlineCnt)
      list.add(offlineCnt);

    boolean present_onlineCnt = true;
    list.add(present_onlineCnt);
    if (present_onlineCnt)
      list.add(onlineCnt);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContractAttachment other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachmentFileName()).compareTo(other.isSetAttachmentFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachmentFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachmentFileName, other.attachmentFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachmentLocation()).compareTo(other.isSetAttachmentLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachmentLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachmentLocation, other.attachmentLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfflineCnt()).compareTo(other.isSetOfflineCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfflineCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offlineCnt, other.offlineCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineCnt()).compareTo(other.isSetOnlineCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineCnt, other.onlineCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractAttachment(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachmentFileName:");
    if (this.attachmentFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.attachmentFileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachmentLocation:");
    if (this.attachmentLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.attachmentLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offlineCnt:");
    sb.append(this.offlineCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineCnt:");
    sb.append(this.onlineCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractAttachmentStandardSchemeFactory implements SchemeFactory {
    public ContractAttachmentStandardScheme getScheme() {
      return new ContractAttachmentStandardScheme();
    }
  }

  private static class ContractAttachmentStandardScheme extends StandardScheme<ContractAttachment> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractAttachment struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ATTACHMENT_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attachmentFileName = iprot.readString();
              struct.setAttachmentFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ATTACHMENT_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attachmentLocation = iprot.readString();
              struct.setAttachmentLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFLINE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.offlineCnt = iprot.readI32();
              struct.setOfflineCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ONLINE_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.onlineCnt = iprot.readI32();
              struct.setOnlineCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractAttachment struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      if (struct.attachmentFileName != null) {
        oprot.writeFieldBegin(ATTACHMENT_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.attachmentFileName);
        oprot.writeFieldEnd();
      }
      if (struct.attachmentLocation != null) {
        oprot.writeFieldBegin(ATTACHMENT_LOCATION_FIELD_DESC);
        oprot.writeString(struct.attachmentLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFLINE_CNT_FIELD_DESC);
      oprot.writeI32(struct.offlineCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_CNT_FIELD_DESC);
      oprot.writeI32(struct.onlineCnt);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractAttachmentTupleSchemeFactory implements SchemeFactory {
    public ContractAttachmentTupleScheme getScheme() {
      return new ContractAttachmentTupleScheme();
    }
  }

  private static class ContractAttachmentTupleScheme extends TupleScheme<ContractAttachment> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractAttachment struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetContractId()) {
        optionals.set(1);
      }
      if (struct.isSetAttachmentFileName()) {
        optionals.set(2);
      }
      if (struct.isSetAttachmentLocation()) {
        optionals.set(3);
      }
      if (struct.isSetOfflineCnt()) {
        optionals.set(4);
      }
      if (struct.isSetOnlineCnt()) {
        optionals.set(5);
      }
      if (struct.isSetRemark()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetAttachmentFileName()) {
        oprot.writeString(struct.attachmentFileName);
      }
      if (struct.isSetAttachmentLocation()) {
        oprot.writeString(struct.attachmentLocation);
      }
      if (struct.isSetOfflineCnt()) {
        oprot.writeI32(struct.offlineCnt);
      }
      if (struct.isSetOnlineCnt()) {
        oprot.writeI32(struct.onlineCnt);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractAttachment struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.attachmentFileName = iprot.readString();
        struct.setAttachmentFileNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.attachmentLocation = iprot.readString();
        struct.setAttachmentLocationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.offlineCnt = iprot.readI32();
        struct.setOfflineCntIsSet(true);
      }
      if (incoming.get(5)) {
        struct.onlineCnt = iprot.readI32();
        struct.setOnlineCntIsSet(true);
      }
      if (incoming.get(6)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}


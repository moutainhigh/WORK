/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class ProjectSurveyReport implements org.apache.thrift.TBase<ProjectSurveyReport, ProjectSurveyReport._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectSurveyReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectSurveyReport");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INTRODUCTION_FIELD_DESC = new org.apache.thrift.protocol.TField("introduction", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FINANCIAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("financialStatus", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOAN_PURPOSES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPurposes", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPAY_ANALYSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("repayAnalysis", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RISK_WARNING_FIELD_DESC = new org.apache.thrift.protocol.TField("riskWarning", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ASSURANCE_MEASURES_FIELD_DESC = new org.apache.thrift.protocol.TField("assuranceMeasures", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SURVEY_RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("surveyResults", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SPECIAL_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("specialDesc", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectSurveyReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectSurveyReportTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String introduction; // required
  public String projectSource; // required
  public String financialStatus; // required
  public String loanPurposes; // required
  public String repayAnalysis; // required
  public String riskWarning; // required
  public String assuranceMeasures; // required
  public String surveyResults; // required
  public int status; // required
  public String specialDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    INTRODUCTION((short)3, "introduction"),
    PROJECT_SOURCE((short)4, "projectSource"),
    FINANCIAL_STATUS((short)5, "financialStatus"),
    LOAN_PURPOSES((short)6, "loanPurposes"),
    REPAY_ANALYSIS((short)7, "repayAnalysis"),
    RISK_WARNING((short)8, "riskWarning"),
    ASSURANCE_MEASURES((short)9, "assuranceMeasures"),
    SURVEY_RESULTS((short)10, "surveyResults"),
    STATUS((short)11, "status"),
    SPECIAL_DESC((short)12, "specialDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // INTRODUCTION
          return INTRODUCTION;
        case 4: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 5: // FINANCIAL_STATUS
          return FINANCIAL_STATUS;
        case 6: // LOAN_PURPOSES
          return LOAN_PURPOSES;
        case 7: // REPAY_ANALYSIS
          return REPAY_ANALYSIS;
        case 8: // RISK_WARNING
          return RISK_WARNING;
        case 9: // ASSURANCE_MEASURES
          return ASSURANCE_MEASURES;
        case 10: // SURVEY_RESULTS
          return SURVEY_RESULTS;
        case 11: // STATUS
          return STATUS;
        case 12: // SPECIAL_DESC
          return SPECIAL_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTRODUCTION, new org.apache.thrift.meta_data.FieldMetaData("introduction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINANCIAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("financialStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_PURPOSES, new org.apache.thrift.meta_data.FieldMetaData("loanPurposes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_ANALYSIS, new org.apache.thrift.meta_data.FieldMetaData("repayAnalysis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RISK_WARNING, new org.apache.thrift.meta_data.FieldMetaData("riskWarning", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSURANCE_MEASURES, new org.apache.thrift.meta_data.FieldMetaData("assuranceMeasures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURVEY_RESULTS, new org.apache.thrift.meta_data.FieldMetaData("surveyResults", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPECIAL_DESC, new org.apache.thrift.meta_data.FieldMetaData("specialDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectSurveyReport.class, metaDataMap);
  }

  public ProjectSurveyReport() {
  }

  public ProjectSurveyReport(
    int pid,
    int projectId,
    String introduction,
    String projectSource,
    String financialStatus,
    String loanPurposes,
    String repayAnalysis,
    String riskWarning,
    String assuranceMeasures,
    String surveyResults,
    int status,
    String specialDesc)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.introduction = introduction;
    this.projectSource = projectSource;
    this.financialStatus = financialStatus;
    this.loanPurposes = loanPurposes;
    this.repayAnalysis = repayAnalysis;
    this.riskWarning = riskWarning;
    this.assuranceMeasures = assuranceMeasures;
    this.surveyResults = surveyResults;
    this.status = status;
    setStatusIsSet(true);
    this.specialDesc = specialDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectSurveyReport(ProjectSurveyReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetIntroduction()) {
      this.introduction = other.introduction;
    }
    if (other.isSetProjectSource()) {
      this.projectSource = other.projectSource;
    }
    if (other.isSetFinancialStatus()) {
      this.financialStatus = other.financialStatus;
    }
    if (other.isSetLoanPurposes()) {
      this.loanPurposes = other.loanPurposes;
    }
    if (other.isSetRepayAnalysis()) {
      this.repayAnalysis = other.repayAnalysis;
    }
    if (other.isSetRiskWarning()) {
      this.riskWarning = other.riskWarning;
    }
    if (other.isSetAssuranceMeasures()) {
      this.assuranceMeasures = other.assuranceMeasures;
    }
    if (other.isSetSurveyResults()) {
      this.surveyResults = other.surveyResults;
    }
    this.status = other.status;
    if (other.isSetSpecialDesc()) {
      this.specialDesc = other.specialDesc;
    }
  }

  public ProjectSurveyReport deepCopy() {
    return new ProjectSurveyReport(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.introduction = null;
    this.projectSource = null;
    this.financialStatus = null;
    this.loanPurposes = null;
    this.repayAnalysis = null;
    this.riskWarning = null;
    this.assuranceMeasures = null;
    this.surveyResults = null;
    setStatusIsSet(false);
    this.status = 0;
    this.specialDesc = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectSurveyReport setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectSurveyReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getIntroduction() {
    return this.introduction;
  }

  public ProjectSurveyReport setIntroduction(String introduction) {
    this.introduction = introduction;
    return this;
  }

  public void unsetIntroduction() {
    this.introduction = null;
  }

  /** Returns true if field introduction is set (has been assigned a value) and false otherwise */
  public boolean isSetIntroduction() {
    return this.introduction != null;
  }

  public void setIntroductionIsSet(boolean value) {
    if (!value) {
      this.introduction = null;
    }
  }

  public String getProjectSource() {
    return this.projectSource;
  }

  public ProjectSurveyReport setProjectSource(String projectSource) {
    this.projectSource = projectSource;
    return this;
  }

  public void unsetProjectSource() {
    this.projectSource = null;
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return this.projectSource != null;
  }

  public void setProjectSourceIsSet(boolean value) {
    if (!value) {
      this.projectSource = null;
    }
  }

  public String getFinancialStatus() {
    return this.financialStatus;
  }

  public ProjectSurveyReport setFinancialStatus(String financialStatus) {
    this.financialStatus = financialStatus;
    return this;
  }

  public void unsetFinancialStatus() {
    this.financialStatus = null;
  }

  /** Returns true if field financialStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFinancialStatus() {
    return this.financialStatus != null;
  }

  public void setFinancialStatusIsSet(boolean value) {
    if (!value) {
      this.financialStatus = null;
    }
  }

  public String getLoanPurposes() {
    return this.loanPurposes;
  }

  public ProjectSurveyReport setLoanPurposes(String loanPurposes) {
    this.loanPurposes = loanPurposes;
    return this;
  }

  public void unsetLoanPurposes() {
    this.loanPurposes = null;
  }

  /** Returns true if field loanPurposes is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPurposes() {
    return this.loanPurposes != null;
  }

  public void setLoanPurposesIsSet(boolean value) {
    if (!value) {
      this.loanPurposes = null;
    }
  }

  public String getRepayAnalysis() {
    return this.repayAnalysis;
  }

  public ProjectSurveyReport setRepayAnalysis(String repayAnalysis) {
    this.repayAnalysis = repayAnalysis;
    return this;
  }

  public void unsetRepayAnalysis() {
    this.repayAnalysis = null;
  }

  /** Returns true if field repayAnalysis is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayAnalysis() {
    return this.repayAnalysis != null;
  }

  public void setRepayAnalysisIsSet(boolean value) {
    if (!value) {
      this.repayAnalysis = null;
    }
  }

  public String getRiskWarning() {
    return this.riskWarning;
  }

  public ProjectSurveyReport setRiskWarning(String riskWarning) {
    this.riskWarning = riskWarning;
    return this;
  }

  public void unsetRiskWarning() {
    this.riskWarning = null;
  }

  /** Returns true if field riskWarning is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskWarning() {
    return this.riskWarning != null;
  }

  public void setRiskWarningIsSet(boolean value) {
    if (!value) {
      this.riskWarning = null;
    }
  }

  public String getAssuranceMeasures() {
    return this.assuranceMeasures;
  }

  public ProjectSurveyReport setAssuranceMeasures(String assuranceMeasures) {
    this.assuranceMeasures = assuranceMeasures;
    return this;
  }

  public void unsetAssuranceMeasures() {
    this.assuranceMeasures = null;
  }

  /** Returns true if field assuranceMeasures is set (has been assigned a value) and false otherwise */
  public boolean isSetAssuranceMeasures() {
    return this.assuranceMeasures != null;
  }

  public void setAssuranceMeasuresIsSet(boolean value) {
    if (!value) {
      this.assuranceMeasures = null;
    }
  }

  public String getSurveyResults() {
    return this.surveyResults;
  }

  public ProjectSurveyReport setSurveyResults(String surveyResults) {
    this.surveyResults = surveyResults;
    return this;
  }

  public void unsetSurveyResults() {
    this.surveyResults = null;
  }

  /** Returns true if field surveyResults is set (has been assigned a value) and false otherwise */
  public boolean isSetSurveyResults() {
    return this.surveyResults != null;
  }

  public void setSurveyResultsIsSet(boolean value) {
    if (!value) {
      this.surveyResults = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectSurveyReport setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getSpecialDesc() {
    return this.specialDesc;
  }

  public ProjectSurveyReport setSpecialDesc(String specialDesc) {
    this.specialDesc = specialDesc;
    return this;
  }

  public void unsetSpecialDesc() {
    this.specialDesc = null;
  }

  /** Returns true if field specialDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecialDesc() {
    return this.specialDesc != null;
  }

  public void setSpecialDescIsSet(boolean value) {
    if (!value) {
      this.specialDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case INTRODUCTION:
      if (value == null) {
        unsetIntroduction();
      } else {
        setIntroduction((String)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((String)value);
      }
      break;

    case FINANCIAL_STATUS:
      if (value == null) {
        unsetFinancialStatus();
      } else {
        setFinancialStatus((String)value);
      }
      break;

    case LOAN_PURPOSES:
      if (value == null) {
        unsetLoanPurposes();
      } else {
        setLoanPurposes((String)value);
      }
      break;

    case REPAY_ANALYSIS:
      if (value == null) {
        unsetRepayAnalysis();
      } else {
        setRepayAnalysis((String)value);
      }
      break;

    case RISK_WARNING:
      if (value == null) {
        unsetRiskWarning();
      } else {
        setRiskWarning((String)value);
      }
      break;

    case ASSURANCE_MEASURES:
      if (value == null) {
        unsetAssuranceMeasures();
      } else {
        setAssuranceMeasures((String)value);
      }
      break;

    case SURVEY_RESULTS:
      if (value == null) {
        unsetSurveyResults();
      } else {
        setSurveyResults((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SPECIAL_DESC:
      if (value == null) {
        unsetSpecialDesc();
      } else {
        setSpecialDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case INTRODUCTION:
      return getIntroduction();

    case PROJECT_SOURCE:
      return getProjectSource();

    case FINANCIAL_STATUS:
      return getFinancialStatus();

    case LOAN_PURPOSES:
      return getLoanPurposes();

    case REPAY_ANALYSIS:
      return getRepayAnalysis();

    case RISK_WARNING:
      return getRiskWarning();

    case ASSURANCE_MEASURES:
      return getAssuranceMeasures();

    case SURVEY_RESULTS:
      return getSurveyResults();

    case STATUS:
      return Integer.valueOf(getStatus());

    case SPECIAL_DESC:
      return getSpecialDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case INTRODUCTION:
      return isSetIntroduction();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case FINANCIAL_STATUS:
      return isSetFinancialStatus();
    case LOAN_PURPOSES:
      return isSetLoanPurposes();
    case REPAY_ANALYSIS:
      return isSetRepayAnalysis();
    case RISK_WARNING:
      return isSetRiskWarning();
    case ASSURANCE_MEASURES:
      return isSetAssuranceMeasures();
    case SURVEY_RESULTS:
      return isSetSurveyResults();
    case STATUS:
      return isSetStatus();
    case SPECIAL_DESC:
      return isSetSpecialDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectSurveyReport)
      return this.equals((ProjectSurveyReport)that);
    return false;
  }

  public boolean equals(ProjectSurveyReport that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_introduction = true && this.isSetIntroduction();
    boolean that_present_introduction = true && that.isSetIntroduction();
    if (this_present_introduction || that_present_introduction) {
      if (!(this_present_introduction && that_present_introduction))
        return false;
      if (!this.introduction.equals(that.introduction))
        return false;
    }

    boolean this_present_projectSource = true && this.isSetProjectSource();
    boolean that_present_projectSource = true && that.isSetProjectSource();
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (!this.projectSource.equals(that.projectSource))
        return false;
    }

    boolean this_present_financialStatus = true && this.isSetFinancialStatus();
    boolean that_present_financialStatus = true && that.isSetFinancialStatus();
    if (this_present_financialStatus || that_present_financialStatus) {
      if (!(this_present_financialStatus && that_present_financialStatus))
        return false;
      if (!this.financialStatus.equals(that.financialStatus))
        return false;
    }

    boolean this_present_loanPurposes = true && this.isSetLoanPurposes();
    boolean that_present_loanPurposes = true && that.isSetLoanPurposes();
    if (this_present_loanPurposes || that_present_loanPurposes) {
      if (!(this_present_loanPurposes && that_present_loanPurposes))
        return false;
      if (!this.loanPurposes.equals(that.loanPurposes))
        return false;
    }

    boolean this_present_repayAnalysis = true && this.isSetRepayAnalysis();
    boolean that_present_repayAnalysis = true && that.isSetRepayAnalysis();
    if (this_present_repayAnalysis || that_present_repayAnalysis) {
      if (!(this_present_repayAnalysis && that_present_repayAnalysis))
        return false;
      if (!this.repayAnalysis.equals(that.repayAnalysis))
        return false;
    }

    boolean this_present_riskWarning = true && this.isSetRiskWarning();
    boolean that_present_riskWarning = true && that.isSetRiskWarning();
    if (this_present_riskWarning || that_present_riskWarning) {
      if (!(this_present_riskWarning && that_present_riskWarning))
        return false;
      if (!this.riskWarning.equals(that.riskWarning))
        return false;
    }

    boolean this_present_assuranceMeasures = true && this.isSetAssuranceMeasures();
    boolean that_present_assuranceMeasures = true && that.isSetAssuranceMeasures();
    if (this_present_assuranceMeasures || that_present_assuranceMeasures) {
      if (!(this_present_assuranceMeasures && that_present_assuranceMeasures))
        return false;
      if (!this.assuranceMeasures.equals(that.assuranceMeasures))
        return false;
    }

    boolean this_present_surveyResults = true && this.isSetSurveyResults();
    boolean that_present_surveyResults = true && that.isSetSurveyResults();
    if (this_present_surveyResults || that_present_surveyResults) {
      if (!(this_present_surveyResults && that_present_surveyResults))
        return false;
      if (!this.surveyResults.equals(that.surveyResults))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_specialDesc = true && this.isSetSpecialDesc();
    boolean that_present_specialDesc = true && that.isSetSpecialDesc();
    if (this_present_specialDesc || that_present_specialDesc) {
      if (!(this_present_specialDesc && that_present_specialDesc))
        return false;
      if (!this.specialDesc.equals(that.specialDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_introduction = true && (isSetIntroduction());
    list.add(present_introduction);
    if (present_introduction)
      list.add(introduction);

    boolean present_projectSource = true && (isSetProjectSource());
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_financialStatus = true && (isSetFinancialStatus());
    list.add(present_financialStatus);
    if (present_financialStatus)
      list.add(financialStatus);

    boolean present_loanPurposes = true && (isSetLoanPurposes());
    list.add(present_loanPurposes);
    if (present_loanPurposes)
      list.add(loanPurposes);

    boolean present_repayAnalysis = true && (isSetRepayAnalysis());
    list.add(present_repayAnalysis);
    if (present_repayAnalysis)
      list.add(repayAnalysis);

    boolean present_riskWarning = true && (isSetRiskWarning());
    list.add(present_riskWarning);
    if (present_riskWarning)
      list.add(riskWarning);

    boolean present_assuranceMeasures = true && (isSetAssuranceMeasures());
    list.add(present_assuranceMeasures);
    if (present_assuranceMeasures)
      list.add(assuranceMeasures);

    boolean present_surveyResults = true && (isSetSurveyResults());
    list.add(present_surveyResults);
    if (present_surveyResults)
      list.add(surveyResults);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_specialDesc = true && (isSetSpecialDesc());
    list.add(present_specialDesc);
    if (present_specialDesc)
      list.add(specialDesc);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectSurveyReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntroduction()).compareTo(other.isSetIntroduction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntroduction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.introduction, other.introduction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinancialStatus()).compareTo(other.isSetFinancialStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinancialStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financialStatus, other.financialStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPurposes()).compareTo(other.isSetLoanPurposes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPurposes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPurposes, other.loanPurposes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayAnalysis()).compareTo(other.isSetRepayAnalysis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayAnalysis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayAnalysis, other.repayAnalysis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskWarning()).compareTo(other.isSetRiskWarning());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskWarning()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskWarning, other.riskWarning);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssuranceMeasures()).compareTo(other.isSetAssuranceMeasures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssuranceMeasures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assuranceMeasures, other.assuranceMeasures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurveyResults()).compareTo(other.isSetSurveyResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurveyResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surveyResults, other.surveyResults);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecialDesc()).compareTo(other.isSetSpecialDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecialDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specialDesc, other.specialDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectSurveyReport(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("introduction:");
    if (this.introduction == null) {
      sb.append("null");
    } else {
      sb.append(this.introduction);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    if (this.projectSource == null) {
      sb.append("null");
    } else {
      sb.append(this.projectSource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("financialStatus:");
    if (this.financialStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.financialStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPurposes:");
    if (this.loanPurposes == null) {
      sb.append("null");
    } else {
      sb.append(this.loanPurposes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayAnalysis:");
    if (this.repayAnalysis == null) {
      sb.append("null");
    } else {
      sb.append(this.repayAnalysis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("riskWarning:");
    if (this.riskWarning == null) {
      sb.append("null");
    } else {
      sb.append(this.riskWarning);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assuranceMeasures:");
    if (this.assuranceMeasures == null) {
      sb.append("null");
    } else {
      sb.append(this.assuranceMeasures);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("surveyResults:");
    if (this.surveyResults == null) {
      sb.append("null");
    } else {
      sb.append(this.surveyResults);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("specialDesc:");
    if (this.specialDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.specialDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectSurveyReportStandardSchemeFactory implements SchemeFactory {
    public ProjectSurveyReportStandardScheme getScheme() {
      return new ProjectSurveyReportStandardScheme();
    }
  }

  private static class ProjectSurveyReportStandardScheme extends StandardScheme<ProjectSurveyReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectSurveyReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTRODUCTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.introduction = iprot.readString();
              struct.setIntroductionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectSource = iprot.readString();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FINANCIAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.financialStatus = iprot.readString();
              struct.setFinancialStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOAN_PURPOSES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanPurposes = iprot.readString();
              struct.setLoanPurposesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPAY_ANALYSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayAnalysis = iprot.readString();
              struct.setRepayAnalysisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RISK_WARNING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.riskWarning = iprot.readString();
              struct.setRiskWarningIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASSURANCE_MEASURES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assuranceMeasures = iprot.readString();
              struct.setAssuranceMeasuresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SURVEY_RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.surveyResults = iprot.readString();
              struct.setSurveyResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SPECIAL_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specialDesc = iprot.readString();
              struct.setSpecialDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectSurveyReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.introduction != null) {
        oprot.writeFieldBegin(INTRODUCTION_FIELD_DESC);
        oprot.writeString(struct.introduction);
        oprot.writeFieldEnd();
      }
      if (struct.projectSource != null) {
        oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
        oprot.writeString(struct.projectSource);
        oprot.writeFieldEnd();
      }
      if (struct.financialStatus != null) {
        oprot.writeFieldBegin(FINANCIAL_STATUS_FIELD_DESC);
        oprot.writeString(struct.financialStatus);
        oprot.writeFieldEnd();
      }
      if (struct.loanPurposes != null) {
        oprot.writeFieldBegin(LOAN_PURPOSES_FIELD_DESC);
        oprot.writeString(struct.loanPurposes);
        oprot.writeFieldEnd();
      }
      if (struct.repayAnalysis != null) {
        oprot.writeFieldBegin(REPAY_ANALYSIS_FIELD_DESC);
        oprot.writeString(struct.repayAnalysis);
        oprot.writeFieldEnd();
      }
      if (struct.riskWarning != null) {
        oprot.writeFieldBegin(RISK_WARNING_FIELD_DESC);
        oprot.writeString(struct.riskWarning);
        oprot.writeFieldEnd();
      }
      if (struct.assuranceMeasures != null) {
        oprot.writeFieldBegin(ASSURANCE_MEASURES_FIELD_DESC);
        oprot.writeString(struct.assuranceMeasures);
        oprot.writeFieldEnd();
      }
      if (struct.surveyResults != null) {
        oprot.writeFieldBegin(SURVEY_RESULTS_FIELD_DESC);
        oprot.writeString(struct.surveyResults);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.specialDesc != null) {
        oprot.writeFieldBegin(SPECIAL_DESC_FIELD_DESC);
        oprot.writeString(struct.specialDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectSurveyReportTupleSchemeFactory implements SchemeFactory {
    public ProjectSurveyReportTupleScheme getScheme() {
      return new ProjectSurveyReportTupleScheme();
    }
  }

  private static class ProjectSurveyReportTupleScheme extends TupleScheme<ProjectSurveyReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectSurveyReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetIntroduction()) {
        optionals.set(2);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(3);
      }
      if (struct.isSetFinancialStatus()) {
        optionals.set(4);
      }
      if (struct.isSetLoanPurposes()) {
        optionals.set(5);
      }
      if (struct.isSetRepayAnalysis()) {
        optionals.set(6);
      }
      if (struct.isSetRiskWarning()) {
        optionals.set(7);
      }
      if (struct.isSetAssuranceMeasures()) {
        optionals.set(8);
      }
      if (struct.isSetSurveyResults()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetSpecialDesc()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetIntroduction()) {
        oprot.writeString(struct.introduction);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeString(struct.projectSource);
      }
      if (struct.isSetFinancialStatus()) {
        oprot.writeString(struct.financialStatus);
      }
      if (struct.isSetLoanPurposes()) {
        oprot.writeString(struct.loanPurposes);
      }
      if (struct.isSetRepayAnalysis()) {
        oprot.writeString(struct.repayAnalysis);
      }
      if (struct.isSetRiskWarning()) {
        oprot.writeString(struct.riskWarning);
      }
      if (struct.isSetAssuranceMeasures()) {
        oprot.writeString(struct.assuranceMeasures);
      }
      if (struct.isSetSurveyResults()) {
        oprot.writeString(struct.surveyResults);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSpecialDesc()) {
        oprot.writeString(struct.specialDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectSurveyReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.introduction = iprot.readString();
        struct.setIntroductionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectSource = iprot.readString();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.financialStatus = iprot.readString();
        struct.setFinancialStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.loanPurposes = iprot.readString();
        struct.setLoanPurposesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repayAnalysis = iprot.readString();
        struct.setRepayAnalysisIsSet(true);
      }
      if (incoming.get(7)) {
        struct.riskWarning = iprot.readString();
        struct.setRiskWarningIsSet(true);
      }
      if (incoming.get(8)) {
        struct.assuranceMeasures = iprot.readString();
        struct.setAssuranceMeasuresIsSet(true);
      }
      if (incoming.get(9)) {
        struct.surveyResults = iprot.readString();
        struct.setSurveyResultsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.specialDesc = iprot.readString();
        struct.setSpecialDescIsSet(true);
      }
    }
  }

}


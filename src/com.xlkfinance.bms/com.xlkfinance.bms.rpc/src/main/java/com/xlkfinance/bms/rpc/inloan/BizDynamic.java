/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 业务动态 表BIZ_DYNAMIC
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BizDynamic implements org.apache.thrift.TBase<BizDynamic, BizDynamic._Fields>, java.io.Serializable, Cloneable, Comparable<BizDynamic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizDynamic");

  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MODUEL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("moduelNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DYNAMIC_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicNumber", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PARENT_DYNAMIC_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("parentDynamicNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField FINISH_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("finishDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField HANDLE_AUTHOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("handleAuthorId", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField DYNAMIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HANDLE_AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("handleAuthorName", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDateStr", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizDynamicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizDynamicTupleSchemeFactory());
  }

  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public int pid; // required
  public int projectId; // required
  public String moduelNumber; // required
  public String dynamicNumber; // required
  public String parentDynamicNumber; // required
  public int status; // required
  public String finishDate; // required
  public String remark; // required
  public String createrDate; // required
  public String updateDate; // required
  public int handleAuthorId; // required
  public String dynamicName; // required
  public String handleAuthorName; // required
  public String createrDateStr; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_IDS((short)1, "userIds"),
    PAGE((short)2, "page"),
    ROWS((short)3, "rows"),
    PID((short)4, "pid"),
    PROJECT_ID((short)5, "projectId"),
    MODUEL_NUMBER((short)6, "moduelNumber"),
    DYNAMIC_NUMBER((short)7, "dynamicNumber"),
    PARENT_DYNAMIC_NUMBER((short)8, "parentDynamicNumber"),
    STATUS((short)9, "status"),
    FINISH_DATE((short)10, "finishDate"),
    REMARK((short)11, "remark"),
    CREATER_DATE((short)12, "createrDate"),
    UPDATE_DATE((short)13, "updateDate"),
    HANDLE_AUTHOR_ID((short)14, "handleAuthorId"),
    DYNAMIC_NAME((short)15, "dynamicName"),
    HANDLE_AUTHOR_NAME((short)16, "handleAuthorName"),
    CREATER_DATE_STR((short)17, "createrDateStr");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_IDS
          return USER_IDS;
        case 2: // PAGE
          return PAGE;
        case 3: // ROWS
          return ROWS;
        case 4: // PID
          return PID;
        case 5: // PROJECT_ID
          return PROJECT_ID;
        case 6: // MODUEL_NUMBER
          return MODUEL_NUMBER;
        case 7: // DYNAMIC_NUMBER
          return DYNAMIC_NUMBER;
        case 8: // PARENT_DYNAMIC_NUMBER
          return PARENT_DYNAMIC_NUMBER;
        case 9: // STATUS
          return STATUS;
        case 10: // FINISH_DATE
          return FINISH_DATE;
        case 11: // REMARK
          return REMARK;
        case 12: // CREATER_DATE
          return CREATER_DATE;
        case 13: // UPDATE_DATE
          return UPDATE_DATE;
        case 14: // HANDLE_AUTHOR_ID
          return HANDLE_AUTHOR_ID;
        case 15: // DYNAMIC_NAME
          return DYNAMIC_NAME;
        case 16: // HANDLE_AUTHOR_NAME
          return HANDLE_AUTHOR_NAME;
        case 17: // CREATER_DATE_STR
          return CREATER_DATE_STR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __PROJECTID_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __HANDLEAUTHORID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MODUEL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("moduelNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DYNAMIC_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("dynamicNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_DYNAMIC_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("parentDynamicNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINISH_DATE, new org.apache.thrift.meta_data.FieldMetaData("finishDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_AUTHOR_ID, new org.apache.thrift.meta_data.FieldMetaData("handleAuthorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DYNAMIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("dynamicName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HANDLE_AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("handleAuthorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE_STR, new org.apache.thrift.meta_data.FieldMetaData("createrDateStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizDynamic.class, metaDataMap);
  }

  public BizDynamic() {
    this.page = 1;

    this.rows = 10;

  }

  public BizDynamic(
    List<Integer> userIds,
    int page,
    int rows,
    int pid,
    int projectId,
    String moduelNumber,
    String dynamicNumber,
    String parentDynamicNumber,
    int status,
    String finishDate,
    String remark,
    String createrDate,
    String updateDate,
    int handleAuthorId,
    String dynamicName,
    String handleAuthorName,
    String createrDateStr)
  {
    this();
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.moduelNumber = moduelNumber;
    this.dynamicNumber = dynamicNumber;
    this.parentDynamicNumber = parentDynamicNumber;
    this.status = status;
    setStatusIsSet(true);
    this.finishDate = finishDate;
    this.remark = remark;
    this.createrDate = createrDate;
    this.updateDate = updateDate;
    this.handleAuthorId = handleAuthorId;
    setHandleAuthorIdIsSet(true);
    this.dynamicName = dynamicName;
    this.handleAuthorName = handleAuthorName;
    this.createrDateStr = createrDateStr;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizDynamic(BizDynamic other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetModuelNumber()) {
      this.moduelNumber = other.moduelNumber;
    }
    if (other.isSetDynamicNumber()) {
      this.dynamicNumber = other.dynamicNumber;
    }
    if (other.isSetParentDynamicNumber()) {
      this.parentDynamicNumber = other.parentDynamicNumber;
    }
    this.status = other.status;
    if (other.isSetFinishDate()) {
      this.finishDate = other.finishDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.handleAuthorId = other.handleAuthorId;
    if (other.isSetDynamicName()) {
      this.dynamicName = other.dynamicName;
    }
    if (other.isSetHandleAuthorName()) {
      this.handleAuthorName = other.handleAuthorName;
    }
    if (other.isSetCreaterDateStr()) {
      this.createrDateStr = other.createrDateStr;
    }
  }

  public BizDynamic deepCopy() {
    return new BizDynamic(this);
  }

  @Override
  public void clear() {
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.moduelNumber = null;
    this.dynamicNumber = null;
    this.parentDynamicNumber = null;
    setStatusIsSet(false);
    this.status = 0;
    this.finishDate = null;
    this.remark = null;
    this.createrDate = null;
    this.updateDate = null;
    setHandleAuthorIdIsSet(false);
    this.handleAuthorId = 0;
    this.dynamicName = null;
    this.handleAuthorName = null;
    this.createrDateStr = null;
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public BizDynamic setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public BizDynamic setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public BizDynamic setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public BizDynamic setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizDynamic setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getModuelNumber() {
    return this.moduelNumber;
  }

  public BizDynamic setModuelNumber(String moduelNumber) {
    this.moduelNumber = moduelNumber;
    return this;
  }

  public void unsetModuelNumber() {
    this.moduelNumber = null;
  }

  /** Returns true if field moduelNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetModuelNumber() {
    return this.moduelNumber != null;
  }

  public void setModuelNumberIsSet(boolean value) {
    if (!value) {
      this.moduelNumber = null;
    }
  }

  public String getDynamicNumber() {
    return this.dynamicNumber;
  }

  public BizDynamic setDynamicNumber(String dynamicNumber) {
    this.dynamicNumber = dynamicNumber;
    return this;
  }

  public void unsetDynamicNumber() {
    this.dynamicNumber = null;
  }

  /** Returns true if field dynamicNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicNumber() {
    return this.dynamicNumber != null;
  }

  public void setDynamicNumberIsSet(boolean value) {
    if (!value) {
      this.dynamicNumber = null;
    }
  }

  public String getParentDynamicNumber() {
    return this.parentDynamicNumber;
  }

  public BizDynamic setParentDynamicNumber(String parentDynamicNumber) {
    this.parentDynamicNumber = parentDynamicNumber;
    return this;
  }

  public void unsetParentDynamicNumber() {
    this.parentDynamicNumber = null;
  }

  /** Returns true if field parentDynamicNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetParentDynamicNumber() {
    return this.parentDynamicNumber != null;
  }

  public void setParentDynamicNumberIsSet(boolean value) {
    if (!value) {
      this.parentDynamicNumber = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public BizDynamic setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getFinishDate() {
    return this.finishDate;
  }

  public BizDynamic setFinishDate(String finishDate) {
    this.finishDate = finishDate;
    return this;
  }

  public void unsetFinishDate() {
    this.finishDate = null;
  }

  /** Returns true if field finishDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishDate() {
    return this.finishDate != null;
  }

  public void setFinishDateIsSet(boolean value) {
    if (!value) {
      this.finishDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public BizDynamic setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public BizDynamic setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizDynamic setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public int getHandleAuthorId() {
    return this.handleAuthorId;
  }

  public BizDynamic setHandleAuthorId(int handleAuthorId) {
    this.handleAuthorId = handleAuthorId;
    setHandleAuthorIdIsSet(true);
    return this;
  }

  public void unsetHandleAuthorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEAUTHORID_ISSET_ID);
  }

  /** Returns true if field handleAuthorId is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleAuthorId() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEAUTHORID_ISSET_ID);
  }

  public void setHandleAuthorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEAUTHORID_ISSET_ID, value);
  }

  public String getDynamicName() {
    return this.dynamicName;
  }

  public BizDynamic setDynamicName(String dynamicName) {
    this.dynamicName = dynamicName;
    return this;
  }

  public void unsetDynamicName() {
    this.dynamicName = null;
  }

  /** Returns true if field dynamicName is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicName() {
    return this.dynamicName != null;
  }

  public void setDynamicNameIsSet(boolean value) {
    if (!value) {
      this.dynamicName = null;
    }
  }

  public String getHandleAuthorName() {
    return this.handleAuthorName;
  }

  public BizDynamic setHandleAuthorName(String handleAuthorName) {
    this.handleAuthorName = handleAuthorName;
    return this;
  }

  public void unsetHandleAuthorName() {
    this.handleAuthorName = null;
  }

  /** Returns true if field handleAuthorName is set (has been assigned a value) and false otherwise */
  public boolean isSetHandleAuthorName() {
    return this.handleAuthorName != null;
  }

  public void setHandleAuthorNameIsSet(boolean value) {
    if (!value) {
      this.handleAuthorName = null;
    }
  }

  public String getCreaterDateStr() {
    return this.createrDateStr;
  }

  public BizDynamic setCreaterDateStr(String createrDateStr) {
    this.createrDateStr = createrDateStr;
    return this;
  }

  public void unsetCreaterDateStr() {
    this.createrDateStr = null;
  }

  /** Returns true if field createrDateStr is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDateStr() {
    return this.createrDateStr != null;
  }

  public void setCreaterDateStrIsSet(boolean value) {
    if (!value) {
      this.createrDateStr = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case MODUEL_NUMBER:
      if (value == null) {
        unsetModuelNumber();
      } else {
        setModuelNumber((String)value);
      }
      break;

    case DYNAMIC_NUMBER:
      if (value == null) {
        unsetDynamicNumber();
      } else {
        setDynamicNumber((String)value);
      }
      break;

    case PARENT_DYNAMIC_NUMBER:
      if (value == null) {
        unsetParentDynamicNumber();
      } else {
        setParentDynamicNumber((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case FINISH_DATE:
      if (value == null) {
        unsetFinishDate();
      } else {
        setFinishDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case HANDLE_AUTHOR_ID:
      if (value == null) {
        unsetHandleAuthorId();
      } else {
        setHandleAuthorId((Integer)value);
      }
      break;

    case DYNAMIC_NAME:
      if (value == null) {
        unsetDynamicName();
      } else {
        setDynamicName((String)value);
      }
      break;

    case HANDLE_AUTHOR_NAME:
      if (value == null) {
        unsetHandleAuthorName();
      } else {
        setHandleAuthorName((String)value);
      }
      break;

    case CREATER_DATE_STR:
      if (value == null) {
        unsetCreaterDateStr();
      } else {
        setCreaterDateStr((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case MODUEL_NUMBER:
      return getModuelNumber();

    case DYNAMIC_NUMBER:
      return getDynamicNumber();

    case PARENT_DYNAMIC_NUMBER:
      return getParentDynamicNumber();

    case STATUS:
      return Integer.valueOf(getStatus());

    case FINISH_DATE:
      return getFinishDate();

    case REMARK:
      return getRemark();

    case CREATER_DATE:
      return getCreaterDate();

    case UPDATE_DATE:
      return getUpdateDate();

    case HANDLE_AUTHOR_ID:
      return Integer.valueOf(getHandleAuthorId());

    case DYNAMIC_NAME:
      return getDynamicName();

    case HANDLE_AUTHOR_NAME:
      return getHandleAuthorName();

    case CREATER_DATE_STR:
      return getCreaterDateStr();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case MODUEL_NUMBER:
      return isSetModuelNumber();
    case DYNAMIC_NUMBER:
      return isSetDynamicNumber();
    case PARENT_DYNAMIC_NUMBER:
      return isSetParentDynamicNumber();
    case STATUS:
      return isSetStatus();
    case FINISH_DATE:
      return isSetFinishDate();
    case REMARK:
      return isSetRemark();
    case CREATER_DATE:
      return isSetCreaterDate();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case HANDLE_AUTHOR_ID:
      return isSetHandleAuthorId();
    case DYNAMIC_NAME:
      return isSetDynamicName();
    case HANDLE_AUTHOR_NAME:
      return isSetHandleAuthorName();
    case CREATER_DATE_STR:
      return isSetCreaterDateStr();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizDynamic)
      return this.equals((BizDynamic)that);
    return false;
  }

  public boolean equals(BizDynamic that) {
    if (that == null)
      return false;

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_moduelNumber = true && this.isSetModuelNumber();
    boolean that_present_moduelNumber = true && that.isSetModuelNumber();
    if (this_present_moduelNumber || that_present_moduelNumber) {
      if (!(this_present_moduelNumber && that_present_moduelNumber))
        return false;
      if (!this.moduelNumber.equals(that.moduelNumber))
        return false;
    }

    boolean this_present_dynamicNumber = true && this.isSetDynamicNumber();
    boolean that_present_dynamicNumber = true && that.isSetDynamicNumber();
    if (this_present_dynamicNumber || that_present_dynamicNumber) {
      if (!(this_present_dynamicNumber && that_present_dynamicNumber))
        return false;
      if (!this.dynamicNumber.equals(that.dynamicNumber))
        return false;
    }

    boolean this_present_parentDynamicNumber = true && this.isSetParentDynamicNumber();
    boolean that_present_parentDynamicNumber = true && that.isSetParentDynamicNumber();
    if (this_present_parentDynamicNumber || that_present_parentDynamicNumber) {
      if (!(this_present_parentDynamicNumber && that_present_parentDynamicNumber))
        return false;
      if (!this.parentDynamicNumber.equals(that.parentDynamicNumber))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_finishDate = true && this.isSetFinishDate();
    boolean that_present_finishDate = true && that.isSetFinishDate();
    if (this_present_finishDate || that_present_finishDate) {
      if (!(this_present_finishDate && that_present_finishDate))
        return false;
      if (!this.finishDate.equals(that.finishDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_handleAuthorId = true;
    boolean that_present_handleAuthorId = true;
    if (this_present_handleAuthorId || that_present_handleAuthorId) {
      if (!(this_present_handleAuthorId && that_present_handleAuthorId))
        return false;
      if (this.handleAuthorId != that.handleAuthorId)
        return false;
    }

    boolean this_present_dynamicName = true && this.isSetDynamicName();
    boolean that_present_dynamicName = true && that.isSetDynamicName();
    if (this_present_dynamicName || that_present_dynamicName) {
      if (!(this_present_dynamicName && that_present_dynamicName))
        return false;
      if (!this.dynamicName.equals(that.dynamicName))
        return false;
    }

    boolean this_present_handleAuthorName = true && this.isSetHandleAuthorName();
    boolean that_present_handleAuthorName = true && that.isSetHandleAuthorName();
    if (this_present_handleAuthorName || that_present_handleAuthorName) {
      if (!(this_present_handleAuthorName && that_present_handleAuthorName))
        return false;
      if (!this.handleAuthorName.equals(that.handleAuthorName))
        return false;
    }

    boolean this_present_createrDateStr = true && this.isSetCreaterDateStr();
    boolean that_present_createrDateStr = true && that.isSetCreaterDateStr();
    if (this_present_createrDateStr || that_present_createrDateStr) {
      if (!(this_present_createrDateStr && that_present_createrDateStr))
        return false;
      if (!this.createrDateStr.equals(that.createrDateStr))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_moduelNumber = true && (isSetModuelNumber());
    list.add(present_moduelNumber);
    if (present_moduelNumber)
      list.add(moduelNumber);

    boolean present_dynamicNumber = true && (isSetDynamicNumber());
    list.add(present_dynamicNumber);
    if (present_dynamicNumber)
      list.add(dynamicNumber);

    boolean present_parentDynamicNumber = true && (isSetParentDynamicNumber());
    list.add(present_parentDynamicNumber);
    if (present_parentDynamicNumber)
      list.add(parentDynamicNumber);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_finishDate = true && (isSetFinishDate());
    list.add(present_finishDate);
    if (present_finishDate)
      list.add(finishDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_handleAuthorId = true;
    list.add(present_handleAuthorId);
    if (present_handleAuthorId)
      list.add(handleAuthorId);

    boolean present_dynamicName = true && (isSetDynamicName());
    list.add(present_dynamicName);
    if (present_dynamicName)
      list.add(dynamicName);

    boolean present_handleAuthorName = true && (isSetHandleAuthorName());
    list.add(present_handleAuthorName);
    if (present_handleAuthorName)
      list.add(handleAuthorName);

    boolean present_createrDateStr = true && (isSetCreaterDateStr());
    list.add(present_createrDateStr);
    if (present_createrDateStr)
      list.add(createrDateStr);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizDynamic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModuelNumber()).compareTo(other.isSetModuelNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModuelNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduelNumber, other.moduelNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicNumber()).compareTo(other.isSetDynamicNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicNumber, other.dynamicNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentDynamicNumber()).compareTo(other.isSetParentDynamicNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentDynamicNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentDynamicNumber, other.parentDynamicNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishDate()).compareTo(other.isSetFinishDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishDate, other.finishDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleAuthorId()).compareTo(other.isSetHandleAuthorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleAuthorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleAuthorId, other.handleAuthorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicName()).compareTo(other.isSetDynamicName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicName, other.dynamicName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandleAuthorName()).compareTo(other.isSetHandleAuthorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandleAuthorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handleAuthorName, other.handleAuthorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDateStr()).compareTo(other.isSetCreaterDateStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDateStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDateStr, other.createrDateStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizDynamic(");
    boolean first = true;

    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moduelNumber:");
    if (this.moduelNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.moduelNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicNumber:");
    if (this.dynamicNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.dynamicNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentDynamicNumber:");
    if (this.parentDynamicNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.parentDynamicNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishDate:");
    if (this.finishDate == null) {
      sb.append("null");
    } else {
      sb.append(this.finishDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleAuthorId:");
    sb.append(this.handleAuthorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dynamicName:");
    if (this.dynamicName == null) {
      sb.append("null");
    } else {
      sb.append(this.dynamicName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("handleAuthorName:");
    if (this.handleAuthorName == null) {
      sb.append("null");
    } else {
      sb.append(this.handleAuthorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDateStr:");
    if (this.createrDateStr == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDateStr);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizDynamicStandardSchemeFactory implements SchemeFactory {
    public BizDynamicStandardScheme getScheme() {
      return new BizDynamicStandardScheme();
    }
  }

  private static class BizDynamicStandardScheme extends StandardScheme<BizDynamic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizDynamic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list296.size);
                int _elem297;
                for (int _i298 = 0; _i298 < _list296.size; ++_i298)
                {
                  _elem297 = iprot.readI32();
                  struct.userIds.add(_elem297);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MODUEL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.moduelNumber = iprot.readString();
              struct.setModuelNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DYNAMIC_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dynamicNumber = iprot.readString();
              struct.setDynamicNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PARENT_DYNAMIC_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentDynamicNumber = iprot.readString();
              struct.setParentDynamicNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FINISH_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.finishDate = iprot.readString();
              struct.setFinishDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HANDLE_AUTHOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.handleAuthorId = iprot.readI32();
              struct.setHandleAuthorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DYNAMIC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dynamicName = iprot.readString();
              struct.setDynamicNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HANDLE_AUTHOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handleAuthorName = iprot.readString();
              struct.setHandleAuthorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATER_DATE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDateStr = iprot.readString();
              struct.setCreaterDateStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizDynamic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter299 : struct.userIds)
          {
            oprot.writeI32(_iter299);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.moduelNumber != null) {
        oprot.writeFieldBegin(MODUEL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.moduelNumber);
        oprot.writeFieldEnd();
      }
      if (struct.dynamicNumber != null) {
        oprot.writeFieldBegin(DYNAMIC_NUMBER_FIELD_DESC);
        oprot.writeString(struct.dynamicNumber);
        oprot.writeFieldEnd();
      }
      if (struct.parentDynamicNumber != null) {
        oprot.writeFieldBegin(PARENT_DYNAMIC_NUMBER_FIELD_DESC);
        oprot.writeString(struct.parentDynamicNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.finishDate != null) {
        oprot.writeFieldBegin(FINISH_DATE_FIELD_DESC);
        oprot.writeString(struct.finishDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HANDLE_AUTHOR_ID_FIELD_DESC);
      oprot.writeI32(struct.handleAuthorId);
      oprot.writeFieldEnd();
      if (struct.dynamicName != null) {
        oprot.writeFieldBegin(DYNAMIC_NAME_FIELD_DESC);
        oprot.writeString(struct.dynamicName);
        oprot.writeFieldEnd();
      }
      if (struct.handleAuthorName != null) {
        oprot.writeFieldBegin(HANDLE_AUTHOR_NAME_FIELD_DESC);
        oprot.writeString(struct.handleAuthorName);
        oprot.writeFieldEnd();
      }
      if (struct.createrDateStr != null) {
        oprot.writeFieldBegin(CREATER_DATE_STR_FIELD_DESC);
        oprot.writeString(struct.createrDateStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizDynamicTupleSchemeFactory implements SchemeFactory {
    public BizDynamicTupleScheme getScheme() {
      return new BizDynamicTupleScheme();
    }
  }

  private static class BizDynamicTupleScheme extends TupleScheme<BizDynamic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserIds()) {
        optionals.set(0);
      }
      if (struct.isSetPage()) {
        optionals.set(1);
      }
      if (struct.isSetRows()) {
        optionals.set(2);
      }
      if (struct.isSetPid()) {
        optionals.set(3);
      }
      if (struct.isSetProjectId()) {
        optionals.set(4);
      }
      if (struct.isSetModuelNumber()) {
        optionals.set(5);
      }
      if (struct.isSetDynamicNumber()) {
        optionals.set(6);
      }
      if (struct.isSetParentDynamicNumber()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetFinishDate()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(12);
      }
      if (struct.isSetHandleAuthorId()) {
        optionals.set(13);
      }
      if (struct.isSetDynamicName()) {
        optionals.set(14);
      }
      if (struct.isSetHandleAuthorName()) {
        optionals.set(15);
      }
      if (struct.isSetCreaterDateStr()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter300 : struct.userIds)
          {
            oprot.writeI32(_iter300);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetModuelNumber()) {
        oprot.writeString(struct.moduelNumber);
      }
      if (struct.isSetDynamicNumber()) {
        oprot.writeString(struct.dynamicNumber);
      }
      if (struct.isSetParentDynamicNumber()) {
        oprot.writeString(struct.parentDynamicNumber);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetFinishDate()) {
        oprot.writeString(struct.finishDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetHandleAuthorId()) {
        oprot.writeI32(struct.handleAuthorId);
      }
      if (struct.isSetDynamicName()) {
        oprot.writeString(struct.dynamicName);
      }
      if (struct.isSetHandleAuthorName()) {
        oprot.writeString(struct.handleAuthorName);
      }
      if (struct.isSetCreaterDateStr()) {
        oprot.writeString(struct.createrDateStr);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizDynamic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list301.size);
          int _elem302;
          for (int _i303 = 0; _i303 < _list301.size; ++_i303)
          {
            _elem302 = iprot.readI32();
            struct.userIds.add(_elem302);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.moduelNumber = iprot.readString();
        struct.setModuelNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dynamicNumber = iprot.readString();
        struct.setDynamicNumberIsSet(true);
      }
      if (incoming.get(7)) {
        struct.parentDynamicNumber = iprot.readString();
        struct.setParentDynamicNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.finishDate = iprot.readString();
        struct.setFinishDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(11)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.handleAuthorId = iprot.readI32();
        struct.setHandleAuthorIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.dynamicName = iprot.readString();
        struct.setDynamicNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.handleAuthorName = iprot.readString();
        struct.setHandleAuthorNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createrDateStr = iprot.readString();
        struct.setCreaterDateStrIsSet(true);
      }
    }
  }

}


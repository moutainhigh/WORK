/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceService {

  /**
   * end by yql
   */
  public interface Iface {

    /**
     * add by yql
     * 
     * @param financeBank
     */
    public int addFinanceAcctManager(FinanceBank financeBank) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<FinanceBank> getFinanceActtManager(FinanceBank financeBank) throws org.apache.thrift.TException;

    public int countFinanceActtManager(FinanceBank financeBank) throws org.apache.thrift.TException;

    public FinanceBank getFinanceActtManagerById(int pid) throws org.apache.thrift.TException;

    public int updateFinanceAcctManager(FinanceBank financeBank) throws org.apache.thrift.TException;

    public int deleteFinanceAcctManager(String pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<FinanceBusinessView> getCusBusiness(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int countCusBusiness(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public com.xlkfinance.bms.rpc.beforeloan.Project getProCreLoans(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<BatchRepaymentView> getAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int countAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<CustArrearsView> getCustArrearsView(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int countCustArrearsView(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<FinanceAcctTotalView> getFinanceAcctTotalView(FinanceAcctTotalCondition financeAcctTotalCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int countFinanceAcctTotal(FinanceAcctTotalCondition financeAcctTotalCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<FinanceAcctTotalDetailView> getFinanceAcctTotalDetail(FinanceAcctTotalCondition financeAcctTotalCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<ProjectTotalDetailView> getProjectTotalDetailList(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<LoanReconciliationDtlView> getLoanReconciliationDtl(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int addAcctProjectBalance(AcctProjectBalanceDTO acctProjectBalanceDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public AcctProjectBalanceView getAcctProjectBalanceByLoanId(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public AcctProjectBalanceView getBalanceByReceId(int receId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int addLoanRefund(LoanRefundDTO loanRefundDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<LoanRefundView> getLoanRefundList(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<UnReconciliationView> getListUnReconciliation(UnReconciliationCondition unReconciliationCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int countUnReconciliation(UnReconciliationCondition unReconciliationCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public UnReconciliationView findUnReconciliationInfo(int inputId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * add by qcxian
     * 
     * @param pid
     */
    public boolean deleteLoanInputDate(int pid) throws org.apache.thrift.TException;

    public FinanceReceivablesView getFinanceReceivablesView(int loanId) throws org.apache.thrift.TException;

    public FinanceReceivablesDTO saveFinanceReceivables(FinanceReceivablesDTO dto, int projectId, int acctId) throws org.apache.thrift.TException;

    public FinanceReceivablesDTO saveUseBalance(FinanceReceivablesDTO dto, int projectId, int acctId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public FinanceReceivablesDTO getFinanceReceivables(int financeReceivablesId) throws org.apache.thrift.TException;

    public List<ReconciliationOptionsView> getReconciliationOptionsList(int loanId, String currentDate) throws org.apache.thrift.TException;

    public ReconciliationItem getReconciliationItem(int type, int pid, String currentDt) throws org.apache.thrift.TException;

    public int saveRepaymentReconciliation(List<RepaymentReconciliationBean> repaymentReconciliationBeanList, int receivablesVersion, double availableReconciliationAmount, int receivablesId, int loanInterestRecord, int loanMgrRecord, int loanOtherFee) throws org.apache.thrift.TException;

    public List<BatchRepaymentItem> getBatchRepaymentLoanItemList(int loanId, String receivablesDate, double receivablesAmt) throws org.apache.thrift.TException;

    public void saveBatchRepayment(List<BatchRepaymentBean> batchRepaymentBeanList, int userId) throws org.apache.thrift.TException;

    public LoanBaseDataBean getLoanBaseDataBean(int projectId) throws org.apache.thrift.TException;

    public List<BadDebtDataBean> getBadDebtDataBean(int loanId) throws org.apache.thrift.TException;

    public int activateTheLatestPlan(int loanId) throws org.apache.thrift.TException;

    public double getOverdueByDate(int loanId, int p_pid, String cDate) throws org.apache.thrift.TException;

    /**
     * add by qcxian
     * 
     * @param projectId
     */
    public CustArrearsView getCustArrearsbyProjectView(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public void addFinanceMonthlyReport(String startDate, String endDate) throws org.apache.thrift.TException;

    public List<MonthlyReportRecord> listMonthlyReportRecords(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException;

    public int listMonthlyReportRecordsTotal(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException;

    public int updateStatus(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException;

    public int deleteMonthlyReportRecordsById(String ids) throws org.apache.thrift.TException;

    public int checkLoanIdByProjectNo(String projectNo) throws org.apache.thrift.TException;

    public void saveMonthlyReportRecord(MonthlyReportRecord monthlyReportRecord) throws org.apache.thrift.TException;

    /**
     * *
     *  * @Description: 获取项目的到期未收金额
     *  * @param map
     *  * @return
     *  * @author: yequnli
     *  * @date: 2015年9月15日 下午3:26:48
     * 
     * @param redId
     */
    public int updateRepaymentPlan(int redId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    /**
     * *
     *  * @Description: TODO 查询部分对账的最大期数
     *  * @param loanId
     *  * @return
     *  * @author: yequnli
     *  * @date: 2015年9月15日 下午1:34:49
     * 
     * @param loanId
     */
    public LoanCycleNumView getLoanCycleNumAndAmt(int loanId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addFinanceAcctManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceActtManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countFinanceActtManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceActtManagerById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFinanceAcctManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFinanceAcctManager(String pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCusBusiness(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countCusBusiness(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProCreLoans(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCustArrearsView(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countCustArrearsView(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceAcctTotalView(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countFinanceAcctTotal(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceAcctTotalDetail(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProjectTotalDetailList(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoanReconciliationDtl(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addAcctProjectBalance(AcctProjectBalanceDTO acctProjectBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAcctProjectBalanceByLoanId(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBalanceByReceId(int receId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addLoanRefund(LoanRefundDTO loanRefundDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoanRefundList(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getListUnReconciliation(UnReconciliationCondition unReconciliationCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void countUnReconciliation(UnReconciliationCondition unReconciliationCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findUnReconciliationInfo(int inputId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteLoanInputDate(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceReceivablesView(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveFinanceReceivables(FinanceReceivablesDTO dto, int projectId, int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveUseBalance(FinanceReceivablesDTO dto, int projectId, int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFinanceReceivables(int financeReceivablesId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getReconciliationOptionsList(int loanId, String currentDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getReconciliationItem(int type, int pid, String currentDt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveRepaymentReconciliation(List<RepaymentReconciliationBean> repaymentReconciliationBeanList, int receivablesVersion, double availableReconciliationAmount, int receivablesId, int loanInterestRecord, int loanMgrRecord, int loanOtherFee, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBatchRepaymentLoanItemList(int loanId, String receivablesDate, double receivablesAmt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveBatchRepayment(List<BatchRepaymentBean> batchRepaymentBeanList, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoanBaseDataBean(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBadDebtDataBean(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void activateTheLatestPlan(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOverdueByDate(int loanId, int p_pid, String cDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCustArrearsbyProjectView(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFinanceMonthlyReport(String startDate, String endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listMonthlyReportRecords(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listMonthlyReportRecordsTotal(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateStatus(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteMonthlyReportRecordsById(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkLoanIdByProjectNo(String projectNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveMonthlyReportRecord(MonthlyReportRecord monthlyReportRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRepaymentPlan(int redId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLoanCycleNumAndAmt(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int addFinanceAcctManager(FinanceBank financeBank) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addFinanceAcctManager(financeBank);
      return recv_addFinanceAcctManager();
    }

    public void send_addFinanceAcctManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      addFinanceAcctManager_args args = new addFinanceAcctManager_args();
      args.setFinanceBank(financeBank);
      sendBase("addFinanceAcctManager", args);
    }

    public int recv_addFinanceAcctManager() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addFinanceAcctManager_result result = new addFinanceAcctManager_result();
      receiveBase(result, "addFinanceAcctManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addFinanceAcctManager failed: unknown result");
    }

    public List<FinanceBank> getFinanceActtManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      send_getFinanceActtManager(financeBank);
      return recv_getFinanceActtManager();
    }

    public void send_getFinanceActtManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      getFinanceActtManager_args args = new getFinanceActtManager_args();
      args.setFinanceBank(financeBank);
      sendBase("getFinanceActtManager", args);
    }

    public List<FinanceBank> recv_getFinanceActtManager() throws org.apache.thrift.TException
    {
      getFinanceActtManager_result result = new getFinanceActtManager_result();
      receiveBase(result, "getFinanceActtManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceActtManager failed: unknown result");
    }

    public int countFinanceActtManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      send_countFinanceActtManager(financeBank);
      return recv_countFinanceActtManager();
    }

    public void send_countFinanceActtManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      countFinanceActtManager_args args = new countFinanceActtManager_args();
      args.setFinanceBank(financeBank);
      sendBase("countFinanceActtManager", args);
    }

    public int recv_countFinanceActtManager() throws org.apache.thrift.TException
    {
      countFinanceActtManager_result result = new countFinanceActtManager_result();
      receiveBase(result, "countFinanceActtManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countFinanceActtManager failed: unknown result");
    }

    public FinanceBank getFinanceActtManagerById(int pid) throws org.apache.thrift.TException
    {
      send_getFinanceActtManagerById(pid);
      return recv_getFinanceActtManagerById();
    }

    public void send_getFinanceActtManagerById(int pid) throws org.apache.thrift.TException
    {
      getFinanceActtManagerById_args args = new getFinanceActtManagerById_args();
      args.setPid(pid);
      sendBase("getFinanceActtManagerById", args);
    }

    public FinanceBank recv_getFinanceActtManagerById() throws org.apache.thrift.TException
    {
      getFinanceActtManagerById_result result = new getFinanceActtManagerById_result();
      receiveBase(result, "getFinanceActtManagerById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceActtManagerById failed: unknown result");
    }

    public int updateFinanceAcctManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      send_updateFinanceAcctManager(financeBank);
      return recv_updateFinanceAcctManager();
    }

    public void send_updateFinanceAcctManager(FinanceBank financeBank) throws org.apache.thrift.TException
    {
      updateFinanceAcctManager_args args = new updateFinanceAcctManager_args();
      args.setFinanceBank(financeBank);
      sendBase("updateFinanceAcctManager", args);
    }

    public int recv_updateFinanceAcctManager() throws org.apache.thrift.TException
    {
      updateFinanceAcctManager_result result = new updateFinanceAcctManager_result();
      receiveBase(result, "updateFinanceAcctManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFinanceAcctManager failed: unknown result");
    }

    public int deleteFinanceAcctManager(String pid) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_deleteFinanceAcctManager(pid);
      return recv_deleteFinanceAcctManager();
    }

    public void send_deleteFinanceAcctManager(String pid) throws org.apache.thrift.TException
    {
      deleteFinanceAcctManager_args args = new deleteFinanceAcctManager_args();
      args.setPid(pid);
      sendBase("deleteFinanceAcctManager", args);
    }

    public int recv_deleteFinanceAcctManager() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      deleteFinanceAcctManager_result result = new deleteFinanceAcctManager_result();
      receiveBase(result, "deleteFinanceAcctManager");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFinanceAcctManager failed: unknown result");
    }

    public List<FinanceBusinessView> getCusBusiness(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getCusBusiness(financeBusinessCondition);
      return recv_getCusBusiness();
    }

    public void send_getCusBusiness(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      getCusBusiness_args args = new getCusBusiness_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("getCusBusiness", args);
    }

    public List<FinanceBusinessView> recv_getCusBusiness() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getCusBusiness_result result = new getCusBusiness_result();
      receiveBase(result, "getCusBusiness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCusBusiness failed: unknown result");
    }

    public int countCusBusiness(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_countCusBusiness(financeBusinessCondition);
      return recv_countCusBusiness();
    }

    public void send_countCusBusiness(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      countCusBusiness_args args = new countCusBusiness_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("countCusBusiness", args);
    }

    public int recv_countCusBusiness() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      countCusBusiness_result result = new countCusBusiness_result();
      receiveBase(result, "countCusBusiness");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countCusBusiness failed: unknown result");
    }

    public com.xlkfinance.bms.rpc.beforeloan.Project getProCreLoans(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getProCreLoans(loanId);
      return recv_getProCreLoans();
    }

    public void send_getProCreLoans(int loanId) throws org.apache.thrift.TException
    {
      getProCreLoans_args args = new getProCreLoans_args();
      args.setLoanId(loanId);
      sendBase("getProCreLoans", args);
    }

    public com.xlkfinance.bms.rpc.beforeloan.Project recv_getProCreLoans() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getProCreLoans_result result = new getProCreLoans_result();
      receiveBase(result, "getProCreLoans");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProCreLoans failed: unknown result");
    }

    public List<BatchRepaymentView> getAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getAcctBatchRepayment(financeBusinessCondition);
      return recv_getAcctBatchRepayment();
    }

    public void send_getAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      getAcctBatchRepayment_args args = new getAcctBatchRepayment_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("getAcctBatchRepayment", args);
    }

    public List<BatchRepaymentView> recv_getAcctBatchRepayment() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getAcctBatchRepayment_result result = new getAcctBatchRepayment_result();
      receiveBase(result, "getAcctBatchRepayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAcctBatchRepayment failed: unknown result");
    }

    public int countAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_countAcctBatchRepayment(financeBusinessCondition);
      return recv_countAcctBatchRepayment();
    }

    public void send_countAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      countAcctBatchRepayment_args args = new countAcctBatchRepayment_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("countAcctBatchRepayment", args);
    }

    public int recv_countAcctBatchRepayment() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      countAcctBatchRepayment_result result = new countAcctBatchRepayment_result();
      receiveBase(result, "countAcctBatchRepayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countAcctBatchRepayment failed: unknown result");
    }

    public List<CustArrearsView> getCustArrearsView(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getCustArrearsView(financeBusinessCondition);
      return recv_getCustArrearsView();
    }

    public void send_getCustArrearsView(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      getCustArrearsView_args args = new getCustArrearsView_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("getCustArrearsView", args);
    }

    public List<CustArrearsView> recv_getCustArrearsView() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getCustArrearsView_result result = new getCustArrearsView_result();
      receiveBase(result, "getCustArrearsView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCustArrearsView failed: unknown result");
    }

    public int countCustArrearsView(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_countCustArrearsView(financeBusinessCondition);
      return recv_countCustArrearsView();
    }

    public void send_countCustArrearsView(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      countCustArrearsView_args args = new countCustArrearsView_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("countCustArrearsView", args);
    }

    public int recv_countCustArrearsView() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      countCustArrearsView_result result = new countCustArrearsView_result();
      receiveBase(result, "countCustArrearsView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countCustArrearsView failed: unknown result");
    }

    public List<FinanceAcctTotalView> getFinanceAcctTotalView(FinanceAcctTotalCondition financeAcctTotalCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getFinanceAcctTotalView(financeAcctTotalCondition);
      return recv_getFinanceAcctTotalView();
    }

    public void send_getFinanceAcctTotalView(FinanceAcctTotalCondition financeAcctTotalCondition) throws org.apache.thrift.TException
    {
      getFinanceAcctTotalView_args args = new getFinanceAcctTotalView_args();
      args.setFinanceAcctTotalCondition(financeAcctTotalCondition);
      sendBase("getFinanceAcctTotalView", args);
    }

    public List<FinanceAcctTotalView> recv_getFinanceAcctTotalView() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getFinanceAcctTotalView_result result = new getFinanceAcctTotalView_result();
      receiveBase(result, "getFinanceAcctTotalView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceAcctTotalView failed: unknown result");
    }

    public int countFinanceAcctTotal(FinanceAcctTotalCondition financeAcctTotalCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_countFinanceAcctTotal(financeAcctTotalCondition);
      return recv_countFinanceAcctTotal();
    }

    public void send_countFinanceAcctTotal(FinanceAcctTotalCondition financeAcctTotalCondition) throws org.apache.thrift.TException
    {
      countFinanceAcctTotal_args args = new countFinanceAcctTotal_args();
      args.setFinanceAcctTotalCondition(financeAcctTotalCondition);
      sendBase("countFinanceAcctTotal", args);
    }

    public int recv_countFinanceAcctTotal() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      countFinanceAcctTotal_result result = new countFinanceAcctTotal_result();
      receiveBase(result, "countFinanceAcctTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countFinanceAcctTotal failed: unknown result");
    }

    public List<FinanceAcctTotalDetailView> getFinanceAcctTotalDetail(FinanceAcctTotalCondition financeAcctTotalCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getFinanceAcctTotalDetail(financeAcctTotalCondition);
      return recv_getFinanceAcctTotalDetail();
    }

    public void send_getFinanceAcctTotalDetail(FinanceAcctTotalCondition financeAcctTotalCondition) throws org.apache.thrift.TException
    {
      getFinanceAcctTotalDetail_args args = new getFinanceAcctTotalDetail_args();
      args.setFinanceAcctTotalCondition(financeAcctTotalCondition);
      sendBase("getFinanceAcctTotalDetail", args);
    }

    public List<FinanceAcctTotalDetailView> recv_getFinanceAcctTotalDetail() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getFinanceAcctTotalDetail_result result = new getFinanceAcctTotalDetail_result();
      receiveBase(result, "getFinanceAcctTotalDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceAcctTotalDetail failed: unknown result");
    }

    public List<ProjectTotalDetailView> getProjectTotalDetailList(FinanceBusinessCondition financeBusinessCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getProjectTotalDetailList(financeBusinessCondition);
      return recv_getProjectTotalDetailList();
    }

    public void send_getProjectTotalDetailList(FinanceBusinessCondition financeBusinessCondition) throws org.apache.thrift.TException
    {
      getProjectTotalDetailList_args args = new getProjectTotalDetailList_args();
      args.setFinanceBusinessCondition(financeBusinessCondition);
      sendBase("getProjectTotalDetailList", args);
    }

    public List<ProjectTotalDetailView> recv_getProjectTotalDetailList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getProjectTotalDetailList_result result = new getProjectTotalDetailList_result();
      receiveBase(result, "getProjectTotalDetailList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProjectTotalDetailList failed: unknown result");
    }

    public List<LoanReconciliationDtlView> getLoanReconciliationDtl(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getLoanReconciliationDtl(loanId);
      return recv_getLoanReconciliationDtl();
    }

    public void send_getLoanReconciliationDtl(int loanId) throws org.apache.thrift.TException
    {
      getLoanReconciliationDtl_args args = new getLoanReconciliationDtl_args();
      args.setLoanId(loanId);
      sendBase("getLoanReconciliationDtl", args);
    }

    public List<LoanReconciliationDtlView> recv_getLoanReconciliationDtl() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getLoanReconciliationDtl_result result = new getLoanReconciliationDtl_result();
      receiveBase(result, "getLoanReconciliationDtl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanReconciliationDtl failed: unknown result");
    }

    public int addAcctProjectBalance(AcctProjectBalanceDTO acctProjectBalanceDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addAcctProjectBalance(acctProjectBalanceDTO);
      return recv_addAcctProjectBalance();
    }

    public void send_addAcctProjectBalance(AcctProjectBalanceDTO acctProjectBalanceDTO) throws org.apache.thrift.TException
    {
      addAcctProjectBalance_args args = new addAcctProjectBalance_args();
      args.setAcctProjectBalanceDTO(acctProjectBalanceDTO);
      sendBase("addAcctProjectBalance", args);
    }

    public int recv_addAcctProjectBalance() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addAcctProjectBalance_result result = new addAcctProjectBalance_result();
      receiveBase(result, "addAcctProjectBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addAcctProjectBalance failed: unknown result");
    }

    public AcctProjectBalanceView getAcctProjectBalanceByLoanId(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getAcctProjectBalanceByLoanId(loanId);
      return recv_getAcctProjectBalanceByLoanId();
    }

    public void send_getAcctProjectBalanceByLoanId(int loanId) throws org.apache.thrift.TException
    {
      getAcctProjectBalanceByLoanId_args args = new getAcctProjectBalanceByLoanId_args();
      args.setLoanId(loanId);
      sendBase("getAcctProjectBalanceByLoanId", args);
    }

    public AcctProjectBalanceView recv_getAcctProjectBalanceByLoanId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getAcctProjectBalanceByLoanId_result result = new getAcctProjectBalanceByLoanId_result();
      receiveBase(result, "getAcctProjectBalanceByLoanId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAcctProjectBalanceByLoanId failed: unknown result");
    }

    public AcctProjectBalanceView getBalanceByReceId(int receId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getBalanceByReceId(receId);
      return recv_getBalanceByReceId();
    }

    public void send_getBalanceByReceId(int receId) throws org.apache.thrift.TException
    {
      getBalanceByReceId_args args = new getBalanceByReceId_args();
      args.setReceId(receId);
      sendBase("getBalanceByReceId", args);
    }

    public AcctProjectBalanceView recv_getBalanceByReceId() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getBalanceByReceId_result result = new getBalanceByReceId_result();
      receiveBase(result, "getBalanceByReceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBalanceByReceId failed: unknown result");
    }

    public int addLoanRefund(LoanRefundDTO loanRefundDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_addLoanRefund(loanRefundDTO);
      return recv_addLoanRefund();
    }

    public void send_addLoanRefund(LoanRefundDTO loanRefundDTO) throws org.apache.thrift.TException
    {
      addLoanRefund_args args = new addLoanRefund_args();
      args.setLoanRefundDTO(loanRefundDTO);
      sendBase("addLoanRefund", args);
    }

    public int recv_addLoanRefund() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      addLoanRefund_result result = new addLoanRefund_result();
      receiveBase(result, "addLoanRefund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addLoanRefund failed: unknown result");
    }

    public List<LoanRefundView> getLoanRefundList(int loanId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getLoanRefundList(loanId);
      return recv_getLoanRefundList();
    }

    public void send_getLoanRefundList(int loanId) throws org.apache.thrift.TException
    {
      getLoanRefundList_args args = new getLoanRefundList_args();
      args.setLoanId(loanId);
      sendBase("getLoanRefundList", args);
    }

    public List<LoanRefundView> recv_getLoanRefundList() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getLoanRefundList_result result = new getLoanRefundList_result();
      receiveBase(result, "getLoanRefundList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanRefundList failed: unknown result");
    }

    public List<UnReconciliationView> getListUnReconciliation(UnReconciliationCondition unReconciliationCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getListUnReconciliation(unReconciliationCondition);
      return recv_getListUnReconciliation();
    }

    public void send_getListUnReconciliation(UnReconciliationCondition unReconciliationCondition) throws org.apache.thrift.TException
    {
      getListUnReconciliation_args args = new getListUnReconciliation_args();
      args.setUnReconciliationCondition(unReconciliationCondition);
      sendBase("getListUnReconciliation", args);
    }

    public List<UnReconciliationView> recv_getListUnReconciliation() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getListUnReconciliation_result result = new getListUnReconciliation_result();
      receiveBase(result, "getListUnReconciliation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListUnReconciliation failed: unknown result");
    }

    public int countUnReconciliation(UnReconciliationCondition unReconciliationCondition) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_countUnReconciliation(unReconciliationCondition);
      return recv_countUnReconciliation();
    }

    public void send_countUnReconciliation(UnReconciliationCondition unReconciliationCondition) throws org.apache.thrift.TException
    {
      countUnReconciliation_args args = new countUnReconciliation_args();
      args.setUnReconciliationCondition(unReconciliationCondition);
      sendBase("countUnReconciliation", args);
    }

    public int recv_countUnReconciliation() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      countUnReconciliation_result result = new countUnReconciliation_result();
      receiveBase(result, "countUnReconciliation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countUnReconciliation failed: unknown result");
    }

    public UnReconciliationView findUnReconciliationInfo(int inputId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_findUnReconciliationInfo(inputId);
      return recv_findUnReconciliationInfo();
    }

    public void send_findUnReconciliationInfo(int inputId) throws org.apache.thrift.TException
    {
      findUnReconciliationInfo_args args = new findUnReconciliationInfo_args();
      args.setInputId(inputId);
      sendBase("findUnReconciliationInfo", args);
    }

    public UnReconciliationView recv_findUnReconciliationInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      findUnReconciliationInfo_result result = new findUnReconciliationInfo_result();
      receiveBase(result, "findUnReconciliationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findUnReconciliationInfo failed: unknown result");
    }

    public boolean deleteLoanInputDate(int pid) throws org.apache.thrift.TException
    {
      send_deleteLoanInputDate(pid);
      return recv_deleteLoanInputDate();
    }

    public void send_deleteLoanInputDate(int pid) throws org.apache.thrift.TException
    {
      deleteLoanInputDate_args args = new deleteLoanInputDate_args();
      args.setPid(pid);
      sendBase("deleteLoanInputDate", args);
    }

    public boolean recv_deleteLoanInputDate() throws org.apache.thrift.TException
    {
      deleteLoanInputDate_result result = new deleteLoanInputDate_result();
      receiveBase(result, "deleteLoanInputDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteLoanInputDate failed: unknown result");
    }

    public FinanceReceivablesView getFinanceReceivablesView(int loanId) throws org.apache.thrift.TException
    {
      send_getFinanceReceivablesView(loanId);
      return recv_getFinanceReceivablesView();
    }

    public void send_getFinanceReceivablesView(int loanId) throws org.apache.thrift.TException
    {
      getFinanceReceivablesView_args args = new getFinanceReceivablesView_args();
      args.setLoanId(loanId);
      sendBase("getFinanceReceivablesView", args);
    }

    public FinanceReceivablesView recv_getFinanceReceivablesView() throws org.apache.thrift.TException
    {
      getFinanceReceivablesView_result result = new getFinanceReceivablesView_result();
      receiveBase(result, "getFinanceReceivablesView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceReceivablesView failed: unknown result");
    }

    public FinanceReceivablesDTO saveFinanceReceivables(FinanceReceivablesDTO dto, int projectId, int acctId) throws org.apache.thrift.TException
    {
      send_saveFinanceReceivables(dto, projectId, acctId);
      return recv_saveFinanceReceivables();
    }

    public void send_saveFinanceReceivables(FinanceReceivablesDTO dto, int projectId, int acctId) throws org.apache.thrift.TException
    {
      saveFinanceReceivables_args args = new saveFinanceReceivables_args();
      args.setDto(dto);
      args.setProjectId(projectId);
      args.setAcctId(acctId);
      sendBase("saveFinanceReceivables", args);
    }

    public FinanceReceivablesDTO recv_saveFinanceReceivables() throws org.apache.thrift.TException
    {
      saveFinanceReceivables_result result = new saveFinanceReceivables_result();
      receiveBase(result, "saveFinanceReceivables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveFinanceReceivables failed: unknown result");
    }

    public FinanceReceivablesDTO saveUseBalance(FinanceReceivablesDTO dto, int projectId, int acctId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_saveUseBalance(dto, projectId, acctId);
      return recv_saveUseBalance();
    }

    public void send_saveUseBalance(FinanceReceivablesDTO dto, int projectId, int acctId) throws org.apache.thrift.TException
    {
      saveUseBalance_args args = new saveUseBalance_args();
      args.setDto(dto);
      args.setProjectId(projectId);
      args.setAcctId(acctId);
      sendBase("saveUseBalance", args);
    }

    public FinanceReceivablesDTO recv_saveUseBalance() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      saveUseBalance_result result = new saveUseBalance_result();
      receiveBase(result, "saveUseBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveUseBalance failed: unknown result");
    }

    public FinanceReceivablesDTO getFinanceReceivables(int financeReceivablesId) throws org.apache.thrift.TException
    {
      send_getFinanceReceivables(financeReceivablesId);
      return recv_getFinanceReceivables();
    }

    public void send_getFinanceReceivables(int financeReceivablesId) throws org.apache.thrift.TException
    {
      getFinanceReceivables_args args = new getFinanceReceivables_args();
      args.setFinanceReceivablesId(financeReceivablesId);
      sendBase("getFinanceReceivables", args);
    }

    public FinanceReceivablesDTO recv_getFinanceReceivables() throws org.apache.thrift.TException
    {
      getFinanceReceivables_result result = new getFinanceReceivables_result();
      receiveBase(result, "getFinanceReceivables");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFinanceReceivables failed: unknown result");
    }

    public List<ReconciliationOptionsView> getReconciliationOptionsList(int loanId, String currentDate) throws org.apache.thrift.TException
    {
      send_getReconciliationOptionsList(loanId, currentDate);
      return recv_getReconciliationOptionsList();
    }

    public void send_getReconciliationOptionsList(int loanId, String currentDate) throws org.apache.thrift.TException
    {
      getReconciliationOptionsList_args args = new getReconciliationOptionsList_args();
      args.setLoanId(loanId);
      args.setCurrentDate(currentDate);
      sendBase("getReconciliationOptionsList", args);
    }

    public List<ReconciliationOptionsView> recv_getReconciliationOptionsList() throws org.apache.thrift.TException
    {
      getReconciliationOptionsList_result result = new getReconciliationOptionsList_result();
      receiveBase(result, "getReconciliationOptionsList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReconciliationOptionsList failed: unknown result");
    }

    public ReconciliationItem getReconciliationItem(int type, int pid, String currentDt) throws org.apache.thrift.TException
    {
      send_getReconciliationItem(type, pid, currentDt);
      return recv_getReconciliationItem();
    }

    public void send_getReconciliationItem(int type, int pid, String currentDt) throws org.apache.thrift.TException
    {
      getReconciliationItem_args args = new getReconciliationItem_args();
      args.setType(type);
      args.setPid(pid);
      args.setCurrentDt(currentDt);
      sendBase("getReconciliationItem", args);
    }

    public ReconciliationItem recv_getReconciliationItem() throws org.apache.thrift.TException
    {
      getReconciliationItem_result result = new getReconciliationItem_result();
      receiveBase(result, "getReconciliationItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReconciliationItem failed: unknown result");
    }

    public int saveRepaymentReconciliation(List<RepaymentReconciliationBean> repaymentReconciliationBeanList, int receivablesVersion, double availableReconciliationAmount, int receivablesId, int loanInterestRecord, int loanMgrRecord, int loanOtherFee) throws org.apache.thrift.TException
    {
      send_saveRepaymentReconciliation(repaymentReconciliationBeanList, receivablesVersion, availableReconciliationAmount, receivablesId, loanInterestRecord, loanMgrRecord, loanOtherFee);
      return recv_saveRepaymentReconciliation();
    }

    public void send_saveRepaymentReconciliation(List<RepaymentReconciliationBean> repaymentReconciliationBeanList, int receivablesVersion, double availableReconciliationAmount, int receivablesId, int loanInterestRecord, int loanMgrRecord, int loanOtherFee) throws org.apache.thrift.TException
    {
      saveRepaymentReconciliation_args args = new saveRepaymentReconciliation_args();
      args.setRepaymentReconciliationBeanList(repaymentReconciliationBeanList);
      args.setReceivablesVersion(receivablesVersion);
      args.setAvailableReconciliationAmount(availableReconciliationAmount);
      args.setReceivablesId(receivablesId);
      args.setLoanInterestRecord(loanInterestRecord);
      args.setLoanMgrRecord(loanMgrRecord);
      args.setLoanOtherFee(loanOtherFee);
      sendBase("saveRepaymentReconciliation", args);
    }

    public int recv_saveRepaymentReconciliation() throws org.apache.thrift.TException
    {
      saveRepaymentReconciliation_result result = new saveRepaymentReconciliation_result();
      receiveBase(result, "saveRepaymentReconciliation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveRepaymentReconciliation failed: unknown result");
    }

    public List<BatchRepaymentItem> getBatchRepaymentLoanItemList(int loanId, String receivablesDate, double receivablesAmt) throws org.apache.thrift.TException
    {
      send_getBatchRepaymentLoanItemList(loanId, receivablesDate, receivablesAmt);
      return recv_getBatchRepaymentLoanItemList();
    }

    public void send_getBatchRepaymentLoanItemList(int loanId, String receivablesDate, double receivablesAmt) throws org.apache.thrift.TException
    {
      getBatchRepaymentLoanItemList_args args = new getBatchRepaymentLoanItemList_args();
      args.setLoanId(loanId);
      args.setReceivablesDate(receivablesDate);
      args.setReceivablesAmt(receivablesAmt);
      sendBase("getBatchRepaymentLoanItemList", args);
    }

    public List<BatchRepaymentItem> recv_getBatchRepaymentLoanItemList() throws org.apache.thrift.TException
    {
      getBatchRepaymentLoanItemList_result result = new getBatchRepaymentLoanItemList_result();
      receiveBase(result, "getBatchRepaymentLoanItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBatchRepaymentLoanItemList failed: unknown result");
    }

    public void saveBatchRepayment(List<BatchRepaymentBean> batchRepaymentBeanList, int userId) throws org.apache.thrift.TException
    {
      send_saveBatchRepayment(batchRepaymentBeanList, userId);
      recv_saveBatchRepayment();
    }

    public void send_saveBatchRepayment(List<BatchRepaymentBean> batchRepaymentBeanList, int userId) throws org.apache.thrift.TException
    {
      saveBatchRepayment_args args = new saveBatchRepayment_args();
      args.setBatchRepaymentBeanList(batchRepaymentBeanList);
      args.setUserId(userId);
      sendBase("saveBatchRepayment", args);
    }

    public void recv_saveBatchRepayment() throws org.apache.thrift.TException
    {
      saveBatchRepayment_result result = new saveBatchRepayment_result();
      receiveBase(result, "saveBatchRepayment");
      return;
    }

    public LoanBaseDataBean getLoanBaseDataBean(int projectId) throws org.apache.thrift.TException
    {
      send_getLoanBaseDataBean(projectId);
      return recv_getLoanBaseDataBean();
    }

    public void send_getLoanBaseDataBean(int projectId) throws org.apache.thrift.TException
    {
      getLoanBaseDataBean_args args = new getLoanBaseDataBean_args();
      args.setProjectId(projectId);
      sendBase("getLoanBaseDataBean", args);
    }

    public LoanBaseDataBean recv_getLoanBaseDataBean() throws org.apache.thrift.TException
    {
      getLoanBaseDataBean_result result = new getLoanBaseDataBean_result();
      receiveBase(result, "getLoanBaseDataBean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanBaseDataBean failed: unknown result");
    }

    public List<BadDebtDataBean> getBadDebtDataBean(int loanId) throws org.apache.thrift.TException
    {
      send_getBadDebtDataBean(loanId);
      return recv_getBadDebtDataBean();
    }

    public void send_getBadDebtDataBean(int loanId) throws org.apache.thrift.TException
    {
      getBadDebtDataBean_args args = new getBadDebtDataBean_args();
      args.setLoanId(loanId);
      sendBase("getBadDebtDataBean", args);
    }

    public List<BadDebtDataBean> recv_getBadDebtDataBean() throws org.apache.thrift.TException
    {
      getBadDebtDataBean_result result = new getBadDebtDataBean_result();
      receiveBase(result, "getBadDebtDataBean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBadDebtDataBean failed: unknown result");
    }

    public int activateTheLatestPlan(int loanId) throws org.apache.thrift.TException
    {
      send_activateTheLatestPlan(loanId);
      return recv_activateTheLatestPlan();
    }

    public void send_activateTheLatestPlan(int loanId) throws org.apache.thrift.TException
    {
      activateTheLatestPlan_args args = new activateTheLatestPlan_args();
      args.setLoanId(loanId);
      sendBase("activateTheLatestPlan", args);
    }

    public int recv_activateTheLatestPlan() throws org.apache.thrift.TException
    {
      activateTheLatestPlan_result result = new activateTheLatestPlan_result();
      receiveBase(result, "activateTheLatestPlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateTheLatestPlan failed: unknown result");
    }

    public double getOverdueByDate(int loanId, int p_pid, String cDate) throws org.apache.thrift.TException
    {
      send_getOverdueByDate(loanId, p_pid, cDate);
      return recv_getOverdueByDate();
    }

    public void send_getOverdueByDate(int loanId, int p_pid, String cDate) throws org.apache.thrift.TException
    {
      getOverdueByDate_args args = new getOverdueByDate_args();
      args.setLoanId(loanId);
      args.setP_pid(p_pid);
      args.setCDate(cDate);
      sendBase("getOverdueByDate", args);
    }

    public double recv_getOverdueByDate() throws org.apache.thrift.TException
    {
      getOverdueByDate_result result = new getOverdueByDate_result();
      receiveBase(result, "getOverdueByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverdueByDate failed: unknown result");
    }

    public CustArrearsView getCustArrearsbyProjectView(int projectId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_getCustArrearsbyProjectView(projectId);
      return recv_getCustArrearsbyProjectView();
    }

    public void send_getCustArrearsbyProjectView(int projectId) throws org.apache.thrift.TException
    {
      getCustArrearsbyProjectView_args args = new getCustArrearsbyProjectView_args();
      args.setProjectId(projectId);
      sendBase("getCustArrearsbyProjectView", args);
    }

    public CustArrearsView recv_getCustArrearsbyProjectView() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      getCustArrearsbyProjectView_result result = new getCustArrearsbyProjectView_result();
      receiveBase(result, "getCustArrearsbyProjectView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCustArrearsbyProjectView failed: unknown result");
    }

    public void addFinanceMonthlyReport(String startDate, String endDate) throws org.apache.thrift.TException
    {
      send_addFinanceMonthlyReport(startDate, endDate);
      recv_addFinanceMonthlyReport();
    }

    public void send_addFinanceMonthlyReport(String startDate, String endDate) throws org.apache.thrift.TException
    {
      addFinanceMonthlyReport_args args = new addFinanceMonthlyReport_args();
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      sendBase("addFinanceMonthlyReport", args);
    }

    public void recv_addFinanceMonthlyReport() throws org.apache.thrift.TException
    {
      addFinanceMonthlyReport_result result = new addFinanceMonthlyReport_result();
      receiveBase(result, "addFinanceMonthlyReport");
      return;
    }

    public List<MonthlyReportRecord> listMonthlyReportRecords(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException
    {
      send_listMonthlyReportRecords(condition);
      return recv_listMonthlyReportRecords();
    }

    public void send_listMonthlyReportRecords(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException
    {
      listMonthlyReportRecords_args args = new listMonthlyReportRecords_args();
      args.setCondition(condition);
      sendBase("listMonthlyReportRecords", args);
    }

    public List<MonthlyReportRecord> recv_listMonthlyReportRecords() throws org.apache.thrift.TException
    {
      listMonthlyReportRecords_result result = new listMonthlyReportRecords_result();
      receiveBase(result, "listMonthlyReportRecords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMonthlyReportRecords failed: unknown result");
    }

    public int listMonthlyReportRecordsTotal(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException
    {
      send_listMonthlyReportRecordsTotal(condition);
      return recv_listMonthlyReportRecordsTotal();
    }

    public void send_listMonthlyReportRecordsTotal(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException
    {
      listMonthlyReportRecordsTotal_args args = new listMonthlyReportRecordsTotal_args();
      args.setCondition(condition);
      sendBase("listMonthlyReportRecordsTotal", args);
    }

    public int recv_listMonthlyReportRecordsTotal() throws org.apache.thrift.TException
    {
      listMonthlyReportRecordsTotal_result result = new listMonthlyReportRecordsTotal_result();
      receiveBase(result, "listMonthlyReportRecordsTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listMonthlyReportRecordsTotal failed: unknown result");
    }

    public int updateStatus(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException
    {
      send_updateStatus(condition);
      return recv_updateStatus();
    }

    public void send_updateStatus(MonthlyReportRecordCondition condition) throws org.apache.thrift.TException
    {
      updateStatus_args args = new updateStatus_args();
      args.setCondition(condition);
      sendBase("updateStatus", args);
    }

    public int recv_updateStatus() throws org.apache.thrift.TException
    {
      updateStatus_result result = new updateStatus_result();
      receiveBase(result, "updateStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStatus failed: unknown result");
    }

    public int deleteMonthlyReportRecordsById(String ids) throws org.apache.thrift.TException
    {
      send_deleteMonthlyReportRecordsById(ids);
      return recv_deleteMonthlyReportRecordsById();
    }

    public void send_deleteMonthlyReportRecordsById(String ids) throws org.apache.thrift.TException
    {
      deleteMonthlyReportRecordsById_args args = new deleteMonthlyReportRecordsById_args();
      args.setIds(ids);
      sendBase("deleteMonthlyReportRecordsById", args);
    }

    public int recv_deleteMonthlyReportRecordsById() throws org.apache.thrift.TException
    {
      deleteMonthlyReportRecordsById_result result = new deleteMonthlyReportRecordsById_result();
      receiveBase(result, "deleteMonthlyReportRecordsById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteMonthlyReportRecordsById failed: unknown result");
    }

    public int checkLoanIdByProjectNo(String projectNo) throws org.apache.thrift.TException
    {
      send_checkLoanIdByProjectNo(projectNo);
      return recv_checkLoanIdByProjectNo();
    }

    public void send_checkLoanIdByProjectNo(String projectNo) throws org.apache.thrift.TException
    {
      checkLoanIdByProjectNo_args args = new checkLoanIdByProjectNo_args();
      args.setProjectNo(projectNo);
      sendBase("checkLoanIdByProjectNo", args);
    }

    public int recv_checkLoanIdByProjectNo() throws org.apache.thrift.TException
    {
      checkLoanIdByProjectNo_result result = new checkLoanIdByProjectNo_result();
      receiveBase(result, "checkLoanIdByProjectNo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkLoanIdByProjectNo failed: unknown result");
    }

    public void saveMonthlyReportRecord(MonthlyReportRecord monthlyReportRecord) throws org.apache.thrift.TException
    {
      send_saveMonthlyReportRecord(monthlyReportRecord);
      recv_saveMonthlyReportRecord();
    }

    public void send_saveMonthlyReportRecord(MonthlyReportRecord monthlyReportRecord) throws org.apache.thrift.TException
    {
      saveMonthlyReportRecord_args args = new saveMonthlyReportRecord_args();
      args.setMonthlyReportRecord(monthlyReportRecord);
      sendBase("saveMonthlyReportRecord", args);
    }

    public void recv_saveMonthlyReportRecord() throws org.apache.thrift.TException
    {
      saveMonthlyReportRecord_result result = new saveMonthlyReportRecord_result();
      receiveBase(result, "saveMonthlyReportRecord");
      return;
    }

    public int updateRepaymentPlan(int redId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateRepaymentPlan(redId);
      return recv_updateRepaymentPlan();
    }

    public void send_updateRepaymentPlan(int redId) throws org.apache.thrift.TException
    {
      updateRepaymentPlan_args args = new updateRepaymentPlan_args();
      args.setRedId(redId);
      sendBase("updateRepaymentPlan", args);
    }

    public int recv_updateRepaymentPlan() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateRepaymentPlan_result result = new updateRepaymentPlan_result();
      receiveBase(result, "updateRepaymentPlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRepaymentPlan failed: unknown result");
    }

    public LoanCycleNumView getLoanCycleNumAndAmt(int loanId) throws org.apache.thrift.TException
    {
      send_getLoanCycleNumAndAmt(loanId);
      return recv_getLoanCycleNumAndAmt();
    }

    public void send_getLoanCycleNumAndAmt(int loanId) throws org.apache.thrift.TException
    {
      getLoanCycleNumAndAmt_args args = new getLoanCycleNumAndAmt_args();
      args.setLoanId(loanId);
      sendBase("getLoanCycleNumAndAmt", args);
    }

    public LoanCycleNumView recv_getLoanCycleNumAndAmt() throws org.apache.thrift.TException
    {
      getLoanCycleNumAndAmt_result result = new getLoanCycleNumAndAmt_result();
      receiveBase(result, "getLoanCycleNumAndAmt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLoanCycleNumAndAmt failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addFinanceAcctManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFinanceAcctManager_call method_call = new addFinanceAcctManager_call(financeBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFinanceAcctManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBank financeBank;
      public addFinanceAcctManager_call(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBank = financeBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFinanceAcctManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFinanceAcctManager_args args = new addFinanceAcctManager_args();
        args.setFinanceBank(financeBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addFinanceAcctManager();
      }
    }

    public void getFinanceActtManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceActtManager_call method_call = new getFinanceActtManager_call(financeBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceActtManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBank financeBank;
      public getFinanceActtManager_call(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBank = financeBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceActtManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceActtManager_args args = new getFinanceActtManager_args();
        args.setFinanceBank(financeBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceActtManager();
      }
    }

    public void countFinanceActtManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countFinanceActtManager_call method_call = new countFinanceActtManager_call(financeBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countFinanceActtManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBank financeBank;
      public countFinanceActtManager_call(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBank = financeBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countFinanceActtManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countFinanceActtManager_args args = new countFinanceActtManager_args();
        args.setFinanceBank(financeBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countFinanceActtManager();
      }
    }

    public void getFinanceActtManagerById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceActtManagerById_call method_call = new getFinanceActtManagerById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceActtManagerById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getFinanceActtManagerById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceActtManagerById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceActtManagerById_args args = new getFinanceActtManagerById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceBank getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceActtManagerById();
      }
    }

    public void updateFinanceAcctManager(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFinanceAcctManager_call method_call = new updateFinanceAcctManager_call(financeBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFinanceAcctManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBank financeBank;
      public updateFinanceAcctManager_call(FinanceBank financeBank, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBank = financeBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFinanceAcctManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFinanceAcctManager_args args = new updateFinanceAcctManager_args();
        args.setFinanceBank(financeBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFinanceAcctManager();
      }
    }

    public void deleteFinanceAcctManager(String pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFinanceAcctManager_call method_call = new deleteFinanceAcctManager_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFinanceAcctManager_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String pid;
      public deleteFinanceAcctManager_call(String pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFinanceAcctManager", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFinanceAcctManager_args args = new deleteFinanceAcctManager_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFinanceAcctManager();
      }
    }

    public void getCusBusiness(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCusBusiness_call method_call = new getCusBusiness_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCusBusiness_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public getCusBusiness_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCusBusiness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCusBusiness_args args = new getCusBusiness_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceBusinessView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCusBusiness();
      }
    }

    public void countCusBusiness(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countCusBusiness_call method_call = new countCusBusiness_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countCusBusiness_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public countCusBusiness_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countCusBusiness", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countCusBusiness_args args = new countCusBusiness_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countCusBusiness();
      }
    }

    public void getProCreLoans(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProCreLoans_call method_call = new getProCreLoans_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProCreLoans_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getProCreLoans_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProCreLoans", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProCreLoans_args args = new getProCreLoans_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.xlkfinance.bms.rpc.beforeloan.Project getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProCreLoans();
      }
    }

    public void getAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAcctBatchRepayment_call method_call = new getAcctBatchRepayment_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAcctBatchRepayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public getAcctBatchRepayment_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAcctBatchRepayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAcctBatchRepayment_args args = new getAcctBatchRepayment_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BatchRepaymentView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAcctBatchRepayment();
      }
    }

    public void countAcctBatchRepayment(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countAcctBatchRepayment_call method_call = new countAcctBatchRepayment_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countAcctBatchRepayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public countAcctBatchRepayment_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countAcctBatchRepayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countAcctBatchRepayment_args args = new countAcctBatchRepayment_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countAcctBatchRepayment();
      }
    }

    public void getCustArrearsView(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCustArrearsView_call method_call = new getCustArrearsView_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCustArrearsView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public getCustArrearsView_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCustArrearsView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCustArrearsView_args args = new getCustArrearsView_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CustArrearsView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCustArrearsView();
      }
    }

    public void countCustArrearsView(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countCustArrearsView_call method_call = new countCustArrearsView_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countCustArrearsView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public countCustArrearsView_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countCustArrearsView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countCustArrearsView_args args = new countCustArrearsView_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countCustArrearsView();
      }
    }

    public void getFinanceAcctTotalView(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceAcctTotalView_call method_call = new getFinanceAcctTotalView_call(financeAcctTotalCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceAcctTotalView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceAcctTotalCondition financeAcctTotalCondition;
      public getFinanceAcctTotalView_call(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeAcctTotalCondition = financeAcctTotalCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceAcctTotalView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceAcctTotalView_args args = new getFinanceAcctTotalView_args();
        args.setFinanceAcctTotalCondition(financeAcctTotalCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceAcctTotalView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceAcctTotalView();
      }
    }

    public void countFinanceAcctTotal(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countFinanceAcctTotal_call method_call = new countFinanceAcctTotal_call(financeAcctTotalCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countFinanceAcctTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceAcctTotalCondition financeAcctTotalCondition;
      public countFinanceAcctTotal_call(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeAcctTotalCondition = financeAcctTotalCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countFinanceAcctTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countFinanceAcctTotal_args args = new countFinanceAcctTotal_args();
        args.setFinanceAcctTotalCondition(financeAcctTotalCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countFinanceAcctTotal();
      }
    }

    public void getFinanceAcctTotalDetail(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceAcctTotalDetail_call method_call = new getFinanceAcctTotalDetail_call(financeAcctTotalCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceAcctTotalDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceAcctTotalCondition financeAcctTotalCondition;
      public getFinanceAcctTotalDetail_call(FinanceAcctTotalCondition financeAcctTotalCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeAcctTotalCondition = financeAcctTotalCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceAcctTotalDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceAcctTotalDetail_args args = new getFinanceAcctTotalDetail_args();
        args.setFinanceAcctTotalCondition(financeAcctTotalCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<FinanceAcctTotalDetailView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceAcctTotalDetail();
      }
    }

    public void getProjectTotalDetailList(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProjectTotalDetailList_call method_call = new getProjectTotalDetailList_call(financeBusinessCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProjectTotalDetailList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceBusinessCondition financeBusinessCondition;
      public getProjectTotalDetailList_call(FinanceBusinessCondition financeBusinessCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeBusinessCondition = financeBusinessCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProjectTotalDetailList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProjectTotalDetailList_args args = new getProjectTotalDetailList_args();
        args.setFinanceBusinessCondition(financeBusinessCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ProjectTotalDetailView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProjectTotalDetailList();
      }
    }

    public void getLoanReconciliationDtl(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanReconciliationDtl_call method_call = new getLoanReconciliationDtl_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanReconciliationDtl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getLoanReconciliationDtl_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanReconciliationDtl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanReconciliationDtl_args args = new getLoanReconciliationDtl_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LoanReconciliationDtlView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanReconciliationDtl();
      }
    }

    public void addAcctProjectBalance(AcctProjectBalanceDTO acctProjectBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addAcctProjectBalance_call method_call = new addAcctProjectBalance_call(acctProjectBalanceDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addAcctProjectBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AcctProjectBalanceDTO acctProjectBalanceDTO;
      public addAcctProjectBalance_call(AcctProjectBalanceDTO acctProjectBalanceDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.acctProjectBalanceDTO = acctProjectBalanceDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addAcctProjectBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addAcctProjectBalance_args args = new addAcctProjectBalance_args();
        args.setAcctProjectBalanceDTO(acctProjectBalanceDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addAcctProjectBalance();
      }
    }

    public void getAcctProjectBalanceByLoanId(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAcctProjectBalanceByLoanId_call method_call = new getAcctProjectBalanceByLoanId_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAcctProjectBalanceByLoanId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getAcctProjectBalanceByLoanId_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAcctProjectBalanceByLoanId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAcctProjectBalanceByLoanId_args args = new getAcctProjectBalanceByLoanId_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AcctProjectBalanceView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAcctProjectBalanceByLoanId();
      }
    }

    public void getBalanceByReceId(int receId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBalanceByReceId_call method_call = new getBalanceByReceId_call(receId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBalanceByReceId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int receId;
      public getBalanceByReceId_call(int receId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.receId = receId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBalanceByReceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBalanceByReceId_args args = new getBalanceByReceId_args();
        args.setReceId(receId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AcctProjectBalanceView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBalanceByReceId();
      }
    }

    public void addLoanRefund(LoanRefundDTO loanRefundDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLoanRefund_call method_call = new addLoanRefund_call(loanRefundDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLoanRefund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private LoanRefundDTO loanRefundDTO;
      public addLoanRefund_call(LoanRefundDTO loanRefundDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanRefundDTO = loanRefundDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLoanRefund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLoanRefund_args args = new addLoanRefund_args();
        args.setLoanRefundDTO(loanRefundDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addLoanRefund();
      }
    }

    public void getLoanRefundList(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanRefundList_call method_call = new getLoanRefundList_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanRefundList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getLoanRefundList_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanRefundList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanRefundList_args args = new getLoanRefundList_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LoanRefundView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanRefundList();
      }
    }

    public void getListUnReconciliation(UnReconciliationCondition unReconciliationCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListUnReconciliation_call method_call = new getListUnReconciliation_call(unReconciliationCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListUnReconciliation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnReconciliationCondition unReconciliationCondition;
      public getListUnReconciliation_call(UnReconciliationCondition unReconciliationCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unReconciliationCondition = unReconciliationCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListUnReconciliation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListUnReconciliation_args args = new getListUnReconciliation_args();
        args.setUnReconciliationCondition(unReconciliationCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<UnReconciliationView> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListUnReconciliation();
      }
    }

    public void countUnReconciliation(UnReconciliationCondition unReconciliationCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countUnReconciliation_call method_call = new countUnReconciliation_call(unReconciliationCondition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countUnReconciliation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UnReconciliationCondition unReconciliationCondition;
      public countUnReconciliation_call(UnReconciliationCondition unReconciliationCondition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unReconciliationCondition = unReconciliationCondition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countUnReconciliation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countUnReconciliation_args args = new countUnReconciliation_args();
        args.setUnReconciliationCondition(unReconciliationCondition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countUnReconciliation();
      }
    }

    public void findUnReconciliationInfo(int inputId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findUnReconciliationInfo_call method_call = new findUnReconciliationInfo_call(inputId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findUnReconciliationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int inputId;
      public findUnReconciliationInfo_call(int inputId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.inputId = inputId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findUnReconciliationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findUnReconciliationInfo_args args = new findUnReconciliationInfo_args();
        args.setInputId(inputId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UnReconciliationView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findUnReconciliationInfo();
      }
    }

    public void deleteLoanInputDate(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLoanInputDate_call method_call = new deleteLoanInputDate_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLoanInputDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public deleteLoanInputDate_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLoanInputDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLoanInputDate_args args = new deleteLoanInputDate_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteLoanInputDate();
      }
    }

    public void getFinanceReceivablesView(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceReceivablesView_call method_call = new getFinanceReceivablesView_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceReceivablesView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getFinanceReceivablesView_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceReceivablesView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceReceivablesView_args args = new getFinanceReceivablesView_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceReceivablesView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceReceivablesView();
      }
    }

    public void saveFinanceReceivables(FinanceReceivablesDTO dto, int projectId, int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveFinanceReceivables_call method_call = new saveFinanceReceivables_call(dto, projectId, acctId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveFinanceReceivables_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceReceivablesDTO dto;
      private int projectId;
      private int acctId;
      public saveFinanceReceivables_call(FinanceReceivablesDTO dto, int projectId, int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dto = dto;
        this.projectId = projectId;
        this.acctId = acctId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveFinanceReceivables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveFinanceReceivables_args args = new saveFinanceReceivables_args();
        args.setDto(dto);
        args.setProjectId(projectId);
        args.setAcctId(acctId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceReceivablesDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveFinanceReceivables();
      }
    }

    public void saveUseBalance(FinanceReceivablesDTO dto, int projectId, int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveUseBalance_call method_call = new saveUseBalance_call(dto, projectId, acctId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveUseBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FinanceReceivablesDTO dto;
      private int projectId;
      private int acctId;
      public saveUseBalance_call(FinanceReceivablesDTO dto, int projectId, int acctId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dto = dto;
        this.projectId = projectId;
        this.acctId = acctId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveUseBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveUseBalance_args args = new saveUseBalance_args();
        args.setDto(dto);
        args.setProjectId(projectId);
        args.setAcctId(acctId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceReceivablesDTO getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveUseBalance();
      }
    }

    public void getFinanceReceivables(int financeReceivablesId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFinanceReceivables_call method_call = new getFinanceReceivables_call(financeReceivablesId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFinanceReceivables_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int financeReceivablesId;
      public getFinanceReceivables_call(int financeReceivablesId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.financeReceivablesId = financeReceivablesId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFinanceReceivables", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFinanceReceivables_args args = new getFinanceReceivables_args();
        args.setFinanceReceivablesId(financeReceivablesId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FinanceReceivablesDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFinanceReceivables();
      }
    }

    public void getReconciliationOptionsList(int loanId, String currentDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReconciliationOptionsList_call method_call = new getReconciliationOptionsList_call(loanId, currentDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReconciliationOptionsList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      private String currentDate;
      public getReconciliationOptionsList_call(int loanId, String currentDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
        this.currentDate = currentDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReconciliationOptionsList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReconciliationOptionsList_args args = new getReconciliationOptionsList_args();
        args.setLoanId(loanId);
        args.setCurrentDate(currentDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ReconciliationOptionsView> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReconciliationOptionsList();
      }
    }

    public void getReconciliationItem(int type, int pid, String currentDt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReconciliationItem_call method_call = new getReconciliationItem_call(type, pid, currentDt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReconciliationItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int type;
      private int pid;
      private String currentDt;
      public getReconciliationItem_call(int type, int pid, String currentDt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.pid = pid;
        this.currentDt = currentDt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReconciliationItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReconciliationItem_args args = new getReconciliationItem_args();
        args.setType(type);
        args.setPid(pid);
        args.setCurrentDt(currentDt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReconciliationItem getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReconciliationItem();
      }
    }

    public void saveRepaymentReconciliation(List<RepaymentReconciliationBean> repaymentReconciliationBeanList, int receivablesVersion, double availableReconciliationAmount, int receivablesId, int loanInterestRecord, int loanMgrRecord, int loanOtherFee, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveRepaymentReconciliation_call method_call = new saveRepaymentReconciliation_call(repaymentReconciliationBeanList, receivablesVersion, availableReconciliationAmount, receivablesId, loanInterestRecord, loanMgrRecord, loanOtherFee, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveRepaymentReconciliation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<RepaymentReconciliationBean> repaymentReconciliationBeanList;
      private int receivablesVersion;
      private double availableReconciliationAmount;
      private int receivablesId;
      private int loanInterestRecord;
      private int loanMgrRecord;
      private int loanOtherFee;
      public saveRepaymentReconciliation_call(List<RepaymentReconciliationBean> repaymentReconciliationBeanList, int receivablesVersion, double availableReconciliationAmount, int receivablesId, int loanInterestRecord, int loanMgrRecord, int loanOtherFee, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentReconciliationBeanList = repaymentReconciliationBeanList;
        this.receivablesVersion = receivablesVersion;
        this.availableReconciliationAmount = availableReconciliationAmount;
        this.receivablesId = receivablesId;
        this.loanInterestRecord = loanInterestRecord;
        this.loanMgrRecord = loanMgrRecord;
        this.loanOtherFee = loanOtherFee;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveRepaymentReconciliation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveRepaymentReconciliation_args args = new saveRepaymentReconciliation_args();
        args.setRepaymentReconciliationBeanList(repaymentReconciliationBeanList);
        args.setReceivablesVersion(receivablesVersion);
        args.setAvailableReconciliationAmount(availableReconciliationAmount);
        args.setReceivablesId(receivablesId);
        args.setLoanInterestRecord(loanInterestRecord);
        args.setLoanMgrRecord(loanMgrRecord);
        args.setLoanOtherFee(loanOtherFee);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveRepaymentReconciliation();
      }
    }

    public void getBatchRepaymentLoanItemList(int loanId, String receivablesDate, double receivablesAmt, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBatchRepaymentLoanItemList_call method_call = new getBatchRepaymentLoanItemList_call(loanId, receivablesDate, receivablesAmt, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBatchRepaymentLoanItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      private String receivablesDate;
      private double receivablesAmt;
      public getBatchRepaymentLoanItemList_call(int loanId, String receivablesDate, double receivablesAmt, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
        this.receivablesDate = receivablesDate;
        this.receivablesAmt = receivablesAmt;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBatchRepaymentLoanItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBatchRepaymentLoanItemList_args args = new getBatchRepaymentLoanItemList_args();
        args.setLoanId(loanId);
        args.setReceivablesDate(receivablesDate);
        args.setReceivablesAmt(receivablesAmt);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BatchRepaymentItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBatchRepaymentLoanItemList();
      }
    }

    public void saveBatchRepayment(List<BatchRepaymentBean> batchRepaymentBeanList, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveBatchRepayment_call method_call = new saveBatchRepayment_call(batchRepaymentBeanList, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveBatchRepayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<BatchRepaymentBean> batchRepaymentBeanList;
      private int userId;
      public saveBatchRepayment_call(List<BatchRepaymentBean> batchRepaymentBeanList, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.batchRepaymentBeanList = batchRepaymentBeanList;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveBatchRepayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveBatchRepayment_args args = new saveBatchRepayment_args();
        args.setBatchRepaymentBeanList(batchRepaymentBeanList);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveBatchRepayment();
      }
    }

    public void getLoanBaseDataBean(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanBaseDataBean_call method_call = new getLoanBaseDataBean_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanBaseDataBean_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getLoanBaseDataBean_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanBaseDataBean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanBaseDataBean_args args = new getLoanBaseDataBean_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanBaseDataBean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanBaseDataBean();
      }
    }

    public void getBadDebtDataBean(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBadDebtDataBean_call method_call = new getBadDebtDataBean_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBadDebtDataBean_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getBadDebtDataBean_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBadDebtDataBean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBadDebtDataBean_args args = new getBadDebtDataBean_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<BadDebtDataBean> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBadDebtDataBean();
      }
    }

    public void activateTheLatestPlan(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateTheLatestPlan_call method_call = new activateTheLatestPlan_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateTheLatestPlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public activateTheLatestPlan_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateTheLatestPlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateTheLatestPlan_args args = new activateTheLatestPlan_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateTheLatestPlan();
      }
    }

    public void getOverdueByDate(int loanId, int p_pid, String cDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOverdueByDate_call method_call = new getOverdueByDate_call(loanId, p_pid, cDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverdueByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      private int p_pid;
      private String cDate;
      public getOverdueByDate_call(int loanId, int p_pid, String cDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
        this.p_pid = p_pid;
        this.cDate = cDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverdueByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverdueByDate_args args = new getOverdueByDate_args();
        args.setLoanId(loanId);
        args.setP_pid(p_pid);
        args.setCDate(cDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverdueByDate();
      }
    }

    public void getCustArrearsbyProjectView(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCustArrearsbyProjectView_call method_call = new getCustArrearsbyProjectView_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCustArrearsbyProjectView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getCustArrearsbyProjectView_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCustArrearsbyProjectView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCustArrearsbyProjectView_args args = new getCustArrearsbyProjectView_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CustArrearsView getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCustArrearsbyProjectView();
      }
    }

    public void addFinanceMonthlyReport(String startDate, String endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFinanceMonthlyReport_call method_call = new addFinanceMonthlyReport_call(startDate, endDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFinanceMonthlyReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String startDate;
      private String endDate;
      public addFinanceMonthlyReport_call(String startDate, String endDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startDate = startDate;
        this.endDate = endDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFinanceMonthlyReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFinanceMonthlyReport_args args = new addFinanceMonthlyReport_args();
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addFinanceMonthlyReport();
      }
    }

    public void listMonthlyReportRecords(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMonthlyReportRecords_call method_call = new listMonthlyReportRecords_call(condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMonthlyReportRecords_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MonthlyReportRecordCondition condition;
      public listMonthlyReportRecords_call(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMonthlyReportRecords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMonthlyReportRecords_args args = new listMonthlyReportRecords_args();
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MonthlyReportRecord> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMonthlyReportRecords();
      }
    }

    public void listMonthlyReportRecordsTotal(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listMonthlyReportRecordsTotal_call method_call = new listMonthlyReportRecordsTotal_call(condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listMonthlyReportRecordsTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MonthlyReportRecordCondition condition;
      public listMonthlyReportRecordsTotal_call(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listMonthlyReportRecordsTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listMonthlyReportRecordsTotal_args args = new listMonthlyReportRecordsTotal_args();
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listMonthlyReportRecordsTotal();
      }
    }

    public void updateStatus(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatus_call method_call = new updateStatus_call(condition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MonthlyReportRecordCondition condition;
      public updateStatus_call(MonthlyReportRecordCondition condition, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.condition = condition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatus_args args = new updateStatus_args();
        args.setCondition(condition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStatus();
      }
    }

    public void deleteMonthlyReportRecordsById(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteMonthlyReportRecordsById_call method_call = new deleteMonthlyReportRecordsById_call(ids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteMonthlyReportRecordsById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ids;
      public deleteMonthlyReportRecordsById_call(String ids, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ids = ids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteMonthlyReportRecordsById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteMonthlyReportRecordsById_args args = new deleteMonthlyReportRecordsById_args();
        args.setIds(ids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteMonthlyReportRecordsById();
      }
    }

    public void checkLoanIdByProjectNo(String projectNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkLoanIdByProjectNo_call method_call = new checkLoanIdByProjectNo_call(projectNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkLoanIdByProjectNo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String projectNo;
      public checkLoanIdByProjectNo_call(String projectNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectNo = projectNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkLoanIdByProjectNo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkLoanIdByProjectNo_args args = new checkLoanIdByProjectNo_args();
        args.setProjectNo(projectNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkLoanIdByProjectNo();
      }
    }

    public void saveMonthlyReportRecord(MonthlyReportRecord monthlyReportRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveMonthlyReportRecord_call method_call = new saveMonthlyReportRecord_call(monthlyReportRecord, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveMonthlyReportRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MonthlyReportRecord monthlyReportRecord;
      public saveMonthlyReportRecord_call(MonthlyReportRecord monthlyReportRecord, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.monthlyReportRecord = monthlyReportRecord;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveMonthlyReportRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveMonthlyReportRecord_args args = new saveMonthlyReportRecord_args();
        args.setMonthlyReportRecord(monthlyReportRecord);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveMonthlyReportRecord();
      }
    }

    public void updateRepaymentPlan(int redId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRepaymentPlan_call method_call = new updateRepaymentPlan_call(redId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRepaymentPlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int redId;
      public updateRepaymentPlan_call(int redId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.redId = redId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRepaymentPlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRepaymentPlan_args args = new updateRepaymentPlan_args();
        args.setRedId(redId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRepaymentPlan();
      }
    }

    public void getLoanCycleNumAndAmt(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLoanCycleNumAndAmt_call method_call = new getLoanCycleNumAndAmt_call(loanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLoanCycleNumAndAmt_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int loanId;
      public getLoanCycleNumAndAmt_call(int loanId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loanId = loanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLoanCycleNumAndAmt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLoanCycleNumAndAmt_args args = new getLoanCycleNumAndAmt_args();
        args.setLoanId(loanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoanCycleNumView getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLoanCycleNumAndAmt();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addFinanceAcctManager", new addFinanceAcctManager());
      processMap.put("getFinanceActtManager", new getFinanceActtManager());
      processMap.put("countFinanceActtManager", new countFinanceActtManager());
      processMap.put("getFinanceActtManagerById", new getFinanceActtManagerById());
      processMap.put("updateFinanceAcctManager", new updateFinanceAcctManager());
      processMap.put("deleteFinanceAcctManager", new deleteFinanceAcctManager());
      processMap.put("getCusBusiness", new getCusBusiness());
      processMap.put("countCusBusiness", new countCusBusiness());
      processMap.put("getProCreLoans", new getProCreLoans());
      processMap.put("getAcctBatchRepayment", new getAcctBatchRepayment());
      processMap.put("countAcctBatchRepayment", new countAcctBatchRepayment());
      processMap.put("getCustArrearsView", new getCustArrearsView());
      processMap.put("countCustArrearsView", new countCustArrearsView());
      processMap.put("getFinanceAcctTotalView", new getFinanceAcctTotalView());
      processMap.put("countFinanceAcctTotal", new countFinanceAcctTotal());
      processMap.put("getFinanceAcctTotalDetail", new getFinanceAcctTotalDetail());
      processMap.put("getProjectTotalDetailList", new getProjectTotalDetailList());
      processMap.put("getLoanReconciliationDtl", new getLoanReconciliationDtl());
      processMap.put("addAcctProjectBalance", new addAcctProjectBalance());
      processMap.put("getAcctProjectBalanceByLoanId", new getAcctProjectBalanceByLoanId());
      processMap.put("getBalanceByReceId", new getBalanceByReceId());
      processMap.put("addLoanRefund", new addLoanRefund());
      processMap.put("getLoanRefundList", new getLoanRefundList());
      processMap.put("getListUnReconciliation", new getListUnReconciliation());
      processMap.put("countUnReconciliation", new countUnReconciliation());
      processMap.put("findUnReconciliationInfo", new findUnReconciliationInfo());
      processMap.put("deleteLoanInputDate", new deleteLoanInputDate());
      processMap.put("getFinanceReceivablesView", new getFinanceReceivablesView());
      processMap.put("saveFinanceReceivables", new saveFinanceReceivables());
      processMap.put("saveUseBalance", new saveUseBalance());
      processMap.put("getFinanceReceivables", new getFinanceReceivables());
      processMap.put("getReconciliationOptionsList", new getReconciliationOptionsList());
      processMap.put("getReconciliationItem", new getReconciliationItem());
      processMap.put("saveRepaymentReconciliation", new saveRepaymentReconciliation());
      processMap.put("getBatchRepaymentLoanItemList", new getBatchRepaymentLoanItemList());
      processMap.put("saveBatchRepayment", new saveBatchRepayment());
      processMap.put("getLoanBaseDataBean", new getLoanBaseDataBean());
      processMap.put("getBadDebtDataBean", new getBadDebtDataBean());
      processMap.put("activateTheLatestPlan", new activateTheLatestPlan());
      processMap.put("getOverdueByDate", new getOverdueByDate());
      processMap.put("getCustArrearsbyProjectView", new getCustArrearsbyProjectView());
      processMap.put("addFinanceMonthlyReport", new addFinanceMonthlyReport());
      processMap.put("listMonthlyReportRecords", new listMonthlyReportRecords());
      processMap.put("listMonthlyReportRecordsTotal", new listMonthlyReportRecordsTotal());
      processMap.put("updateStatus", new updateStatus());
      processMap.put("deleteMonthlyReportRecordsById", new deleteMonthlyReportRecordsById());
      processMap.put("checkLoanIdByProjectNo", new checkLoanIdByProjectNo());
      processMap.put("saveMonthlyReportRecord", new saveMonthlyReportRecord());
      processMap.put("updateRepaymentPlan", new updateRepaymentPlan());
      processMap.put("getLoanCycleNumAndAmt", new getLoanCycleNumAndAmt());
      return processMap;
    }

    public static class addFinanceAcctManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFinanceAcctManager_args> {
      public addFinanceAcctManager() {
        super("addFinanceAcctManager");
      }

      public addFinanceAcctManager_args getEmptyArgsInstance() {
        return new addFinanceAcctManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFinanceAcctManager_result getResult(I iface, addFinanceAcctManager_args args) throws org.apache.thrift.TException {
        addFinanceAcctManager_result result = new addFinanceAcctManager_result();
        try {
          result.success = iface.addFinanceAcctManager(args.financeBank);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getFinanceActtManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceActtManager_args> {
      public getFinanceActtManager() {
        super("getFinanceActtManager");
      }

      public getFinanceActtManager_args getEmptyArgsInstance() {
        return new getFinanceActtManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceActtManager_result getResult(I iface, getFinanceActtManager_args args) throws org.apache.thrift.TException {
        getFinanceActtManager_result result = new getFinanceActtManager_result();
        result.success = iface.getFinanceActtManager(args.financeBank);
        return result;
      }
    }

    public static class countFinanceActtManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countFinanceActtManager_args> {
      public countFinanceActtManager() {
        super("countFinanceActtManager");
      }

      public countFinanceActtManager_args getEmptyArgsInstance() {
        return new countFinanceActtManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countFinanceActtManager_result getResult(I iface, countFinanceActtManager_args args) throws org.apache.thrift.TException {
        countFinanceActtManager_result result = new countFinanceActtManager_result();
        result.success = iface.countFinanceActtManager(args.financeBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getFinanceActtManagerById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceActtManagerById_args> {
      public getFinanceActtManagerById() {
        super("getFinanceActtManagerById");
      }

      public getFinanceActtManagerById_args getEmptyArgsInstance() {
        return new getFinanceActtManagerById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceActtManagerById_result getResult(I iface, getFinanceActtManagerById_args args) throws org.apache.thrift.TException {
        getFinanceActtManagerById_result result = new getFinanceActtManagerById_result();
        result.success = iface.getFinanceActtManagerById(args.pid);
        return result;
      }
    }

    public static class updateFinanceAcctManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFinanceAcctManager_args> {
      public updateFinanceAcctManager() {
        super("updateFinanceAcctManager");
      }

      public updateFinanceAcctManager_args getEmptyArgsInstance() {
        return new updateFinanceAcctManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFinanceAcctManager_result getResult(I iface, updateFinanceAcctManager_args args) throws org.apache.thrift.TException {
        updateFinanceAcctManager_result result = new updateFinanceAcctManager_result();
        result.success = iface.updateFinanceAcctManager(args.financeBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteFinanceAcctManager<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFinanceAcctManager_args> {
      public deleteFinanceAcctManager() {
        super("deleteFinanceAcctManager");
      }

      public deleteFinanceAcctManager_args getEmptyArgsInstance() {
        return new deleteFinanceAcctManager_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFinanceAcctManager_result getResult(I iface, deleteFinanceAcctManager_args args) throws org.apache.thrift.TException {
        deleteFinanceAcctManager_result result = new deleteFinanceAcctManager_result();
        try {
          result.success = iface.deleteFinanceAcctManager(args.pid);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCusBusiness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCusBusiness_args> {
      public getCusBusiness() {
        super("getCusBusiness");
      }

      public getCusBusiness_args getEmptyArgsInstance() {
        return new getCusBusiness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCusBusiness_result getResult(I iface, getCusBusiness_args args) throws org.apache.thrift.TException {
        getCusBusiness_result result = new getCusBusiness_result();
        try {
          result.success = iface.getCusBusiness(args.financeBusinessCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countCusBusiness<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countCusBusiness_args> {
      public countCusBusiness() {
        super("countCusBusiness");
      }

      public countCusBusiness_args getEmptyArgsInstance() {
        return new countCusBusiness_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countCusBusiness_result getResult(I iface, countCusBusiness_args args) throws org.apache.thrift.TException {
        countCusBusiness_result result = new countCusBusiness_result();
        try {
          result.success = iface.countCusBusiness(args.financeBusinessCondition);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getProCreLoans<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProCreLoans_args> {
      public getProCreLoans() {
        super("getProCreLoans");
      }

      public getProCreLoans_args getEmptyArgsInstance() {
        return new getProCreLoans_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProCreLoans_result getResult(I iface, getProCreLoans_args args) throws org.apache.thrift.TException {
        getProCreLoans_result result = new getProCreLoans_result();
        try {
          result.success = iface.getProCreLoans(args.loanId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getAcctBatchRepayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAcctBatchRepayment_args> {
      public getAcctBatchRepayment() {
        super("getAcctBatchRepayment");
      }

      public getAcctBatchRepayment_args getEmptyArgsInstance() {
        return new getAcctBatchRepayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAcctBatchRepayment_result getResult(I iface, getAcctBatchRepayment_args args) throws org.apache.thrift.TException {
        getAcctBatchRepayment_result result = new getAcctBatchRepayment_result();
        try {
          result.success = iface.getAcctBatchRepayment(args.financeBusinessCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countAcctBatchRepayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countAcctBatchRepayment_args> {
      public countAcctBatchRepayment() {
        super("countAcctBatchRepayment");
      }

      public countAcctBatchRepayment_args getEmptyArgsInstance() {
        return new countAcctBatchRepayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countAcctBatchRepayment_result getResult(I iface, countAcctBatchRepayment_args args) throws org.apache.thrift.TException {
        countAcctBatchRepayment_result result = new countAcctBatchRepayment_result();
        try {
          result.success = iface.countAcctBatchRepayment(args.financeBusinessCondition);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getCustArrearsView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCustArrearsView_args> {
      public getCustArrearsView() {
        super("getCustArrearsView");
      }

      public getCustArrearsView_args getEmptyArgsInstance() {
        return new getCustArrearsView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCustArrearsView_result getResult(I iface, getCustArrearsView_args args) throws org.apache.thrift.TException {
        getCustArrearsView_result result = new getCustArrearsView_result();
        try {
          result.success = iface.getCustArrearsView(args.financeBusinessCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countCustArrearsView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countCustArrearsView_args> {
      public countCustArrearsView() {
        super("countCustArrearsView");
      }

      public countCustArrearsView_args getEmptyArgsInstance() {
        return new countCustArrearsView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countCustArrearsView_result getResult(I iface, countCustArrearsView_args args) throws org.apache.thrift.TException {
        countCustArrearsView_result result = new countCustArrearsView_result();
        try {
          result.success = iface.countCustArrearsView(args.financeBusinessCondition);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getFinanceAcctTotalView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceAcctTotalView_args> {
      public getFinanceAcctTotalView() {
        super("getFinanceAcctTotalView");
      }

      public getFinanceAcctTotalView_args getEmptyArgsInstance() {
        return new getFinanceAcctTotalView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceAcctTotalView_result getResult(I iface, getFinanceAcctTotalView_args args) throws org.apache.thrift.TException {
        getFinanceAcctTotalView_result result = new getFinanceAcctTotalView_result();
        try {
          result.success = iface.getFinanceAcctTotalView(args.financeAcctTotalCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countFinanceAcctTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countFinanceAcctTotal_args> {
      public countFinanceAcctTotal() {
        super("countFinanceAcctTotal");
      }

      public countFinanceAcctTotal_args getEmptyArgsInstance() {
        return new countFinanceAcctTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countFinanceAcctTotal_result getResult(I iface, countFinanceAcctTotal_args args) throws org.apache.thrift.TException {
        countFinanceAcctTotal_result result = new countFinanceAcctTotal_result();
        try {
          result.success = iface.countFinanceAcctTotal(args.financeAcctTotalCondition);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getFinanceAcctTotalDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceAcctTotalDetail_args> {
      public getFinanceAcctTotalDetail() {
        super("getFinanceAcctTotalDetail");
      }

      public getFinanceAcctTotalDetail_args getEmptyArgsInstance() {
        return new getFinanceAcctTotalDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceAcctTotalDetail_result getResult(I iface, getFinanceAcctTotalDetail_args args) throws org.apache.thrift.TException {
        getFinanceAcctTotalDetail_result result = new getFinanceAcctTotalDetail_result();
        try {
          result.success = iface.getFinanceAcctTotalDetail(args.financeAcctTotalCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getProjectTotalDetailList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProjectTotalDetailList_args> {
      public getProjectTotalDetailList() {
        super("getProjectTotalDetailList");
      }

      public getProjectTotalDetailList_args getEmptyArgsInstance() {
        return new getProjectTotalDetailList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProjectTotalDetailList_result getResult(I iface, getProjectTotalDetailList_args args) throws org.apache.thrift.TException {
        getProjectTotalDetailList_result result = new getProjectTotalDetailList_result();
        try {
          result.success = iface.getProjectTotalDetailList(args.financeBusinessCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLoanReconciliationDtl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanReconciliationDtl_args> {
      public getLoanReconciliationDtl() {
        super("getLoanReconciliationDtl");
      }

      public getLoanReconciliationDtl_args getEmptyArgsInstance() {
        return new getLoanReconciliationDtl_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoanReconciliationDtl_result getResult(I iface, getLoanReconciliationDtl_args args) throws org.apache.thrift.TException {
        getLoanReconciliationDtl_result result = new getLoanReconciliationDtl_result();
        try {
          result.success = iface.getLoanReconciliationDtl(args.loanId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addAcctProjectBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addAcctProjectBalance_args> {
      public addAcctProjectBalance() {
        super("addAcctProjectBalance");
      }

      public addAcctProjectBalance_args getEmptyArgsInstance() {
        return new addAcctProjectBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addAcctProjectBalance_result getResult(I iface, addAcctProjectBalance_args args) throws org.apache.thrift.TException {
        addAcctProjectBalance_result result = new addAcctProjectBalance_result();
        try {
          result.success = iface.addAcctProjectBalance(args.acctProjectBalanceDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getAcctProjectBalanceByLoanId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAcctProjectBalanceByLoanId_args> {
      public getAcctProjectBalanceByLoanId() {
        super("getAcctProjectBalanceByLoanId");
      }

      public getAcctProjectBalanceByLoanId_args getEmptyArgsInstance() {
        return new getAcctProjectBalanceByLoanId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAcctProjectBalanceByLoanId_result getResult(I iface, getAcctProjectBalanceByLoanId_args args) throws org.apache.thrift.TException {
        getAcctProjectBalanceByLoanId_result result = new getAcctProjectBalanceByLoanId_result();
        try {
          result.success = iface.getAcctProjectBalanceByLoanId(args.loanId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getBalanceByReceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBalanceByReceId_args> {
      public getBalanceByReceId() {
        super("getBalanceByReceId");
      }

      public getBalanceByReceId_args getEmptyArgsInstance() {
        return new getBalanceByReceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBalanceByReceId_result getResult(I iface, getBalanceByReceId_args args) throws org.apache.thrift.TException {
        getBalanceByReceId_result result = new getBalanceByReceId_result();
        try {
          result.success = iface.getBalanceByReceId(args.receId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addLoanRefund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLoanRefund_args> {
      public addLoanRefund() {
        super("addLoanRefund");
      }

      public addLoanRefund_args getEmptyArgsInstance() {
        return new addLoanRefund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addLoanRefund_result getResult(I iface, addLoanRefund_args args) throws org.apache.thrift.TException {
        addLoanRefund_result result = new addLoanRefund_result();
        try {
          result.success = iface.addLoanRefund(args.loanRefundDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLoanRefundList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanRefundList_args> {
      public getLoanRefundList() {
        super("getLoanRefundList");
      }

      public getLoanRefundList_args getEmptyArgsInstance() {
        return new getLoanRefundList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoanRefundList_result getResult(I iface, getLoanRefundList_args args) throws org.apache.thrift.TException {
        getLoanRefundList_result result = new getLoanRefundList_result();
        try {
          result.success = iface.getLoanRefundList(args.loanId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getListUnReconciliation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListUnReconciliation_args> {
      public getListUnReconciliation() {
        super("getListUnReconciliation");
      }

      public getListUnReconciliation_args getEmptyArgsInstance() {
        return new getListUnReconciliation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListUnReconciliation_result getResult(I iface, getListUnReconciliation_args args) throws org.apache.thrift.TException {
        getListUnReconciliation_result result = new getListUnReconciliation_result();
        try {
          result.success = iface.getListUnReconciliation(args.unReconciliationCondition);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class countUnReconciliation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countUnReconciliation_args> {
      public countUnReconciliation() {
        super("countUnReconciliation");
      }

      public countUnReconciliation_args getEmptyArgsInstance() {
        return new countUnReconciliation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public countUnReconciliation_result getResult(I iface, countUnReconciliation_args args) throws org.apache.thrift.TException {
        countUnReconciliation_result result = new countUnReconciliation_result();
        try {
          result.success = iface.countUnReconciliation(args.unReconciliationCondition);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findUnReconciliationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findUnReconciliationInfo_args> {
      public findUnReconciliationInfo() {
        super("findUnReconciliationInfo");
      }

      public findUnReconciliationInfo_args getEmptyArgsInstance() {
        return new findUnReconciliationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findUnReconciliationInfo_result getResult(I iface, findUnReconciliationInfo_args args) throws org.apache.thrift.TException {
        findUnReconciliationInfo_result result = new findUnReconciliationInfo_result();
        try {
          result.success = iface.findUnReconciliationInfo(args.inputId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class deleteLoanInputDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLoanInputDate_args> {
      public deleteLoanInputDate() {
        super("deleteLoanInputDate");
      }

      public deleteLoanInputDate_args getEmptyArgsInstance() {
        return new deleteLoanInputDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteLoanInputDate_result getResult(I iface, deleteLoanInputDate_args args) throws org.apache.thrift.TException {
        deleteLoanInputDate_result result = new deleteLoanInputDate_result();
        result.success = iface.deleteLoanInputDate(args.pid);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getFinanceReceivablesView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceReceivablesView_args> {
      public getFinanceReceivablesView() {
        super("getFinanceReceivablesView");
      }

      public getFinanceReceivablesView_args getEmptyArgsInstance() {
        return new getFinanceReceivablesView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceReceivablesView_result getResult(I iface, getFinanceReceivablesView_args args) throws org.apache.thrift.TException {
        getFinanceReceivablesView_result result = new getFinanceReceivablesView_result();
        result.success = iface.getFinanceReceivablesView(args.loanId);
        return result;
      }
    }

    public static class saveFinanceReceivables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveFinanceReceivables_args> {
      public saveFinanceReceivables() {
        super("saveFinanceReceivables");
      }

      public saveFinanceReceivables_args getEmptyArgsInstance() {
        return new saveFinanceReceivables_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveFinanceReceivables_result getResult(I iface, saveFinanceReceivables_args args) throws org.apache.thrift.TException {
        saveFinanceReceivables_result result = new saveFinanceReceivables_result();
        result.success = iface.saveFinanceReceivables(args.dto, args.projectId, args.acctId);
        return result;
      }
    }

    public static class saveUseBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveUseBalance_args> {
      public saveUseBalance() {
        super("saveUseBalance");
      }

      public saveUseBalance_args getEmptyArgsInstance() {
        return new saveUseBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveUseBalance_result getResult(I iface, saveUseBalance_args args) throws org.apache.thrift.TException {
        saveUseBalance_result result = new saveUseBalance_result();
        try {
          result.success = iface.saveUseBalance(args.dto, args.projectId, args.acctId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getFinanceReceivables<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFinanceReceivables_args> {
      public getFinanceReceivables() {
        super("getFinanceReceivables");
      }

      public getFinanceReceivables_args getEmptyArgsInstance() {
        return new getFinanceReceivables_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFinanceReceivables_result getResult(I iface, getFinanceReceivables_args args) throws org.apache.thrift.TException {
        getFinanceReceivables_result result = new getFinanceReceivables_result();
        result.success = iface.getFinanceReceivables(args.financeReceivablesId);
        return result;
      }
    }

    public static class getReconciliationOptionsList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReconciliationOptionsList_args> {
      public getReconciliationOptionsList() {
        super("getReconciliationOptionsList");
      }

      public getReconciliationOptionsList_args getEmptyArgsInstance() {
        return new getReconciliationOptionsList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReconciliationOptionsList_result getResult(I iface, getReconciliationOptionsList_args args) throws org.apache.thrift.TException {
        getReconciliationOptionsList_result result = new getReconciliationOptionsList_result();
        result.success = iface.getReconciliationOptionsList(args.loanId, args.currentDate);
        return result;
      }
    }

    public static class getReconciliationItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReconciliationItem_args> {
      public getReconciliationItem() {
        super("getReconciliationItem");
      }

      public getReconciliationItem_args getEmptyArgsInstance() {
        return new getReconciliationItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReconciliationItem_result getResult(I iface, getReconciliationItem_args args) throws org.apache.thrift.TException {
        getReconciliationItem_result result = new getReconciliationItem_result();
        result.success = iface.getReconciliationItem(args.type, args.pid, args.currentDt);
        return result;
      }
    }

    public static class saveRepaymentReconciliation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveRepaymentReconciliation_args> {
      public saveRepaymentReconciliation() {
        super("saveRepaymentReconciliation");
      }

      public saveRepaymentReconciliation_args getEmptyArgsInstance() {
        return new saveRepaymentReconciliation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveRepaymentReconciliation_result getResult(I iface, saveRepaymentReconciliation_args args) throws org.apache.thrift.TException {
        saveRepaymentReconciliation_result result = new saveRepaymentReconciliation_result();
        result.success = iface.saveRepaymentReconciliation(args.repaymentReconciliationBeanList, args.receivablesVersion, args.availableReconciliationAmount, args.receivablesId, args.loanInterestRecord, args.loanMgrRecord, args.loanOtherFee);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBatchRepaymentLoanItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBatchRepaymentLoanItemList_args> {
      public getBatchRepaymentLoanItemList() {
        super("getBatchRepaymentLoanItemList");
      }

      public getBatchRepaymentLoanItemList_args getEmptyArgsInstance() {
        return new getBatchRepaymentLoanItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBatchRepaymentLoanItemList_result getResult(I iface, getBatchRepaymentLoanItemList_args args) throws org.apache.thrift.TException {
        getBatchRepaymentLoanItemList_result result = new getBatchRepaymentLoanItemList_result();
        result.success = iface.getBatchRepaymentLoanItemList(args.loanId, args.receivablesDate, args.receivablesAmt);
        return result;
      }
    }

    public static class saveBatchRepayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveBatchRepayment_args> {
      public saveBatchRepayment() {
        super("saveBatchRepayment");
      }

      public saveBatchRepayment_args getEmptyArgsInstance() {
        return new saveBatchRepayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveBatchRepayment_result getResult(I iface, saveBatchRepayment_args args) throws org.apache.thrift.TException {
        saveBatchRepayment_result result = new saveBatchRepayment_result();
        iface.saveBatchRepayment(args.batchRepaymentBeanList, args.userId);
        return result;
      }
    }

    public static class getLoanBaseDataBean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanBaseDataBean_args> {
      public getLoanBaseDataBean() {
        super("getLoanBaseDataBean");
      }

      public getLoanBaseDataBean_args getEmptyArgsInstance() {
        return new getLoanBaseDataBean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoanBaseDataBean_result getResult(I iface, getLoanBaseDataBean_args args) throws org.apache.thrift.TException {
        getLoanBaseDataBean_result result = new getLoanBaseDataBean_result();
        result.success = iface.getLoanBaseDataBean(args.projectId);
        return result;
      }
    }

    public static class getBadDebtDataBean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBadDebtDataBean_args> {
      public getBadDebtDataBean() {
        super("getBadDebtDataBean");
      }

      public getBadDebtDataBean_args getEmptyArgsInstance() {
        return new getBadDebtDataBean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBadDebtDataBean_result getResult(I iface, getBadDebtDataBean_args args) throws org.apache.thrift.TException {
        getBadDebtDataBean_result result = new getBadDebtDataBean_result();
        result.success = iface.getBadDebtDataBean(args.loanId);
        return result;
      }
    }

    public static class activateTheLatestPlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateTheLatestPlan_args> {
      public activateTheLatestPlan() {
        super("activateTheLatestPlan");
      }

      public activateTheLatestPlan_args getEmptyArgsInstance() {
        return new activateTheLatestPlan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateTheLatestPlan_result getResult(I iface, activateTheLatestPlan_args args) throws org.apache.thrift.TException {
        activateTheLatestPlan_result result = new activateTheLatestPlan_result();
        result.success = iface.activateTheLatestPlan(args.loanId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getOverdueByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverdueByDate_args> {
      public getOverdueByDate() {
        super("getOverdueByDate");
      }

      public getOverdueByDate_args getEmptyArgsInstance() {
        return new getOverdueByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverdueByDate_result getResult(I iface, getOverdueByDate_args args) throws org.apache.thrift.TException {
        getOverdueByDate_result result = new getOverdueByDate_result();
        result.success = iface.getOverdueByDate(args.loanId, args.p_pid, args.cDate);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCustArrearsbyProjectView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCustArrearsbyProjectView_args> {
      public getCustArrearsbyProjectView() {
        super("getCustArrearsbyProjectView");
      }

      public getCustArrearsbyProjectView_args getEmptyArgsInstance() {
        return new getCustArrearsbyProjectView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCustArrearsbyProjectView_result getResult(I iface, getCustArrearsbyProjectView_args args) throws org.apache.thrift.TException {
        getCustArrearsbyProjectView_result result = new getCustArrearsbyProjectView_result();
        try {
          result.success = iface.getCustArrearsbyProjectView(args.projectId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addFinanceMonthlyReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFinanceMonthlyReport_args> {
      public addFinanceMonthlyReport() {
        super("addFinanceMonthlyReport");
      }

      public addFinanceMonthlyReport_args getEmptyArgsInstance() {
        return new addFinanceMonthlyReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFinanceMonthlyReport_result getResult(I iface, addFinanceMonthlyReport_args args) throws org.apache.thrift.TException {
        addFinanceMonthlyReport_result result = new addFinanceMonthlyReport_result();
        iface.addFinanceMonthlyReport(args.startDate, args.endDate);
        return result;
      }
    }

    public static class listMonthlyReportRecords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMonthlyReportRecords_args> {
      public listMonthlyReportRecords() {
        super("listMonthlyReportRecords");
      }

      public listMonthlyReportRecords_args getEmptyArgsInstance() {
        return new listMonthlyReportRecords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMonthlyReportRecords_result getResult(I iface, listMonthlyReportRecords_args args) throws org.apache.thrift.TException {
        listMonthlyReportRecords_result result = new listMonthlyReportRecords_result();
        result.success = iface.listMonthlyReportRecords(args.condition);
        return result;
      }
    }

    public static class listMonthlyReportRecordsTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listMonthlyReportRecordsTotal_args> {
      public listMonthlyReportRecordsTotal() {
        super("listMonthlyReportRecordsTotal");
      }

      public listMonthlyReportRecordsTotal_args getEmptyArgsInstance() {
        return new listMonthlyReportRecordsTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listMonthlyReportRecordsTotal_result getResult(I iface, listMonthlyReportRecordsTotal_args args) throws org.apache.thrift.TException {
        listMonthlyReportRecordsTotal_result result = new listMonthlyReportRecordsTotal_result();
        result.success = iface.listMonthlyReportRecordsTotal(args.condition);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatus_args> {
      public updateStatus() {
        super("updateStatus");
      }

      public updateStatus_args getEmptyArgsInstance() {
        return new updateStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateStatus_result getResult(I iface, updateStatus_args args) throws org.apache.thrift.TException {
        updateStatus_result result = new updateStatus_result();
        result.success = iface.updateStatus(args.condition);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteMonthlyReportRecordsById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteMonthlyReportRecordsById_args> {
      public deleteMonthlyReportRecordsById() {
        super("deleteMonthlyReportRecordsById");
      }

      public deleteMonthlyReportRecordsById_args getEmptyArgsInstance() {
        return new deleteMonthlyReportRecordsById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteMonthlyReportRecordsById_result getResult(I iface, deleteMonthlyReportRecordsById_args args) throws org.apache.thrift.TException {
        deleteMonthlyReportRecordsById_result result = new deleteMonthlyReportRecordsById_result();
        result.success = iface.deleteMonthlyReportRecordsById(args.ids);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkLoanIdByProjectNo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkLoanIdByProjectNo_args> {
      public checkLoanIdByProjectNo() {
        super("checkLoanIdByProjectNo");
      }

      public checkLoanIdByProjectNo_args getEmptyArgsInstance() {
        return new checkLoanIdByProjectNo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkLoanIdByProjectNo_result getResult(I iface, checkLoanIdByProjectNo_args args) throws org.apache.thrift.TException {
        checkLoanIdByProjectNo_result result = new checkLoanIdByProjectNo_result();
        result.success = iface.checkLoanIdByProjectNo(args.projectNo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveMonthlyReportRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveMonthlyReportRecord_args> {
      public saveMonthlyReportRecord() {
        super("saveMonthlyReportRecord");
      }

      public saveMonthlyReportRecord_args getEmptyArgsInstance() {
        return new saveMonthlyReportRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveMonthlyReportRecord_result getResult(I iface, saveMonthlyReportRecord_args args) throws org.apache.thrift.TException {
        saveMonthlyReportRecord_result result = new saveMonthlyReportRecord_result();
        iface.saveMonthlyReportRecord(args.monthlyReportRecord);
        return result;
      }
    }

    public static class updateRepaymentPlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRepaymentPlan_args> {
      public updateRepaymentPlan() {
        super("updateRepaymentPlan");
      }

      public updateRepaymentPlan_args getEmptyArgsInstance() {
        return new updateRepaymentPlan_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRepaymentPlan_result getResult(I iface, updateRepaymentPlan_args args) throws org.apache.thrift.TException {
        updateRepaymentPlan_result result = new updateRepaymentPlan_result();
        try {
          result.success = iface.updateRepaymentPlan(args.redId);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLoanCycleNumAndAmt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLoanCycleNumAndAmt_args> {
      public getLoanCycleNumAndAmt() {
        super("getLoanCycleNumAndAmt");
      }

      public getLoanCycleNumAndAmt_args getEmptyArgsInstance() {
        return new getLoanCycleNumAndAmt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLoanCycleNumAndAmt_result getResult(I iface, getLoanCycleNumAndAmt_args args) throws org.apache.thrift.TException {
        getLoanCycleNumAndAmt_result result = new getLoanCycleNumAndAmt_result();
        result.success = iface.getLoanCycleNumAndAmt(args.loanId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("addFinanceAcctManager", new addFinanceAcctManager());
      processMap.put("getFinanceActtManager", new getFinanceActtManager());
      processMap.put("countFinanceActtManager", new countFinanceActtManager());
      processMap.put("getFinanceActtManagerById", new getFinanceActtManagerById());
      processMap.put("updateFinanceAcctManager", new updateFinanceAcctManager());
      processMap.put("deleteFinanceAcctManager", new deleteFinanceAcctManager());
      processMap.put("getCusBusiness", new getCusBusiness());
      processMap.put("countCusBusiness", new countCusBusiness());
      processMap.put("getProCreLoans", new getProCreLoans());
      processMap.put("getAcctBatchRepayment", new getAcctBatchRepayment());
      processMap.put("countAcctBatchRepayment", new countAcctBatchRepayment());
      processMap.put("getCustArrearsView", new getCustArrearsView());
      processMap.put("countCustArrearsView", new countCustArrearsView());
      processMap.put("getFinanceAcctTotalView", new getFinanceAcctTotalView());
      processMap.put("countFinanceAcctTotal", new countFinanceAcctTotal());
      processMap.put("getFinanceAcctTotalDetail", new getFinanceAcctTotalDetail());
      processMap.put("getProjectTotalDetailList", new getProjectTotalDetailList());
      processMap.put("getLoanReconciliationDtl", new getLoanReconciliationDtl());
      processMap.put("addAcctProjectBalance", new addAcctProjectBalance());
      processMap.put("getAcctProjectBalanceByLoanId", new getAcctProjectBalanceByLoanId());
      processMap.put("getBalanceByReceId", new getBalanceByReceId());
      processMap.put("addLoanRefund", new addLoanRefund());
      processMap.put("getLoanRefundList", new getLoanRefundList());
      processMap.put("getListUnReconciliation", new getListUnReconciliation());
      processMap.put("countUnReconciliation", new countUnReconciliation());
      processMap.put("findUnReconciliationInfo", new findUnReconciliationInfo());
      processMap.put("deleteLoanInputDate", new deleteLoanInputDate());
      processMap.put("getFinanceReceivablesView", new getFinanceReceivablesView());
      processMap.put("saveFinanceReceivables", new saveFinanceReceivables());
      processMap.put("saveUseBalance", new saveUseBalance());
      processMap.put("getFinanceReceivables", new getFinanceReceivables());
      processMap.put("getReconciliationOptionsList", new getReconciliationOptionsList());
      processMap.put("getReconciliationItem", new getReconciliationItem());
      processMap.put("saveRepaymentReconciliation", new saveRepaymentReconciliation());
      processMap.put("getBatchRepaymentLoanItemList", new getBatchRepaymentLoanItemList());
      processMap.put("saveBatchRepayment", new saveBatchRepayment());
      processMap.put("getLoanBaseDataBean", new getLoanBaseDataBean());
      processMap.put("getBadDebtDataBean", new getBadDebtDataBean());
      processMap.put("activateTheLatestPlan", new activateTheLatestPlan());
      processMap.put("getOverdueByDate", new getOverdueByDate());
      processMap.put("getCustArrearsbyProjectView", new getCustArrearsbyProjectView());
      processMap.put("addFinanceMonthlyReport", new addFinanceMonthlyReport());
      processMap.put("listMonthlyReportRecords", new listMonthlyReportRecords());
      processMap.put("listMonthlyReportRecordsTotal", new listMonthlyReportRecordsTotal());
      processMap.put("updateStatus", new updateStatus());
      processMap.put("deleteMonthlyReportRecordsById", new deleteMonthlyReportRecordsById());
      processMap.put("checkLoanIdByProjectNo", new checkLoanIdByProjectNo());
      processMap.put("saveMonthlyReportRecord", new saveMonthlyReportRecord());
      processMap.put("updateRepaymentPlan", new updateRepaymentPlan());
      processMap.put("getLoanCycleNumAndAmt", new getLoanCycleNumAndAmt());
      return processMap;
    }

    public static class addFinanceAcctManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFinanceAcctManager_args, Integer> {
      public addFinanceAcctManager() {
        super("addFinanceAcctManager");
      }

      public addFinanceAcctManager_args getEmptyArgsInstance() {
        return new addFinanceAcctManager_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addFinanceAcctManager_result result = new addFinanceAcctManager_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFinanceAcctManager_result result = new addFinanceAcctManager_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFinanceAcctManager_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addFinanceAcctManager(args.financeBank,resultHandler);
      }
    }

    public static class getFinanceActtManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceActtManager_args, List<FinanceBank>> {
      public getFinanceActtManager() {
        super("getFinanceActtManager");
      }

      public getFinanceActtManager_args getEmptyArgsInstance() {
        return new getFinanceActtManager_args();
      }

      public AsyncMethodCallback<List<FinanceBank>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceBank>>() { 
          public void onComplete(List<FinanceBank> o) {
            getFinanceActtManager_result result = new getFinanceActtManager_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceActtManager_result result = new getFinanceActtManager_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceActtManager_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceBank>> resultHandler) throws TException {
        iface.getFinanceActtManager(args.financeBank,resultHandler);
      }
    }

    public static class countFinanceActtManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countFinanceActtManager_args, Integer> {
      public countFinanceActtManager() {
        super("countFinanceActtManager");
      }

      public countFinanceActtManager_args getEmptyArgsInstance() {
        return new countFinanceActtManager_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countFinanceActtManager_result result = new countFinanceActtManager_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countFinanceActtManager_result result = new countFinanceActtManager_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countFinanceActtManager_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countFinanceActtManager(args.financeBank,resultHandler);
      }
    }

    public static class getFinanceActtManagerById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceActtManagerById_args, FinanceBank> {
      public getFinanceActtManagerById() {
        super("getFinanceActtManagerById");
      }

      public getFinanceActtManagerById_args getEmptyArgsInstance() {
        return new getFinanceActtManagerById_args();
      }

      public AsyncMethodCallback<FinanceBank> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceBank>() { 
          public void onComplete(FinanceBank o) {
            getFinanceActtManagerById_result result = new getFinanceActtManagerById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceActtManagerById_result result = new getFinanceActtManagerById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceActtManagerById_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceBank> resultHandler) throws TException {
        iface.getFinanceActtManagerById(args.pid,resultHandler);
      }
    }

    public static class updateFinanceAcctManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFinanceAcctManager_args, Integer> {
      public updateFinanceAcctManager() {
        super("updateFinanceAcctManager");
      }

      public updateFinanceAcctManager_args getEmptyArgsInstance() {
        return new updateFinanceAcctManager_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateFinanceAcctManager_result result = new updateFinanceAcctManager_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFinanceAcctManager_result result = new updateFinanceAcctManager_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFinanceAcctManager_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateFinanceAcctManager(args.financeBank,resultHandler);
      }
    }

    public static class deleteFinanceAcctManager<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFinanceAcctManager_args, Integer> {
      public deleteFinanceAcctManager() {
        super("deleteFinanceAcctManager");
      }

      public deleteFinanceAcctManager_args getEmptyArgsInstance() {
        return new deleteFinanceAcctManager_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteFinanceAcctManager_result result = new deleteFinanceAcctManager_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFinanceAcctManager_result result = new deleteFinanceAcctManager_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFinanceAcctManager_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteFinanceAcctManager(args.pid,resultHandler);
      }
    }

    public static class getCusBusiness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCusBusiness_args, List<FinanceBusinessView>> {
      public getCusBusiness() {
        super("getCusBusiness");
      }

      public getCusBusiness_args getEmptyArgsInstance() {
        return new getCusBusiness_args();
      }

      public AsyncMethodCallback<List<FinanceBusinessView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceBusinessView>>() { 
          public void onComplete(List<FinanceBusinessView> o) {
            getCusBusiness_result result = new getCusBusiness_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCusBusiness_result result = new getCusBusiness_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCusBusiness_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceBusinessView>> resultHandler) throws TException {
        iface.getCusBusiness(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class countCusBusiness<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countCusBusiness_args, Integer> {
      public countCusBusiness() {
        super("countCusBusiness");
      }

      public countCusBusiness_args getEmptyArgsInstance() {
        return new countCusBusiness_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countCusBusiness_result result = new countCusBusiness_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countCusBusiness_result result = new countCusBusiness_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countCusBusiness_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countCusBusiness(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class getProCreLoans<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProCreLoans_args, com.xlkfinance.bms.rpc.beforeloan.Project> {
      public getProCreLoans() {
        super("getProCreLoans");
      }

      public getProCreLoans_args getEmptyArgsInstance() {
        return new getProCreLoans_args();
      }

      public AsyncMethodCallback<com.xlkfinance.bms.rpc.beforeloan.Project> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.xlkfinance.bms.rpc.beforeloan.Project>() { 
          public void onComplete(com.xlkfinance.bms.rpc.beforeloan.Project o) {
            getProCreLoans_result result = new getProCreLoans_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProCreLoans_result result = new getProCreLoans_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProCreLoans_args args, org.apache.thrift.async.AsyncMethodCallback<com.xlkfinance.bms.rpc.beforeloan.Project> resultHandler) throws TException {
        iface.getProCreLoans(args.loanId,resultHandler);
      }
    }

    public static class getAcctBatchRepayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAcctBatchRepayment_args, List<BatchRepaymentView>> {
      public getAcctBatchRepayment() {
        super("getAcctBatchRepayment");
      }

      public getAcctBatchRepayment_args getEmptyArgsInstance() {
        return new getAcctBatchRepayment_args();
      }

      public AsyncMethodCallback<List<BatchRepaymentView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BatchRepaymentView>>() { 
          public void onComplete(List<BatchRepaymentView> o) {
            getAcctBatchRepayment_result result = new getAcctBatchRepayment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAcctBatchRepayment_result result = new getAcctBatchRepayment_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAcctBatchRepayment_args args, org.apache.thrift.async.AsyncMethodCallback<List<BatchRepaymentView>> resultHandler) throws TException {
        iface.getAcctBatchRepayment(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class countAcctBatchRepayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countAcctBatchRepayment_args, Integer> {
      public countAcctBatchRepayment() {
        super("countAcctBatchRepayment");
      }

      public countAcctBatchRepayment_args getEmptyArgsInstance() {
        return new countAcctBatchRepayment_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countAcctBatchRepayment_result result = new countAcctBatchRepayment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countAcctBatchRepayment_result result = new countAcctBatchRepayment_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countAcctBatchRepayment_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countAcctBatchRepayment(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class getCustArrearsView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCustArrearsView_args, List<CustArrearsView>> {
      public getCustArrearsView() {
        super("getCustArrearsView");
      }

      public getCustArrearsView_args getEmptyArgsInstance() {
        return new getCustArrearsView_args();
      }

      public AsyncMethodCallback<List<CustArrearsView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CustArrearsView>>() { 
          public void onComplete(List<CustArrearsView> o) {
            getCustArrearsView_result result = new getCustArrearsView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCustArrearsView_result result = new getCustArrearsView_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCustArrearsView_args args, org.apache.thrift.async.AsyncMethodCallback<List<CustArrearsView>> resultHandler) throws TException {
        iface.getCustArrearsView(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class countCustArrearsView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countCustArrearsView_args, Integer> {
      public countCustArrearsView() {
        super("countCustArrearsView");
      }

      public countCustArrearsView_args getEmptyArgsInstance() {
        return new countCustArrearsView_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countCustArrearsView_result result = new countCustArrearsView_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countCustArrearsView_result result = new countCustArrearsView_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countCustArrearsView_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countCustArrearsView(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class getFinanceAcctTotalView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceAcctTotalView_args, List<FinanceAcctTotalView>> {
      public getFinanceAcctTotalView() {
        super("getFinanceAcctTotalView");
      }

      public getFinanceAcctTotalView_args getEmptyArgsInstance() {
        return new getFinanceAcctTotalView_args();
      }

      public AsyncMethodCallback<List<FinanceAcctTotalView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceAcctTotalView>>() { 
          public void onComplete(List<FinanceAcctTotalView> o) {
            getFinanceAcctTotalView_result result = new getFinanceAcctTotalView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceAcctTotalView_result result = new getFinanceAcctTotalView_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceAcctTotalView_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceAcctTotalView>> resultHandler) throws TException {
        iface.getFinanceAcctTotalView(args.financeAcctTotalCondition,resultHandler);
      }
    }

    public static class countFinanceAcctTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countFinanceAcctTotal_args, Integer> {
      public countFinanceAcctTotal() {
        super("countFinanceAcctTotal");
      }

      public countFinanceAcctTotal_args getEmptyArgsInstance() {
        return new countFinanceAcctTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countFinanceAcctTotal_result result = new countFinanceAcctTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countFinanceAcctTotal_result result = new countFinanceAcctTotal_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countFinanceAcctTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countFinanceAcctTotal(args.financeAcctTotalCondition,resultHandler);
      }
    }

    public static class getFinanceAcctTotalDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceAcctTotalDetail_args, List<FinanceAcctTotalDetailView>> {
      public getFinanceAcctTotalDetail() {
        super("getFinanceAcctTotalDetail");
      }

      public getFinanceAcctTotalDetail_args getEmptyArgsInstance() {
        return new getFinanceAcctTotalDetail_args();
      }

      public AsyncMethodCallback<List<FinanceAcctTotalDetailView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<FinanceAcctTotalDetailView>>() { 
          public void onComplete(List<FinanceAcctTotalDetailView> o) {
            getFinanceAcctTotalDetail_result result = new getFinanceAcctTotalDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceAcctTotalDetail_result result = new getFinanceAcctTotalDetail_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceAcctTotalDetail_args args, org.apache.thrift.async.AsyncMethodCallback<List<FinanceAcctTotalDetailView>> resultHandler) throws TException {
        iface.getFinanceAcctTotalDetail(args.financeAcctTotalCondition,resultHandler);
      }
    }

    public static class getProjectTotalDetailList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProjectTotalDetailList_args, List<ProjectTotalDetailView>> {
      public getProjectTotalDetailList() {
        super("getProjectTotalDetailList");
      }

      public getProjectTotalDetailList_args getEmptyArgsInstance() {
        return new getProjectTotalDetailList_args();
      }

      public AsyncMethodCallback<List<ProjectTotalDetailView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ProjectTotalDetailView>>() { 
          public void onComplete(List<ProjectTotalDetailView> o) {
            getProjectTotalDetailList_result result = new getProjectTotalDetailList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProjectTotalDetailList_result result = new getProjectTotalDetailList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProjectTotalDetailList_args args, org.apache.thrift.async.AsyncMethodCallback<List<ProjectTotalDetailView>> resultHandler) throws TException {
        iface.getProjectTotalDetailList(args.financeBusinessCondition,resultHandler);
      }
    }

    public static class getLoanReconciliationDtl<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanReconciliationDtl_args, List<LoanReconciliationDtlView>> {
      public getLoanReconciliationDtl() {
        super("getLoanReconciliationDtl");
      }

      public getLoanReconciliationDtl_args getEmptyArgsInstance() {
        return new getLoanReconciliationDtl_args();
      }

      public AsyncMethodCallback<List<LoanReconciliationDtlView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LoanReconciliationDtlView>>() { 
          public void onComplete(List<LoanReconciliationDtlView> o) {
            getLoanReconciliationDtl_result result = new getLoanReconciliationDtl_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoanReconciliationDtl_result result = new getLoanReconciliationDtl_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanReconciliationDtl_args args, org.apache.thrift.async.AsyncMethodCallback<List<LoanReconciliationDtlView>> resultHandler) throws TException {
        iface.getLoanReconciliationDtl(args.loanId,resultHandler);
      }
    }

    public static class addAcctProjectBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addAcctProjectBalance_args, Integer> {
      public addAcctProjectBalance() {
        super("addAcctProjectBalance");
      }

      public addAcctProjectBalance_args getEmptyArgsInstance() {
        return new addAcctProjectBalance_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addAcctProjectBalance_result result = new addAcctProjectBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addAcctProjectBalance_result result = new addAcctProjectBalance_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addAcctProjectBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addAcctProjectBalance(args.acctProjectBalanceDTO,resultHandler);
      }
    }

    public static class getAcctProjectBalanceByLoanId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAcctProjectBalanceByLoanId_args, AcctProjectBalanceView> {
      public getAcctProjectBalanceByLoanId() {
        super("getAcctProjectBalanceByLoanId");
      }

      public getAcctProjectBalanceByLoanId_args getEmptyArgsInstance() {
        return new getAcctProjectBalanceByLoanId_args();
      }

      public AsyncMethodCallback<AcctProjectBalanceView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AcctProjectBalanceView>() { 
          public void onComplete(AcctProjectBalanceView o) {
            getAcctProjectBalanceByLoanId_result result = new getAcctProjectBalanceByLoanId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAcctProjectBalanceByLoanId_result result = new getAcctProjectBalanceByLoanId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAcctProjectBalanceByLoanId_args args, org.apache.thrift.async.AsyncMethodCallback<AcctProjectBalanceView> resultHandler) throws TException {
        iface.getAcctProjectBalanceByLoanId(args.loanId,resultHandler);
      }
    }

    public static class getBalanceByReceId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBalanceByReceId_args, AcctProjectBalanceView> {
      public getBalanceByReceId() {
        super("getBalanceByReceId");
      }

      public getBalanceByReceId_args getEmptyArgsInstance() {
        return new getBalanceByReceId_args();
      }

      public AsyncMethodCallback<AcctProjectBalanceView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AcctProjectBalanceView>() { 
          public void onComplete(AcctProjectBalanceView o) {
            getBalanceByReceId_result result = new getBalanceByReceId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBalanceByReceId_result result = new getBalanceByReceId_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBalanceByReceId_args args, org.apache.thrift.async.AsyncMethodCallback<AcctProjectBalanceView> resultHandler) throws TException {
        iface.getBalanceByReceId(args.receId,resultHandler);
      }
    }

    public static class addLoanRefund<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLoanRefund_args, Integer> {
      public addLoanRefund() {
        super("addLoanRefund");
      }

      public addLoanRefund_args getEmptyArgsInstance() {
        return new addLoanRefund_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            addLoanRefund_result result = new addLoanRefund_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addLoanRefund_result result = new addLoanRefund_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addLoanRefund_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.addLoanRefund(args.loanRefundDTO,resultHandler);
      }
    }

    public static class getLoanRefundList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanRefundList_args, List<LoanRefundView>> {
      public getLoanRefundList() {
        super("getLoanRefundList");
      }

      public getLoanRefundList_args getEmptyArgsInstance() {
        return new getLoanRefundList_args();
      }

      public AsyncMethodCallback<List<LoanRefundView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<LoanRefundView>>() { 
          public void onComplete(List<LoanRefundView> o) {
            getLoanRefundList_result result = new getLoanRefundList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoanRefundList_result result = new getLoanRefundList_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanRefundList_args args, org.apache.thrift.async.AsyncMethodCallback<List<LoanRefundView>> resultHandler) throws TException {
        iface.getLoanRefundList(args.loanId,resultHandler);
      }
    }

    public static class getListUnReconciliation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getListUnReconciliation_args, List<UnReconciliationView>> {
      public getListUnReconciliation() {
        super("getListUnReconciliation");
      }

      public getListUnReconciliation_args getEmptyArgsInstance() {
        return new getListUnReconciliation_args();
      }

      public AsyncMethodCallback<List<UnReconciliationView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<UnReconciliationView>>() { 
          public void onComplete(List<UnReconciliationView> o) {
            getListUnReconciliation_result result = new getListUnReconciliation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getListUnReconciliation_result result = new getListUnReconciliation_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getListUnReconciliation_args args, org.apache.thrift.async.AsyncMethodCallback<List<UnReconciliationView>> resultHandler) throws TException {
        iface.getListUnReconciliation(args.unReconciliationCondition,resultHandler);
      }
    }

    public static class countUnReconciliation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countUnReconciliation_args, Integer> {
      public countUnReconciliation() {
        super("countUnReconciliation");
      }

      public countUnReconciliation_args getEmptyArgsInstance() {
        return new countUnReconciliation_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            countUnReconciliation_result result = new countUnReconciliation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            countUnReconciliation_result result = new countUnReconciliation_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countUnReconciliation_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.countUnReconciliation(args.unReconciliationCondition,resultHandler);
      }
    }

    public static class findUnReconciliationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findUnReconciliationInfo_args, UnReconciliationView> {
      public findUnReconciliationInfo() {
        super("findUnReconciliationInfo");
      }

      public findUnReconciliationInfo_args getEmptyArgsInstance() {
        return new findUnReconciliationInfo_args();
      }

      public AsyncMethodCallback<UnReconciliationView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UnReconciliationView>() { 
          public void onComplete(UnReconciliationView o) {
            findUnReconciliationInfo_result result = new findUnReconciliationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findUnReconciliationInfo_result result = new findUnReconciliationInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findUnReconciliationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<UnReconciliationView> resultHandler) throws TException {
        iface.findUnReconciliationInfo(args.inputId,resultHandler);
      }
    }

    public static class deleteLoanInputDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLoanInputDate_args, Boolean> {
      public deleteLoanInputDate() {
        super("deleteLoanInputDate");
      }

      public deleteLoanInputDate_args getEmptyArgsInstance() {
        return new deleteLoanInputDate_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteLoanInputDate_result result = new deleteLoanInputDate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteLoanInputDate_result result = new deleteLoanInputDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteLoanInputDate_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteLoanInputDate(args.pid,resultHandler);
      }
    }

    public static class getFinanceReceivablesView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceReceivablesView_args, FinanceReceivablesView> {
      public getFinanceReceivablesView() {
        super("getFinanceReceivablesView");
      }

      public getFinanceReceivablesView_args getEmptyArgsInstance() {
        return new getFinanceReceivablesView_args();
      }

      public AsyncMethodCallback<FinanceReceivablesView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceReceivablesView>() { 
          public void onComplete(FinanceReceivablesView o) {
            getFinanceReceivablesView_result result = new getFinanceReceivablesView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceReceivablesView_result result = new getFinanceReceivablesView_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceReceivablesView_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceReceivablesView> resultHandler) throws TException {
        iface.getFinanceReceivablesView(args.loanId,resultHandler);
      }
    }

    public static class saveFinanceReceivables<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveFinanceReceivables_args, FinanceReceivablesDTO> {
      public saveFinanceReceivables() {
        super("saveFinanceReceivables");
      }

      public saveFinanceReceivables_args getEmptyArgsInstance() {
        return new saveFinanceReceivables_args();
      }

      public AsyncMethodCallback<FinanceReceivablesDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceReceivablesDTO>() { 
          public void onComplete(FinanceReceivablesDTO o) {
            saveFinanceReceivables_result result = new saveFinanceReceivables_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveFinanceReceivables_result result = new saveFinanceReceivables_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveFinanceReceivables_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceReceivablesDTO> resultHandler) throws TException {
        iface.saveFinanceReceivables(args.dto, args.projectId, args.acctId,resultHandler);
      }
    }

    public static class saveUseBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveUseBalance_args, FinanceReceivablesDTO> {
      public saveUseBalance() {
        super("saveUseBalance");
      }

      public saveUseBalance_args getEmptyArgsInstance() {
        return new saveUseBalance_args();
      }

      public AsyncMethodCallback<FinanceReceivablesDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceReceivablesDTO>() { 
          public void onComplete(FinanceReceivablesDTO o) {
            saveUseBalance_result result = new saveUseBalance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveUseBalance_result result = new saveUseBalance_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveUseBalance_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceReceivablesDTO> resultHandler) throws TException {
        iface.saveUseBalance(args.dto, args.projectId, args.acctId,resultHandler);
      }
    }

    public static class getFinanceReceivables<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFinanceReceivables_args, FinanceReceivablesDTO> {
      public getFinanceReceivables() {
        super("getFinanceReceivables");
      }

      public getFinanceReceivables_args getEmptyArgsInstance() {
        return new getFinanceReceivables_args();
      }

      public AsyncMethodCallback<FinanceReceivablesDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FinanceReceivablesDTO>() { 
          public void onComplete(FinanceReceivablesDTO o) {
            getFinanceReceivables_result result = new getFinanceReceivables_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFinanceReceivables_result result = new getFinanceReceivables_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFinanceReceivables_args args, org.apache.thrift.async.AsyncMethodCallback<FinanceReceivablesDTO> resultHandler) throws TException {
        iface.getFinanceReceivables(args.financeReceivablesId,resultHandler);
      }
    }

    public static class getReconciliationOptionsList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReconciliationOptionsList_args, List<ReconciliationOptionsView>> {
      public getReconciliationOptionsList() {
        super("getReconciliationOptionsList");
      }

      public getReconciliationOptionsList_args getEmptyArgsInstance() {
        return new getReconciliationOptionsList_args();
      }

      public AsyncMethodCallback<List<ReconciliationOptionsView>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ReconciliationOptionsView>>() { 
          public void onComplete(List<ReconciliationOptionsView> o) {
            getReconciliationOptionsList_result result = new getReconciliationOptionsList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReconciliationOptionsList_result result = new getReconciliationOptionsList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReconciliationOptionsList_args args, org.apache.thrift.async.AsyncMethodCallback<List<ReconciliationOptionsView>> resultHandler) throws TException {
        iface.getReconciliationOptionsList(args.loanId, args.currentDate,resultHandler);
      }
    }

    public static class getReconciliationItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReconciliationItem_args, ReconciliationItem> {
      public getReconciliationItem() {
        super("getReconciliationItem");
      }

      public getReconciliationItem_args getEmptyArgsInstance() {
        return new getReconciliationItem_args();
      }

      public AsyncMethodCallback<ReconciliationItem> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReconciliationItem>() { 
          public void onComplete(ReconciliationItem o) {
            getReconciliationItem_result result = new getReconciliationItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReconciliationItem_result result = new getReconciliationItem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReconciliationItem_args args, org.apache.thrift.async.AsyncMethodCallback<ReconciliationItem> resultHandler) throws TException {
        iface.getReconciliationItem(args.type, args.pid, args.currentDt,resultHandler);
      }
    }

    public static class saveRepaymentReconciliation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveRepaymentReconciliation_args, Integer> {
      public saveRepaymentReconciliation() {
        super("saveRepaymentReconciliation");
      }

      public saveRepaymentReconciliation_args getEmptyArgsInstance() {
        return new saveRepaymentReconciliation_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            saveRepaymentReconciliation_result result = new saveRepaymentReconciliation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveRepaymentReconciliation_result result = new saveRepaymentReconciliation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveRepaymentReconciliation_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.saveRepaymentReconciliation(args.repaymentReconciliationBeanList, args.receivablesVersion, args.availableReconciliationAmount, args.receivablesId, args.loanInterestRecord, args.loanMgrRecord, args.loanOtherFee,resultHandler);
      }
    }

    public static class getBatchRepaymentLoanItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBatchRepaymentLoanItemList_args, List<BatchRepaymentItem>> {
      public getBatchRepaymentLoanItemList() {
        super("getBatchRepaymentLoanItemList");
      }

      public getBatchRepaymentLoanItemList_args getEmptyArgsInstance() {
        return new getBatchRepaymentLoanItemList_args();
      }

      public AsyncMethodCallback<List<BatchRepaymentItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BatchRepaymentItem>>() { 
          public void onComplete(List<BatchRepaymentItem> o) {
            getBatchRepaymentLoanItemList_result result = new getBatchRepaymentLoanItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBatchRepaymentLoanItemList_result result = new getBatchRepaymentLoanItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBatchRepaymentLoanItemList_args args, org.apache.thrift.async.AsyncMethodCallback<List<BatchRepaymentItem>> resultHandler) throws TException {
        iface.getBatchRepaymentLoanItemList(args.loanId, args.receivablesDate, args.receivablesAmt,resultHandler);
      }
    }

    public static class saveBatchRepayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveBatchRepayment_args, Void> {
      public saveBatchRepayment() {
        super("saveBatchRepayment");
      }

      public saveBatchRepayment_args getEmptyArgsInstance() {
        return new saveBatchRepayment_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveBatchRepayment_result result = new saveBatchRepayment_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveBatchRepayment_result result = new saveBatchRepayment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveBatchRepayment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveBatchRepayment(args.batchRepaymentBeanList, args.userId,resultHandler);
      }
    }

    public static class getLoanBaseDataBean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanBaseDataBean_args, LoanBaseDataBean> {
      public getLoanBaseDataBean() {
        super("getLoanBaseDataBean");
      }

      public getLoanBaseDataBean_args getEmptyArgsInstance() {
        return new getLoanBaseDataBean_args();
      }

      public AsyncMethodCallback<LoanBaseDataBean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoanBaseDataBean>() { 
          public void onComplete(LoanBaseDataBean o) {
            getLoanBaseDataBean_result result = new getLoanBaseDataBean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoanBaseDataBean_result result = new getLoanBaseDataBean_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanBaseDataBean_args args, org.apache.thrift.async.AsyncMethodCallback<LoanBaseDataBean> resultHandler) throws TException {
        iface.getLoanBaseDataBean(args.projectId,resultHandler);
      }
    }

    public static class getBadDebtDataBean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBadDebtDataBean_args, List<BadDebtDataBean>> {
      public getBadDebtDataBean() {
        super("getBadDebtDataBean");
      }

      public getBadDebtDataBean_args getEmptyArgsInstance() {
        return new getBadDebtDataBean_args();
      }

      public AsyncMethodCallback<List<BadDebtDataBean>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<BadDebtDataBean>>() { 
          public void onComplete(List<BadDebtDataBean> o) {
            getBadDebtDataBean_result result = new getBadDebtDataBean_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBadDebtDataBean_result result = new getBadDebtDataBean_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBadDebtDataBean_args args, org.apache.thrift.async.AsyncMethodCallback<List<BadDebtDataBean>> resultHandler) throws TException {
        iface.getBadDebtDataBean(args.loanId,resultHandler);
      }
    }

    public static class activateTheLatestPlan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateTheLatestPlan_args, Integer> {
      public activateTheLatestPlan() {
        super("activateTheLatestPlan");
      }

      public activateTheLatestPlan_args getEmptyArgsInstance() {
        return new activateTheLatestPlan_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            activateTheLatestPlan_result result = new activateTheLatestPlan_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateTheLatestPlan_result result = new activateTheLatestPlan_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateTheLatestPlan_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.activateTheLatestPlan(args.loanId,resultHandler);
      }
    }

    public static class getOverdueByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverdueByDate_args, Double> {
      public getOverdueByDate() {
        super("getOverdueByDate");
      }

      public getOverdueByDate_args getEmptyArgsInstance() {
        return new getOverdueByDate_args();
      }

      public AsyncMethodCallback<Double> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Double>() { 
          public void onComplete(Double o) {
            getOverdueByDate_result result = new getOverdueByDate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverdueByDate_result result = new getOverdueByDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverdueByDate_args args, org.apache.thrift.async.AsyncMethodCallback<Double> resultHandler) throws TException {
        iface.getOverdueByDate(args.loanId, args.p_pid, args.cDate,resultHandler);
      }
    }

    public static class getCustArrearsbyProjectView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCustArrearsbyProjectView_args, CustArrearsView> {
      public getCustArrearsbyProjectView() {
        super("getCustArrearsbyProjectView");
      }

      public getCustArrearsbyProjectView_args getEmptyArgsInstance() {
        return new getCustArrearsbyProjectView_args();
      }

      public AsyncMethodCallback<CustArrearsView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CustArrearsView>() { 
          public void onComplete(CustArrearsView o) {
            getCustArrearsbyProjectView_result result = new getCustArrearsbyProjectView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCustArrearsbyProjectView_result result = new getCustArrearsbyProjectView_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCustArrearsbyProjectView_args args, org.apache.thrift.async.AsyncMethodCallback<CustArrearsView> resultHandler) throws TException {
        iface.getCustArrearsbyProjectView(args.projectId,resultHandler);
      }
    }

    public static class addFinanceMonthlyReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFinanceMonthlyReport_args, Void> {
      public addFinanceMonthlyReport() {
        super("addFinanceMonthlyReport");
      }

      public addFinanceMonthlyReport_args getEmptyArgsInstance() {
        return new addFinanceMonthlyReport_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addFinanceMonthlyReport_result result = new addFinanceMonthlyReport_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFinanceMonthlyReport_result result = new addFinanceMonthlyReport_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFinanceMonthlyReport_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addFinanceMonthlyReport(args.startDate, args.endDate,resultHandler);
      }
    }

    public static class listMonthlyReportRecords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMonthlyReportRecords_args, List<MonthlyReportRecord>> {
      public listMonthlyReportRecords() {
        super("listMonthlyReportRecords");
      }

      public listMonthlyReportRecords_args getEmptyArgsInstance() {
        return new listMonthlyReportRecords_args();
      }

      public AsyncMethodCallback<List<MonthlyReportRecord>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MonthlyReportRecord>>() { 
          public void onComplete(List<MonthlyReportRecord> o) {
            listMonthlyReportRecords_result result = new listMonthlyReportRecords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listMonthlyReportRecords_result result = new listMonthlyReportRecords_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMonthlyReportRecords_args args, org.apache.thrift.async.AsyncMethodCallback<List<MonthlyReportRecord>> resultHandler) throws TException {
        iface.listMonthlyReportRecords(args.condition,resultHandler);
      }
    }

    public static class listMonthlyReportRecordsTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listMonthlyReportRecordsTotal_args, Integer> {
      public listMonthlyReportRecordsTotal() {
        super("listMonthlyReportRecordsTotal");
      }

      public listMonthlyReportRecordsTotal_args getEmptyArgsInstance() {
        return new listMonthlyReportRecordsTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            listMonthlyReportRecordsTotal_result result = new listMonthlyReportRecordsTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listMonthlyReportRecordsTotal_result result = new listMonthlyReportRecordsTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listMonthlyReportRecordsTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.listMonthlyReportRecordsTotal(args.condition,resultHandler);
      }
    }

    public static class updateStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStatus_args, Integer> {
      public updateStatus() {
        super("updateStatus");
      }

      public updateStatus_args getEmptyArgsInstance() {
        return new updateStatus_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateStatus_result result = new updateStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateStatus_result result = new updateStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateStatus(args.condition,resultHandler);
      }
    }

    public static class deleteMonthlyReportRecordsById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteMonthlyReportRecordsById_args, Integer> {
      public deleteMonthlyReportRecordsById() {
        super("deleteMonthlyReportRecordsById");
      }

      public deleteMonthlyReportRecordsById_args getEmptyArgsInstance() {
        return new deleteMonthlyReportRecordsById_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            deleteMonthlyReportRecordsById_result result = new deleteMonthlyReportRecordsById_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteMonthlyReportRecordsById_result result = new deleteMonthlyReportRecordsById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteMonthlyReportRecordsById_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.deleteMonthlyReportRecordsById(args.ids,resultHandler);
      }
    }

    public static class checkLoanIdByProjectNo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkLoanIdByProjectNo_args, Integer> {
      public checkLoanIdByProjectNo() {
        super("checkLoanIdByProjectNo");
      }

      public checkLoanIdByProjectNo_args getEmptyArgsInstance() {
        return new checkLoanIdByProjectNo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            checkLoanIdByProjectNo_result result = new checkLoanIdByProjectNo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkLoanIdByProjectNo_result result = new checkLoanIdByProjectNo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkLoanIdByProjectNo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.checkLoanIdByProjectNo(args.projectNo,resultHandler);
      }
    }

    public static class saveMonthlyReportRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveMonthlyReportRecord_args, Void> {
      public saveMonthlyReportRecord() {
        super("saveMonthlyReportRecord");
      }

      public saveMonthlyReportRecord_args getEmptyArgsInstance() {
        return new saveMonthlyReportRecord_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveMonthlyReportRecord_result result = new saveMonthlyReportRecord_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveMonthlyReportRecord_result result = new saveMonthlyReportRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveMonthlyReportRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveMonthlyReportRecord(args.monthlyReportRecord,resultHandler);
      }
    }

    public static class updateRepaymentPlan<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRepaymentPlan_args, Integer> {
      public updateRepaymentPlan() {
        super("updateRepaymentPlan");
      }

      public updateRepaymentPlan_args getEmptyArgsInstance() {
        return new updateRepaymentPlan_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateRepaymentPlan_result result = new updateRepaymentPlan_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRepaymentPlan_result result = new updateRepaymentPlan_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRepaymentPlan_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateRepaymentPlan(args.redId,resultHandler);
      }
    }

    public static class getLoanCycleNumAndAmt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLoanCycleNumAndAmt_args, LoanCycleNumView> {
      public getLoanCycleNumAndAmt() {
        super("getLoanCycleNumAndAmt");
      }

      public getLoanCycleNumAndAmt_args getEmptyArgsInstance() {
        return new getLoanCycleNumAndAmt_args();
      }

      public AsyncMethodCallback<LoanCycleNumView> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoanCycleNumView>() { 
          public void onComplete(LoanCycleNumView o) {
            getLoanCycleNumAndAmt_result result = new getLoanCycleNumAndAmt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLoanCycleNumAndAmt_result result = new getLoanCycleNumAndAmt_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLoanCycleNumAndAmt_args args, org.apache.thrift.async.AsyncMethodCallback<LoanCycleNumView> resultHandler) throws TException {
        iface.getLoanCycleNumAndAmt(args.loanId,resultHandler);
      }
    }

  }

  public static class addFinanceAcctManager_args implements org.apache.thrift.TBase<addFinanceAcctManager_args, addFinanceAcctManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceAcctManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceAcctManager_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceAcctManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceAcctManager_argsTupleSchemeFactory());
    }

    public FinanceBank financeBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BANK((short)1, "financeBank");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BANK
            return FINANCE_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BANK, new org.apache.thrift.meta_data.FieldMetaData("financeBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBank.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceAcctManager_args.class, metaDataMap);
    }

    public addFinanceAcctManager_args() {
    }

    public addFinanceAcctManager_args(
      FinanceBank financeBank)
    {
      this();
      this.financeBank = financeBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceAcctManager_args(addFinanceAcctManager_args other) {
      if (other.isSetFinanceBank()) {
        this.financeBank = new FinanceBank(other.financeBank);
      }
    }

    public addFinanceAcctManager_args deepCopy() {
      return new addFinanceAcctManager_args(this);
    }

    @Override
    public void clear() {
      this.financeBank = null;
    }

    public FinanceBank getFinanceBank() {
      return this.financeBank;
    }

    public addFinanceAcctManager_args setFinanceBank(FinanceBank financeBank) {
      this.financeBank = financeBank;
      return this;
    }

    public void unsetFinanceBank() {
      this.financeBank = null;
    }

    /** Returns true if field financeBank is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBank() {
      return this.financeBank != null;
    }

    public void setFinanceBankIsSet(boolean value) {
      if (!value) {
        this.financeBank = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BANK:
        if (value == null) {
          unsetFinanceBank();
        } else {
          setFinanceBank((FinanceBank)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BANK:
        return getFinanceBank();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BANK:
        return isSetFinanceBank();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceAcctManager_args)
        return this.equals((addFinanceAcctManager_args)that);
      return false;
    }

    public boolean equals(addFinanceAcctManager_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBank = true && this.isSetFinanceBank();
      boolean that_present_financeBank = true && that.isSetFinanceBank();
      if (this_present_financeBank || that_present_financeBank) {
        if (!(this_present_financeBank && that_present_financeBank))
          return false;
        if (!this.financeBank.equals(that.financeBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBank = true && (isSetFinanceBank());
      list.add(present_financeBank);
      if (present_financeBank)
        list.add(financeBank);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceAcctManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBank()).compareTo(other.isSetFinanceBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBank, other.financeBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceAcctManager_args(");
      boolean first = true;

      sb.append("financeBank:");
      if (this.financeBank == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBank != null) {
        financeBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceAcctManager_argsStandardSchemeFactory implements SchemeFactory {
      public addFinanceAcctManager_argsStandardScheme getScheme() {
        return new addFinanceAcctManager_argsStandardScheme();
      }
    }

    private static class addFinanceAcctManager_argsStandardScheme extends StandardScheme<addFinanceAcctManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBank = new FinanceBank();
                struct.financeBank.read(iprot);
                struct.setFinanceBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBank != null) {
          oprot.writeFieldBegin(FINANCE_BANK_FIELD_DESC);
          struct.financeBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceAcctManager_argsTupleSchemeFactory implements SchemeFactory {
      public addFinanceAcctManager_argsTupleScheme getScheme() {
        return new addFinanceAcctManager_argsTupleScheme();
      }
    }

    private static class addFinanceAcctManager_argsTupleScheme extends TupleScheme<addFinanceAcctManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBank()) {
          struct.financeBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBank = new FinanceBank();
          struct.financeBank.read(iprot);
          struct.setFinanceBankIsSet(true);
        }
      }
    }

  }

  public static class addFinanceAcctManager_result implements org.apache.thrift.TBase<addFinanceAcctManager_result, addFinanceAcctManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceAcctManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceAcctManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceAcctManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceAcctManager_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceAcctManager_result.class, metaDataMap);
    }

    public addFinanceAcctManager_result() {
    }

    public addFinanceAcctManager_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceAcctManager_result(addFinanceAcctManager_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addFinanceAcctManager_result deepCopy() {
      return new addFinanceAcctManager_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addFinanceAcctManager_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addFinanceAcctManager_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceAcctManager_result)
        return this.equals((addFinanceAcctManager_result)that);
      return false;
    }

    public boolean equals(addFinanceAcctManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceAcctManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceAcctManager_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceAcctManager_resultStandardSchemeFactory implements SchemeFactory {
      public addFinanceAcctManager_resultStandardScheme getScheme() {
        return new addFinanceAcctManager_resultStandardScheme();
      }
    }

    private static class addFinanceAcctManager_resultStandardScheme extends StandardScheme<addFinanceAcctManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceAcctManager_resultTupleSchemeFactory implements SchemeFactory {
      public addFinanceAcctManager_resultTupleScheme getScheme() {
        return new addFinanceAcctManager_resultTupleScheme();
      }
    }

    private static class addFinanceAcctManager_resultTupleScheme extends TupleScheme<addFinanceAcctManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getFinanceActtManager_args implements org.apache.thrift.TBase<getFinanceActtManager_args, getFinanceActtManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceActtManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceActtManager_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceActtManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceActtManager_argsTupleSchemeFactory());
    }

    public FinanceBank financeBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BANK((short)1, "financeBank");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BANK
            return FINANCE_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BANK, new org.apache.thrift.meta_data.FieldMetaData("financeBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBank.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceActtManager_args.class, metaDataMap);
    }

    public getFinanceActtManager_args() {
    }

    public getFinanceActtManager_args(
      FinanceBank financeBank)
    {
      this();
      this.financeBank = financeBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceActtManager_args(getFinanceActtManager_args other) {
      if (other.isSetFinanceBank()) {
        this.financeBank = new FinanceBank(other.financeBank);
      }
    }

    public getFinanceActtManager_args deepCopy() {
      return new getFinanceActtManager_args(this);
    }

    @Override
    public void clear() {
      this.financeBank = null;
    }

    public FinanceBank getFinanceBank() {
      return this.financeBank;
    }

    public getFinanceActtManager_args setFinanceBank(FinanceBank financeBank) {
      this.financeBank = financeBank;
      return this;
    }

    public void unsetFinanceBank() {
      this.financeBank = null;
    }

    /** Returns true if field financeBank is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBank() {
      return this.financeBank != null;
    }

    public void setFinanceBankIsSet(boolean value) {
      if (!value) {
        this.financeBank = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BANK:
        if (value == null) {
          unsetFinanceBank();
        } else {
          setFinanceBank((FinanceBank)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BANK:
        return getFinanceBank();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BANK:
        return isSetFinanceBank();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceActtManager_args)
        return this.equals((getFinanceActtManager_args)that);
      return false;
    }

    public boolean equals(getFinanceActtManager_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBank = true && this.isSetFinanceBank();
      boolean that_present_financeBank = true && that.isSetFinanceBank();
      if (this_present_financeBank || that_present_financeBank) {
        if (!(this_present_financeBank && that_present_financeBank))
          return false;
        if (!this.financeBank.equals(that.financeBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBank = true && (isSetFinanceBank());
      list.add(present_financeBank);
      if (present_financeBank)
        list.add(financeBank);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceActtManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBank()).compareTo(other.isSetFinanceBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBank, other.financeBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceActtManager_args(");
      boolean first = true;

      sb.append("financeBank:");
      if (this.financeBank == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBank != null) {
        financeBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceActtManager_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceActtManager_argsStandardScheme getScheme() {
        return new getFinanceActtManager_argsStandardScheme();
      }
    }

    private static class getFinanceActtManager_argsStandardScheme extends StandardScheme<getFinanceActtManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceActtManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBank = new FinanceBank();
                struct.financeBank.read(iprot);
                struct.setFinanceBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceActtManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBank != null) {
          oprot.writeFieldBegin(FINANCE_BANK_FIELD_DESC);
          struct.financeBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceActtManager_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceActtManager_argsTupleScheme getScheme() {
        return new getFinanceActtManager_argsTupleScheme();
      }
    }

    private static class getFinanceActtManager_argsTupleScheme extends TupleScheme<getFinanceActtManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBank()) {
          struct.financeBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBank = new FinanceBank();
          struct.financeBank.read(iprot);
          struct.setFinanceBankIsSet(true);
        }
      }
    }

  }

  public static class getFinanceActtManager_result implements org.apache.thrift.TBase<getFinanceActtManager_result, getFinanceActtManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceActtManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceActtManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceActtManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceActtManager_resultTupleSchemeFactory());
    }

    public List<FinanceBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBank.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceActtManager_result.class, metaDataMap);
    }

    public getFinanceActtManager_result() {
    }

    public getFinanceActtManager_result(
      List<FinanceBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceActtManager_result(getFinanceActtManager_result other) {
      if (other.isSetSuccess()) {
        List<FinanceBank> __this__success = new ArrayList<FinanceBank>(other.success.size());
        for (FinanceBank other_element : other.success) {
          __this__success.add(new FinanceBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFinanceActtManager_result deepCopy() {
      return new getFinanceActtManager_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceBank elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceBank>();
      }
      this.success.add(elem);
    }

    public List<FinanceBank> getSuccess() {
      return this.success;
    }

    public getFinanceActtManager_result setSuccess(List<FinanceBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceBank>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceActtManager_result)
        return this.equals((getFinanceActtManager_result)that);
      return false;
    }

    public boolean equals(getFinanceActtManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceActtManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceActtManager_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceActtManager_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceActtManager_resultStandardScheme getScheme() {
        return new getFinanceActtManager_resultStandardScheme();
      }
    }

    private static class getFinanceActtManager_resultStandardScheme extends StandardScheme<getFinanceActtManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceActtManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceBank>(_list24.size);
                  FinanceBank _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new FinanceBank();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceActtManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceBank _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceActtManager_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceActtManager_resultTupleScheme getScheme() {
        return new getFinanceActtManager_resultTupleScheme();
      }
    }

    private static class getFinanceActtManager_resultTupleScheme extends TupleScheme<getFinanceActtManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceBank _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceBank>(_list29.size);
            FinanceBank _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new FinanceBank();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class countFinanceActtManager_args implements org.apache.thrift.TBase<countFinanceActtManager_args, countFinanceActtManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<countFinanceActtManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countFinanceActtManager_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countFinanceActtManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countFinanceActtManager_argsTupleSchemeFactory());
    }

    public FinanceBank financeBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BANK((short)1, "financeBank");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BANK
            return FINANCE_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BANK, new org.apache.thrift.meta_data.FieldMetaData("financeBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBank.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countFinanceActtManager_args.class, metaDataMap);
    }

    public countFinanceActtManager_args() {
    }

    public countFinanceActtManager_args(
      FinanceBank financeBank)
    {
      this();
      this.financeBank = financeBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countFinanceActtManager_args(countFinanceActtManager_args other) {
      if (other.isSetFinanceBank()) {
        this.financeBank = new FinanceBank(other.financeBank);
      }
    }

    public countFinanceActtManager_args deepCopy() {
      return new countFinanceActtManager_args(this);
    }

    @Override
    public void clear() {
      this.financeBank = null;
    }

    public FinanceBank getFinanceBank() {
      return this.financeBank;
    }

    public countFinanceActtManager_args setFinanceBank(FinanceBank financeBank) {
      this.financeBank = financeBank;
      return this;
    }

    public void unsetFinanceBank() {
      this.financeBank = null;
    }

    /** Returns true if field financeBank is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBank() {
      return this.financeBank != null;
    }

    public void setFinanceBankIsSet(boolean value) {
      if (!value) {
        this.financeBank = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BANK:
        if (value == null) {
          unsetFinanceBank();
        } else {
          setFinanceBank((FinanceBank)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BANK:
        return getFinanceBank();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BANK:
        return isSetFinanceBank();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countFinanceActtManager_args)
        return this.equals((countFinanceActtManager_args)that);
      return false;
    }

    public boolean equals(countFinanceActtManager_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBank = true && this.isSetFinanceBank();
      boolean that_present_financeBank = true && that.isSetFinanceBank();
      if (this_present_financeBank || that_present_financeBank) {
        if (!(this_present_financeBank && that_present_financeBank))
          return false;
        if (!this.financeBank.equals(that.financeBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBank = true && (isSetFinanceBank());
      list.add(present_financeBank);
      if (present_financeBank)
        list.add(financeBank);

      return list.hashCode();
    }

    @Override
    public int compareTo(countFinanceActtManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBank()).compareTo(other.isSetFinanceBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBank, other.financeBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countFinanceActtManager_args(");
      boolean first = true;

      sb.append("financeBank:");
      if (this.financeBank == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBank != null) {
        financeBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countFinanceActtManager_argsStandardSchemeFactory implements SchemeFactory {
      public countFinanceActtManager_argsStandardScheme getScheme() {
        return new countFinanceActtManager_argsStandardScheme();
      }
    }

    private static class countFinanceActtManager_argsStandardScheme extends StandardScheme<countFinanceActtManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countFinanceActtManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBank = new FinanceBank();
                struct.financeBank.read(iprot);
                struct.setFinanceBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countFinanceActtManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBank != null) {
          oprot.writeFieldBegin(FINANCE_BANK_FIELD_DESC);
          struct.financeBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countFinanceActtManager_argsTupleSchemeFactory implements SchemeFactory {
      public countFinanceActtManager_argsTupleScheme getScheme() {
        return new countFinanceActtManager_argsTupleScheme();
      }
    }

    private static class countFinanceActtManager_argsTupleScheme extends TupleScheme<countFinanceActtManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countFinanceActtManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBank()) {
          struct.financeBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countFinanceActtManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBank = new FinanceBank();
          struct.financeBank.read(iprot);
          struct.setFinanceBankIsSet(true);
        }
      }
    }

  }

  public static class countFinanceActtManager_result implements org.apache.thrift.TBase<countFinanceActtManager_result, countFinanceActtManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<countFinanceActtManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countFinanceActtManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countFinanceActtManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countFinanceActtManager_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countFinanceActtManager_result.class, metaDataMap);
    }

    public countFinanceActtManager_result() {
    }

    public countFinanceActtManager_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countFinanceActtManager_result(countFinanceActtManager_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countFinanceActtManager_result deepCopy() {
      return new countFinanceActtManager_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public countFinanceActtManager_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countFinanceActtManager_result)
        return this.equals((countFinanceActtManager_result)that);
      return false;
    }

    public boolean equals(countFinanceActtManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(countFinanceActtManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countFinanceActtManager_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countFinanceActtManager_resultStandardSchemeFactory implements SchemeFactory {
      public countFinanceActtManager_resultStandardScheme getScheme() {
        return new countFinanceActtManager_resultStandardScheme();
      }
    }

    private static class countFinanceActtManager_resultStandardScheme extends StandardScheme<countFinanceActtManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countFinanceActtManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countFinanceActtManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countFinanceActtManager_resultTupleSchemeFactory implements SchemeFactory {
      public countFinanceActtManager_resultTupleScheme getScheme() {
        return new countFinanceActtManager_resultTupleScheme();
      }
    }

    private static class countFinanceActtManager_resultTupleScheme extends TupleScheme<countFinanceActtManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countFinanceActtManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countFinanceActtManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceActtManagerById_args implements org.apache.thrift.TBase<getFinanceActtManagerById_args, getFinanceActtManagerById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceActtManagerById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceActtManagerById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceActtManagerById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceActtManagerById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceActtManagerById_args.class, metaDataMap);
    }

    public getFinanceActtManagerById_args() {
    }

    public getFinanceActtManagerById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceActtManagerById_args(getFinanceActtManagerById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getFinanceActtManagerById_args deepCopy() {
      return new getFinanceActtManagerById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getFinanceActtManagerById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceActtManagerById_args)
        return this.equals((getFinanceActtManagerById_args)that);
      return false;
    }

    public boolean equals(getFinanceActtManagerById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceActtManagerById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceActtManagerById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceActtManagerById_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceActtManagerById_argsStandardScheme getScheme() {
        return new getFinanceActtManagerById_argsStandardScheme();
      }
    }

    private static class getFinanceActtManagerById_argsStandardScheme extends StandardScheme<getFinanceActtManagerById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceActtManagerById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceActtManagerById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceActtManagerById_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceActtManagerById_argsTupleScheme getScheme() {
        return new getFinanceActtManagerById_argsTupleScheme();
      }
    }

    private static class getFinanceActtManagerById_argsTupleScheme extends TupleScheme<getFinanceActtManagerById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManagerById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManagerById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getFinanceActtManagerById_result implements org.apache.thrift.TBase<getFinanceActtManagerById_result, getFinanceActtManagerById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceActtManagerById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceActtManagerById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceActtManagerById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceActtManagerById_resultTupleSchemeFactory());
    }

    public FinanceBank success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBank.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceActtManagerById_result.class, metaDataMap);
    }

    public getFinanceActtManagerById_result() {
    }

    public getFinanceActtManagerById_result(
      FinanceBank success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceActtManagerById_result(getFinanceActtManagerById_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceBank(other.success);
      }
    }

    public getFinanceActtManagerById_result deepCopy() {
      return new getFinanceActtManagerById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FinanceBank getSuccess() {
      return this.success;
    }

    public getFinanceActtManagerById_result setSuccess(FinanceBank success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceBank)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceActtManagerById_result)
        return this.equals((getFinanceActtManagerById_result)that);
      return false;
    }

    public boolean equals(getFinanceActtManagerById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceActtManagerById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceActtManagerById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceActtManagerById_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceActtManagerById_resultStandardScheme getScheme() {
        return new getFinanceActtManagerById_resultStandardScheme();
      }
    }

    private static class getFinanceActtManagerById_resultStandardScheme extends StandardScheme<getFinanceActtManagerById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceActtManagerById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceBank();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceActtManagerById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceActtManagerById_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceActtManagerById_resultTupleScheme getScheme() {
        return new getFinanceActtManagerById_resultTupleScheme();
      }
    }

    private static class getFinanceActtManagerById_resultTupleScheme extends TupleScheme<getFinanceActtManagerById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManagerById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceActtManagerById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FinanceBank();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateFinanceAcctManager_args implements org.apache.thrift.TBase<updateFinanceAcctManager_args, updateFinanceAcctManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFinanceAcctManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFinanceAcctManager_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFinanceAcctManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFinanceAcctManager_argsTupleSchemeFactory());
    }

    public FinanceBank financeBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BANK((short)1, "financeBank");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BANK
            return FINANCE_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BANK, new org.apache.thrift.meta_data.FieldMetaData("financeBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBank.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFinanceAcctManager_args.class, metaDataMap);
    }

    public updateFinanceAcctManager_args() {
    }

    public updateFinanceAcctManager_args(
      FinanceBank financeBank)
    {
      this();
      this.financeBank = financeBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFinanceAcctManager_args(updateFinanceAcctManager_args other) {
      if (other.isSetFinanceBank()) {
        this.financeBank = new FinanceBank(other.financeBank);
      }
    }

    public updateFinanceAcctManager_args deepCopy() {
      return new updateFinanceAcctManager_args(this);
    }

    @Override
    public void clear() {
      this.financeBank = null;
    }

    public FinanceBank getFinanceBank() {
      return this.financeBank;
    }

    public updateFinanceAcctManager_args setFinanceBank(FinanceBank financeBank) {
      this.financeBank = financeBank;
      return this;
    }

    public void unsetFinanceBank() {
      this.financeBank = null;
    }

    /** Returns true if field financeBank is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBank() {
      return this.financeBank != null;
    }

    public void setFinanceBankIsSet(boolean value) {
      if (!value) {
        this.financeBank = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BANK:
        if (value == null) {
          unsetFinanceBank();
        } else {
          setFinanceBank((FinanceBank)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BANK:
        return getFinanceBank();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BANK:
        return isSetFinanceBank();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFinanceAcctManager_args)
        return this.equals((updateFinanceAcctManager_args)that);
      return false;
    }

    public boolean equals(updateFinanceAcctManager_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBank = true && this.isSetFinanceBank();
      boolean that_present_financeBank = true && that.isSetFinanceBank();
      if (this_present_financeBank || that_present_financeBank) {
        if (!(this_present_financeBank && that_present_financeBank))
          return false;
        if (!this.financeBank.equals(that.financeBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBank = true && (isSetFinanceBank());
      list.add(present_financeBank);
      if (present_financeBank)
        list.add(financeBank);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFinanceAcctManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBank()).compareTo(other.isSetFinanceBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBank, other.financeBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFinanceAcctManager_args(");
      boolean first = true;

      sb.append("financeBank:");
      if (this.financeBank == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBank != null) {
        financeBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFinanceAcctManager_argsStandardSchemeFactory implements SchemeFactory {
      public updateFinanceAcctManager_argsStandardScheme getScheme() {
        return new updateFinanceAcctManager_argsStandardScheme();
      }
    }

    private static class updateFinanceAcctManager_argsStandardScheme extends StandardScheme<updateFinanceAcctManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBank = new FinanceBank();
                struct.financeBank.read(iprot);
                struct.setFinanceBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBank != null) {
          oprot.writeFieldBegin(FINANCE_BANK_FIELD_DESC);
          struct.financeBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFinanceAcctManager_argsTupleSchemeFactory implements SchemeFactory {
      public updateFinanceAcctManager_argsTupleScheme getScheme() {
        return new updateFinanceAcctManager_argsTupleScheme();
      }
    }

    private static class updateFinanceAcctManager_argsTupleScheme extends TupleScheme<updateFinanceAcctManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBank()) {
          struct.financeBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBank = new FinanceBank();
          struct.financeBank.read(iprot);
          struct.setFinanceBankIsSet(true);
        }
      }
    }

  }

  public static class updateFinanceAcctManager_result implements org.apache.thrift.TBase<updateFinanceAcctManager_result, updateFinanceAcctManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFinanceAcctManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFinanceAcctManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFinanceAcctManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFinanceAcctManager_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFinanceAcctManager_result.class, metaDataMap);
    }

    public updateFinanceAcctManager_result() {
    }

    public updateFinanceAcctManager_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFinanceAcctManager_result(updateFinanceAcctManager_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateFinanceAcctManager_result deepCopy() {
      return new updateFinanceAcctManager_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateFinanceAcctManager_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFinanceAcctManager_result)
        return this.equals((updateFinanceAcctManager_result)that);
      return false;
    }

    public boolean equals(updateFinanceAcctManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFinanceAcctManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFinanceAcctManager_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFinanceAcctManager_resultStandardSchemeFactory implements SchemeFactory {
      public updateFinanceAcctManager_resultStandardScheme getScheme() {
        return new updateFinanceAcctManager_resultStandardScheme();
      }
    }

    private static class updateFinanceAcctManager_resultStandardScheme extends StandardScheme<updateFinanceAcctManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFinanceAcctManager_resultTupleSchemeFactory implements SchemeFactory {
      public updateFinanceAcctManager_resultTupleScheme getScheme() {
        return new updateFinanceAcctManager_resultTupleScheme();
      }
    }

    private static class updateFinanceAcctManager_resultTupleScheme extends TupleScheme<updateFinanceAcctManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteFinanceAcctManager_args implements org.apache.thrift.TBase<deleteFinanceAcctManager_args, deleteFinanceAcctManager_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFinanceAcctManager_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFinanceAcctManager_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFinanceAcctManager_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFinanceAcctManager_argsTupleSchemeFactory());
    }

    public String pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFinanceAcctManager_args.class, metaDataMap);
    }

    public deleteFinanceAcctManager_args() {
    }

    public deleteFinanceAcctManager_args(
      String pid)
    {
      this();
      this.pid = pid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFinanceAcctManager_args(deleteFinanceAcctManager_args other) {
      if (other.isSetPid()) {
        this.pid = other.pid;
      }
    }

    public deleteFinanceAcctManager_args deepCopy() {
      return new deleteFinanceAcctManager_args(this);
    }

    @Override
    public void clear() {
      this.pid = null;
    }

    public String getPid() {
      return this.pid;
    }

    public deleteFinanceAcctManager_args setPid(String pid) {
      this.pid = pid;
      return this;
    }

    public void unsetPid() {
      this.pid = null;
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return this.pid != null;
    }

    public void setPidIsSet(boolean value) {
      if (!value) {
        this.pid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return getPid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFinanceAcctManager_args)
        return this.equals((deleteFinanceAcctManager_args)that);
      return false;
    }

    public boolean equals(deleteFinanceAcctManager_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true && this.isSetPid();
      boolean that_present_pid = true && that.isSetPid();
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (!this.pid.equals(that.pid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true && (isSetPid());
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFinanceAcctManager_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFinanceAcctManager_args(");
      boolean first = true;

      sb.append("pid:");
      if (this.pid == null) {
        sb.append("null");
      } else {
        sb.append(this.pid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFinanceAcctManager_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFinanceAcctManager_argsStandardScheme getScheme() {
        return new deleteFinanceAcctManager_argsStandardScheme();
      }
    }

    private static class deleteFinanceAcctManager_argsStandardScheme extends StandardScheme<deleteFinanceAcctManager_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pid = iprot.readString();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pid != null) {
          oprot.writeFieldBegin(PID_FIELD_DESC);
          oprot.writeString(struct.pid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFinanceAcctManager_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFinanceAcctManager_argsTupleScheme getScheme() {
        return new deleteFinanceAcctManager_argsTupleScheme();
      }
    }

    private static class deleteFinanceAcctManager_argsTupleScheme extends TupleScheme<deleteFinanceAcctManager_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeString(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFinanceAcctManager_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readString();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class deleteFinanceAcctManager_result implements org.apache.thrift.TBase<deleteFinanceAcctManager_result, deleteFinanceAcctManager_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFinanceAcctManager_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFinanceAcctManager_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFinanceAcctManager_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFinanceAcctManager_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFinanceAcctManager_result.class, metaDataMap);
    }

    public deleteFinanceAcctManager_result() {
    }

    public deleteFinanceAcctManager_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFinanceAcctManager_result(deleteFinanceAcctManager_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public deleteFinanceAcctManager_result deepCopy() {
      return new deleteFinanceAcctManager_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteFinanceAcctManager_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public deleteFinanceAcctManager_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFinanceAcctManager_result)
        return this.equals((deleteFinanceAcctManager_result)that);
      return false;
    }

    public boolean equals(deleteFinanceAcctManager_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFinanceAcctManager_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFinanceAcctManager_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFinanceAcctManager_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFinanceAcctManager_resultStandardScheme getScheme() {
        return new deleteFinanceAcctManager_resultStandardScheme();
      }
    }

    private static class deleteFinanceAcctManager_resultStandardScheme extends StandardScheme<deleteFinanceAcctManager_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFinanceAcctManager_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFinanceAcctManager_resultTupleScheme getScheme() {
        return new deleteFinanceAcctManager_resultTupleScheme();
      }
    }

    private static class deleteFinanceAcctManager_resultTupleScheme extends TupleScheme<deleteFinanceAcctManager_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFinanceAcctManager_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getCusBusiness_args implements org.apache.thrift.TBase<getCusBusiness_args, getCusBusiness_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCusBusiness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCusBusiness_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCusBusiness_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCusBusiness_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCusBusiness_args.class, metaDataMap);
    }

    public getCusBusiness_args() {
    }

    public getCusBusiness_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCusBusiness_args(getCusBusiness_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public getCusBusiness_args deepCopy() {
      return new getCusBusiness_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public getCusBusiness_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCusBusiness_args)
        return this.equals((getCusBusiness_args)that);
      return false;
    }

    public boolean equals(getCusBusiness_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCusBusiness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCusBusiness_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCusBusiness_argsStandardSchemeFactory implements SchemeFactory {
      public getCusBusiness_argsStandardScheme getScheme() {
        return new getCusBusiness_argsStandardScheme();
      }
    }

    private static class getCusBusiness_argsStandardScheme extends StandardScheme<getCusBusiness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCusBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCusBusiness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCusBusiness_argsTupleSchemeFactory implements SchemeFactory {
      public getCusBusiness_argsTupleScheme getScheme() {
        return new getCusBusiness_argsTupleScheme();
      }
    }

    private static class getCusBusiness_argsTupleScheme extends TupleScheme<getCusBusiness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCusBusiness_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCusBusiness_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class getCusBusiness_result implements org.apache.thrift.TBase<getCusBusiness_result, getCusBusiness_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCusBusiness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCusBusiness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCusBusiness_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCusBusiness_resultTupleSchemeFactory());
    }

    public List<FinanceBusinessView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCusBusiness_result.class, metaDataMap);
    }

    public getCusBusiness_result() {
    }

    public getCusBusiness_result(
      List<FinanceBusinessView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCusBusiness_result(getCusBusiness_result other) {
      if (other.isSetSuccess()) {
        List<FinanceBusinessView> __this__success = new ArrayList<FinanceBusinessView>(other.success.size());
        for (FinanceBusinessView other_element : other.success) {
          __this__success.add(new FinanceBusinessView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getCusBusiness_result deepCopy() {
      return new getCusBusiness_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceBusinessView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceBusinessView elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceBusinessView>();
      }
      this.success.add(elem);
    }

    public List<FinanceBusinessView> getSuccess() {
      return this.success;
    }

    public getCusBusiness_result setSuccess(List<FinanceBusinessView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getCusBusiness_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceBusinessView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCusBusiness_result)
        return this.equals((getCusBusiness_result)that);
      return false;
    }

    public boolean equals(getCusBusiness_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCusBusiness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCusBusiness_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCusBusiness_resultStandardSchemeFactory implements SchemeFactory {
      public getCusBusiness_resultStandardScheme getScheme() {
        return new getCusBusiness_resultStandardScheme();
      }
    }

    private static class getCusBusiness_resultStandardScheme extends StandardScheme<getCusBusiness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCusBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceBusinessView>(_list32.size);
                  FinanceBusinessView _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new FinanceBusinessView();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCusBusiness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceBusinessView _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCusBusiness_resultTupleSchemeFactory implements SchemeFactory {
      public getCusBusiness_resultTupleScheme getScheme() {
        return new getCusBusiness_resultTupleScheme();
      }
    }

    private static class getCusBusiness_resultTupleScheme extends TupleScheme<getCusBusiness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCusBusiness_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceBusinessView _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCusBusiness_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceBusinessView>(_list37.size);
            FinanceBusinessView _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new FinanceBusinessView();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class countCusBusiness_args implements org.apache.thrift.TBase<countCusBusiness_args, countCusBusiness_args._Fields>, java.io.Serializable, Cloneable, Comparable<countCusBusiness_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCusBusiness_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countCusBusiness_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countCusBusiness_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCusBusiness_args.class, metaDataMap);
    }

    public countCusBusiness_args() {
    }

    public countCusBusiness_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCusBusiness_args(countCusBusiness_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public countCusBusiness_args deepCopy() {
      return new countCusBusiness_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public countCusBusiness_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countCusBusiness_args)
        return this.equals((countCusBusiness_args)that);
      return false;
    }

    public boolean equals(countCusBusiness_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(countCusBusiness_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countCusBusiness_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCusBusiness_argsStandardSchemeFactory implements SchemeFactory {
      public countCusBusiness_argsStandardScheme getScheme() {
        return new countCusBusiness_argsStandardScheme();
      }
    }

    private static class countCusBusiness_argsStandardScheme extends StandardScheme<countCusBusiness_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCusBusiness_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCusBusiness_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCusBusiness_argsTupleSchemeFactory implements SchemeFactory {
      public countCusBusiness_argsTupleScheme getScheme() {
        return new countCusBusiness_argsTupleScheme();
      }
    }

    private static class countCusBusiness_argsTupleScheme extends TupleScheme<countCusBusiness_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCusBusiness_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCusBusiness_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class countCusBusiness_result implements org.apache.thrift.TBase<countCusBusiness_result, countCusBusiness_result._Fields>, java.io.Serializable, Cloneable, Comparable<countCusBusiness_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCusBusiness_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countCusBusiness_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countCusBusiness_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCusBusiness_result.class, metaDataMap);
    }

    public countCusBusiness_result() {
    }

    public countCusBusiness_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCusBusiness_result(countCusBusiness_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public countCusBusiness_result deepCopy() {
      return new countCusBusiness_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countCusBusiness_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public countCusBusiness_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countCusBusiness_result)
        return this.equals((countCusBusiness_result)that);
      return false;
    }

    public boolean equals(countCusBusiness_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(countCusBusiness_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countCusBusiness_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCusBusiness_resultStandardSchemeFactory implements SchemeFactory {
      public countCusBusiness_resultStandardScheme getScheme() {
        return new countCusBusiness_resultStandardScheme();
      }
    }

    private static class countCusBusiness_resultStandardScheme extends StandardScheme<countCusBusiness_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCusBusiness_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCusBusiness_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCusBusiness_resultTupleSchemeFactory implements SchemeFactory {
      public countCusBusiness_resultTupleScheme getScheme() {
        return new countCusBusiness_resultTupleScheme();
      }
    }

    private static class countCusBusiness_resultTupleScheme extends TupleScheme<countCusBusiness_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCusBusiness_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCusBusiness_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getProCreLoans_args implements org.apache.thrift.TBase<getProCreLoans_args, getProCreLoans_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProCreLoans_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProCreLoans_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProCreLoans_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProCreLoans_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProCreLoans_args.class, metaDataMap);
    }

    public getProCreLoans_args() {
    }

    public getProCreLoans_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProCreLoans_args(getProCreLoans_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getProCreLoans_args deepCopy() {
      return new getProCreLoans_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getProCreLoans_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProCreLoans_args)
        return this.equals((getProCreLoans_args)that);
      return false;
    }

    public boolean equals(getProCreLoans_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProCreLoans_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProCreLoans_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProCreLoans_argsStandardSchemeFactory implements SchemeFactory {
      public getProCreLoans_argsStandardScheme getScheme() {
        return new getProCreLoans_argsStandardScheme();
      }
    }

    private static class getProCreLoans_argsStandardScheme extends StandardScheme<getProCreLoans_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProCreLoans_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProCreLoans_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProCreLoans_argsTupleSchemeFactory implements SchemeFactory {
      public getProCreLoans_argsTupleScheme getScheme() {
        return new getProCreLoans_argsTupleScheme();
      }
    }

    private static class getProCreLoans_argsTupleScheme extends TupleScheme<getProCreLoans_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProCreLoans_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProCreLoans_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getProCreLoans_result implements org.apache.thrift.TBase<getProCreLoans_result, getProCreLoans_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProCreLoans_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProCreLoans_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProCreLoans_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProCreLoans_resultTupleSchemeFactory());
    }

    public com.xlkfinance.bms.rpc.beforeloan.Project success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.Project.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProCreLoans_result.class, metaDataMap);
    }

    public getProCreLoans_result() {
    }

    public getProCreLoans_result(
      com.xlkfinance.bms.rpc.beforeloan.Project success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProCreLoans_result(getProCreLoans_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.xlkfinance.bms.rpc.beforeloan.Project(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getProCreLoans_result deepCopy() {
      return new getProCreLoans_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.xlkfinance.bms.rpc.beforeloan.Project getSuccess() {
      return this.success;
    }

    public getProCreLoans_result setSuccess(com.xlkfinance.bms.rpc.beforeloan.Project success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getProCreLoans_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.xlkfinance.bms.rpc.beforeloan.Project)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProCreLoans_result)
        return this.equals((getProCreLoans_result)that);
      return false;
    }

    public boolean equals(getProCreLoans_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProCreLoans_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProCreLoans_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProCreLoans_resultStandardSchemeFactory implements SchemeFactory {
      public getProCreLoans_resultStandardScheme getScheme() {
        return new getProCreLoans_resultStandardScheme();
      }
    }

    private static class getProCreLoans_resultStandardScheme extends StandardScheme<getProCreLoans_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProCreLoans_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.xlkfinance.bms.rpc.beforeloan.Project();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProCreLoans_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProCreLoans_resultTupleSchemeFactory implements SchemeFactory {
      public getProCreLoans_resultTupleScheme getScheme() {
        return new getProCreLoans_resultTupleScheme();
      }
    }

    private static class getProCreLoans_resultTupleScheme extends TupleScheme<getProCreLoans_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProCreLoans_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProCreLoans_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.xlkfinance.bms.rpc.beforeloan.Project();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getAcctBatchRepayment_args implements org.apache.thrift.TBase<getAcctBatchRepayment_args, getAcctBatchRepayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAcctBatchRepayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAcctBatchRepayment_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAcctBatchRepayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAcctBatchRepayment_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAcctBatchRepayment_args.class, metaDataMap);
    }

    public getAcctBatchRepayment_args() {
    }

    public getAcctBatchRepayment_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAcctBatchRepayment_args(getAcctBatchRepayment_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public getAcctBatchRepayment_args deepCopy() {
      return new getAcctBatchRepayment_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public getAcctBatchRepayment_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAcctBatchRepayment_args)
        return this.equals((getAcctBatchRepayment_args)that);
      return false;
    }

    public boolean equals(getAcctBatchRepayment_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAcctBatchRepayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAcctBatchRepayment_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAcctBatchRepayment_argsStandardSchemeFactory implements SchemeFactory {
      public getAcctBatchRepayment_argsStandardScheme getScheme() {
        return new getAcctBatchRepayment_argsStandardScheme();
      }
    }

    private static class getAcctBatchRepayment_argsStandardScheme extends StandardScheme<getAcctBatchRepayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAcctBatchRepayment_argsTupleSchemeFactory implements SchemeFactory {
      public getAcctBatchRepayment_argsTupleScheme getScheme() {
        return new getAcctBatchRepayment_argsTupleScheme();
      }
    }

    private static class getAcctBatchRepayment_argsTupleScheme extends TupleScheme<getAcctBatchRepayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class getAcctBatchRepayment_result implements org.apache.thrift.TBase<getAcctBatchRepayment_result, getAcctBatchRepayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAcctBatchRepayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAcctBatchRepayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAcctBatchRepayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAcctBatchRepayment_resultTupleSchemeFactory());
    }

    public List<BatchRepaymentView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchRepaymentView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAcctBatchRepayment_result.class, metaDataMap);
    }

    public getAcctBatchRepayment_result() {
    }

    public getAcctBatchRepayment_result(
      List<BatchRepaymentView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAcctBatchRepayment_result(getAcctBatchRepayment_result other) {
      if (other.isSetSuccess()) {
        List<BatchRepaymentView> __this__success = new ArrayList<BatchRepaymentView>(other.success.size());
        for (BatchRepaymentView other_element : other.success) {
          __this__success.add(new BatchRepaymentView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getAcctBatchRepayment_result deepCopy() {
      return new getAcctBatchRepayment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BatchRepaymentView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BatchRepaymentView elem) {
      if (this.success == null) {
        this.success = new ArrayList<BatchRepaymentView>();
      }
      this.success.add(elem);
    }

    public List<BatchRepaymentView> getSuccess() {
      return this.success;
    }

    public getAcctBatchRepayment_result setSuccess(List<BatchRepaymentView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getAcctBatchRepayment_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BatchRepaymentView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAcctBatchRepayment_result)
        return this.equals((getAcctBatchRepayment_result)that);
      return false;
    }

    public boolean equals(getAcctBatchRepayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAcctBatchRepayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAcctBatchRepayment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAcctBatchRepayment_resultStandardSchemeFactory implements SchemeFactory {
      public getAcctBatchRepayment_resultStandardScheme getScheme() {
        return new getAcctBatchRepayment_resultStandardScheme();
      }
    }

    private static class getAcctBatchRepayment_resultStandardScheme extends StandardScheme<getAcctBatchRepayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<BatchRepaymentView>(_list40.size);
                  BatchRepaymentView _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new BatchRepaymentView();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BatchRepaymentView _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAcctBatchRepayment_resultTupleSchemeFactory implements SchemeFactory {
      public getAcctBatchRepayment_resultTupleScheme getScheme() {
        return new getAcctBatchRepayment_resultTupleScheme();
      }
    }

    private static class getAcctBatchRepayment_resultTupleScheme extends TupleScheme<getAcctBatchRepayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BatchRepaymentView _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BatchRepaymentView>(_list45.size);
            BatchRepaymentView _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new BatchRepaymentView();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class countAcctBatchRepayment_args implements org.apache.thrift.TBase<countAcctBatchRepayment_args, countAcctBatchRepayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<countAcctBatchRepayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAcctBatchRepayment_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countAcctBatchRepayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countAcctBatchRepayment_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAcctBatchRepayment_args.class, metaDataMap);
    }

    public countAcctBatchRepayment_args() {
    }

    public countAcctBatchRepayment_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAcctBatchRepayment_args(countAcctBatchRepayment_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public countAcctBatchRepayment_args deepCopy() {
      return new countAcctBatchRepayment_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public countAcctBatchRepayment_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countAcctBatchRepayment_args)
        return this.equals((countAcctBatchRepayment_args)that);
      return false;
    }

    public boolean equals(countAcctBatchRepayment_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(countAcctBatchRepayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countAcctBatchRepayment_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAcctBatchRepayment_argsStandardSchemeFactory implements SchemeFactory {
      public countAcctBatchRepayment_argsStandardScheme getScheme() {
        return new countAcctBatchRepayment_argsStandardScheme();
      }
    }

    private static class countAcctBatchRepayment_argsStandardScheme extends StandardScheme<countAcctBatchRepayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAcctBatchRepayment_argsTupleSchemeFactory implements SchemeFactory {
      public countAcctBatchRepayment_argsTupleScheme getScheme() {
        return new countAcctBatchRepayment_argsTupleScheme();
      }
    }

    private static class countAcctBatchRepayment_argsTupleScheme extends TupleScheme<countAcctBatchRepayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAcctBatchRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class countAcctBatchRepayment_result implements org.apache.thrift.TBase<countAcctBatchRepayment_result, countAcctBatchRepayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<countAcctBatchRepayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countAcctBatchRepayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countAcctBatchRepayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countAcctBatchRepayment_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countAcctBatchRepayment_result.class, metaDataMap);
    }

    public countAcctBatchRepayment_result() {
    }

    public countAcctBatchRepayment_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countAcctBatchRepayment_result(countAcctBatchRepayment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public countAcctBatchRepayment_result deepCopy() {
      return new countAcctBatchRepayment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countAcctBatchRepayment_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public countAcctBatchRepayment_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countAcctBatchRepayment_result)
        return this.equals((countAcctBatchRepayment_result)that);
      return false;
    }

    public boolean equals(countAcctBatchRepayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(countAcctBatchRepayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countAcctBatchRepayment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countAcctBatchRepayment_resultStandardSchemeFactory implements SchemeFactory {
      public countAcctBatchRepayment_resultStandardScheme getScheme() {
        return new countAcctBatchRepayment_resultStandardScheme();
      }
    }

    private static class countAcctBatchRepayment_resultStandardScheme extends StandardScheme<countAcctBatchRepayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countAcctBatchRepayment_resultTupleSchemeFactory implements SchemeFactory {
      public countAcctBatchRepayment_resultTupleScheme getScheme() {
        return new countAcctBatchRepayment_resultTupleScheme();
      }
    }

    private static class countAcctBatchRepayment_resultTupleScheme extends TupleScheme<countAcctBatchRepayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countAcctBatchRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getCustArrearsView_args implements org.apache.thrift.TBase<getCustArrearsView_args, getCustArrearsView_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCustArrearsView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustArrearsView_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustArrearsView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustArrearsView_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustArrearsView_args.class, metaDataMap);
    }

    public getCustArrearsView_args() {
    }

    public getCustArrearsView_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustArrearsView_args(getCustArrearsView_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public getCustArrearsView_args deepCopy() {
      return new getCustArrearsView_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public getCustArrearsView_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustArrearsView_args)
        return this.equals((getCustArrearsView_args)that);
      return false;
    }

    public boolean equals(getCustArrearsView_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustArrearsView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustArrearsView_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustArrearsView_argsStandardSchemeFactory implements SchemeFactory {
      public getCustArrearsView_argsStandardScheme getScheme() {
        return new getCustArrearsView_argsStandardScheme();
      }
    }

    private static class getCustArrearsView_argsStandardScheme extends StandardScheme<getCustArrearsView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustArrearsView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustArrearsView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustArrearsView_argsTupleSchemeFactory implements SchemeFactory {
      public getCustArrearsView_argsTupleScheme getScheme() {
        return new getCustArrearsView_argsTupleScheme();
      }
    }

    private static class getCustArrearsView_argsTupleScheme extends TupleScheme<getCustArrearsView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustArrearsView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustArrearsView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class getCustArrearsView_result implements org.apache.thrift.TBase<getCustArrearsView_result, getCustArrearsView_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCustArrearsView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustArrearsView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustArrearsView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustArrearsView_resultTupleSchemeFactory());
    }

    public List<CustArrearsView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustArrearsView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustArrearsView_result.class, metaDataMap);
    }

    public getCustArrearsView_result() {
    }

    public getCustArrearsView_result(
      List<CustArrearsView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustArrearsView_result(getCustArrearsView_result other) {
      if (other.isSetSuccess()) {
        List<CustArrearsView> __this__success = new ArrayList<CustArrearsView>(other.success.size());
        for (CustArrearsView other_element : other.success) {
          __this__success.add(new CustArrearsView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getCustArrearsView_result deepCopy() {
      return new getCustArrearsView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CustArrearsView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CustArrearsView elem) {
      if (this.success == null) {
        this.success = new ArrayList<CustArrearsView>();
      }
      this.success.add(elem);
    }

    public List<CustArrearsView> getSuccess() {
      return this.success;
    }

    public getCustArrearsView_result setSuccess(List<CustArrearsView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getCustArrearsView_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CustArrearsView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustArrearsView_result)
        return this.equals((getCustArrearsView_result)that);
      return false;
    }

    public boolean equals(getCustArrearsView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustArrearsView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustArrearsView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustArrearsView_resultStandardSchemeFactory implements SchemeFactory {
      public getCustArrearsView_resultStandardScheme getScheme() {
        return new getCustArrearsView_resultStandardScheme();
      }
    }

    private static class getCustArrearsView_resultStandardScheme extends StandardScheme<getCustArrearsView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustArrearsView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<CustArrearsView>(_list48.size);
                  CustArrearsView _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new CustArrearsView();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustArrearsView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CustArrearsView _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustArrearsView_resultTupleSchemeFactory implements SchemeFactory {
      public getCustArrearsView_resultTupleScheme getScheme() {
        return new getCustArrearsView_resultTupleScheme();
      }
    }

    private static class getCustArrearsView_resultTupleScheme extends TupleScheme<getCustArrearsView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustArrearsView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CustArrearsView _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustArrearsView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CustArrearsView>(_list53.size);
            CustArrearsView _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new CustArrearsView();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class countCustArrearsView_args implements org.apache.thrift.TBase<countCustArrearsView_args, countCustArrearsView_args._Fields>, java.io.Serializable, Cloneable, Comparable<countCustArrearsView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCustArrearsView_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countCustArrearsView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countCustArrearsView_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCustArrearsView_args.class, metaDataMap);
    }

    public countCustArrearsView_args() {
    }

    public countCustArrearsView_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCustArrearsView_args(countCustArrearsView_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public countCustArrearsView_args deepCopy() {
      return new countCustArrearsView_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public countCustArrearsView_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countCustArrearsView_args)
        return this.equals((countCustArrearsView_args)that);
      return false;
    }

    public boolean equals(countCustArrearsView_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(countCustArrearsView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countCustArrearsView_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCustArrearsView_argsStandardSchemeFactory implements SchemeFactory {
      public countCustArrearsView_argsStandardScheme getScheme() {
        return new countCustArrearsView_argsStandardScheme();
      }
    }

    private static class countCustArrearsView_argsStandardScheme extends StandardScheme<countCustArrearsView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCustArrearsView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCustArrearsView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCustArrearsView_argsTupleSchemeFactory implements SchemeFactory {
      public countCustArrearsView_argsTupleScheme getScheme() {
        return new countCustArrearsView_argsTupleScheme();
      }
    }

    private static class countCustArrearsView_argsTupleScheme extends TupleScheme<countCustArrearsView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCustArrearsView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCustArrearsView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class countCustArrearsView_result implements org.apache.thrift.TBase<countCustArrearsView_result, countCustArrearsView_result._Fields>, java.io.Serializable, Cloneable, Comparable<countCustArrearsView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countCustArrearsView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countCustArrearsView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countCustArrearsView_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countCustArrearsView_result.class, metaDataMap);
    }

    public countCustArrearsView_result() {
    }

    public countCustArrearsView_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countCustArrearsView_result(countCustArrearsView_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public countCustArrearsView_result deepCopy() {
      return new countCustArrearsView_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countCustArrearsView_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public countCustArrearsView_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countCustArrearsView_result)
        return this.equals((countCustArrearsView_result)that);
      return false;
    }

    public boolean equals(countCustArrearsView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(countCustArrearsView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countCustArrearsView_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countCustArrearsView_resultStandardSchemeFactory implements SchemeFactory {
      public countCustArrearsView_resultStandardScheme getScheme() {
        return new countCustArrearsView_resultStandardScheme();
      }
    }

    private static class countCustArrearsView_resultStandardScheme extends StandardScheme<countCustArrearsView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countCustArrearsView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countCustArrearsView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countCustArrearsView_resultTupleSchemeFactory implements SchemeFactory {
      public countCustArrearsView_resultTupleScheme getScheme() {
        return new countCustArrearsView_resultTupleScheme();
      }
    }

    private static class countCustArrearsView_resultTupleScheme extends TupleScheme<countCustArrearsView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countCustArrearsView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countCustArrearsView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getFinanceAcctTotalView_args implements org.apache.thrift.TBase<getFinanceAcctTotalView_args, getFinanceAcctTotalView_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceAcctTotalView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceAcctTotalView_args");

    private static final org.apache.thrift.protocol.TField FINANCE_ACCT_TOTAL_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeAcctTotalCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceAcctTotalView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceAcctTotalView_argsTupleSchemeFactory());
    }

    public FinanceAcctTotalCondition financeAcctTotalCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_ACCT_TOTAL_CONDITION((short)1, "financeAcctTotalCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_ACCT_TOTAL_CONDITION
            return FINANCE_ACCT_TOTAL_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_ACCT_TOTAL_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeAcctTotalCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceAcctTotalCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceAcctTotalView_args.class, metaDataMap);
    }

    public getFinanceAcctTotalView_args() {
    }

    public getFinanceAcctTotalView_args(
      FinanceAcctTotalCondition financeAcctTotalCondition)
    {
      this();
      this.financeAcctTotalCondition = financeAcctTotalCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceAcctTotalView_args(getFinanceAcctTotalView_args other) {
      if (other.isSetFinanceAcctTotalCondition()) {
        this.financeAcctTotalCondition = new FinanceAcctTotalCondition(other.financeAcctTotalCondition);
      }
    }

    public getFinanceAcctTotalView_args deepCopy() {
      return new getFinanceAcctTotalView_args(this);
    }

    @Override
    public void clear() {
      this.financeAcctTotalCondition = null;
    }

    public FinanceAcctTotalCondition getFinanceAcctTotalCondition() {
      return this.financeAcctTotalCondition;
    }

    public getFinanceAcctTotalView_args setFinanceAcctTotalCondition(FinanceAcctTotalCondition financeAcctTotalCondition) {
      this.financeAcctTotalCondition = financeAcctTotalCondition;
      return this;
    }

    public void unsetFinanceAcctTotalCondition() {
      this.financeAcctTotalCondition = null;
    }

    /** Returns true if field financeAcctTotalCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceAcctTotalCondition() {
      return this.financeAcctTotalCondition != null;
    }

    public void setFinanceAcctTotalConditionIsSet(boolean value) {
      if (!value) {
        this.financeAcctTotalCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        if (value == null) {
          unsetFinanceAcctTotalCondition();
        } else {
          setFinanceAcctTotalCondition((FinanceAcctTotalCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        return getFinanceAcctTotalCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        return isSetFinanceAcctTotalCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceAcctTotalView_args)
        return this.equals((getFinanceAcctTotalView_args)that);
      return false;
    }

    public boolean equals(getFinanceAcctTotalView_args that) {
      if (that == null)
        return false;

      boolean this_present_financeAcctTotalCondition = true && this.isSetFinanceAcctTotalCondition();
      boolean that_present_financeAcctTotalCondition = true && that.isSetFinanceAcctTotalCondition();
      if (this_present_financeAcctTotalCondition || that_present_financeAcctTotalCondition) {
        if (!(this_present_financeAcctTotalCondition && that_present_financeAcctTotalCondition))
          return false;
        if (!this.financeAcctTotalCondition.equals(that.financeAcctTotalCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeAcctTotalCondition = true && (isSetFinanceAcctTotalCondition());
      list.add(present_financeAcctTotalCondition);
      if (present_financeAcctTotalCondition)
        list.add(financeAcctTotalCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceAcctTotalView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceAcctTotalCondition()).compareTo(other.isSetFinanceAcctTotalCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceAcctTotalCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeAcctTotalCondition, other.financeAcctTotalCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceAcctTotalView_args(");
      boolean first = true;

      sb.append("financeAcctTotalCondition:");
      if (this.financeAcctTotalCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeAcctTotalCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeAcctTotalCondition != null) {
        financeAcctTotalCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceAcctTotalView_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalView_argsStandardScheme getScheme() {
        return new getFinanceAcctTotalView_argsStandardScheme();
      }
    }

    private static class getFinanceAcctTotalView_argsStandardScheme extends StandardScheme<getFinanceAcctTotalView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceAcctTotalView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_ACCT_TOTAL_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeAcctTotalCondition = new FinanceAcctTotalCondition();
                struct.financeAcctTotalCondition.read(iprot);
                struct.setFinanceAcctTotalConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceAcctTotalView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeAcctTotalCondition != null) {
          oprot.writeFieldBegin(FINANCE_ACCT_TOTAL_CONDITION_FIELD_DESC);
          struct.financeAcctTotalCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceAcctTotalView_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalView_argsTupleScheme getScheme() {
        return new getFinanceAcctTotalView_argsTupleScheme();
      }
    }

    private static class getFinanceAcctTotalView_argsTupleScheme extends TupleScheme<getFinanceAcctTotalView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceAcctTotalCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceAcctTotalCondition()) {
          struct.financeAcctTotalCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeAcctTotalCondition = new FinanceAcctTotalCondition();
          struct.financeAcctTotalCondition.read(iprot);
          struct.setFinanceAcctTotalConditionIsSet(true);
        }
      }
    }

  }

  public static class getFinanceAcctTotalView_result implements org.apache.thrift.TBase<getFinanceAcctTotalView_result, getFinanceAcctTotalView_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceAcctTotalView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceAcctTotalView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceAcctTotalView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceAcctTotalView_resultTupleSchemeFactory());
    }

    public List<FinanceAcctTotalView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceAcctTotalView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceAcctTotalView_result.class, metaDataMap);
    }

    public getFinanceAcctTotalView_result() {
    }

    public getFinanceAcctTotalView_result(
      List<FinanceAcctTotalView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceAcctTotalView_result(getFinanceAcctTotalView_result other) {
      if (other.isSetSuccess()) {
        List<FinanceAcctTotalView> __this__success = new ArrayList<FinanceAcctTotalView>(other.success.size());
        for (FinanceAcctTotalView other_element : other.success) {
          __this__success.add(new FinanceAcctTotalView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getFinanceAcctTotalView_result deepCopy() {
      return new getFinanceAcctTotalView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceAcctTotalView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceAcctTotalView elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceAcctTotalView>();
      }
      this.success.add(elem);
    }

    public List<FinanceAcctTotalView> getSuccess() {
      return this.success;
    }

    public getFinanceAcctTotalView_result setSuccess(List<FinanceAcctTotalView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getFinanceAcctTotalView_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceAcctTotalView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceAcctTotalView_result)
        return this.equals((getFinanceAcctTotalView_result)that);
      return false;
    }

    public boolean equals(getFinanceAcctTotalView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceAcctTotalView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceAcctTotalView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceAcctTotalView_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalView_resultStandardScheme getScheme() {
        return new getFinanceAcctTotalView_resultStandardScheme();
      }
    }

    private static class getFinanceAcctTotalView_resultStandardScheme extends StandardScheme<getFinanceAcctTotalView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceAcctTotalView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceAcctTotalView>(_list56.size);
                  FinanceAcctTotalView _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new FinanceAcctTotalView();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceAcctTotalView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceAcctTotalView _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceAcctTotalView_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalView_resultTupleScheme getScheme() {
        return new getFinanceAcctTotalView_resultTupleScheme();
      }
    }

    private static class getFinanceAcctTotalView_resultTupleScheme extends TupleScheme<getFinanceAcctTotalView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceAcctTotalView _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceAcctTotalView>(_list61.size);
            FinanceAcctTotalView _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new FinanceAcctTotalView();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class countFinanceAcctTotal_args implements org.apache.thrift.TBase<countFinanceAcctTotal_args, countFinanceAcctTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<countFinanceAcctTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countFinanceAcctTotal_args");

    private static final org.apache.thrift.protocol.TField FINANCE_ACCT_TOTAL_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeAcctTotalCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countFinanceAcctTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countFinanceAcctTotal_argsTupleSchemeFactory());
    }

    public FinanceAcctTotalCondition financeAcctTotalCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_ACCT_TOTAL_CONDITION((short)1, "financeAcctTotalCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_ACCT_TOTAL_CONDITION
            return FINANCE_ACCT_TOTAL_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_ACCT_TOTAL_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeAcctTotalCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceAcctTotalCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countFinanceAcctTotal_args.class, metaDataMap);
    }

    public countFinanceAcctTotal_args() {
    }

    public countFinanceAcctTotal_args(
      FinanceAcctTotalCondition financeAcctTotalCondition)
    {
      this();
      this.financeAcctTotalCondition = financeAcctTotalCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countFinanceAcctTotal_args(countFinanceAcctTotal_args other) {
      if (other.isSetFinanceAcctTotalCondition()) {
        this.financeAcctTotalCondition = new FinanceAcctTotalCondition(other.financeAcctTotalCondition);
      }
    }

    public countFinanceAcctTotal_args deepCopy() {
      return new countFinanceAcctTotal_args(this);
    }

    @Override
    public void clear() {
      this.financeAcctTotalCondition = null;
    }

    public FinanceAcctTotalCondition getFinanceAcctTotalCondition() {
      return this.financeAcctTotalCondition;
    }

    public countFinanceAcctTotal_args setFinanceAcctTotalCondition(FinanceAcctTotalCondition financeAcctTotalCondition) {
      this.financeAcctTotalCondition = financeAcctTotalCondition;
      return this;
    }

    public void unsetFinanceAcctTotalCondition() {
      this.financeAcctTotalCondition = null;
    }

    /** Returns true if field financeAcctTotalCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceAcctTotalCondition() {
      return this.financeAcctTotalCondition != null;
    }

    public void setFinanceAcctTotalConditionIsSet(boolean value) {
      if (!value) {
        this.financeAcctTotalCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        if (value == null) {
          unsetFinanceAcctTotalCondition();
        } else {
          setFinanceAcctTotalCondition((FinanceAcctTotalCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        return getFinanceAcctTotalCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        return isSetFinanceAcctTotalCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countFinanceAcctTotal_args)
        return this.equals((countFinanceAcctTotal_args)that);
      return false;
    }

    public boolean equals(countFinanceAcctTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_financeAcctTotalCondition = true && this.isSetFinanceAcctTotalCondition();
      boolean that_present_financeAcctTotalCondition = true && that.isSetFinanceAcctTotalCondition();
      if (this_present_financeAcctTotalCondition || that_present_financeAcctTotalCondition) {
        if (!(this_present_financeAcctTotalCondition && that_present_financeAcctTotalCondition))
          return false;
        if (!this.financeAcctTotalCondition.equals(that.financeAcctTotalCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeAcctTotalCondition = true && (isSetFinanceAcctTotalCondition());
      list.add(present_financeAcctTotalCondition);
      if (present_financeAcctTotalCondition)
        list.add(financeAcctTotalCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(countFinanceAcctTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceAcctTotalCondition()).compareTo(other.isSetFinanceAcctTotalCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceAcctTotalCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeAcctTotalCondition, other.financeAcctTotalCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countFinanceAcctTotal_args(");
      boolean first = true;

      sb.append("financeAcctTotalCondition:");
      if (this.financeAcctTotalCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeAcctTotalCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeAcctTotalCondition != null) {
        financeAcctTotalCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countFinanceAcctTotal_argsStandardSchemeFactory implements SchemeFactory {
      public countFinanceAcctTotal_argsStandardScheme getScheme() {
        return new countFinanceAcctTotal_argsStandardScheme();
      }
    }

    private static class countFinanceAcctTotal_argsStandardScheme extends StandardScheme<countFinanceAcctTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countFinanceAcctTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_ACCT_TOTAL_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeAcctTotalCondition = new FinanceAcctTotalCondition();
                struct.financeAcctTotalCondition.read(iprot);
                struct.setFinanceAcctTotalConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countFinanceAcctTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeAcctTotalCondition != null) {
          oprot.writeFieldBegin(FINANCE_ACCT_TOTAL_CONDITION_FIELD_DESC);
          struct.financeAcctTotalCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countFinanceAcctTotal_argsTupleSchemeFactory implements SchemeFactory {
      public countFinanceAcctTotal_argsTupleScheme getScheme() {
        return new countFinanceAcctTotal_argsTupleScheme();
      }
    }

    private static class countFinanceAcctTotal_argsTupleScheme extends TupleScheme<countFinanceAcctTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countFinanceAcctTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceAcctTotalCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceAcctTotalCondition()) {
          struct.financeAcctTotalCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countFinanceAcctTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeAcctTotalCondition = new FinanceAcctTotalCondition();
          struct.financeAcctTotalCondition.read(iprot);
          struct.setFinanceAcctTotalConditionIsSet(true);
        }
      }
    }

  }

  public static class countFinanceAcctTotal_result implements org.apache.thrift.TBase<countFinanceAcctTotal_result, countFinanceAcctTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<countFinanceAcctTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countFinanceAcctTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countFinanceAcctTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countFinanceAcctTotal_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countFinanceAcctTotal_result.class, metaDataMap);
    }

    public countFinanceAcctTotal_result() {
    }

    public countFinanceAcctTotal_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countFinanceAcctTotal_result(countFinanceAcctTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public countFinanceAcctTotal_result deepCopy() {
      return new countFinanceAcctTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countFinanceAcctTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public countFinanceAcctTotal_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countFinanceAcctTotal_result)
        return this.equals((countFinanceAcctTotal_result)that);
      return false;
    }

    public boolean equals(countFinanceAcctTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(countFinanceAcctTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countFinanceAcctTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countFinanceAcctTotal_resultStandardSchemeFactory implements SchemeFactory {
      public countFinanceAcctTotal_resultStandardScheme getScheme() {
        return new countFinanceAcctTotal_resultStandardScheme();
      }
    }

    private static class countFinanceAcctTotal_resultStandardScheme extends StandardScheme<countFinanceAcctTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countFinanceAcctTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countFinanceAcctTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countFinanceAcctTotal_resultTupleSchemeFactory implements SchemeFactory {
      public countFinanceAcctTotal_resultTupleScheme getScheme() {
        return new countFinanceAcctTotal_resultTupleScheme();
      }
    }

    private static class countFinanceAcctTotal_resultTupleScheme extends TupleScheme<countFinanceAcctTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countFinanceAcctTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countFinanceAcctTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getFinanceAcctTotalDetail_args implements org.apache.thrift.TBase<getFinanceAcctTotalDetail_args, getFinanceAcctTotalDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceAcctTotalDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceAcctTotalDetail_args");

    private static final org.apache.thrift.protocol.TField FINANCE_ACCT_TOTAL_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeAcctTotalCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceAcctTotalDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceAcctTotalDetail_argsTupleSchemeFactory());
    }

    public FinanceAcctTotalCondition financeAcctTotalCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_ACCT_TOTAL_CONDITION((short)1, "financeAcctTotalCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_ACCT_TOTAL_CONDITION
            return FINANCE_ACCT_TOTAL_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_ACCT_TOTAL_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeAcctTotalCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceAcctTotalCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceAcctTotalDetail_args.class, metaDataMap);
    }

    public getFinanceAcctTotalDetail_args() {
    }

    public getFinanceAcctTotalDetail_args(
      FinanceAcctTotalCondition financeAcctTotalCondition)
    {
      this();
      this.financeAcctTotalCondition = financeAcctTotalCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceAcctTotalDetail_args(getFinanceAcctTotalDetail_args other) {
      if (other.isSetFinanceAcctTotalCondition()) {
        this.financeAcctTotalCondition = new FinanceAcctTotalCondition(other.financeAcctTotalCondition);
      }
    }

    public getFinanceAcctTotalDetail_args deepCopy() {
      return new getFinanceAcctTotalDetail_args(this);
    }

    @Override
    public void clear() {
      this.financeAcctTotalCondition = null;
    }

    public FinanceAcctTotalCondition getFinanceAcctTotalCondition() {
      return this.financeAcctTotalCondition;
    }

    public getFinanceAcctTotalDetail_args setFinanceAcctTotalCondition(FinanceAcctTotalCondition financeAcctTotalCondition) {
      this.financeAcctTotalCondition = financeAcctTotalCondition;
      return this;
    }

    public void unsetFinanceAcctTotalCondition() {
      this.financeAcctTotalCondition = null;
    }

    /** Returns true if field financeAcctTotalCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceAcctTotalCondition() {
      return this.financeAcctTotalCondition != null;
    }

    public void setFinanceAcctTotalConditionIsSet(boolean value) {
      if (!value) {
        this.financeAcctTotalCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        if (value == null) {
          unsetFinanceAcctTotalCondition();
        } else {
          setFinanceAcctTotalCondition((FinanceAcctTotalCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        return getFinanceAcctTotalCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_ACCT_TOTAL_CONDITION:
        return isSetFinanceAcctTotalCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceAcctTotalDetail_args)
        return this.equals((getFinanceAcctTotalDetail_args)that);
      return false;
    }

    public boolean equals(getFinanceAcctTotalDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_financeAcctTotalCondition = true && this.isSetFinanceAcctTotalCondition();
      boolean that_present_financeAcctTotalCondition = true && that.isSetFinanceAcctTotalCondition();
      if (this_present_financeAcctTotalCondition || that_present_financeAcctTotalCondition) {
        if (!(this_present_financeAcctTotalCondition && that_present_financeAcctTotalCondition))
          return false;
        if (!this.financeAcctTotalCondition.equals(that.financeAcctTotalCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeAcctTotalCondition = true && (isSetFinanceAcctTotalCondition());
      list.add(present_financeAcctTotalCondition);
      if (present_financeAcctTotalCondition)
        list.add(financeAcctTotalCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceAcctTotalDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceAcctTotalCondition()).compareTo(other.isSetFinanceAcctTotalCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceAcctTotalCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeAcctTotalCondition, other.financeAcctTotalCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceAcctTotalDetail_args(");
      boolean first = true;

      sb.append("financeAcctTotalCondition:");
      if (this.financeAcctTotalCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeAcctTotalCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeAcctTotalCondition != null) {
        financeAcctTotalCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceAcctTotalDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalDetail_argsStandardScheme getScheme() {
        return new getFinanceAcctTotalDetail_argsStandardScheme();
      }
    }

    private static class getFinanceAcctTotalDetail_argsStandardScheme extends StandardScheme<getFinanceAcctTotalDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceAcctTotalDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_ACCT_TOTAL_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeAcctTotalCondition = new FinanceAcctTotalCondition();
                struct.financeAcctTotalCondition.read(iprot);
                struct.setFinanceAcctTotalConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceAcctTotalDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeAcctTotalCondition != null) {
          oprot.writeFieldBegin(FINANCE_ACCT_TOTAL_CONDITION_FIELD_DESC);
          struct.financeAcctTotalCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceAcctTotalDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalDetail_argsTupleScheme getScheme() {
        return new getFinanceAcctTotalDetail_argsTupleScheme();
      }
    }

    private static class getFinanceAcctTotalDetail_argsTupleScheme extends TupleScheme<getFinanceAcctTotalDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceAcctTotalCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceAcctTotalCondition()) {
          struct.financeAcctTotalCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeAcctTotalCondition = new FinanceAcctTotalCondition();
          struct.financeAcctTotalCondition.read(iprot);
          struct.setFinanceAcctTotalConditionIsSet(true);
        }
      }
    }

  }

  public static class getFinanceAcctTotalDetail_result implements org.apache.thrift.TBase<getFinanceAcctTotalDetail_result, getFinanceAcctTotalDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceAcctTotalDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceAcctTotalDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceAcctTotalDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceAcctTotalDetail_resultTupleSchemeFactory());
    }

    public List<FinanceAcctTotalDetailView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceAcctTotalDetailView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceAcctTotalDetail_result.class, metaDataMap);
    }

    public getFinanceAcctTotalDetail_result() {
    }

    public getFinanceAcctTotalDetail_result(
      List<FinanceAcctTotalDetailView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceAcctTotalDetail_result(getFinanceAcctTotalDetail_result other) {
      if (other.isSetSuccess()) {
        List<FinanceAcctTotalDetailView> __this__success = new ArrayList<FinanceAcctTotalDetailView>(other.success.size());
        for (FinanceAcctTotalDetailView other_element : other.success) {
          __this__success.add(new FinanceAcctTotalDetailView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getFinanceAcctTotalDetail_result deepCopy() {
      return new getFinanceAcctTotalDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<FinanceAcctTotalDetailView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(FinanceAcctTotalDetailView elem) {
      if (this.success == null) {
        this.success = new ArrayList<FinanceAcctTotalDetailView>();
      }
      this.success.add(elem);
    }

    public List<FinanceAcctTotalDetailView> getSuccess() {
      return this.success;
    }

    public getFinanceAcctTotalDetail_result setSuccess(List<FinanceAcctTotalDetailView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getFinanceAcctTotalDetail_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<FinanceAcctTotalDetailView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceAcctTotalDetail_result)
        return this.equals((getFinanceAcctTotalDetail_result)that);
      return false;
    }

    public boolean equals(getFinanceAcctTotalDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceAcctTotalDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceAcctTotalDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceAcctTotalDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalDetail_resultStandardScheme getScheme() {
        return new getFinanceAcctTotalDetail_resultStandardScheme();
      }
    }

    private static class getFinanceAcctTotalDetail_resultStandardScheme extends StandardScheme<getFinanceAcctTotalDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceAcctTotalDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<FinanceAcctTotalDetailView>(_list64.size);
                  FinanceAcctTotalDetailView _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new FinanceAcctTotalDetailView();
                    _elem65.read(iprot);
                    struct.success.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceAcctTotalDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (FinanceAcctTotalDetailView _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceAcctTotalDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceAcctTotalDetail_resultTupleScheme getScheme() {
        return new getFinanceAcctTotalDetail_resultTupleScheme();
      }
    }

    private static class getFinanceAcctTotalDetail_resultTupleScheme extends TupleScheme<getFinanceAcctTotalDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (FinanceAcctTotalDetailView _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceAcctTotalDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<FinanceAcctTotalDetailView>(_list69.size);
            FinanceAcctTotalDetailView _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new FinanceAcctTotalDetailView();
              _elem70.read(iprot);
              struct.success.add(_elem70);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getProjectTotalDetailList_args implements org.apache.thrift.TBase<getProjectTotalDetailList_args, getProjectTotalDetailList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectTotalDetailList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectTotalDetailList_args");

    private static final org.apache.thrift.protocol.TField FINANCE_BUSINESS_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("financeBusinessCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectTotalDetailList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectTotalDetailList_argsTupleSchemeFactory());
    }

    public FinanceBusinessCondition financeBusinessCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_BUSINESS_CONDITION((short)1, "financeBusinessCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_BUSINESS_CONDITION
            return FINANCE_BUSINESS_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_BUSINESS_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("financeBusinessCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceBusinessCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectTotalDetailList_args.class, metaDataMap);
    }

    public getProjectTotalDetailList_args() {
    }

    public getProjectTotalDetailList_args(
      FinanceBusinessCondition financeBusinessCondition)
    {
      this();
      this.financeBusinessCondition = financeBusinessCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectTotalDetailList_args(getProjectTotalDetailList_args other) {
      if (other.isSetFinanceBusinessCondition()) {
        this.financeBusinessCondition = new FinanceBusinessCondition(other.financeBusinessCondition);
      }
    }

    public getProjectTotalDetailList_args deepCopy() {
      return new getProjectTotalDetailList_args(this);
    }

    @Override
    public void clear() {
      this.financeBusinessCondition = null;
    }

    public FinanceBusinessCondition getFinanceBusinessCondition() {
      return this.financeBusinessCondition;
    }

    public getProjectTotalDetailList_args setFinanceBusinessCondition(FinanceBusinessCondition financeBusinessCondition) {
      this.financeBusinessCondition = financeBusinessCondition;
      return this;
    }

    public void unsetFinanceBusinessCondition() {
      this.financeBusinessCondition = null;
    }

    /** Returns true if field financeBusinessCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceBusinessCondition() {
      return this.financeBusinessCondition != null;
    }

    public void setFinanceBusinessConditionIsSet(boolean value) {
      if (!value) {
        this.financeBusinessCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        if (value == null) {
          unsetFinanceBusinessCondition();
        } else {
          setFinanceBusinessCondition((FinanceBusinessCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return getFinanceBusinessCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_BUSINESS_CONDITION:
        return isSetFinanceBusinessCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectTotalDetailList_args)
        return this.equals((getProjectTotalDetailList_args)that);
      return false;
    }

    public boolean equals(getProjectTotalDetailList_args that) {
      if (that == null)
        return false;

      boolean this_present_financeBusinessCondition = true && this.isSetFinanceBusinessCondition();
      boolean that_present_financeBusinessCondition = true && that.isSetFinanceBusinessCondition();
      if (this_present_financeBusinessCondition || that_present_financeBusinessCondition) {
        if (!(this_present_financeBusinessCondition && that_present_financeBusinessCondition))
          return false;
        if (!this.financeBusinessCondition.equals(that.financeBusinessCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeBusinessCondition = true && (isSetFinanceBusinessCondition());
      list.add(present_financeBusinessCondition);
      if (present_financeBusinessCondition)
        list.add(financeBusinessCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectTotalDetailList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceBusinessCondition()).compareTo(other.isSetFinanceBusinessCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceBusinessCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeBusinessCondition, other.financeBusinessCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectTotalDetailList_args(");
      boolean first = true;

      sb.append("financeBusinessCondition:");
      if (this.financeBusinessCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.financeBusinessCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (financeBusinessCondition != null) {
        financeBusinessCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectTotalDetailList_argsStandardSchemeFactory implements SchemeFactory {
      public getProjectTotalDetailList_argsStandardScheme getScheme() {
        return new getProjectTotalDetailList_argsStandardScheme();
      }
    }

    private static class getProjectTotalDetailList_argsStandardScheme extends StandardScheme<getProjectTotalDetailList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectTotalDetailList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_BUSINESS_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.financeBusinessCondition = new FinanceBusinessCondition();
                struct.financeBusinessCondition.read(iprot);
                struct.setFinanceBusinessConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectTotalDetailList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.financeBusinessCondition != null) {
          oprot.writeFieldBegin(FINANCE_BUSINESS_CONDITION_FIELD_DESC);
          struct.financeBusinessCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectTotalDetailList_argsTupleSchemeFactory implements SchemeFactory {
      public getProjectTotalDetailList_argsTupleScheme getScheme() {
        return new getProjectTotalDetailList_argsTupleScheme();
      }
    }

    private static class getProjectTotalDetailList_argsTupleScheme extends TupleScheme<getProjectTotalDetailList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectTotalDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceBusinessCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceBusinessCondition()) {
          struct.financeBusinessCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectTotalDetailList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeBusinessCondition = new FinanceBusinessCondition();
          struct.financeBusinessCondition.read(iprot);
          struct.setFinanceBusinessConditionIsSet(true);
        }
      }
    }

  }

  public static class getProjectTotalDetailList_result implements org.apache.thrift.TBase<getProjectTotalDetailList_result, getProjectTotalDetailList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProjectTotalDetailList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProjectTotalDetailList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProjectTotalDetailList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProjectTotalDetailList_resultTupleSchemeFactory());
    }

    public List<ProjectTotalDetailView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProjectTotalDetailView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProjectTotalDetailList_result.class, metaDataMap);
    }

    public getProjectTotalDetailList_result() {
    }

    public getProjectTotalDetailList_result(
      List<ProjectTotalDetailView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProjectTotalDetailList_result(getProjectTotalDetailList_result other) {
      if (other.isSetSuccess()) {
        List<ProjectTotalDetailView> __this__success = new ArrayList<ProjectTotalDetailView>(other.success.size());
        for (ProjectTotalDetailView other_element : other.success) {
          __this__success.add(new ProjectTotalDetailView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getProjectTotalDetailList_result deepCopy() {
      return new getProjectTotalDetailList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ProjectTotalDetailView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ProjectTotalDetailView elem) {
      if (this.success == null) {
        this.success = new ArrayList<ProjectTotalDetailView>();
      }
      this.success.add(elem);
    }

    public List<ProjectTotalDetailView> getSuccess() {
      return this.success;
    }

    public getProjectTotalDetailList_result setSuccess(List<ProjectTotalDetailView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getProjectTotalDetailList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ProjectTotalDetailView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProjectTotalDetailList_result)
        return this.equals((getProjectTotalDetailList_result)that);
      return false;
    }

    public boolean equals(getProjectTotalDetailList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getProjectTotalDetailList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProjectTotalDetailList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProjectTotalDetailList_resultStandardSchemeFactory implements SchemeFactory {
      public getProjectTotalDetailList_resultStandardScheme getScheme() {
        return new getProjectTotalDetailList_resultStandardScheme();
      }
    }

    private static class getProjectTotalDetailList_resultStandardScheme extends StandardScheme<getProjectTotalDetailList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProjectTotalDetailList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<ProjectTotalDetailView>(_list72.size);
                  ProjectTotalDetailView _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new ProjectTotalDetailView();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProjectTotalDetailList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ProjectTotalDetailView _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProjectTotalDetailList_resultTupleSchemeFactory implements SchemeFactory {
      public getProjectTotalDetailList_resultTupleScheme getScheme() {
        return new getProjectTotalDetailList_resultTupleScheme();
      }
    }

    private static class getProjectTotalDetailList_resultTupleScheme extends TupleScheme<getProjectTotalDetailList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProjectTotalDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ProjectTotalDetailView _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProjectTotalDetailList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ProjectTotalDetailView>(_list77.size);
            ProjectTotalDetailView _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new ProjectTotalDetailView();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLoanReconciliationDtl_args implements org.apache.thrift.TBase<getLoanReconciliationDtl_args, getLoanReconciliationDtl_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanReconciliationDtl_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanReconciliationDtl_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanReconciliationDtl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanReconciliationDtl_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanReconciliationDtl_args.class, metaDataMap);
    }

    public getLoanReconciliationDtl_args() {
    }

    public getLoanReconciliationDtl_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanReconciliationDtl_args(getLoanReconciliationDtl_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getLoanReconciliationDtl_args deepCopy() {
      return new getLoanReconciliationDtl_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getLoanReconciliationDtl_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanReconciliationDtl_args)
        return this.equals((getLoanReconciliationDtl_args)that);
      return false;
    }

    public boolean equals(getLoanReconciliationDtl_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanReconciliationDtl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanReconciliationDtl_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanReconciliationDtl_argsStandardSchemeFactory implements SchemeFactory {
      public getLoanReconciliationDtl_argsStandardScheme getScheme() {
        return new getLoanReconciliationDtl_argsStandardScheme();
      }
    }

    private static class getLoanReconciliationDtl_argsStandardScheme extends StandardScheme<getLoanReconciliationDtl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanReconciliationDtl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanReconciliationDtl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanReconciliationDtl_argsTupleSchemeFactory implements SchemeFactory {
      public getLoanReconciliationDtl_argsTupleScheme getScheme() {
        return new getLoanReconciliationDtl_argsTupleScheme();
      }
    }

    private static class getLoanReconciliationDtl_argsTupleScheme extends TupleScheme<getLoanReconciliationDtl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanReconciliationDtl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanReconciliationDtl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getLoanReconciliationDtl_result implements org.apache.thrift.TBase<getLoanReconciliationDtl_result, getLoanReconciliationDtl_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanReconciliationDtl_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanReconciliationDtl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanReconciliationDtl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanReconciliationDtl_resultTupleSchemeFactory());
    }

    public List<LoanReconciliationDtlView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanReconciliationDtlView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanReconciliationDtl_result.class, metaDataMap);
    }

    public getLoanReconciliationDtl_result() {
    }

    public getLoanReconciliationDtl_result(
      List<LoanReconciliationDtlView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanReconciliationDtl_result(getLoanReconciliationDtl_result other) {
      if (other.isSetSuccess()) {
        List<LoanReconciliationDtlView> __this__success = new ArrayList<LoanReconciliationDtlView>(other.success.size());
        for (LoanReconciliationDtlView other_element : other.success) {
          __this__success.add(new LoanReconciliationDtlView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getLoanReconciliationDtl_result deepCopy() {
      return new getLoanReconciliationDtl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LoanReconciliationDtlView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LoanReconciliationDtlView elem) {
      if (this.success == null) {
        this.success = new ArrayList<LoanReconciliationDtlView>();
      }
      this.success.add(elem);
    }

    public List<LoanReconciliationDtlView> getSuccess() {
      return this.success;
    }

    public getLoanReconciliationDtl_result setSuccess(List<LoanReconciliationDtlView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getLoanReconciliationDtl_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LoanReconciliationDtlView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanReconciliationDtl_result)
        return this.equals((getLoanReconciliationDtl_result)that);
      return false;
    }

    public boolean equals(getLoanReconciliationDtl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanReconciliationDtl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanReconciliationDtl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanReconciliationDtl_resultStandardSchemeFactory implements SchemeFactory {
      public getLoanReconciliationDtl_resultStandardScheme getScheme() {
        return new getLoanReconciliationDtl_resultStandardScheme();
      }
    }

    private static class getLoanReconciliationDtl_resultStandardScheme extends StandardScheme<getLoanReconciliationDtl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanReconciliationDtl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<LoanReconciliationDtlView>(_list80.size);
                  LoanReconciliationDtlView _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new LoanReconciliationDtlView();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanReconciliationDtl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LoanReconciliationDtlView _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanReconciliationDtl_resultTupleSchemeFactory implements SchemeFactory {
      public getLoanReconciliationDtl_resultTupleScheme getScheme() {
        return new getLoanReconciliationDtl_resultTupleScheme();
      }
    }

    private static class getLoanReconciliationDtl_resultTupleScheme extends TupleScheme<getLoanReconciliationDtl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanReconciliationDtl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LoanReconciliationDtlView _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanReconciliationDtl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LoanReconciliationDtlView>(_list85.size);
            LoanReconciliationDtlView _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new LoanReconciliationDtlView();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addAcctProjectBalance_args implements org.apache.thrift.TBase<addAcctProjectBalance_args, addAcctProjectBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<addAcctProjectBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAcctProjectBalance_args");

    private static final org.apache.thrift.protocol.TField ACCT_PROJECT_BALANCE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("acctProjectBalanceDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAcctProjectBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAcctProjectBalance_argsTupleSchemeFactory());
    }

    public AcctProjectBalanceDTO acctProjectBalanceDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ACCT_PROJECT_BALANCE_DTO((short)1, "acctProjectBalanceDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ACCT_PROJECT_BALANCE_DTO
            return ACCT_PROJECT_BALANCE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ACCT_PROJECT_BALANCE_DTO, new org.apache.thrift.meta_data.FieldMetaData("acctProjectBalanceDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AcctProjectBalanceDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAcctProjectBalance_args.class, metaDataMap);
    }

    public addAcctProjectBalance_args() {
    }

    public addAcctProjectBalance_args(
      AcctProjectBalanceDTO acctProjectBalanceDTO)
    {
      this();
      this.acctProjectBalanceDTO = acctProjectBalanceDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAcctProjectBalance_args(addAcctProjectBalance_args other) {
      if (other.isSetAcctProjectBalanceDTO()) {
        this.acctProjectBalanceDTO = new AcctProjectBalanceDTO(other.acctProjectBalanceDTO);
      }
    }

    public addAcctProjectBalance_args deepCopy() {
      return new addAcctProjectBalance_args(this);
    }

    @Override
    public void clear() {
      this.acctProjectBalanceDTO = null;
    }

    public AcctProjectBalanceDTO getAcctProjectBalanceDTO() {
      return this.acctProjectBalanceDTO;
    }

    public addAcctProjectBalance_args setAcctProjectBalanceDTO(AcctProjectBalanceDTO acctProjectBalanceDTO) {
      this.acctProjectBalanceDTO = acctProjectBalanceDTO;
      return this;
    }

    public void unsetAcctProjectBalanceDTO() {
      this.acctProjectBalanceDTO = null;
    }

    /** Returns true if field acctProjectBalanceDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetAcctProjectBalanceDTO() {
      return this.acctProjectBalanceDTO != null;
    }

    public void setAcctProjectBalanceDTOIsSet(boolean value) {
      if (!value) {
        this.acctProjectBalanceDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ACCT_PROJECT_BALANCE_DTO:
        if (value == null) {
          unsetAcctProjectBalanceDTO();
        } else {
          setAcctProjectBalanceDTO((AcctProjectBalanceDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ACCT_PROJECT_BALANCE_DTO:
        return getAcctProjectBalanceDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ACCT_PROJECT_BALANCE_DTO:
        return isSetAcctProjectBalanceDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAcctProjectBalance_args)
        return this.equals((addAcctProjectBalance_args)that);
      return false;
    }

    public boolean equals(addAcctProjectBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_acctProjectBalanceDTO = true && this.isSetAcctProjectBalanceDTO();
      boolean that_present_acctProjectBalanceDTO = true && that.isSetAcctProjectBalanceDTO();
      if (this_present_acctProjectBalanceDTO || that_present_acctProjectBalanceDTO) {
        if (!(this_present_acctProjectBalanceDTO && that_present_acctProjectBalanceDTO))
          return false;
        if (!this.acctProjectBalanceDTO.equals(that.acctProjectBalanceDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_acctProjectBalanceDTO = true && (isSetAcctProjectBalanceDTO());
      list.add(present_acctProjectBalanceDTO);
      if (present_acctProjectBalanceDTO)
        list.add(acctProjectBalanceDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addAcctProjectBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAcctProjectBalanceDTO()).compareTo(other.isSetAcctProjectBalanceDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAcctProjectBalanceDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctProjectBalanceDTO, other.acctProjectBalanceDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAcctProjectBalance_args(");
      boolean first = true;

      sb.append("acctProjectBalanceDTO:");
      if (this.acctProjectBalanceDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.acctProjectBalanceDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (acctProjectBalanceDTO != null) {
        acctProjectBalanceDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAcctProjectBalance_argsStandardSchemeFactory implements SchemeFactory {
      public addAcctProjectBalance_argsStandardScheme getScheme() {
        return new addAcctProjectBalance_argsStandardScheme();
      }
    }

    private static class addAcctProjectBalance_argsStandardScheme extends StandardScheme<addAcctProjectBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAcctProjectBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ACCT_PROJECT_BALANCE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.acctProjectBalanceDTO = new AcctProjectBalanceDTO();
                struct.acctProjectBalanceDTO.read(iprot);
                struct.setAcctProjectBalanceDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAcctProjectBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.acctProjectBalanceDTO != null) {
          oprot.writeFieldBegin(ACCT_PROJECT_BALANCE_DTO_FIELD_DESC);
          struct.acctProjectBalanceDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAcctProjectBalance_argsTupleSchemeFactory implements SchemeFactory {
      public addAcctProjectBalance_argsTupleScheme getScheme() {
        return new addAcctProjectBalance_argsTupleScheme();
      }
    }

    private static class addAcctProjectBalance_argsTupleScheme extends TupleScheme<addAcctProjectBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAcctProjectBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAcctProjectBalanceDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAcctProjectBalanceDTO()) {
          struct.acctProjectBalanceDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAcctProjectBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.acctProjectBalanceDTO = new AcctProjectBalanceDTO();
          struct.acctProjectBalanceDTO.read(iprot);
          struct.setAcctProjectBalanceDTOIsSet(true);
        }
      }
    }

  }

  public static class addAcctProjectBalance_result implements org.apache.thrift.TBase<addAcctProjectBalance_result, addAcctProjectBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<addAcctProjectBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addAcctProjectBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addAcctProjectBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addAcctProjectBalance_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addAcctProjectBalance_result.class, metaDataMap);
    }

    public addAcctProjectBalance_result() {
    }

    public addAcctProjectBalance_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addAcctProjectBalance_result(addAcctProjectBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addAcctProjectBalance_result deepCopy() {
      return new addAcctProjectBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addAcctProjectBalance_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addAcctProjectBalance_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addAcctProjectBalance_result)
        return this.equals((addAcctProjectBalance_result)that);
      return false;
    }

    public boolean equals(addAcctProjectBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addAcctProjectBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addAcctProjectBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addAcctProjectBalance_resultStandardSchemeFactory implements SchemeFactory {
      public addAcctProjectBalance_resultStandardScheme getScheme() {
        return new addAcctProjectBalance_resultStandardScheme();
      }
    }

    private static class addAcctProjectBalance_resultStandardScheme extends StandardScheme<addAcctProjectBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addAcctProjectBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addAcctProjectBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addAcctProjectBalance_resultTupleSchemeFactory implements SchemeFactory {
      public addAcctProjectBalance_resultTupleScheme getScheme() {
        return new addAcctProjectBalance_resultTupleScheme();
      }
    }

    private static class addAcctProjectBalance_resultTupleScheme extends TupleScheme<addAcctProjectBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addAcctProjectBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addAcctProjectBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getAcctProjectBalanceByLoanId_args implements org.apache.thrift.TBase<getAcctProjectBalanceByLoanId_args, getAcctProjectBalanceByLoanId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAcctProjectBalanceByLoanId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAcctProjectBalanceByLoanId_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAcctProjectBalanceByLoanId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAcctProjectBalanceByLoanId_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAcctProjectBalanceByLoanId_args.class, metaDataMap);
    }

    public getAcctProjectBalanceByLoanId_args() {
    }

    public getAcctProjectBalanceByLoanId_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAcctProjectBalanceByLoanId_args(getAcctProjectBalanceByLoanId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getAcctProjectBalanceByLoanId_args deepCopy() {
      return new getAcctProjectBalanceByLoanId_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getAcctProjectBalanceByLoanId_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAcctProjectBalanceByLoanId_args)
        return this.equals((getAcctProjectBalanceByLoanId_args)that);
      return false;
    }

    public boolean equals(getAcctProjectBalanceByLoanId_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAcctProjectBalanceByLoanId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAcctProjectBalanceByLoanId_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAcctProjectBalanceByLoanId_argsStandardSchemeFactory implements SchemeFactory {
      public getAcctProjectBalanceByLoanId_argsStandardScheme getScheme() {
        return new getAcctProjectBalanceByLoanId_argsStandardScheme();
      }
    }

    private static class getAcctProjectBalanceByLoanId_argsStandardScheme extends StandardScheme<getAcctProjectBalanceByLoanId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAcctProjectBalanceByLoanId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAcctProjectBalanceByLoanId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAcctProjectBalanceByLoanId_argsTupleSchemeFactory implements SchemeFactory {
      public getAcctProjectBalanceByLoanId_argsTupleScheme getScheme() {
        return new getAcctProjectBalanceByLoanId_argsTupleScheme();
      }
    }

    private static class getAcctProjectBalanceByLoanId_argsTupleScheme extends TupleScheme<getAcctProjectBalanceByLoanId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAcctProjectBalanceByLoanId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAcctProjectBalanceByLoanId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getAcctProjectBalanceByLoanId_result implements org.apache.thrift.TBase<getAcctProjectBalanceByLoanId_result, getAcctProjectBalanceByLoanId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAcctProjectBalanceByLoanId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAcctProjectBalanceByLoanId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAcctProjectBalanceByLoanId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAcctProjectBalanceByLoanId_resultTupleSchemeFactory());
    }

    public AcctProjectBalanceView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AcctProjectBalanceView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAcctProjectBalanceByLoanId_result.class, metaDataMap);
    }

    public getAcctProjectBalanceByLoanId_result() {
    }

    public getAcctProjectBalanceByLoanId_result(
      AcctProjectBalanceView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAcctProjectBalanceByLoanId_result(getAcctProjectBalanceByLoanId_result other) {
      if (other.isSetSuccess()) {
        this.success = new AcctProjectBalanceView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getAcctProjectBalanceByLoanId_result deepCopy() {
      return new getAcctProjectBalanceByLoanId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public AcctProjectBalanceView getSuccess() {
      return this.success;
    }

    public getAcctProjectBalanceByLoanId_result setSuccess(AcctProjectBalanceView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getAcctProjectBalanceByLoanId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AcctProjectBalanceView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAcctProjectBalanceByLoanId_result)
        return this.equals((getAcctProjectBalanceByLoanId_result)that);
      return false;
    }

    public boolean equals(getAcctProjectBalanceByLoanId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAcctProjectBalanceByLoanId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAcctProjectBalanceByLoanId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAcctProjectBalanceByLoanId_resultStandardSchemeFactory implements SchemeFactory {
      public getAcctProjectBalanceByLoanId_resultStandardScheme getScheme() {
        return new getAcctProjectBalanceByLoanId_resultStandardScheme();
      }
    }

    private static class getAcctProjectBalanceByLoanId_resultStandardScheme extends StandardScheme<getAcctProjectBalanceByLoanId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAcctProjectBalanceByLoanId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AcctProjectBalanceView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAcctProjectBalanceByLoanId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAcctProjectBalanceByLoanId_resultTupleSchemeFactory implements SchemeFactory {
      public getAcctProjectBalanceByLoanId_resultTupleScheme getScheme() {
        return new getAcctProjectBalanceByLoanId_resultTupleScheme();
      }
    }

    private static class getAcctProjectBalanceByLoanId_resultTupleScheme extends TupleScheme<getAcctProjectBalanceByLoanId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAcctProjectBalanceByLoanId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAcctProjectBalanceByLoanId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AcctProjectBalanceView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getBalanceByReceId_args implements org.apache.thrift.TBase<getBalanceByReceId_args, getBalanceByReceId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBalanceByReceId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBalanceByReceId_args");

    private static final org.apache.thrift.protocol.TField RECE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBalanceByReceId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBalanceByReceId_argsTupleSchemeFactory());
    }

    public int receId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECE_ID((short)1, "receId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECE_ID
            return RECE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECE_ID, new org.apache.thrift.meta_data.FieldMetaData("receId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBalanceByReceId_args.class, metaDataMap);
    }

    public getBalanceByReceId_args() {
    }

    public getBalanceByReceId_args(
      int receId)
    {
      this();
      this.receId = receId;
      setReceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBalanceByReceId_args(getBalanceByReceId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.receId = other.receId;
    }

    public getBalanceByReceId_args deepCopy() {
      return new getBalanceByReceId_args(this);
    }

    @Override
    public void clear() {
      setReceIdIsSet(false);
      this.receId = 0;
    }

    public int getReceId() {
      return this.receId;
    }

    public getBalanceByReceId_args setReceId(int receId) {
      this.receId = receId;
      setReceIdIsSet(true);
      return this;
    }

    public void unsetReceId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEID_ISSET_ID);
    }

    /** Returns true if field receId is set (has been assigned a value) and false otherwise */
    public boolean isSetReceId() {
      return EncodingUtils.testBit(__isset_bitfield, __RECEID_ISSET_ID);
    }

    public void setReceIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECE_ID:
        if (value == null) {
          unsetReceId();
        } else {
          setReceId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECE_ID:
        return Integer.valueOf(getReceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECE_ID:
        return isSetReceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBalanceByReceId_args)
        return this.equals((getBalanceByReceId_args)that);
      return false;
    }

    public boolean equals(getBalanceByReceId_args that) {
      if (that == null)
        return false;

      boolean this_present_receId = true;
      boolean that_present_receId = true;
      if (this_present_receId || that_present_receId) {
        if (!(this_present_receId && that_present_receId))
          return false;
        if (this.receId != that.receId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_receId = true;
      list.add(present_receId);
      if (present_receId)
        list.add(receId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBalanceByReceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReceId()).compareTo(other.isSetReceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receId, other.receId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBalanceByReceId_args(");
      boolean first = true;

      sb.append("receId:");
      sb.append(this.receId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBalanceByReceId_argsStandardSchemeFactory implements SchemeFactory {
      public getBalanceByReceId_argsStandardScheme getScheme() {
        return new getBalanceByReceId_argsStandardScheme();
      }
    }

    private static class getBalanceByReceId_argsStandardScheme extends StandardScheme<getBalanceByReceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBalanceByReceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.receId = iprot.readI32();
                struct.setReceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBalanceByReceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RECE_ID_FIELD_DESC);
        oprot.writeI32(struct.receId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBalanceByReceId_argsTupleSchemeFactory implements SchemeFactory {
      public getBalanceByReceId_argsTupleScheme getScheme() {
        return new getBalanceByReceId_argsTupleScheme();
      }
    }

    private static class getBalanceByReceId_argsTupleScheme extends TupleScheme<getBalanceByReceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBalanceByReceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReceId()) {
          oprot.writeI32(struct.receId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBalanceByReceId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.receId = iprot.readI32();
          struct.setReceIdIsSet(true);
        }
      }
    }

  }

  public static class getBalanceByReceId_result implements org.apache.thrift.TBase<getBalanceByReceId_result, getBalanceByReceId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBalanceByReceId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBalanceByReceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBalanceByReceId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBalanceByReceId_resultTupleSchemeFactory());
    }

    public AcctProjectBalanceView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AcctProjectBalanceView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBalanceByReceId_result.class, metaDataMap);
    }

    public getBalanceByReceId_result() {
    }

    public getBalanceByReceId_result(
      AcctProjectBalanceView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBalanceByReceId_result(getBalanceByReceId_result other) {
      if (other.isSetSuccess()) {
        this.success = new AcctProjectBalanceView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getBalanceByReceId_result deepCopy() {
      return new getBalanceByReceId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public AcctProjectBalanceView getSuccess() {
      return this.success;
    }

    public getBalanceByReceId_result setSuccess(AcctProjectBalanceView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getBalanceByReceId_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AcctProjectBalanceView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBalanceByReceId_result)
        return this.equals((getBalanceByReceId_result)that);
      return false;
    }

    public boolean equals(getBalanceByReceId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBalanceByReceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBalanceByReceId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBalanceByReceId_resultStandardSchemeFactory implements SchemeFactory {
      public getBalanceByReceId_resultStandardScheme getScheme() {
        return new getBalanceByReceId_resultStandardScheme();
      }
    }

    private static class getBalanceByReceId_resultStandardScheme extends StandardScheme<getBalanceByReceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBalanceByReceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AcctProjectBalanceView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBalanceByReceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBalanceByReceId_resultTupleSchemeFactory implements SchemeFactory {
      public getBalanceByReceId_resultTupleScheme getScheme() {
        return new getBalanceByReceId_resultTupleScheme();
      }
    }

    private static class getBalanceByReceId_resultTupleScheme extends TupleScheme<getBalanceByReceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBalanceByReceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBalanceByReceId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AcctProjectBalanceView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addLoanRefund_args implements org.apache.thrift.TBase<addLoanRefund_args, addLoanRefund_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLoanRefund_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLoanRefund_args");

    private static final org.apache.thrift.protocol.TField LOAN_REFUND_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRefundDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLoanRefund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLoanRefund_argsTupleSchemeFactory());
    }

    public LoanRefundDTO loanRefundDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_REFUND_DTO((short)1, "loanRefundDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_REFUND_DTO
            return LOAN_REFUND_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_REFUND_DTO, new org.apache.thrift.meta_data.FieldMetaData("loanRefundDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanRefundDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLoanRefund_args.class, metaDataMap);
    }

    public addLoanRefund_args() {
    }

    public addLoanRefund_args(
      LoanRefundDTO loanRefundDTO)
    {
      this();
      this.loanRefundDTO = loanRefundDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLoanRefund_args(addLoanRefund_args other) {
      if (other.isSetLoanRefundDTO()) {
        this.loanRefundDTO = new LoanRefundDTO(other.loanRefundDTO);
      }
    }

    public addLoanRefund_args deepCopy() {
      return new addLoanRefund_args(this);
    }

    @Override
    public void clear() {
      this.loanRefundDTO = null;
    }

    public LoanRefundDTO getLoanRefundDTO() {
      return this.loanRefundDTO;
    }

    public addLoanRefund_args setLoanRefundDTO(LoanRefundDTO loanRefundDTO) {
      this.loanRefundDTO = loanRefundDTO;
      return this;
    }

    public void unsetLoanRefundDTO() {
      this.loanRefundDTO = null;
    }

    /** Returns true if field loanRefundDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanRefundDTO() {
      return this.loanRefundDTO != null;
    }

    public void setLoanRefundDTOIsSet(boolean value) {
      if (!value) {
        this.loanRefundDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_REFUND_DTO:
        if (value == null) {
          unsetLoanRefundDTO();
        } else {
          setLoanRefundDTO((LoanRefundDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_REFUND_DTO:
        return getLoanRefundDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_REFUND_DTO:
        return isSetLoanRefundDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLoanRefund_args)
        return this.equals((addLoanRefund_args)that);
      return false;
    }

    public boolean equals(addLoanRefund_args that) {
      if (that == null)
        return false;

      boolean this_present_loanRefundDTO = true && this.isSetLoanRefundDTO();
      boolean that_present_loanRefundDTO = true && that.isSetLoanRefundDTO();
      if (this_present_loanRefundDTO || that_present_loanRefundDTO) {
        if (!(this_present_loanRefundDTO && that_present_loanRefundDTO))
          return false;
        if (!this.loanRefundDTO.equals(that.loanRefundDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanRefundDTO = true && (isSetLoanRefundDTO());
      list.add(present_loanRefundDTO);
      if (present_loanRefundDTO)
        list.add(loanRefundDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addLoanRefund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanRefundDTO()).compareTo(other.isSetLoanRefundDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanRefundDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRefundDTO, other.loanRefundDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLoanRefund_args(");
      boolean first = true;

      sb.append("loanRefundDTO:");
      if (this.loanRefundDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.loanRefundDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loanRefundDTO != null) {
        loanRefundDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLoanRefund_argsStandardSchemeFactory implements SchemeFactory {
      public addLoanRefund_argsStandardScheme getScheme() {
        return new addLoanRefund_argsStandardScheme();
      }
    }

    private static class addLoanRefund_argsStandardScheme extends StandardScheme<addLoanRefund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLoanRefund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_REFUND_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loanRefundDTO = new LoanRefundDTO();
                struct.loanRefundDTO.read(iprot);
                struct.setLoanRefundDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLoanRefund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loanRefundDTO != null) {
          oprot.writeFieldBegin(LOAN_REFUND_DTO_FIELD_DESC);
          struct.loanRefundDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLoanRefund_argsTupleSchemeFactory implements SchemeFactory {
      public addLoanRefund_argsTupleScheme getScheme() {
        return new addLoanRefund_argsTupleScheme();
      }
    }

    private static class addLoanRefund_argsTupleScheme extends TupleScheme<addLoanRefund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLoanRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanRefundDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanRefundDTO()) {
          struct.loanRefundDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLoanRefund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanRefundDTO = new LoanRefundDTO();
          struct.loanRefundDTO.read(iprot);
          struct.setLoanRefundDTOIsSet(true);
        }
      }
    }

  }

  public static class addLoanRefund_result implements org.apache.thrift.TBase<addLoanRefund_result, addLoanRefund_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLoanRefund_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLoanRefund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addLoanRefund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addLoanRefund_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLoanRefund_result.class, metaDataMap);
    }

    public addLoanRefund_result() {
    }

    public addLoanRefund_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLoanRefund_result(addLoanRefund_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public addLoanRefund_result deepCopy() {
      return new addLoanRefund_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public addLoanRefund_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public addLoanRefund_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addLoanRefund_result)
        return this.equals((addLoanRefund_result)that);
      return false;
    }

    public boolean equals(addLoanRefund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(addLoanRefund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addLoanRefund_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLoanRefund_resultStandardSchemeFactory implements SchemeFactory {
      public addLoanRefund_resultStandardScheme getScheme() {
        return new addLoanRefund_resultStandardScheme();
      }
    }

    private static class addLoanRefund_resultStandardScheme extends StandardScheme<addLoanRefund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addLoanRefund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addLoanRefund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLoanRefund_resultTupleSchemeFactory implements SchemeFactory {
      public addLoanRefund_resultTupleScheme getScheme() {
        return new addLoanRefund_resultTupleScheme();
      }
    }

    private static class addLoanRefund_resultTupleScheme extends TupleScheme<addLoanRefund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLoanRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLoanRefund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLoanRefundList_args implements org.apache.thrift.TBase<getLoanRefundList_args, getLoanRefundList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanRefundList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanRefundList_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanRefundList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanRefundList_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanRefundList_args.class, metaDataMap);
    }

    public getLoanRefundList_args() {
    }

    public getLoanRefundList_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanRefundList_args(getLoanRefundList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getLoanRefundList_args deepCopy() {
      return new getLoanRefundList_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getLoanRefundList_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanRefundList_args)
        return this.equals((getLoanRefundList_args)that);
      return false;
    }

    public boolean equals(getLoanRefundList_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanRefundList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanRefundList_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanRefundList_argsStandardSchemeFactory implements SchemeFactory {
      public getLoanRefundList_argsStandardScheme getScheme() {
        return new getLoanRefundList_argsStandardScheme();
      }
    }

    private static class getLoanRefundList_argsStandardScheme extends StandardScheme<getLoanRefundList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanRefundList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanRefundList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanRefundList_argsTupleSchemeFactory implements SchemeFactory {
      public getLoanRefundList_argsTupleScheme getScheme() {
        return new getLoanRefundList_argsTupleScheme();
      }
    }

    private static class getLoanRefundList_argsTupleScheme extends TupleScheme<getLoanRefundList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanRefundList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanRefundList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getLoanRefundList_result implements org.apache.thrift.TBase<getLoanRefundList_result, getLoanRefundList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanRefundList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanRefundList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanRefundList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanRefundList_resultTupleSchemeFactory());
    }

    public List<LoanRefundView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanRefundView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanRefundList_result.class, metaDataMap);
    }

    public getLoanRefundList_result() {
    }

    public getLoanRefundList_result(
      List<LoanRefundView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanRefundList_result(getLoanRefundList_result other) {
      if (other.isSetSuccess()) {
        List<LoanRefundView> __this__success = new ArrayList<LoanRefundView>(other.success.size());
        for (LoanRefundView other_element : other.success) {
          __this__success.add(new LoanRefundView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getLoanRefundList_result deepCopy() {
      return new getLoanRefundList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LoanRefundView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LoanRefundView elem) {
      if (this.success == null) {
        this.success = new ArrayList<LoanRefundView>();
      }
      this.success.add(elem);
    }

    public List<LoanRefundView> getSuccess() {
      return this.success;
    }

    public getLoanRefundList_result setSuccess(List<LoanRefundView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getLoanRefundList_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LoanRefundView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanRefundList_result)
        return this.equals((getLoanRefundList_result)that);
      return false;
    }

    public boolean equals(getLoanRefundList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanRefundList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanRefundList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanRefundList_resultStandardSchemeFactory implements SchemeFactory {
      public getLoanRefundList_resultStandardScheme getScheme() {
        return new getLoanRefundList_resultStandardScheme();
      }
    }

    private static class getLoanRefundList_resultStandardScheme extends StandardScheme<getLoanRefundList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanRefundList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<LoanRefundView>(_list88.size);
                  LoanRefundView _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new LoanRefundView();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanRefundList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LoanRefundView _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanRefundList_resultTupleSchemeFactory implements SchemeFactory {
      public getLoanRefundList_resultTupleScheme getScheme() {
        return new getLoanRefundList_resultTupleScheme();
      }
    }

    private static class getLoanRefundList_resultTupleScheme extends TupleScheme<getLoanRefundList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanRefundList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LoanRefundView _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanRefundList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LoanRefundView>(_list93.size);
            LoanRefundView _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new LoanRefundView();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getListUnReconciliation_args implements org.apache.thrift.TBase<getListUnReconciliation_args, getListUnReconciliation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getListUnReconciliation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListUnReconciliation_args");

    private static final org.apache.thrift.protocol.TField UN_RECONCILIATION_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("unReconciliationCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListUnReconciliation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListUnReconciliation_argsTupleSchemeFactory());
    }

    public UnReconciliationCondition unReconciliationCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UN_RECONCILIATION_CONDITION((short)1, "unReconciliationCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UN_RECONCILIATION_CONDITION
            return UN_RECONCILIATION_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UN_RECONCILIATION_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("unReconciliationCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnReconciliationCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListUnReconciliation_args.class, metaDataMap);
    }

    public getListUnReconciliation_args() {
    }

    public getListUnReconciliation_args(
      UnReconciliationCondition unReconciliationCondition)
    {
      this();
      this.unReconciliationCondition = unReconciliationCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListUnReconciliation_args(getListUnReconciliation_args other) {
      if (other.isSetUnReconciliationCondition()) {
        this.unReconciliationCondition = new UnReconciliationCondition(other.unReconciliationCondition);
      }
    }

    public getListUnReconciliation_args deepCopy() {
      return new getListUnReconciliation_args(this);
    }

    @Override
    public void clear() {
      this.unReconciliationCondition = null;
    }

    public UnReconciliationCondition getUnReconciliationCondition() {
      return this.unReconciliationCondition;
    }

    public getListUnReconciliation_args setUnReconciliationCondition(UnReconciliationCondition unReconciliationCondition) {
      this.unReconciliationCondition = unReconciliationCondition;
      return this;
    }

    public void unsetUnReconciliationCondition() {
      this.unReconciliationCondition = null;
    }

    /** Returns true if field unReconciliationCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetUnReconciliationCondition() {
      return this.unReconciliationCondition != null;
    }

    public void setUnReconciliationConditionIsSet(boolean value) {
      if (!value) {
        this.unReconciliationCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UN_RECONCILIATION_CONDITION:
        if (value == null) {
          unsetUnReconciliationCondition();
        } else {
          setUnReconciliationCondition((UnReconciliationCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UN_RECONCILIATION_CONDITION:
        return getUnReconciliationCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UN_RECONCILIATION_CONDITION:
        return isSetUnReconciliationCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListUnReconciliation_args)
        return this.equals((getListUnReconciliation_args)that);
      return false;
    }

    public boolean equals(getListUnReconciliation_args that) {
      if (that == null)
        return false;

      boolean this_present_unReconciliationCondition = true && this.isSetUnReconciliationCondition();
      boolean that_present_unReconciliationCondition = true && that.isSetUnReconciliationCondition();
      if (this_present_unReconciliationCondition || that_present_unReconciliationCondition) {
        if (!(this_present_unReconciliationCondition && that_present_unReconciliationCondition))
          return false;
        if (!this.unReconciliationCondition.equals(that.unReconciliationCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unReconciliationCondition = true && (isSetUnReconciliationCondition());
      list.add(present_unReconciliationCondition);
      if (present_unReconciliationCondition)
        list.add(unReconciliationCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(getListUnReconciliation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnReconciliationCondition()).compareTo(other.isSetUnReconciliationCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnReconciliationCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReconciliationCondition, other.unReconciliationCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListUnReconciliation_args(");
      boolean first = true;

      sb.append("unReconciliationCondition:");
      if (this.unReconciliationCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.unReconciliationCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (unReconciliationCondition != null) {
        unReconciliationCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListUnReconciliation_argsStandardSchemeFactory implements SchemeFactory {
      public getListUnReconciliation_argsStandardScheme getScheme() {
        return new getListUnReconciliation_argsStandardScheme();
      }
    }

    private static class getListUnReconciliation_argsStandardScheme extends StandardScheme<getListUnReconciliation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListUnReconciliation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UN_RECONCILIATION_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unReconciliationCondition = new UnReconciliationCondition();
                struct.unReconciliationCondition.read(iprot);
                struct.setUnReconciliationConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListUnReconciliation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unReconciliationCondition != null) {
          oprot.writeFieldBegin(UN_RECONCILIATION_CONDITION_FIELD_DESC);
          struct.unReconciliationCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListUnReconciliation_argsTupleSchemeFactory implements SchemeFactory {
      public getListUnReconciliation_argsTupleScheme getScheme() {
        return new getListUnReconciliation_argsTupleScheme();
      }
    }

    private static class getListUnReconciliation_argsTupleScheme extends TupleScheme<getListUnReconciliation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListUnReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnReconciliationCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnReconciliationCondition()) {
          struct.unReconciliationCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListUnReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unReconciliationCondition = new UnReconciliationCondition();
          struct.unReconciliationCondition.read(iprot);
          struct.setUnReconciliationConditionIsSet(true);
        }
      }
    }

  }

  public static class getListUnReconciliation_result implements org.apache.thrift.TBase<getListUnReconciliation_result, getListUnReconciliation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getListUnReconciliation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListUnReconciliation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListUnReconciliation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListUnReconciliation_resultTupleSchemeFactory());
    }

    public List<UnReconciliationView> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnReconciliationView.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListUnReconciliation_result.class, metaDataMap);
    }

    public getListUnReconciliation_result() {
    }

    public getListUnReconciliation_result(
      List<UnReconciliationView> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListUnReconciliation_result(getListUnReconciliation_result other) {
      if (other.isSetSuccess()) {
        List<UnReconciliationView> __this__success = new ArrayList<UnReconciliationView>(other.success.size());
        for (UnReconciliationView other_element : other.success) {
          __this__success.add(new UnReconciliationView(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getListUnReconciliation_result deepCopy() {
      return new getListUnReconciliation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<UnReconciliationView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(UnReconciliationView elem) {
      if (this.success == null) {
        this.success = new ArrayList<UnReconciliationView>();
      }
      this.success.add(elem);
    }

    public List<UnReconciliationView> getSuccess() {
      return this.success;
    }

    public getListUnReconciliation_result setSuccess(List<UnReconciliationView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getListUnReconciliation_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<UnReconciliationView>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListUnReconciliation_result)
        return this.equals((getListUnReconciliation_result)that);
      return false;
    }

    public boolean equals(getListUnReconciliation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getListUnReconciliation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListUnReconciliation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListUnReconciliation_resultStandardSchemeFactory implements SchemeFactory {
      public getListUnReconciliation_resultStandardScheme getScheme() {
        return new getListUnReconciliation_resultStandardScheme();
      }
    }

    private static class getListUnReconciliation_resultStandardScheme extends StandardScheme<getListUnReconciliation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListUnReconciliation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<UnReconciliationView>(_list96.size);
                  UnReconciliationView _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new UnReconciliationView();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListUnReconciliation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (UnReconciliationView _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListUnReconciliation_resultTupleSchemeFactory implements SchemeFactory {
      public getListUnReconciliation_resultTupleScheme getScheme() {
        return new getListUnReconciliation_resultTupleScheme();
      }
    }

    private static class getListUnReconciliation_resultTupleScheme extends TupleScheme<getListUnReconciliation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListUnReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (UnReconciliationView _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListUnReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<UnReconciliationView>(_list101.size);
            UnReconciliationView _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new UnReconciliationView();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class countUnReconciliation_args implements org.apache.thrift.TBase<countUnReconciliation_args, countUnReconciliation_args._Fields>, java.io.Serializable, Cloneable, Comparable<countUnReconciliation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countUnReconciliation_args");

    private static final org.apache.thrift.protocol.TField UN_RECONCILIATION_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("unReconciliationCondition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countUnReconciliation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countUnReconciliation_argsTupleSchemeFactory());
    }

    public UnReconciliationCondition unReconciliationCondition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UN_RECONCILIATION_CONDITION((short)1, "unReconciliationCondition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UN_RECONCILIATION_CONDITION
            return UN_RECONCILIATION_CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UN_RECONCILIATION_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("unReconciliationCondition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnReconciliationCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countUnReconciliation_args.class, metaDataMap);
    }

    public countUnReconciliation_args() {
    }

    public countUnReconciliation_args(
      UnReconciliationCondition unReconciliationCondition)
    {
      this();
      this.unReconciliationCondition = unReconciliationCondition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countUnReconciliation_args(countUnReconciliation_args other) {
      if (other.isSetUnReconciliationCondition()) {
        this.unReconciliationCondition = new UnReconciliationCondition(other.unReconciliationCondition);
      }
    }

    public countUnReconciliation_args deepCopy() {
      return new countUnReconciliation_args(this);
    }

    @Override
    public void clear() {
      this.unReconciliationCondition = null;
    }

    public UnReconciliationCondition getUnReconciliationCondition() {
      return this.unReconciliationCondition;
    }

    public countUnReconciliation_args setUnReconciliationCondition(UnReconciliationCondition unReconciliationCondition) {
      this.unReconciliationCondition = unReconciliationCondition;
      return this;
    }

    public void unsetUnReconciliationCondition() {
      this.unReconciliationCondition = null;
    }

    /** Returns true if field unReconciliationCondition is set (has been assigned a value) and false otherwise */
    public boolean isSetUnReconciliationCondition() {
      return this.unReconciliationCondition != null;
    }

    public void setUnReconciliationConditionIsSet(boolean value) {
      if (!value) {
        this.unReconciliationCondition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UN_RECONCILIATION_CONDITION:
        if (value == null) {
          unsetUnReconciliationCondition();
        } else {
          setUnReconciliationCondition((UnReconciliationCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UN_RECONCILIATION_CONDITION:
        return getUnReconciliationCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UN_RECONCILIATION_CONDITION:
        return isSetUnReconciliationCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countUnReconciliation_args)
        return this.equals((countUnReconciliation_args)that);
      return false;
    }

    public boolean equals(countUnReconciliation_args that) {
      if (that == null)
        return false;

      boolean this_present_unReconciliationCondition = true && this.isSetUnReconciliationCondition();
      boolean that_present_unReconciliationCondition = true && that.isSetUnReconciliationCondition();
      if (this_present_unReconciliationCondition || that_present_unReconciliationCondition) {
        if (!(this_present_unReconciliationCondition && that_present_unReconciliationCondition))
          return false;
        if (!this.unReconciliationCondition.equals(that.unReconciliationCondition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unReconciliationCondition = true && (isSetUnReconciliationCondition());
      list.add(present_unReconciliationCondition);
      if (present_unReconciliationCondition)
        list.add(unReconciliationCondition);

      return list.hashCode();
    }

    @Override
    public int compareTo(countUnReconciliation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnReconciliationCondition()).compareTo(other.isSetUnReconciliationCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnReconciliationCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReconciliationCondition, other.unReconciliationCondition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countUnReconciliation_args(");
      boolean first = true;

      sb.append("unReconciliationCondition:");
      if (this.unReconciliationCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.unReconciliationCondition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (unReconciliationCondition != null) {
        unReconciliationCondition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countUnReconciliation_argsStandardSchemeFactory implements SchemeFactory {
      public countUnReconciliation_argsStandardScheme getScheme() {
        return new countUnReconciliation_argsStandardScheme();
      }
    }

    private static class countUnReconciliation_argsStandardScheme extends StandardScheme<countUnReconciliation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countUnReconciliation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UN_RECONCILIATION_CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unReconciliationCondition = new UnReconciliationCondition();
                struct.unReconciliationCondition.read(iprot);
                struct.setUnReconciliationConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countUnReconciliation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unReconciliationCondition != null) {
          oprot.writeFieldBegin(UN_RECONCILIATION_CONDITION_FIELD_DESC);
          struct.unReconciliationCondition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countUnReconciliation_argsTupleSchemeFactory implements SchemeFactory {
      public countUnReconciliation_argsTupleScheme getScheme() {
        return new countUnReconciliation_argsTupleScheme();
      }
    }

    private static class countUnReconciliation_argsTupleScheme extends TupleScheme<countUnReconciliation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countUnReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnReconciliationCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUnReconciliationCondition()) {
          struct.unReconciliationCondition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countUnReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.unReconciliationCondition = new UnReconciliationCondition();
          struct.unReconciliationCondition.read(iprot);
          struct.setUnReconciliationConditionIsSet(true);
        }
      }
    }

  }

  public static class countUnReconciliation_result implements org.apache.thrift.TBase<countUnReconciliation_result, countUnReconciliation_result._Fields>, java.io.Serializable, Cloneable, Comparable<countUnReconciliation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countUnReconciliation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new countUnReconciliation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new countUnReconciliation_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countUnReconciliation_result.class, metaDataMap);
    }

    public countUnReconciliation_result() {
    }

    public countUnReconciliation_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countUnReconciliation_result(countUnReconciliation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public countUnReconciliation_result deepCopy() {
      return new countUnReconciliation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public countUnReconciliation_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public countUnReconciliation_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof countUnReconciliation_result)
        return this.equals((countUnReconciliation_result)that);
      return false;
    }

    public boolean equals(countUnReconciliation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(countUnReconciliation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("countUnReconciliation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countUnReconciliation_resultStandardSchemeFactory implements SchemeFactory {
      public countUnReconciliation_resultStandardScheme getScheme() {
        return new countUnReconciliation_resultStandardScheme();
      }
    }

    private static class countUnReconciliation_resultStandardScheme extends StandardScheme<countUnReconciliation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countUnReconciliation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countUnReconciliation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countUnReconciliation_resultTupleSchemeFactory implements SchemeFactory {
      public countUnReconciliation_resultTupleScheme getScheme() {
        return new countUnReconciliation_resultTupleScheme();
      }
    }

    private static class countUnReconciliation_resultTupleScheme extends TupleScheme<countUnReconciliation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countUnReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countUnReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class findUnReconciliationInfo_args implements org.apache.thrift.TBase<findUnReconciliationInfo_args, findUnReconciliationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<findUnReconciliationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUnReconciliationInfo_args");

    private static final org.apache.thrift.protocol.TField INPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUnReconciliationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUnReconciliationInfo_argsTupleSchemeFactory());
    }

    public int inputId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INPUT_ID((short)1, "inputId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INPUT_ID
            return INPUT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INPUTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("inputId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUnReconciliationInfo_args.class, metaDataMap);
    }

    public findUnReconciliationInfo_args() {
    }

    public findUnReconciliationInfo_args(
      int inputId)
    {
      this();
      this.inputId = inputId;
      setInputIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUnReconciliationInfo_args(findUnReconciliationInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.inputId = other.inputId;
    }

    public findUnReconciliationInfo_args deepCopy() {
      return new findUnReconciliationInfo_args(this);
    }

    @Override
    public void clear() {
      setInputIdIsSet(false);
      this.inputId = 0;
    }

    public int getInputId() {
      return this.inputId;
    }

    public findUnReconciliationInfo_args setInputId(int inputId) {
      this.inputId = inputId;
      setInputIdIsSet(true);
      return this;
    }

    public void unsetInputId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTID_ISSET_ID);
    }

    /** Returns true if field inputId is set (has been assigned a value) and false otherwise */
    public boolean isSetInputId() {
      return EncodingUtils.testBit(__isset_bitfield, __INPUTID_ISSET_ID);
    }

    public void setInputIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INPUT_ID:
        if (value == null) {
          unsetInputId();
        } else {
          setInputId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INPUT_ID:
        return Integer.valueOf(getInputId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INPUT_ID:
        return isSetInputId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUnReconciliationInfo_args)
        return this.equals((findUnReconciliationInfo_args)that);
      return false;
    }

    public boolean equals(findUnReconciliationInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_inputId = true;
      boolean that_present_inputId = true;
      if (this_present_inputId || that_present_inputId) {
        if (!(this_present_inputId && that_present_inputId))
          return false;
        if (this.inputId != that.inputId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_inputId = true;
      list.add(present_inputId);
      if (present_inputId)
        list.add(inputId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUnReconciliationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInputId()).compareTo(other.isSetInputId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputId, other.inputId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUnReconciliationInfo_args(");
      boolean first = true;

      sb.append("inputId:");
      sb.append(this.inputId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUnReconciliationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public findUnReconciliationInfo_argsStandardScheme getScheme() {
        return new findUnReconciliationInfo_argsStandardScheme();
      }
    }

    private static class findUnReconciliationInfo_argsStandardScheme extends StandardScheme<findUnReconciliationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUnReconciliationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INPUT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.inputId = iprot.readI32();
                struct.setInputIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUnReconciliationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(INPUT_ID_FIELD_DESC);
        oprot.writeI32(struct.inputId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUnReconciliationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public findUnReconciliationInfo_argsTupleScheme getScheme() {
        return new findUnReconciliationInfo_argsTupleScheme();
      }
    }

    private static class findUnReconciliationInfo_argsTupleScheme extends TupleScheme<findUnReconciliationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUnReconciliationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInputId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInputId()) {
          oprot.writeI32(struct.inputId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUnReconciliationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.inputId = iprot.readI32();
          struct.setInputIdIsSet(true);
        }
      }
    }

  }

  public static class findUnReconciliationInfo_result implements org.apache.thrift.TBase<findUnReconciliationInfo_result, findUnReconciliationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<findUnReconciliationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findUnReconciliationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findUnReconciliationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findUnReconciliationInfo_resultTupleSchemeFactory());
    }

    public UnReconciliationView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnReconciliationView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findUnReconciliationInfo_result.class, metaDataMap);
    }

    public findUnReconciliationInfo_result() {
    }

    public findUnReconciliationInfo_result(
      UnReconciliationView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findUnReconciliationInfo_result(findUnReconciliationInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new UnReconciliationView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public findUnReconciliationInfo_result deepCopy() {
      return new findUnReconciliationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public UnReconciliationView getSuccess() {
      return this.success;
    }

    public findUnReconciliationInfo_result setSuccess(UnReconciliationView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public findUnReconciliationInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UnReconciliationView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findUnReconciliationInfo_result)
        return this.equals((findUnReconciliationInfo_result)that);
      return false;
    }

    public boolean equals(findUnReconciliationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(findUnReconciliationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findUnReconciliationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findUnReconciliationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public findUnReconciliationInfo_resultStandardScheme getScheme() {
        return new findUnReconciliationInfo_resultStandardScheme();
      }
    }

    private static class findUnReconciliationInfo_resultStandardScheme extends StandardScheme<findUnReconciliationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findUnReconciliationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UnReconciliationView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findUnReconciliationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findUnReconciliationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public findUnReconciliationInfo_resultTupleScheme getScheme() {
        return new findUnReconciliationInfo_resultTupleScheme();
      }
    }

    private static class findUnReconciliationInfo_resultTupleScheme extends TupleScheme<findUnReconciliationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findUnReconciliationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findUnReconciliationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new UnReconciliationView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class deleteLoanInputDate_args implements org.apache.thrift.TBase<deleteLoanInputDate_args, deleteLoanInputDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLoanInputDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLoanInputDate_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLoanInputDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLoanInputDate_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLoanInputDate_args.class, metaDataMap);
    }

    public deleteLoanInputDate_args() {
    }

    public deleteLoanInputDate_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLoanInputDate_args(deleteLoanInputDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public deleteLoanInputDate_args deepCopy() {
      return new deleteLoanInputDate_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public deleteLoanInputDate_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLoanInputDate_args)
        return this.equals((deleteLoanInputDate_args)that);
      return false;
    }

    public boolean equals(deleteLoanInputDate_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLoanInputDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLoanInputDate_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLoanInputDate_argsStandardSchemeFactory implements SchemeFactory {
      public deleteLoanInputDate_argsStandardScheme getScheme() {
        return new deleteLoanInputDate_argsStandardScheme();
      }
    }

    private static class deleteLoanInputDate_argsStandardScheme extends StandardScheme<deleteLoanInputDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLoanInputDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLoanInputDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLoanInputDate_argsTupleSchemeFactory implements SchemeFactory {
      public deleteLoanInputDate_argsTupleScheme getScheme() {
        return new deleteLoanInputDate_argsTupleScheme();
      }
    }

    private static class deleteLoanInputDate_argsTupleScheme extends TupleScheme<deleteLoanInputDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLoanInputDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLoanInputDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class deleteLoanInputDate_result implements org.apache.thrift.TBase<deleteLoanInputDate_result, deleteLoanInputDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLoanInputDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLoanInputDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteLoanInputDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteLoanInputDate_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLoanInputDate_result.class, metaDataMap);
    }

    public deleteLoanInputDate_result() {
    }

    public deleteLoanInputDate_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLoanInputDate_result(deleteLoanInputDate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteLoanInputDate_result deepCopy() {
      return new deleteLoanInputDate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteLoanInputDate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteLoanInputDate_result)
        return this.equals((deleteLoanInputDate_result)that);
      return false;
    }

    public boolean equals(deleteLoanInputDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteLoanInputDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteLoanInputDate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLoanInputDate_resultStandardSchemeFactory implements SchemeFactory {
      public deleteLoanInputDate_resultStandardScheme getScheme() {
        return new deleteLoanInputDate_resultStandardScheme();
      }
    }

    private static class deleteLoanInputDate_resultStandardScheme extends StandardScheme<deleteLoanInputDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLoanInputDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLoanInputDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLoanInputDate_resultTupleSchemeFactory implements SchemeFactory {
      public deleteLoanInputDate_resultTupleScheme getScheme() {
        return new deleteLoanInputDate_resultTupleScheme();
      }
    }

    private static class deleteLoanInputDate_resultTupleScheme extends TupleScheme<deleteLoanInputDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLoanInputDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLoanInputDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFinanceReceivablesView_args implements org.apache.thrift.TBase<getFinanceReceivablesView_args, getFinanceReceivablesView_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceReceivablesView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceReceivablesView_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceReceivablesView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceReceivablesView_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceReceivablesView_args.class, metaDataMap);
    }

    public getFinanceReceivablesView_args() {
    }

    public getFinanceReceivablesView_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceReceivablesView_args(getFinanceReceivablesView_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getFinanceReceivablesView_args deepCopy() {
      return new getFinanceReceivablesView_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getFinanceReceivablesView_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceReceivablesView_args)
        return this.equals((getFinanceReceivablesView_args)that);
      return false;
    }

    public boolean equals(getFinanceReceivablesView_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceReceivablesView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceReceivablesView_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceReceivablesView_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceReceivablesView_argsStandardScheme getScheme() {
        return new getFinanceReceivablesView_argsStandardScheme();
      }
    }

    private static class getFinanceReceivablesView_argsStandardScheme extends StandardScheme<getFinanceReceivablesView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceReceivablesView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceReceivablesView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceReceivablesView_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceReceivablesView_argsTupleScheme getScheme() {
        return new getFinanceReceivablesView_argsTupleScheme();
      }
    }

    private static class getFinanceReceivablesView_argsTupleScheme extends TupleScheme<getFinanceReceivablesView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivablesView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivablesView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getFinanceReceivablesView_result implements org.apache.thrift.TBase<getFinanceReceivablesView_result, getFinanceReceivablesView_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceReceivablesView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceReceivablesView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceReceivablesView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceReceivablesView_resultTupleSchemeFactory());
    }

    public FinanceReceivablesView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceReceivablesView_result.class, metaDataMap);
    }

    public getFinanceReceivablesView_result() {
    }

    public getFinanceReceivablesView_result(
      FinanceReceivablesView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceReceivablesView_result(getFinanceReceivablesView_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceReceivablesView(other.success);
      }
    }

    public getFinanceReceivablesView_result deepCopy() {
      return new getFinanceReceivablesView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FinanceReceivablesView getSuccess() {
      return this.success;
    }

    public getFinanceReceivablesView_result setSuccess(FinanceReceivablesView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceReceivablesView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceReceivablesView_result)
        return this.equals((getFinanceReceivablesView_result)that);
      return false;
    }

    public boolean equals(getFinanceReceivablesView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceReceivablesView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceReceivablesView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceReceivablesView_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceReceivablesView_resultStandardScheme getScheme() {
        return new getFinanceReceivablesView_resultStandardScheme();
      }
    }

    private static class getFinanceReceivablesView_resultStandardScheme extends StandardScheme<getFinanceReceivablesView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceReceivablesView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceReceivablesView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceReceivablesView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceReceivablesView_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceReceivablesView_resultTupleScheme getScheme() {
        return new getFinanceReceivablesView_resultTupleScheme();
      }
    }

    private static class getFinanceReceivablesView_resultTupleScheme extends TupleScheme<getFinanceReceivablesView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivablesView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivablesView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FinanceReceivablesView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveFinanceReceivables_args implements org.apache.thrift.TBase<saveFinanceReceivables_args, saveFinanceReceivables_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveFinanceReceivables_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFinanceReceivables_args");

    private static final org.apache.thrift.protocol.TField DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dto", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFinanceReceivables_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFinanceReceivables_argsTupleSchemeFactory());
    }

    public FinanceReceivablesDTO dto; // required
    public int projectId; // required
    public int acctId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DTO((short)1, "dto"),
      PROJECT_ID((short)2, "projectId"),
      ACCT_ID((short)3, "acctId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DTO
            return DTO;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // ACCT_ID
            return ACCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __ACCTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DTO, new org.apache.thrift.meta_data.FieldMetaData("dto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesDTO.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFinanceReceivables_args.class, metaDataMap);
    }

    public saveFinanceReceivables_args() {
    }

    public saveFinanceReceivables_args(
      FinanceReceivablesDTO dto,
      int projectId,
      int acctId)
    {
      this();
      this.dto = dto;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.acctId = acctId;
      setAcctIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFinanceReceivables_args(saveFinanceReceivables_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDto()) {
        this.dto = new FinanceReceivablesDTO(other.dto);
      }
      this.projectId = other.projectId;
      this.acctId = other.acctId;
    }

    public saveFinanceReceivables_args deepCopy() {
      return new saveFinanceReceivables_args(this);
    }

    @Override
    public void clear() {
      this.dto = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      setAcctIdIsSet(false);
      this.acctId = 0;
    }

    public FinanceReceivablesDTO getDto() {
      return this.dto;
    }

    public saveFinanceReceivables_args setDto(FinanceReceivablesDTO dto) {
      this.dto = dto;
      return this;
    }

    public void unsetDto() {
      this.dto = null;
    }

    /** Returns true if field dto is set (has been assigned a value) and false otherwise */
    public boolean isSetDto() {
      return this.dto != null;
    }

    public void setDtoIsSet(boolean value) {
      if (!value) {
        this.dto = null;
      }
    }

    public int getProjectId() {
      return this.projectId;
    }

    public saveFinanceReceivables_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getAcctId() {
      return this.acctId;
    }

    public saveFinanceReceivables_args setAcctId(int acctId) {
      this.acctId = acctId;
      setAcctIdIsSet(true);
      return this;
    }

    public void unsetAcctId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
    }

    /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
    public boolean isSetAcctId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
    }

    public void setAcctIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DTO:
        if (value == null) {
          unsetDto();
        } else {
          setDto((FinanceReceivablesDTO)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case ACCT_ID:
        if (value == null) {
          unsetAcctId();
        } else {
          setAcctId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DTO:
        return getDto();

      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case ACCT_ID:
        return Integer.valueOf(getAcctId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DTO:
        return isSetDto();
      case PROJECT_ID:
        return isSetProjectId();
      case ACCT_ID:
        return isSetAcctId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFinanceReceivables_args)
        return this.equals((saveFinanceReceivables_args)that);
      return false;
    }

    public boolean equals(saveFinanceReceivables_args that) {
      if (that == null)
        return false;

      boolean this_present_dto = true && this.isSetDto();
      boolean that_present_dto = true && that.isSetDto();
      if (this_present_dto || that_present_dto) {
        if (!(this_present_dto && that_present_dto))
          return false;
        if (!this.dto.equals(that.dto))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_acctId = true;
      boolean that_present_acctId = true;
      if (this_present_acctId || that_present_acctId) {
        if (!(this_present_acctId && that_present_acctId))
          return false;
        if (this.acctId != that.acctId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dto = true && (isSetDto());
      list.add(present_dto);
      if (present_dto)
        list.add(dto);

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_acctId = true;
      list.add(present_acctId);
      if (present_acctId)
        list.add(acctId);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveFinanceReceivables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDto()).compareTo(other.isSetDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dto, other.dto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAcctId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFinanceReceivables_args(");
      boolean first = true;

      sb.append("dto:");
      if (this.dto == null) {
        sb.append("null");
      } else {
        sb.append(this.dto);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("acctId:");
      sb.append(this.acctId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dto != null) {
        dto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFinanceReceivables_argsStandardSchemeFactory implements SchemeFactory {
      public saveFinanceReceivables_argsStandardScheme getScheme() {
        return new saveFinanceReceivables_argsStandardScheme();
      }
    }

    private static class saveFinanceReceivables_argsStandardScheme extends StandardScheme<saveFinanceReceivables_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFinanceReceivables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dto = new FinanceReceivablesDTO();
                struct.dto.read(iprot);
                struct.setDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.acctId = iprot.readI32();
                struct.setAcctIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFinanceReceivables_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dto != null) {
          oprot.writeFieldBegin(DTO_FIELD_DESC);
          struct.dto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
        oprot.writeI32(struct.acctId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFinanceReceivables_argsTupleSchemeFactory implements SchemeFactory {
      public saveFinanceReceivables_argsTupleScheme getScheme() {
        return new saveFinanceReceivables_argsTupleScheme();
      }
    }

    private static class saveFinanceReceivables_argsTupleScheme extends TupleScheme<saveFinanceReceivables_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFinanceReceivables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDto()) {
          optionals.set(0);
        }
        if (struct.isSetProjectId()) {
          optionals.set(1);
        }
        if (struct.isSetAcctId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDto()) {
          struct.dto.write(oprot);
        }
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetAcctId()) {
          oprot.writeI32(struct.acctId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFinanceReceivables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dto = new FinanceReceivablesDTO();
          struct.dto.read(iprot);
          struct.setDtoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.acctId = iprot.readI32();
          struct.setAcctIdIsSet(true);
        }
      }
    }

  }

  public static class saveFinanceReceivables_result implements org.apache.thrift.TBase<saveFinanceReceivables_result, saveFinanceReceivables_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveFinanceReceivables_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveFinanceReceivables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveFinanceReceivables_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveFinanceReceivables_resultTupleSchemeFactory());
    }

    public FinanceReceivablesDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveFinanceReceivables_result.class, metaDataMap);
    }

    public saveFinanceReceivables_result() {
    }

    public saveFinanceReceivables_result(
      FinanceReceivablesDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveFinanceReceivables_result(saveFinanceReceivables_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceReceivablesDTO(other.success);
      }
    }

    public saveFinanceReceivables_result deepCopy() {
      return new saveFinanceReceivables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FinanceReceivablesDTO getSuccess() {
      return this.success;
    }

    public saveFinanceReceivables_result setSuccess(FinanceReceivablesDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceReceivablesDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveFinanceReceivables_result)
        return this.equals((saveFinanceReceivables_result)that);
      return false;
    }

    public boolean equals(saveFinanceReceivables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveFinanceReceivables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveFinanceReceivables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveFinanceReceivables_resultStandardSchemeFactory implements SchemeFactory {
      public saveFinanceReceivables_resultStandardScheme getScheme() {
        return new saveFinanceReceivables_resultStandardScheme();
      }
    }

    private static class saveFinanceReceivables_resultStandardScheme extends StandardScheme<saveFinanceReceivables_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveFinanceReceivables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceReceivablesDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveFinanceReceivables_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveFinanceReceivables_resultTupleSchemeFactory implements SchemeFactory {
      public saveFinanceReceivables_resultTupleScheme getScheme() {
        return new saveFinanceReceivables_resultTupleScheme();
      }
    }

    private static class saveFinanceReceivables_resultTupleScheme extends TupleScheme<saveFinanceReceivables_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveFinanceReceivables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveFinanceReceivables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FinanceReceivablesDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveUseBalance_args implements org.apache.thrift.TBase<saveUseBalance_args, saveUseBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveUseBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUseBalance_args");

    private static final org.apache.thrift.protocol.TField DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("dto", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUseBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUseBalance_argsTupleSchemeFactory());
    }

    public FinanceReceivablesDTO dto; // required
    public int projectId; // required
    public int acctId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DTO((short)1, "dto"),
      PROJECT_ID((short)2, "projectId"),
      ACCT_ID((short)3, "acctId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DTO
            return DTO;
          case 2: // PROJECT_ID
            return PROJECT_ID;
          case 3: // ACCT_ID
            return ACCT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private static final int __ACCTID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DTO, new org.apache.thrift.meta_data.FieldMetaData("dto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesDTO.class)));
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUseBalance_args.class, metaDataMap);
    }

    public saveUseBalance_args() {
    }

    public saveUseBalance_args(
      FinanceReceivablesDTO dto,
      int projectId,
      int acctId)
    {
      this();
      this.dto = dto;
      this.projectId = projectId;
      setProjectIdIsSet(true);
      this.acctId = acctId;
      setAcctIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUseBalance_args(saveUseBalance_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDto()) {
        this.dto = new FinanceReceivablesDTO(other.dto);
      }
      this.projectId = other.projectId;
      this.acctId = other.acctId;
    }

    public saveUseBalance_args deepCopy() {
      return new saveUseBalance_args(this);
    }

    @Override
    public void clear() {
      this.dto = null;
      setProjectIdIsSet(false);
      this.projectId = 0;
      setAcctIdIsSet(false);
      this.acctId = 0;
    }

    public FinanceReceivablesDTO getDto() {
      return this.dto;
    }

    public saveUseBalance_args setDto(FinanceReceivablesDTO dto) {
      this.dto = dto;
      return this;
    }

    public void unsetDto() {
      this.dto = null;
    }

    /** Returns true if field dto is set (has been assigned a value) and false otherwise */
    public boolean isSetDto() {
      return this.dto != null;
    }

    public void setDtoIsSet(boolean value) {
      if (!value) {
        this.dto = null;
      }
    }

    public int getProjectId() {
      return this.projectId;
    }

    public saveUseBalance_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public int getAcctId() {
      return this.acctId;
    }

    public saveUseBalance_args setAcctId(int acctId) {
      this.acctId = acctId;
      setAcctIdIsSet(true);
      return this;
    }

    public void unsetAcctId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
    }

    /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
    public boolean isSetAcctId() {
      return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
    }

    public void setAcctIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DTO:
        if (value == null) {
          unsetDto();
        } else {
          setDto((FinanceReceivablesDTO)value);
        }
        break;

      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      case ACCT_ID:
        if (value == null) {
          unsetAcctId();
        } else {
          setAcctId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DTO:
        return getDto();

      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      case ACCT_ID:
        return Integer.valueOf(getAcctId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DTO:
        return isSetDto();
      case PROJECT_ID:
        return isSetProjectId();
      case ACCT_ID:
        return isSetAcctId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUseBalance_args)
        return this.equals((saveUseBalance_args)that);
      return false;
    }

    public boolean equals(saveUseBalance_args that) {
      if (that == null)
        return false;

      boolean this_present_dto = true && this.isSetDto();
      boolean that_present_dto = true && that.isSetDto();
      if (this_present_dto || that_present_dto) {
        if (!(this_present_dto && that_present_dto))
          return false;
        if (!this.dto.equals(that.dto))
          return false;
      }

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      boolean this_present_acctId = true;
      boolean that_present_acctId = true;
      if (this_present_acctId || that_present_acctId) {
        if (!(this_present_acctId && that_present_acctId))
          return false;
        if (this.acctId != that.acctId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dto = true && (isSetDto());
      list.add(present_dto);
      if (present_dto)
        list.add(dto);

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      boolean present_acctId = true;
      list.add(present_acctId);
      if (present_acctId)
        list.add(acctId);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveUseBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDto()).compareTo(other.isSetDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dto, other.dto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAcctId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUseBalance_args(");
      boolean first = true;

      sb.append("dto:");
      if (this.dto == null) {
        sb.append("null");
      } else {
        sb.append(this.dto);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("acctId:");
      sb.append(this.acctId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dto != null) {
        dto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUseBalance_argsStandardSchemeFactory implements SchemeFactory {
      public saveUseBalance_argsStandardScheme getScheme() {
        return new saveUseBalance_argsStandardScheme();
      }
    }

    private static class saveUseBalance_argsStandardScheme extends StandardScheme<saveUseBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUseBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dto = new FinanceReceivablesDTO();
                struct.dto.read(iprot);
                struct.setDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACCT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.acctId = iprot.readI32();
                struct.setAcctIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUseBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dto != null) {
          oprot.writeFieldBegin(DTO_FIELD_DESC);
          struct.dto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
        oprot.writeI32(struct.acctId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUseBalance_argsTupleSchemeFactory implements SchemeFactory {
      public saveUseBalance_argsTupleScheme getScheme() {
        return new saveUseBalance_argsTupleScheme();
      }
    }

    private static class saveUseBalance_argsTupleScheme extends TupleScheme<saveUseBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDto()) {
          optionals.set(0);
        }
        if (struct.isSetProjectId()) {
          optionals.set(1);
        }
        if (struct.isSetAcctId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDto()) {
          struct.dto.write(oprot);
        }
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
        if (struct.isSetAcctId()) {
          oprot.writeI32(struct.acctId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUseBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dto = new FinanceReceivablesDTO();
          struct.dto.read(iprot);
          struct.setDtoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.acctId = iprot.readI32();
          struct.setAcctIdIsSet(true);
        }
      }
    }

  }

  public static class saveUseBalance_result implements org.apache.thrift.TBase<saveUseBalance_result, saveUseBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveUseBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveUseBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveUseBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveUseBalance_resultTupleSchemeFactory());
    }

    public FinanceReceivablesDTO success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesDTO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveUseBalance_result.class, metaDataMap);
    }

    public saveUseBalance_result() {
    }

    public saveUseBalance_result(
      FinanceReceivablesDTO success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveUseBalance_result(saveUseBalance_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceReceivablesDTO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public saveUseBalance_result deepCopy() {
      return new saveUseBalance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public FinanceReceivablesDTO getSuccess() {
      return this.success;
    }

    public saveUseBalance_result setSuccess(FinanceReceivablesDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public saveUseBalance_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceReceivablesDTO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveUseBalance_result)
        return this.equals((saveUseBalance_result)that);
      return false;
    }

    public boolean equals(saveUseBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveUseBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveUseBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveUseBalance_resultStandardSchemeFactory implements SchemeFactory {
      public saveUseBalance_resultStandardScheme getScheme() {
        return new saveUseBalance_resultStandardScheme();
      }
    }

    private static class saveUseBalance_resultStandardScheme extends StandardScheme<saveUseBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveUseBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceReceivablesDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveUseBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveUseBalance_resultTupleSchemeFactory implements SchemeFactory {
      public saveUseBalance_resultTupleScheme getScheme() {
        return new saveUseBalance_resultTupleScheme();
      }
    }

    private static class saveUseBalance_resultTupleScheme extends TupleScheme<saveUseBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveUseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveUseBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new FinanceReceivablesDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getFinanceReceivables_args implements org.apache.thrift.TBase<getFinanceReceivables_args, getFinanceReceivables_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceReceivables_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceReceivables_args");

    private static final org.apache.thrift.protocol.TField FINANCE_RECEIVABLES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("financeReceivablesId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceReceivables_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceReceivables_argsTupleSchemeFactory());
    }

    public int financeReceivablesId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINANCE_RECEIVABLES_ID((short)1, "financeReceivablesId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINANCE_RECEIVABLES_ID
            return FINANCE_RECEIVABLES_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FINANCERECEIVABLESID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINANCE_RECEIVABLES_ID, new org.apache.thrift.meta_data.FieldMetaData("financeReceivablesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceReceivables_args.class, metaDataMap);
    }

    public getFinanceReceivables_args() {
    }

    public getFinanceReceivables_args(
      int financeReceivablesId)
    {
      this();
      this.financeReceivablesId = financeReceivablesId;
      setFinanceReceivablesIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceReceivables_args(getFinanceReceivables_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.financeReceivablesId = other.financeReceivablesId;
    }

    public getFinanceReceivables_args deepCopy() {
      return new getFinanceReceivables_args(this);
    }

    @Override
    public void clear() {
      setFinanceReceivablesIdIsSet(false);
      this.financeReceivablesId = 0;
    }

    public int getFinanceReceivablesId() {
      return this.financeReceivablesId;
    }

    public getFinanceReceivables_args setFinanceReceivablesId(int financeReceivablesId) {
      this.financeReceivablesId = financeReceivablesId;
      setFinanceReceivablesIdIsSet(true);
      return this;
    }

    public void unsetFinanceReceivablesId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINANCERECEIVABLESID_ISSET_ID);
    }

    /** Returns true if field financeReceivablesId is set (has been assigned a value) and false otherwise */
    public boolean isSetFinanceReceivablesId() {
      return EncodingUtils.testBit(__isset_bitfield, __FINANCERECEIVABLESID_ISSET_ID);
    }

    public void setFinanceReceivablesIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINANCERECEIVABLESID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FINANCE_RECEIVABLES_ID:
        if (value == null) {
          unsetFinanceReceivablesId();
        } else {
          setFinanceReceivablesId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FINANCE_RECEIVABLES_ID:
        return Integer.valueOf(getFinanceReceivablesId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FINANCE_RECEIVABLES_ID:
        return isSetFinanceReceivablesId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceReceivables_args)
        return this.equals((getFinanceReceivables_args)that);
      return false;
    }

    public boolean equals(getFinanceReceivables_args that) {
      if (that == null)
        return false;

      boolean this_present_financeReceivablesId = true;
      boolean that_present_financeReceivablesId = true;
      if (this_present_financeReceivablesId || that_present_financeReceivablesId) {
        if (!(this_present_financeReceivablesId && that_present_financeReceivablesId))
          return false;
        if (this.financeReceivablesId != that.financeReceivablesId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_financeReceivablesId = true;
      list.add(present_financeReceivablesId);
      if (present_financeReceivablesId)
        list.add(financeReceivablesId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceReceivables_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFinanceReceivablesId()).compareTo(other.isSetFinanceReceivablesId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinanceReceivablesId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeReceivablesId, other.financeReceivablesId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceReceivables_args(");
      boolean first = true;

      sb.append("financeReceivablesId:");
      sb.append(this.financeReceivablesId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceReceivables_argsStandardSchemeFactory implements SchemeFactory {
      public getFinanceReceivables_argsStandardScheme getScheme() {
        return new getFinanceReceivables_argsStandardScheme();
      }
    }

    private static class getFinanceReceivables_argsStandardScheme extends StandardScheme<getFinanceReceivables_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceReceivables_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINANCE_RECEIVABLES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.financeReceivablesId = iprot.readI32();
                struct.setFinanceReceivablesIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceReceivables_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FINANCE_RECEIVABLES_ID_FIELD_DESC);
        oprot.writeI32(struct.financeReceivablesId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceReceivables_argsTupleSchemeFactory implements SchemeFactory {
      public getFinanceReceivables_argsTupleScheme getScheme() {
        return new getFinanceReceivables_argsTupleScheme();
      }
    }

    private static class getFinanceReceivables_argsTupleScheme extends TupleScheme<getFinanceReceivables_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFinanceReceivablesId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFinanceReceivablesId()) {
          oprot.writeI32(struct.financeReceivablesId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivables_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.financeReceivablesId = iprot.readI32();
          struct.setFinanceReceivablesIdIsSet(true);
        }
      }
    }

  }

  public static class getFinanceReceivables_result implements org.apache.thrift.TBase<getFinanceReceivables_result, getFinanceReceivables_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFinanceReceivables_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFinanceReceivables_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFinanceReceivables_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFinanceReceivables_resultTupleSchemeFactory());
    }

    public FinanceReceivablesDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FinanceReceivablesDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFinanceReceivables_result.class, metaDataMap);
    }

    public getFinanceReceivables_result() {
    }

    public getFinanceReceivables_result(
      FinanceReceivablesDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFinanceReceivables_result(getFinanceReceivables_result other) {
      if (other.isSetSuccess()) {
        this.success = new FinanceReceivablesDTO(other.success);
      }
    }

    public getFinanceReceivables_result deepCopy() {
      return new getFinanceReceivables_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FinanceReceivablesDTO getSuccess() {
      return this.success;
    }

    public getFinanceReceivables_result setSuccess(FinanceReceivablesDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FinanceReceivablesDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFinanceReceivables_result)
        return this.equals((getFinanceReceivables_result)that);
      return false;
    }

    public boolean equals(getFinanceReceivables_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFinanceReceivables_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFinanceReceivables_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFinanceReceivables_resultStandardSchemeFactory implements SchemeFactory {
      public getFinanceReceivables_resultStandardScheme getScheme() {
        return new getFinanceReceivables_resultStandardScheme();
      }
    }

    private static class getFinanceReceivables_resultStandardScheme extends StandardScheme<getFinanceReceivables_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFinanceReceivables_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FinanceReceivablesDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFinanceReceivables_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFinanceReceivables_resultTupleSchemeFactory implements SchemeFactory {
      public getFinanceReceivables_resultTupleScheme getScheme() {
        return new getFinanceReceivables_resultTupleScheme();
      }
    }

    private static class getFinanceReceivables_resultTupleScheme extends TupleScheme<getFinanceReceivables_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFinanceReceivables_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FinanceReceivablesDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getReconciliationOptionsList_args implements org.apache.thrift.TBase<getReconciliationOptionsList_args, getReconciliationOptionsList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReconciliationOptionsList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReconciliationOptionsList_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CURRENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("currentDate", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReconciliationOptionsList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReconciliationOptionsList_argsTupleSchemeFactory());
    }

    public int loanId; // required
    public String currentDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId"),
      CURRENT_DATE((short)2, "currentDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          case 2: // CURRENT_DATE
            return CURRENT_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CURRENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("currentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReconciliationOptionsList_args.class, metaDataMap);
    }

    public getReconciliationOptionsList_args() {
    }

    public getReconciliationOptionsList_args(
      int loanId,
      String currentDate)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
      this.currentDate = currentDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReconciliationOptionsList_args(getReconciliationOptionsList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
      if (other.isSetCurrentDate()) {
        this.currentDate = other.currentDate;
      }
    }

    public getReconciliationOptionsList_args deepCopy() {
      return new getReconciliationOptionsList_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
      this.currentDate = null;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getReconciliationOptionsList_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public String getCurrentDate() {
      return this.currentDate;
    }

    public getReconciliationOptionsList_args setCurrentDate(String currentDate) {
      this.currentDate = currentDate;
      return this;
    }

    public void unsetCurrentDate() {
      this.currentDate = null;
    }

    /** Returns true if field currentDate is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentDate() {
      return this.currentDate != null;
    }

    public void setCurrentDateIsSet(boolean value) {
      if (!value) {
        this.currentDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      case CURRENT_DATE:
        if (value == null) {
          unsetCurrentDate();
        } else {
          setCurrentDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      case CURRENT_DATE:
        return getCurrentDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      case CURRENT_DATE:
        return isSetCurrentDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReconciliationOptionsList_args)
        return this.equals((getReconciliationOptionsList_args)that);
      return false;
    }

    public boolean equals(getReconciliationOptionsList_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      boolean this_present_currentDate = true && this.isSetCurrentDate();
      boolean that_present_currentDate = true && that.isSetCurrentDate();
      if (this_present_currentDate || that_present_currentDate) {
        if (!(this_present_currentDate && that_present_currentDate))
          return false;
        if (!this.currentDate.equals(that.currentDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      boolean present_currentDate = true && (isSetCurrentDate());
      list.add(present_currentDate);
      if (present_currentDate)
        list.add(currentDate);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReconciliationOptionsList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentDate()).compareTo(other.isSetCurrentDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentDate, other.currentDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReconciliationOptionsList_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentDate:");
      if (this.currentDate == null) {
        sb.append("null");
      } else {
        sb.append(this.currentDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReconciliationOptionsList_argsStandardSchemeFactory implements SchemeFactory {
      public getReconciliationOptionsList_argsStandardScheme getScheme() {
        return new getReconciliationOptionsList_argsStandardScheme();
      }
    }

    private static class getReconciliationOptionsList_argsStandardScheme extends StandardScheme<getReconciliationOptionsList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReconciliationOptionsList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CURRENT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.currentDate = iprot.readString();
                struct.setCurrentDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReconciliationOptionsList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        if (struct.currentDate != null) {
          oprot.writeFieldBegin(CURRENT_DATE_FIELD_DESC);
          oprot.writeString(struct.currentDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReconciliationOptionsList_argsTupleSchemeFactory implements SchemeFactory {
      public getReconciliationOptionsList_argsTupleScheme getScheme() {
        return new getReconciliationOptionsList_argsTupleScheme();
      }
    }

    private static class getReconciliationOptionsList_argsTupleScheme extends TupleScheme<getReconciliationOptionsList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReconciliationOptionsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        if (struct.isSetCurrentDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
        if (struct.isSetCurrentDate()) {
          oprot.writeString(struct.currentDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReconciliationOptionsList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.currentDate = iprot.readString();
          struct.setCurrentDateIsSet(true);
        }
      }
    }

  }

  public static class getReconciliationOptionsList_result implements org.apache.thrift.TBase<getReconciliationOptionsList_result, getReconciliationOptionsList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReconciliationOptionsList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReconciliationOptionsList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReconciliationOptionsList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReconciliationOptionsList_resultTupleSchemeFactory());
    }

    public List<ReconciliationOptionsView> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReconciliationOptionsView.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReconciliationOptionsList_result.class, metaDataMap);
    }

    public getReconciliationOptionsList_result() {
    }

    public getReconciliationOptionsList_result(
      List<ReconciliationOptionsView> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReconciliationOptionsList_result(getReconciliationOptionsList_result other) {
      if (other.isSetSuccess()) {
        List<ReconciliationOptionsView> __this__success = new ArrayList<ReconciliationOptionsView>(other.success.size());
        for (ReconciliationOptionsView other_element : other.success) {
          __this__success.add(new ReconciliationOptionsView(other_element));
        }
        this.success = __this__success;
      }
    }

    public getReconciliationOptionsList_result deepCopy() {
      return new getReconciliationOptionsList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ReconciliationOptionsView> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ReconciliationOptionsView elem) {
      if (this.success == null) {
        this.success = new ArrayList<ReconciliationOptionsView>();
      }
      this.success.add(elem);
    }

    public List<ReconciliationOptionsView> getSuccess() {
      return this.success;
    }

    public getReconciliationOptionsList_result setSuccess(List<ReconciliationOptionsView> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ReconciliationOptionsView>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReconciliationOptionsList_result)
        return this.equals((getReconciliationOptionsList_result)that);
      return false;
    }

    public boolean equals(getReconciliationOptionsList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReconciliationOptionsList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReconciliationOptionsList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReconciliationOptionsList_resultStandardSchemeFactory implements SchemeFactory {
      public getReconciliationOptionsList_resultStandardScheme getScheme() {
        return new getReconciliationOptionsList_resultStandardScheme();
      }
    }

    private static class getReconciliationOptionsList_resultStandardScheme extends StandardScheme<getReconciliationOptionsList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReconciliationOptionsList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new ArrayList<ReconciliationOptionsView>(_list104.size);
                  ReconciliationOptionsView _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new ReconciliationOptionsView();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReconciliationOptionsList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ReconciliationOptionsView _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReconciliationOptionsList_resultTupleSchemeFactory implements SchemeFactory {
      public getReconciliationOptionsList_resultTupleScheme getScheme() {
        return new getReconciliationOptionsList_resultTupleScheme();
      }
    }

    private static class getReconciliationOptionsList_resultTupleScheme extends TupleScheme<getReconciliationOptionsList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReconciliationOptionsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ReconciliationOptionsView _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReconciliationOptionsList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ReconciliationOptionsView>(_list109.size);
            ReconciliationOptionsView _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new ReconciliationOptionsView();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getReconciliationItem_args implements org.apache.thrift.TBase<getReconciliationItem_args, getReconciliationItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReconciliationItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReconciliationItem_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CURRENT_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentDt", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReconciliationItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReconciliationItem_argsTupleSchemeFactory());
    }

    public int type; // required
    public int pid; // required
    public String currentDt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      PID((short)2, "pid"),
      CURRENT_DT((short)3, "currentDt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // PID
            return PID;
          case 3: // CURRENT_DT
            return CURRENT_DT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __PID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CURRENT_DT, new org.apache.thrift.meta_data.FieldMetaData("currentDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReconciliationItem_args.class, metaDataMap);
    }

    public getReconciliationItem_args() {
    }

    public getReconciliationItem_args(
      int type,
      int pid,
      String currentDt)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.pid = pid;
      setPidIsSet(true);
      this.currentDt = currentDt;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReconciliationItem_args(getReconciliationItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      this.pid = other.pid;
      if (other.isSetCurrentDt()) {
        this.currentDt = other.currentDt;
      }
    }

    public getReconciliationItem_args deepCopy() {
      return new getReconciliationItem_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      setPidIsSet(false);
      this.pid = 0;
      this.currentDt = null;
    }

    public int getType() {
      return this.type;
    }

    public getReconciliationItem_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public int getPid() {
      return this.pid;
    }

    public getReconciliationItem_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public String getCurrentDt() {
      return this.currentDt;
    }

    public getReconciliationItem_args setCurrentDt(String currentDt) {
      this.currentDt = currentDt;
      return this;
    }

    public void unsetCurrentDt() {
      this.currentDt = null;
    }

    /** Returns true if field currentDt is set (has been assigned a value) and false otherwise */
    public boolean isSetCurrentDt() {
      return this.currentDt != null;
    }

    public void setCurrentDtIsSet(boolean value) {
      if (!value) {
        this.currentDt = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((Integer)value);
        }
        break;

      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      case CURRENT_DT:
        if (value == null) {
          unsetCurrentDt();
        } else {
          setCurrentDt((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return Integer.valueOf(getType());

      case PID:
        return Integer.valueOf(getPid());

      case CURRENT_DT:
        return getCurrentDt();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case PID:
        return isSetPid();
      case CURRENT_DT:
        return isSetCurrentDt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReconciliationItem_args)
        return this.equals((getReconciliationItem_args)that);
      return false;
    }

    public boolean equals(getReconciliationItem_args that) {
      if (that == null)
        return false;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      boolean this_present_currentDt = true && this.isSetCurrentDt();
      boolean that_present_currentDt = true && that.isSetCurrentDt();
      if (this_present_currentDt || that_present_currentDt) {
        if (!(this_present_currentDt && that_present_currentDt))
          return false;
        if (!this.currentDt.equals(that.currentDt))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_type = true;
      list.add(present_type);
      if (present_type)
        list.add(type);

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      boolean present_currentDt = true && (isSetCurrentDt());
      list.add(present_currentDt);
      if (present_currentDt)
        list.add(currentDt);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReconciliationItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCurrentDt()).compareTo(other.isSetCurrentDt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCurrentDt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentDt, other.currentDt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReconciliationItem_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("currentDt:");
      if (this.currentDt == null) {
        sb.append("null");
      } else {
        sb.append(this.currentDt);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReconciliationItem_argsStandardSchemeFactory implements SchemeFactory {
      public getReconciliationItem_argsStandardScheme getScheme() {
        return new getReconciliationItem_argsStandardScheme();
      }
    }

    private static class getReconciliationItem_argsStandardScheme extends StandardScheme<getReconciliationItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReconciliationItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CURRENT_DT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.currentDt = iprot.readString();
                struct.setCurrentDtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReconciliationItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        if (struct.currentDt != null) {
          oprot.writeFieldBegin(CURRENT_DT_FIELD_DESC);
          oprot.writeString(struct.currentDt);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReconciliationItem_argsTupleSchemeFactory implements SchemeFactory {
      public getReconciliationItem_argsTupleScheme getScheme() {
        return new getReconciliationItem_argsTupleScheme();
      }
    }

    private static class getReconciliationItem_argsTupleScheme extends TupleScheme<getReconciliationItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReconciliationItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetPid()) {
          optionals.set(1);
        }
        if (struct.isSetCurrentDt()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
        if (struct.isSetCurrentDt()) {
          oprot.writeString(struct.currentDt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReconciliationItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.currentDt = iprot.readString();
          struct.setCurrentDtIsSet(true);
        }
      }
    }

  }

  public static class getReconciliationItem_result implements org.apache.thrift.TBase<getReconciliationItem_result, getReconciliationItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReconciliationItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReconciliationItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReconciliationItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReconciliationItem_resultTupleSchemeFactory());
    }

    public ReconciliationItem success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReconciliationItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReconciliationItem_result.class, metaDataMap);
    }

    public getReconciliationItem_result() {
    }

    public getReconciliationItem_result(
      ReconciliationItem success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReconciliationItem_result(getReconciliationItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReconciliationItem(other.success);
      }
    }

    public getReconciliationItem_result deepCopy() {
      return new getReconciliationItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReconciliationItem getSuccess() {
      return this.success;
    }

    public getReconciliationItem_result setSuccess(ReconciliationItem success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReconciliationItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReconciliationItem_result)
        return this.equals((getReconciliationItem_result)that);
      return false;
    }

    public boolean equals(getReconciliationItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReconciliationItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReconciliationItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReconciliationItem_resultStandardSchemeFactory implements SchemeFactory {
      public getReconciliationItem_resultStandardScheme getScheme() {
        return new getReconciliationItem_resultStandardScheme();
      }
    }

    private static class getReconciliationItem_resultStandardScheme extends StandardScheme<getReconciliationItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReconciliationItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReconciliationItem();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReconciliationItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReconciliationItem_resultTupleSchemeFactory implements SchemeFactory {
      public getReconciliationItem_resultTupleScheme getScheme() {
        return new getReconciliationItem_resultTupleScheme();
      }
    }

    private static class getReconciliationItem_resultTupleScheme extends TupleScheme<getReconciliationItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReconciliationItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReconciliationItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReconciliationItem();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveRepaymentReconciliation_args implements org.apache.thrift.TBase<saveRepaymentReconciliation_args, saveRepaymentReconciliation_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveRepaymentReconciliation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRepaymentReconciliation_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_RECONCILIATION_BEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentReconciliationBeanList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField RECEIVABLES_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablesVersion", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField AVAILABLE_RECONCILIATION_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("availableReconciliationAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField RECEIVABLES_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablesId", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LOAN_INTEREST_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInterestRecord", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField LOAN_MGR_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMgrRecord", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField LOAN_OTHER_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFee", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRepaymentReconciliation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRepaymentReconciliation_argsTupleSchemeFactory());
    }

    public List<RepaymentReconciliationBean> repaymentReconciliationBeanList; // required
    public int receivablesVersion; // required
    public double availableReconciliationAmount; // required
    public int receivablesId; // required
    public int loanInterestRecord; // required
    public int loanMgrRecord; // required
    public int loanOtherFee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_RECONCILIATION_BEAN_LIST((short)1, "repaymentReconciliationBeanList"),
      RECEIVABLES_VERSION((short)2, "receivablesVersion"),
      AVAILABLE_RECONCILIATION_AMOUNT((short)3, "availableReconciliationAmount"),
      RECEIVABLES_ID((short)4, "receivablesId"),
      LOAN_INTEREST_RECORD((short)5, "loanInterestRecord"),
      LOAN_MGR_RECORD((short)6, "loanMgrRecord"),
      LOAN_OTHER_FEE((short)7, "loanOtherFee");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_RECONCILIATION_BEAN_LIST
            return REPAYMENT_RECONCILIATION_BEAN_LIST;
          case 2: // RECEIVABLES_VERSION
            return RECEIVABLES_VERSION;
          case 3: // AVAILABLE_RECONCILIATION_AMOUNT
            return AVAILABLE_RECONCILIATION_AMOUNT;
          case 4: // RECEIVABLES_ID
            return RECEIVABLES_ID;
          case 5: // LOAN_INTEREST_RECORD
            return LOAN_INTEREST_RECORD;
          case 6: // LOAN_MGR_RECORD
            return LOAN_MGR_RECORD;
          case 7: // LOAN_OTHER_FEE
            return LOAN_OTHER_FEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RECEIVABLESVERSION_ISSET_ID = 0;
    private static final int __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID = 1;
    private static final int __RECEIVABLESID_ISSET_ID = 2;
    private static final int __LOANINTERESTRECORD_ISSET_ID = 3;
    private static final int __LOANMGRRECORD_ISSET_ID = 4;
    private static final int __LOANOTHERFEE_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_RECONCILIATION_BEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("repaymentReconciliationBeanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentReconciliationBean.class))));
      tmpMap.put(_Fields.RECEIVABLES_VERSION, new org.apache.thrift.meta_data.FieldMetaData("receivablesVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AVAILABLE_RECONCILIATION_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("availableReconciliationAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.RECEIVABLES_ID, new org.apache.thrift.meta_data.FieldMetaData("receivablesId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_INTEREST_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanInterestRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_MGR_RECORD, new org.apache.thrift.meta_data.FieldMetaData("loanMgrRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LOAN_OTHER_FEE, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRepaymentReconciliation_args.class, metaDataMap);
    }

    public saveRepaymentReconciliation_args() {
    }

    public saveRepaymentReconciliation_args(
      List<RepaymentReconciliationBean> repaymentReconciliationBeanList,
      int receivablesVersion,
      double availableReconciliationAmount,
      int receivablesId,
      int loanInterestRecord,
      int loanMgrRecord,
      int loanOtherFee)
    {
      this();
      this.repaymentReconciliationBeanList = repaymentReconciliationBeanList;
      this.receivablesVersion = receivablesVersion;
      setReceivablesVersionIsSet(true);
      this.availableReconciliationAmount = availableReconciliationAmount;
      setAvailableReconciliationAmountIsSet(true);
      this.receivablesId = receivablesId;
      setReceivablesIdIsSet(true);
      this.loanInterestRecord = loanInterestRecord;
      setLoanInterestRecordIsSet(true);
      this.loanMgrRecord = loanMgrRecord;
      setLoanMgrRecordIsSet(true);
      this.loanOtherFee = loanOtherFee;
      setLoanOtherFeeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRepaymentReconciliation_args(saveRepaymentReconciliation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRepaymentReconciliationBeanList()) {
        List<RepaymentReconciliationBean> __this__repaymentReconciliationBeanList = new ArrayList<RepaymentReconciliationBean>(other.repaymentReconciliationBeanList.size());
        for (RepaymentReconciliationBean other_element : other.repaymentReconciliationBeanList) {
          __this__repaymentReconciliationBeanList.add(new RepaymentReconciliationBean(other_element));
        }
        this.repaymentReconciliationBeanList = __this__repaymentReconciliationBeanList;
      }
      this.receivablesVersion = other.receivablesVersion;
      this.availableReconciliationAmount = other.availableReconciliationAmount;
      this.receivablesId = other.receivablesId;
      this.loanInterestRecord = other.loanInterestRecord;
      this.loanMgrRecord = other.loanMgrRecord;
      this.loanOtherFee = other.loanOtherFee;
    }

    public saveRepaymentReconciliation_args deepCopy() {
      return new saveRepaymentReconciliation_args(this);
    }

    @Override
    public void clear() {
      this.repaymentReconciliationBeanList = null;
      setReceivablesVersionIsSet(false);
      this.receivablesVersion = 0;
      setAvailableReconciliationAmountIsSet(false);
      this.availableReconciliationAmount = 0.0;
      setReceivablesIdIsSet(false);
      this.receivablesId = 0;
      setLoanInterestRecordIsSet(false);
      this.loanInterestRecord = 0;
      setLoanMgrRecordIsSet(false);
      this.loanMgrRecord = 0;
      setLoanOtherFeeIsSet(false);
      this.loanOtherFee = 0;
    }

    public int getRepaymentReconciliationBeanListSize() {
      return (this.repaymentReconciliationBeanList == null) ? 0 : this.repaymentReconciliationBeanList.size();
    }

    public java.util.Iterator<RepaymentReconciliationBean> getRepaymentReconciliationBeanListIterator() {
      return (this.repaymentReconciliationBeanList == null) ? null : this.repaymentReconciliationBeanList.iterator();
    }

    public void addToRepaymentReconciliationBeanList(RepaymentReconciliationBean elem) {
      if (this.repaymentReconciliationBeanList == null) {
        this.repaymentReconciliationBeanList = new ArrayList<RepaymentReconciliationBean>();
      }
      this.repaymentReconciliationBeanList.add(elem);
    }

    public List<RepaymentReconciliationBean> getRepaymentReconciliationBeanList() {
      return this.repaymentReconciliationBeanList;
    }

    public saveRepaymentReconciliation_args setRepaymentReconciliationBeanList(List<RepaymentReconciliationBean> repaymentReconciliationBeanList) {
      this.repaymentReconciliationBeanList = repaymentReconciliationBeanList;
      return this;
    }

    public void unsetRepaymentReconciliationBeanList() {
      this.repaymentReconciliationBeanList = null;
    }

    /** Returns true if field repaymentReconciliationBeanList is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentReconciliationBeanList() {
      return this.repaymentReconciliationBeanList != null;
    }

    public void setRepaymentReconciliationBeanListIsSet(boolean value) {
      if (!value) {
        this.repaymentReconciliationBeanList = null;
      }
    }

    public int getReceivablesVersion() {
      return this.receivablesVersion;
    }

    public saveRepaymentReconciliation_args setReceivablesVersion(int receivablesVersion) {
      this.receivablesVersion = receivablesVersion;
      setReceivablesVersionIsSet(true);
      return this;
    }

    public void unsetReceivablesVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLESVERSION_ISSET_ID);
    }

    /** Returns true if field receivablesVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetReceivablesVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLESVERSION_ISSET_ID);
    }

    public void setReceivablesVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLESVERSION_ISSET_ID, value);
    }

    public double getAvailableReconciliationAmount() {
      return this.availableReconciliationAmount;
    }

    public saveRepaymentReconciliation_args setAvailableReconciliationAmount(double availableReconciliationAmount) {
      this.availableReconciliationAmount = availableReconciliationAmount;
      setAvailableReconciliationAmountIsSet(true);
      return this;
    }

    public void unsetAvailableReconciliationAmount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID);
    }

    /** Returns true if field availableReconciliationAmount is set (has been assigned a value) and false otherwise */
    public boolean isSetAvailableReconciliationAmount() {
      return EncodingUtils.testBit(__isset_bitfield, __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID);
    }

    public void setAvailableReconciliationAmountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLERECONCILIATIONAMOUNT_ISSET_ID, value);
    }

    public int getReceivablesId() {
      return this.receivablesId;
    }

    public saveRepaymentReconciliation_args setReceivablesId(int receivablesId) {
      this.receivablesId = receivablesId;
      setReceivablesIdIsSet(true);
      return this;
    }

    public void unsetReceivablesId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID);
    }

    /** Returns true if field receivablesId is set (has been assigned a value) and false otherwise */
    public boolean isSetReceivablesId() {
      return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID);
    }

    public void setReceivablesIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLESID_ISSET_ID, value);
    }

    public int getLoanInterestRecord() {
      return this.loanInterestRecord;
    }

    public saveRepaymentReconciliation_args setLoanInterestRecord(int loanInterestRecord) {
      this.loanInterestRecord = loanInterestRecord;
      setLoanInterestRecordIsSet(true);
      return this;
    }

    public void unsetLoanInterestRecord() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
    }

    /** Returns true if field loanInterestRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanInterestRecord() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID);
    }

    public void setLoanInterestRecordIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINTERESTRECORD_ISSET_ID, value);
    }

    public int getLoanMgrRecord() {
      return this.loanMgrRecord;
    }

    public saveRepaymentReconciliation_args setLoanMgrRecord(int loanMgrRecord) {
      this.loanMgrRecord = loanMgrRecord;
      setLoanMgrRecordIsSet(true);
      return this;
    }

    public void unsetLoanMgrRecord() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
    }

    /** Returns true if field loanMgrRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanMgrRecord() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID);
    }

    public void setLoanMgrRecordIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMGRRECORD_ISSET_ID, value);
    }

    public int getLoanOtherFee() {
      return this.loanOtherFee;
    }

    public saveRepaymentReconciliation_args setLoanOtherFee(int loanOtherFee) {
      this.loanOtherFee = loanOtherFee;
      setLoanOtherFeeIsSet(true);
      return this;
    }

    public void unsetLoanOtherFee() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
    }

    /** Returns true if field loanOtherFee is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanOtherFee() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID);
    }

    public void setLoanOtherFeeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANOTHERFEE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_RECONCILIATION_BEAN_LIST:
        if (value == null) {
          unsetRepaymentReconciliationBeanList();
        } else {
          setRepaymentReconciliationBeanList((List<RepaymentReconciliationBean>)value);
        }
        break;

      case RECEIVABLES_VERSION:
        if (value == null) {
          unsetReceivablesVersion();
        } else {
          setReceivablesVersion((Integer)value);
        }
        break;

      case AVAILABLE_RECONCILIATION_AMOUNT:
        if (value == null) {
          unsetAvailableReconciliationAmount();
        } else {
          setAvailableReconciliationAmount((Double)value);
        }
        break;

      case RECEIVABLES_ID:
        if (value == null) {
          unsetReceivablesId();
        } else {
          setReceivablesId((Integer)value);
        }
        break;

      case LOAN_INTEREST_RECORD:
        if (value == null) {
          unsetLoanInterestRecord();
        } else {
          setLoanInterestRecord((Integer)value);
        }
        break;

      case LOAN_MGR_RECORD:
        if (value == null) {
          unsetLoanMgrRecord();
        } else {
          setLoanMgrRecord((Integer)value);
        }
        break;

      case LOAN_OTHER_FEE:
        if (value == null) {
          unsetLoanOtherFee();
        } else {
          setLoanOtherFee((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_RECONCILIATION_BEAN_LIST:
        return getRepaymentReconciliationBeanList();

      case RECEIVABLES_VERSION:
        return Integer.valueOf(getReceivablesVersion());

      case AVAILABLE_RECONCILIATION_AMOUNT:
        return Double.valueOf(getAvailableReconciliationAmount());

      case RECEIVABLES_ID:
        return Integer.valueOf(getReceivablesId());

      case LOAN_INTEREST_RECORD:
        return Integer.valueOf(getLoanInterestRecord());

      case LOAN_MGR_RECORD:
        return Integer.valueOf(getLoanMgrRecord());

      case LOAN_OTHER_FEE:
        return Integer.valueOf(getLoanOtherFee());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_RECONCILIATION_BEAN_LIST:
        return isSetRepaymentReconciliationBeanList();
      case RECEIVABLES_VERSION:
        return isSetReceivablesVersion();
      case AVAILABLE_RECONCILIATION_AMOUNT:
        return isSetAvailableReconciliationAmount();
      case RECEIVABLES_ID:
        return isSetReceivablesId();
      case LOAN_INTEREST_RECORD:
        return isSetLoanInterestRecord();
      case LOAN_MGR_RECORD:
        return isSetLoanMgrRecord();
      case LOAN_OTHER_FEE:
        return isSetLoanOtherFee();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRepaymentReconciliation_args)
        return this.equals((saveRepaymentReconciliation_args)that);
      return false;
    }

    public boolean equals(saveRepaymentReconciliation_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentReconciliationBeanList = true && this.isSetRepaymentReconciliationBeanList();
      boolean that_present_repaymentReconciliationBeanList = true && that.isSetRepaymentReconciliationBeanList();
      if (this_present_repaymentReconciliationBeanList || that_present_repaymentReconciliationBeanList) {
        if (!(this_present_repaymentReconciliationBeanList && that_present_repaymentReconciliationBeanList))
          return false;
        if (!this.repaymentReconciliationBeanList.equals(that.repaymentReconciliationBeanList))
          return false;
      }

      boolean this_present_receivablesVersion = true;
      boolean that_present_receivablesVersion = true;
      if (this_present_receivablesVersion || that_present_receivablesVersion) {
        if (!(this_present_receivablesVersion && that_present_receivablesVersion))
          return false;
        if (this.receivablesVersion != that.receivablesVersion)
          return false;
      }

      boolean this_present_availableReconciliationAmount = true;
      boolean that_present_availableReconciliationAmount = true;
      if (this_present_availableReconciliationAmount || that_present_availableReconciliationAmount) {
        if (!(this_present_availableReconciliationAmount && that_present_availableReconciliationAmount))
          return false;
        if (this.availableReconciliationAmount != that.availableReconciliationAmount)
          return false;
      }

      boolean this_present_receivablesId = true;
      boolean that_present_receivablesId = true;
      if (this_present_receivablesId || that_present_receivablesId) {
        if (!(this_present_receivablesId && that_present_receivablesId))
          return false;
        if (this.receivablesId != that.receivablesId)
          return false;
      }

      boolean this_present_loanInterestRecord = true;
      boolean that_present_loanInterestRecord = true;
      if (this_present_loanInterestRecord || that_present_loanInterestRecord) {
        if (!(this_present_loanInterestRecord && that_present_loanInterestRecord))
          return false;
        if (this.loanInterestRecord != that.loanInterestRecord)
          return false;
      }

      boolean this_present_loanMgrRecord = true;
      boolean that_present_loanMgrRecord = true;
      if (this_present_loanMgrRecord || that_present_loanMgrRecord) {
        if (!(this_present_loanMgrRecord && that_present_loanMgrRecord))
          return false;
        if (this.loanMgrRecord != that.loanMgrRecord)
          return false;
      }

      boolean this_present_loanOtherFee = true;
      boolean that_present_loanOtherFee = true;
      if (this_present_loanOtherFee || that_present_loanOtherFee) {
        if (!(this_present_loanOtherFee && that_present_loanOtherFee))
          return false;
        if (this.loanOtherFee != that.loanOtherFee)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentReconciliationBeanList = true && (isSetRepaymentReconciliationBeanList());
      list.add(present_repaymentReconciliationBeanList);
      if (present_repaymentReconciliationBeanList)
        list.add(repaymentReconciliationBeanList);

      boolean present_receivablesVersion = true;
      list.add(present_receivablesVersion);
      if (present_receivablesVersion)
        list.add(receivablesVersion);

      boolean present_availableReconciliationAmount = true;
      list.add(present_availableReconciliationAmount);
      if (present_availableReconciliationAmount)
        list.add(availableReconciliationAmount);

      boolean present_receivablesId = true;
      list.add(present_receivablesId);
      if (present_receivablesId)
        list.add(receivablesId);

      boolean present_loanInterestRecord = true;
      list.add(present_loanInterestRecord);
      if (present_loanInterestRecord)
        list.add(loanInterestRecord);

      boolean present_loanMgrRecord = true;
      list.add(present_loanMgrRecord);
      if (present_loanMgrRecord)
        list.add(loanMgrRecord);

      boolean present_loanOtherFee = true;
      list.add(present_loanOtherFee);
      if (present_loanOtherFee)
        list.add(loanOtherFee);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveRepaymentReconciliation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentReconciliationBeanList()).compareTo(other.isSetRepaymentReconciliationBeanList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentReconciliationBeanList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentReconciliationBeanList, other.repaymentReconciliationBeanList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceivablesVersion()).compareTo(other.isSetReceivablesVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceivablesVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablesVersion, other.receivablesVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAvailableReconciliationAmount()).compareTo(other.isSetAvailableReconciliationAmount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAvailableReconciliationAmount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableReconciliationAmount, other.availableReconciliationAmount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceivablesId()).compareTo(other.isSetReceivablesId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceivablesId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablesId, other.receivablesId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoanInterestRecord()).compareTo(other.isSetLoanInterestRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanInterestRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInterestRecord, other.loanInterestRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoanMgrRecord()).compareTo(other.isSetLoanMgrRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanMgrRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMgrRecord, other.loanMgrRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLoanOtherFee()).compareTo(other.isSetLoanOtherFee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanOtherFee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFee, other.loanOtherFee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRepaymentReconciliation_args(");
      boolean first = true;

      sb.append("repaymentReconciliationBeanList:");
      if (this.repaymentReconciliationBeanList == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentReconciliationBeanList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receivablesVersion:");
      sb.append(this.receivablesVersion);
      first = false;
      if (!first) sb.append(", ");
      sb.append("availableReconciliationAmount:");
      sb.append(this.availableReconciliationAmount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("receivablesId:");
      sb.append(this.receivablesId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanInterestRecord:");
      sb.append(this.loanInterestRecord);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanMgrRecord:");
      sb.append(this.loanMgrRecord);
      first = false;
      if (!first) sb.append(", ");
      sb.append("loanOtherFee:");
      sb.append(this.loanOtherFee);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRepaymentReconciliation_argsStandardSchemeFactory implements SchemeFactory {
      public saveRepaymentReconciliation_argsStandardScheme getScheme() {
        return new saveRepaymentReconciliation_argsStandardScheme();
      }
    }

    private static class saveRepaymentReconciliation_argsStandardScheme extends StandardScheme<saveRepaymentReconciliation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRepaymentReconciliation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_RECONCILIATION_BEAN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.repaymentReconciliationBeanList = new ArrayList<RepaymentReconciliationBean>(_list112.size);
                  RepaymentReconciliationBean _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new RepaymentReconciliationBean();
                    _elem113.read(iprot);
                    struct.repaymentReconciliationBeanList.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setRepaymentReconciliationBeanListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECEIVABLES_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.receivablesVersion = iprot.readI32();
                struct.setReceivablesVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AVAILABLE_RECONCILIATION_AMOUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.availableReconciliationAmount = iprot.readDouble();
                struct.setAvailableReconciliationAmountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RECEIVABLES_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.receivablesId = iprot.readI32();
                struct.setReceivablesIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LOAN_INTEREST_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanInterestRecord = iprot.readI32();
                struct.setLoanInterestRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LOAN_MGR_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanMgrRecord = iprot.readI32();
                struct.setLoanMgrRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LOAN_OTHER_FEE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanOtherFee = iprot.readI32();
                struct.setLoanOtherFeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRepaymentReconciliation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentReconciliationBeanList != null) {
          oprot.writeFieldBegin(REPAYMENT_RECONCILIATION_BEAN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.repaymentReconciliationBeanList.size()));
            for (RepaymentReconciliationBean _iter115 : struct.repaymentReconciliationBeanList)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECEIVABLES_VERSION_FIELD_DESC);
        oprot.writeI32(struct.receivablesVersion);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(AVAILABLE_RECONCILIATION_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.availableReconciliationAmount);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RECEIVABLES_ID_FIELD_DESC);
        oprot.writeI32(struct.receivablesId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAN_INTEREST_RECORD_FIELD_DESC);
        oprot.writeI32(struct.loanInterestRecord);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAN_MGR_RECORD_FIELD_DESC);
        oprot.writeI32(struct.loanMgrRecord);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LOAN_OTHER_FEE_FIELD_DESC);
        oprot.writeI32(struct.loanOtherFee);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRepaymentReconciliation_argsTupleSchemeFactory implements SchemeFactory {
      public saveRepaymentReconciliation_argsTupleScheme getScheme() {
        return new saveRepaymentReconciliation_argsTupleScheme();
      }
    }

    private static class saveRepaymentReconciliation_argsTupleScheme extends TupleScheme<saveRepaymentReconciliation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRepaymentReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentReconciliationBeanList()) {
          optionals.set(0);
        }
        if (struct.isSetReceivablesVersion()) {
          optionals.set(1);
        }
        if (struct.isSetAvailableReconciliationAmount()) {
          optionals.set(2);
        }
        if (struct.isSetReceivablesId()) {
          optionals.set(3);
        }
        if (struct.isSetLoanInterestRecord()) {
          optionals.set(4);
        }
        if (struct.isSetLoanMgrRecord()) {
          optionals.set(5);
        }
        if (struct.isSetLoanOtherFee()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetRepaymentReconciliationBeanList()) {
          {
            oprot.writeI32(struct.repaymentReconciliationBeanList.size());
            for (RepaymentReconciliationBean _iter116 : struct.repaymentReconciliationBeanList)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetReceivablesVersion()) {
          oprot.writeI32(struct.receivablesVersion);
        }
        if (struct.isSetAvailableReconciliationAmount()) {
          oprot.writeDouble(struct.availableReconciliationAmount);
        }
        if (struct.isSetReceivablesId()) {
          oprot.writeI32(struct.receivablesId);
        }
        if (struct.isSetLoanInterestRecord()) {
          oprot.writeI32(struct.loanInterestRecord);
        }
        if (struct.isSetLoanMgrRecord()) {
          oprot.writeI32(struct.loanMgrRecord);
        }
        if (struct.isSetLoanOtherFee()) {
          oprot.writeI32(struct.loanOtherFee);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRepaymentReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.repaymentReconciliationBeanList = new ArrayList<RepaymentReconciliationBean>(_list117.size);
            RepaymentReconciliationBean _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new RepaymentReconciliationBean();
              _elem118.read(iprot);
              struct.repaymentReconciliationBeanList.add(_elem118);
            }
          }
          struct.setRepaymentReconciliationBeanListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.receivablesVersion = iprot.readI32();
          struct.setReceivablesVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.availableReconciliationAmount = iprot.readDouble();
          struct.setAvailableReconciliationAmountIsSet(true);
        }
        if (incoming.get(3)) {
          struct.receivablesId = iprot.readI32();
          struct.setReceivablesIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.loanInterestRecord = iprot.readI32();
          struct.setLoanInterestRecordIsSet(true);
        }
        if (incoming.get(5)) {
          struct.loanMgrRecord = iprot.readI32();
          struct.setLoanMgrRecordIsSet(true);
        }
        if (incoming.get(6)) {
          struct.loanOtherFee = iprot.readI32();
          struct.setLoanOtherFeeIsSet(true);
        }
      }
    }

  }

  public static class saveRepaymentReconciliation_result implements org.apache.thrift.TBase<saveRepaymentReconciliation_result, saveRepaymentReconciliation_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveRepaymentReconciliation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRepaymentReconciliation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRepaymentReconciliation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRepaymentReconciliation_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRepaymentReconciliation_result.class, metaDataMap);
    }

    public saveRepaymentReconciliation_result() {
    }

    public saveRepaymentReconciliation_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRepaymentReconciliation_result(saveRepaymentReconciliation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public saveRepaymentReconciliation_result deepCopy() {
      return new saveRepaymentReconciliation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public saveRepaymentReconciliation_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRepaymentReconciliation_result)
        return this.equals((saveRepaymentReconciliation_result)that);
      return false;
    }

    public boolean equals(saveRepaymentReconciliation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveRepaymentReconciliation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRepaymentReconciliation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRepaymentReconciliation_resultStandardSchemeFactory implements SchemeFactory {
      public saveRepaymentReconciliation_resultStandardScheme getScheme() {
        return new saveRepaymentReconciliation_resultStandardScheme();
      }
    }

    private static class saveRepaymentReconciliation_resultStandardScheme extends StandardScheme<saveRepaymentReconciliation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRepaymentReconciliation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRepaymentReconciliation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRepaymentReconciliation_resultTupleSchemeFactory implements SchemeFactory {
      public saveRepaymentReconciliation_resultTupleScheme getScheme() {
        return new saveRepaymentReconciliation_resultTupleScheme();
      }
    }

    private static class saveRepaymentReconciliation_resultTupleScheme extends TupleScheme<saveRepaymentReconciliation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRepaymentReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRepaymentReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBatchRepaymentLoanItemList_args implements org.apache.thrift.TBase<getBatchRepaymentLoanItemList_args, getBatchRepaymentLoanItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBatchRepaymentLoanItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBatchRepaymentLoanItemList_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField RECEIVABLES_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablesDate", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField RECEIVABLES_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablesAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBatchRepaymentLoanItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBatchRepaymentLoanItemList_argsTupleSchemeFactory());
    }

    public int loanId; // required
    public String receivablesDate; // required
    public double receivablesAmt; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId"),
      RECEIVABLES_DATE((short)2, "receivablesDate"),
      RECEIVABLES_AMT((short)3, "receivablesAmt");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          case 2: // RECEIVABLES_DATE
            return RECEIVABLES_DATE;
          case 3: // RECEIVABLES_AMT
            return RECEIVABLES_AMT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private static final int __RECEIVABLESAMT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RECEIVABLES_DATE, new org.apache.thrift.meta_data.FieldMetaData("receivablesDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RECEIVABLES_AMT, new org.apache.thrift.meta_data.FieldMetaData("receivablesAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBatchRepaymentLoanItemList_args.class, metaDataMap);
    }

    public getBatchRepaymentLoanItemList_args() {
    }

    public getBatchRepaymentLoanItemList_args(
      int loanId,
      String receivablesDate,
      double receivablesAmt)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
      this.receivablesDate = receivablesDate;
      this.receivablesAmt = receivablesAmt;
      setReceivablesAmtIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBatchRepaymentLoanItemList_args(getBatchRepaymentLoanItemList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
      if (other.isSetReceivablesDate()) {
        this.receivablesDate = other.receivablesDate;
      }
      this.receivablesAmt = other.receivablesAmt;
    }

    public getBatchRepaymentLoanItemList_args deepCopy() {
      return new getBatchRepaymentLoanItemList_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
      this.receivablesDate = null;
      setReceivablesAmtIsSet(false);
      this.receivablesAmt = 0.0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getBatchRepaymentLoanItemList_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public String getReceivablesDate() {
      return this.receivablesDate;
    }

    public getBatchRepaymentLoanItemList_args setReceivablesDate(String receivablesDate) {
      this.receivablesDate = receivablesDate;
      return this;
    }

    public void unsetReceivablesDate() {
      this.receivablesDate = null;
    }

    /** Returns true if field receivablesDate is set (has been assigned a value) and false otherwise */
    public boolean isSetReceivablesDate() {
      return this.receivablesDate != null;
    }

    public void setReceivablesDateIsSet(boolean value) {
      if (!value) {
        this.receivablesDate = null;
      }
    }

    public double getReceivablesAmt() {
      return this.receivablesAmt;
    }

    public getBatchRepaymentLoanItemList_args setReceivablesAmt(double receivablesAmt) {
      this.receivablesAmt = receivablesAmt;
      setReceivablesAmtIsSet(true);
      return this;
    }

    public void unsetReceivablesAmt() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLESAMT_ISSET_ID);
    }

    /** Returns true if field receivablesAmt is set (has been assigned a value) and false otherwise */
    public boolean isSetReceivablesAmt() {
      return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLESAMT_ISSET_ID);
    }

    public void setReceivablesAmtIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLESAMT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      case RECEIVABLES_DATE:
        if (value == null) {
          unsetReceivablesDate();
        } else {
          setReceivablesDate((String)value);
        }
        break;

      case RECEIVABLES_AMT:
        if (value == null) {
          unsetReceivablesAmt();
        } else {
          setReceivablesAmt((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      case RECEIVABLES_DATE:
        return getReceivablesDate();

      case RECEIVABLES_AMT:
        return Double.valueOf(getReceivablesAmt());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      case RECEIVABLES_DATE:
        return isSetReceivablesDate();
      case RECEIVABLES_AMT:
        return isSetReceivablesAmt();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBatchRepaymentLoanItemList_args)
        return this.equals((getBatchRepaymentLoanItemList_args)that);
      return false;
    }

    public boolean equals(getBatchRepaymentLoanItemList_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      boolean this_present_receivablesDate = true && this.isSetReceivablesDate();
      boolean that_present_receivablesDate = true && that.isSetReceivablesDate();
      if (this_present_receivablesDate || that_present_receivablesDate) {
        if (!(this_present_receivablesDate && that_present_receivablesDate))
          return false;
        if (!this.receivablesDate.equals(that.receivablesDate))
          return false;
      }

      boolean this_present_receivablesAmt = true;
      boolean that_present_receivablesAmt = true;
      if (this_present_receivablesAmt || that_present_receivablesAmt) {
        if (!(this_present_receivablesAmt && that_present_receivablesAmt))
          return false;
        if (this.receivablesAmt != that.receivablesAmt)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      boolean present_receivablesDate = true && (isSetReceivablesDate());
      list.add(present_receivablesDate);
      if (present_receivablesDate)
        list.add(receivablesDate);

      boolean present_receivablesAmt = true;
      list.add(present_receivablesAmt);
      if (present_receivablesAmt)
        list.add(receivablesAmt);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBatchRepaymentLoanItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceivablesDate()).compareTo(other.isSetReceivablesDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceivablesDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablesDate, other.receivablesDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReceivablesAmt()).compareTo(other.isSetReceivablesAmt());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceivablesAmt()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablesAmt, other.receivablesAmt);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBatchRepaymentLoanItemList_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("receivablesDate:");
      if (this.receivablesDate == null) {
        sb.append("null");
      } else {
        sb.append(this.receivablesDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receivablesAmt:");
      sb.append(this.receivablesAmt);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBatchRepaymentLoanItemList_argsStandardSchemeFactory implements SchemeFactory {
      public getBatchRepaymentLoanItemList_argsStandardScheme getScheme() {
        return new getBatchRepaymentLoanItemList_argsStandardScheme();
      }
    }

    private static class getBatchRepaymentLoanItemList_argsStandardScheme extends StandardScheme<getBatchRepaymentLoanItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBatchRepaymentLoanItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RECEIVABLES_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.receivablesDate = iprot.readString();
                struct.setReceivablesDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // RECEIVABLES_AMT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.receivablesAmt = iprot.readDouble();
                struct.setReceivablesAmtIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBatchRepaymentLoanItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        if (struct.receivablesDate != null) {
          oprot.writeFieldBegin(RECEIVABLES_DATE_FIELD_DESC);
          oprot.writeString(struct.receivablesDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RECEIVABLES_AMT_FIELD_DESC);
        oprot.writeDouble(struct.receivablesAmt);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBatchRepaymentLoanItemList_argsTupleSchemeFactory implements SchemeFactory {
      public getBatchRepaymentLoanItemList_argsTupleScheme getScheme() {
        return new getBatchRepaymentLoanItemList_argsTupleScheme();
      }
    }

    private static class getBatchRepaymentLoanItemList_argsTupleScheme extends TupleScheme<getBatchRepaymentLoanItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBatchRepaymentLoanItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        if (struct.isSetReceivablesDate()) {
          optionals.set(1);
        }
        if (struct.isSetReceivablesAmt()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
        if (struct.isSetReceivablesDate()) {
          oprot.writeString(struct.receivablesDate);
        }
        if (struct.isSetReceivablesAmt()) {
          oprot.writeDouble(struct.receivablesAmt);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBatchRepaymentLoanItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.receivablesDate = iprot.readString();
          struct.setReceivablesDateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.receivablesAmt = iprot.readDouble();
          struct.setReceivablesAmtIsSet(true);
        }
      }
    }

  }

  public static class getBatchRepaymentLoanItemList_result implements org.apache.thrift.TBase<getBatchRepaymentLoanItemList_result, getBatchRepaymentLoanItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBatchRepaymentLoanItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBatchRepaymentLoanItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBatchRepaymentLoanItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBatchRepaymentLoanItemList_resultTupleSchemeFactory());
    }

    public List<BatchRepaymentItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchRepaymentItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBatchRepaymentLoanItemList_result.class, metaDataMap);
    }

    public getBatchRepaymentLoanItemList_result() {
    }

    public getBatchRepaymentLoanItemList_result(
      List<BatchRepaymentItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBatchRepaymentLoanItemList_result(getBatchRepaymentLoanItemList_result other) {
      if (other.isSetSuccess()) {
        List<BatchRepaymentItem> __this__success = new ArrayList<BatchRepaymentItem>(other.success.size());
        for (BatchRepaymentItem other_element : other.success) {
          __this__success.add(new BatchRepaymentItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBatchRepaymentLoanItemList_result deepCopy() {
      return new getBatchRepaymentLoanItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BatchRepaymentItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BatchRepaymentItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<BatchRepaymentItem>();
      }
      this.success.add(elem);
    }

    public List<BatchRepaymentItem> getSuccess() {
      return this.success;
    }

    public getBatchRepaymentLoanItemList_result setSuccess(List<BatchRepaymentItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BatchRepaymentItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBatchRepaymentLoanItemList_result)
        return this.equals((getBatchRepaymentLoanItemList_result)that);
      return false;
    }

    public boolean equals(getBatchRepaymentLoanItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBatchRepaymentLoanItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBatchRepaymentLoanItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBatchRepaymentLoanItemList_resultStandardSchemeFactory implements SchemeFactory {
      public getBatchRepaymentLoanItemList_resultStandardScheme getScheme() {
        return new getBatchRepaymentLoanItemList_resultStandardScheme();
      }
    }

    private static class getBatchRepaymentLoanItemList_resultStandardScheme extends StandardScheme<getBatchRepaymentLoanItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBatchRepaymentLoanItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<BatchRepaymentItem>(_list120.size);
                  BatchRepaymentItem _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new BatchRepaymentItem();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBatchRepaymentLoanItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BatchRepaymentItem _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBatchRepaymentLoanItemList_resultTupleSchemeFactory implements SchemeFactory {
      public getBatchRepaymentLoanItemList_resultTupleScheme getScheme() {
        return new getBatchRepaymentLoanItemList_resultTupleScheme();
      }
    }

    private static class getBatchRepaymentLoanItemList_resultTupleScheme extends TupleScheme<getBatchRepaymentLoanItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBatchRepaymentLoanItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BatchRepaymentItem _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBatchRepaymentLoanItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BatchRepaymentItem>(_list125.size);
            BatchRepaymentItem _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new BatchRepaymentItem();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveBatchRepayment_args implements org.apache.thrift.TBase<saveBatchRepayment_args, saveBatchRepayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveBatchRepayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBatchRepayment_args");

    private static final org.apache.thrift.protocol.TField BATCH_REPAYMENT_BEAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("batchRepaymentBeanList", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBatchRepayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBatchRepayment_argsTupleSchemeFactory());
    }

    public List<BatchRepaymentBean> batchRepaymentBeanList; // required
    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BATCH_REPAYMENT_BEAN_LIST((short)1, "batchRepaymentBeanList"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BATCH_REPAYMENT_BEAN_LIST
            return BATCH_REPAYMENT_BEAN_LIST;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BATCH_REPAYMENT_BEAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("batchRepaymentBeanList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchRepaymentBean.class))));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBatchRepayment_args.class, metaDataMap);
    }

    public saveBatchRepayment_args() {
    }

    public saveBatchRepayment_args(
      List<BatchRepaymentBean> batchRepaymentBeanList,
      int userId)
    {
      this();
      this.batchRepaymentBeanList = batchRepaymentBeanList;
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBatchRepayment_args(saveBatchRepayment_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBatchRepaymentBeanList()) {
        List<BatchRepaymentBean> __this__batchRepaymentBeanList = new ArrayList<BatchRepaymentBean>(other.batchRepaymentBeanList.size());
        for (BatchRepaymentBean other_element : other.batchRepaymentBeanList) {
          __this__batchRepaymentBeanList.add(new BatchRepaymentBean(other_element));
        }
        this.batchRepaymentBeanList = __this__batchRepaymentBeanList;
      }
      this.userId = other.userId;
    }

    public saveBatchRepayment_args deepCopy() {
      return new saveBatchRepayment_args(this);
    }

    @Override
    public void clear() {
      this.batchRepaymentBeanList = null;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getBatchRepaymentBeanListSize() {
      return (this.batchRepaymentBeanList == null) ? 0 : this.batchRepaymentBeanList.size();
    }

    public java.util.Iterator<BatchRepaymentBean> getBatchRepaymentBeanListIterator() {
      return (this.batchRepaymentBeanList == null) ? null : this.batchRepaymentBeanList.iterator();
    }

    public void addToBatchRepaymentBeanList(BatchRepaymentBean elem) {
      if (this.batchRepaymentBeanList == null) {
        this.batchRepaymentBeanList = new ArrayList<BatchRepaymentBean>();
      }
      this.batchRepaymentBeanList.add(elem);
    }

    public List<BatchRepaymentBean> getBatchRepaymentBeanList() {
      return this.batchRepaymentBeanList;
    }

    public saveBatchRepayment_args setBatchRepaymentBeanList(List<BatchRepaymentBean> batchRepaymentBeanList) {
      this.batchRepaymentBeanList = batchRepaymentBeanList;
      return this;
    }

    public void unsetBatchRepaymentBeanList() {
      this.batchRepaymentBeanList = null;
    }

    /** Returns true if field batchRepaymentBeanList is set (has been assigned a value) and false otherwise */
    public boolean isSetBatchRepaymentBeanList() {
      return this.batchRepaymentBeanList != null;
    }

    public void setBatchRepaymentBeanListIsSet(boolean value) {
      if (!value) {
        this.batchRepaymentBeanList = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public saveBatchRepayment_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BATCH_REPAYMENT_BEAN_LIST:
        if (value == null) {
          unsetBatchRepaymentBeanList();
        } else {
          setBatchRepaymentBeanList((List<BatchRepaymentBean>)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BATCH_REPAYMENT_BEAN_LIST:
        return getBatchRepaymentBeanList();

      case USER_ID:
        return Integer.valueOf(getUserId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BATCH_REPAYMENT_BEAN_LIST:
        return isSetBatchRepaymentBeanList();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBatchRepayment_args)
        return this.equals((saveBatchRepayment_args)that);
      return false;
    }

    public boolean equals(saveBatchRepayment_args that) {
      if (that == null)
        return false;

      boolean this_present_batchRepaymentBeanList = true && this.isSetBatchRepaymentBeanList();
      boolean that_present_batchRepaymentBeanList = true && that.isSetBatchRepaymentBeanList();
      if (this_present_batchRepaymentBeanList || that_present_batchRepaymentBeanList) {
        if (!(this_present_batchRepaymentBeanList && that_present_batchRepaymentBeanList))
          return false;
        if (!this.batchRepaymentBeanList.equals(that.batchRepaymentBeanList))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_batchRepaymentBeanList = true && (isSetBatchRepaymentBeanList());
      list.add(present_batchRepaymentBeanList);
      if (present_batchRepaymentBeanList)
        list.add(batchRepaymentBeanList);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBatchRepayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBatchRepaymentBeanList()).compareTo(other.isSetBatchRepaymentBeanList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBatchRepaymentBeanList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchRepaymentBeanList, other.batchRepaymentBeanList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBatchRepayment_args(");
      boolean first = true;

      sb.append("batchRepaymentBeanList:");
      if (this.batchRepaymentBeanList == null) {
        sb.append("null");
      } else {
        sb.append(this.batchRepaymentBeanList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBatchRepayment_argsStandardSchemeFactory implements SchemeFactory {
      public saveBatchRepayment_argsStandardScheme getScheme() {
        return new saveBatchRepayment_argsStandardScheme();
      }
    }

    private static class saveBatchRepayment_argsStandardScheme extends StandardScheme<saveBatchRepayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBatchRepayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BATCH_REPAYMENT_BEAN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.batchRepaymentBeanList = new ArrayList<BatchRepaymentBean>(_list128.size);
                  BatchRepaymentBean _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new BatchRepaymentBean();
                    _elem129.read(iprot);
                    struct.batchRepaymentBeanList.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setBatchRepaymentBeanListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBatchRepayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.batchRepaymentBeanList != null) {
          oprot.writeFieldBegin(BATCH_REPAYMENT_BEAN_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.batchRepaymentBeanList.size()));
            for (BatchRepaymentBean _iter131 : struct.batchRepaymentBeanList)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBatchRepayment_argsTupleSchemeFactory implements SchemeFactory {
      public saveBatchRepayment_argsTupleScheme getScheme() {
        return new saveBatchRepayment_argsTupleScheme();
      }
    }

    private static class saveBatchRepayment_argsTupleScheme extends TupleScheme<saveBatchRepayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBatchRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBatchRepaymentBeanList()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBatchRepaymentBeanList()) {
          {
            oprot.writeI32(struct.batchRepaymentBeanList.size());
            for (BatchRepaymentBean _iter132 : struct.batchRepaymentBeanList)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBatchRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.batchRepaymentBeanList = new ArrayList<BatchRepaymentBean>(_list133.size);
            BatchRepaymentBean _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new BatchRepaymentBean();
              _elem134.read(iprot);
              struct.batchRepaymentBeanList.add(_elem134);
            }
          }
          struct.setBatchRepaymentBeanListIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class saveBatchRepayment_result implements org.apache.thrift.TBase<saveBatchRepayment_result, saveBatchRepayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveBatchRepayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveBatchRepayment_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveBatchRepayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveBatchRepayment_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveBatchRepayment_result.class, metaDataMap);
    }

    public saveBatchRepayment_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveBatchRepayment_result(saveBatchRepayment_result other) {
    }

    public saveBatchRepayment_result deepCopy() {
      return new saveBatchRepayment_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveBatchRepayment_result)
        return this.equals((saveBatchRepayment_result)that);
      return false;
    }

    public boolean equals(saveBatchRepayment_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveBatchRepayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveBatchRepayment_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveBatchRepayment_resultStandardSchemeFactory implements SchemeFactory {
      public saveBatchRepayment_resultStandardScheme getScheme() {
        return new saveBatchRepayment_resultStandardScheme();
      }
    }

    private static class saveBatchRepayment_resultStandardScheme extends StandardScheme<saveBatchRepayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveBatchRepayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveBatchRepayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveBatchRepayment_resultTupleSchemeFactory implements SchemeFactory {
      public saveBatchRepayment_resultTupleScheme getScheme() {
        return new saveBatchRepayment_resultTupleScheme();
      }
    }

    private static class saveBatchRepayment_resultTupleScheme extends TupleScheme<saveBatchRepayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveBatchRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveBatchRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getLoanBaseDataBean_args implements org.apache.thrift.TBase<getLoanBaseDataBean_args, getLoanBaseDataBean_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanBaseDataBean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanBaseDataBean_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanBaseDataBean_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanBaseDataBean_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanBaseDataBean_args.class, metaDataMap);
    }

    public getLoanBaseDataBean_args() {
    }

    public getLoanBaseDataBean_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanBaseDataBean_args(getLoanBaseDataBean_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getLoanBaseDataBean_args deepCopy() {
      return new getLoanBaseDataBean_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getLoanBaseDataBean_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanBaseDataBean_args)
        return this.equals((getLoanBaseDataBean_args)that);
      return false;
    }

    public boolean equals(getLoanBaseDataBean_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanBaseDataBean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanBaseDataBean_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanBaseDataBean_argsStandardSchemeFactory implements SchemeFactory {
      public getLoanBaseDataBean_argsStandardScheme getScheme() {
        return new getLoanBaseDataBean_argsStandardScheme();
      }
    }

    private static class getLoanBaseDataBean_argsStandardScheme extends StandardScheme<getLoanBaseDataBean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanBaseDataBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanBaseDataBean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanBaseDataBean_argsTupleSchemeFactory implements SchemeFactory {
      public getLoanBaseDataBean_argsTupleScheme getScheme() {
        return new getLoanBaseDataBean_argsTupleScheme();
      }
    }

    private static class getLoanBaseDataBean_argsTupleScheme extends TupleScheme<getLoanBaseDataBean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanBaseDataBean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanBaseDataBean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getLoanBaseDataBean_result implements org.apache.thrift.TBase<getLoanBaseDataBean_result, getLoanBaseDataBean_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanBaseDataBean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanBaseDataBean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanBaseDataBean_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanBaseDataBean_resultTupleSchemeFactory());
    }

    public LoanBaseDataBean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanBaseDataBean.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanBaseDataBean_result.class, metaDataMap);
    }

    public getLoanBaseDataBean_result() {
    }

    public getLoanBaseDataBean_result(
      LoanBaseDataBean success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanBaseDataBean_result(getLoanBaseDataBean_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanBaseDataBean(other.success);
      }
    }

    public getLoanBaseDataBean_result deepCopy() {
      return new getLoanBaseDataBean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LoanBaseDataBean getSuccess() {
      return this.success;
    }

    public getLoanBaseDataBean_result setSuccess(LoanBaseDataBean success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanBaseDataBean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanBaseDataBean_result)
        return this.equals((getLoanBaseDataBean_result)that);
      return false;
    }

    public boolean equals(getLoanBaseDataBean_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanBaseDataBean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanBaseDataBean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanBaseDataBean_resultStandardSchemeFactory implements SchemeFactory {
      public getLoanBaseDataBean_resultStandardScheme getScheme() {
        return new getLoanBaseDataBean_resultStandardScheme();
      }
    }

    private static class getLoanBaseDataBean_resultStandardScheme extends StandardScheme<getLoanBaseDataBean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanBaseDataBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanBaseDataBean();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanBaseDataBean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanBaseDataBean_resultTupleSchemeFactory implements SchemeFactory {
      public getLoanBaseDataBean_resultTupleScheme getScheme() {
        return new getLoanBaseDataBean_resultTupleScheme();
      }
    }

    private static class getLoanBaseDataBean_resultTupleScheme extends TupleScheme<getLoanBaseDataBean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanBaseDataBean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanBaseDataBean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LoanBaseDataBean();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBadDebtDataBean_args implements org.apache.thrift.TBase<getBadDebtDataBean_args, getBadDebtDataBean_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBadDebtDataBean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBadDebtDataBean_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBadDebtDataBean_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBadDebtDataBean_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBadDebtDataBean_args.class, metaDataMap);
    }

    public getBadDebtDataBean_args() {
    }

    public getBadDebtDataBean_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBadDebtDataBean_args(getBadDebtDataBean_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getBadDebtDataBean_args deepCopy() {
      return new getBadDebtDataBean_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getBadDebtDataBean_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBadDebtDataBean_args)
        return this.equals((getBadDebtDataBean_args)that);
      return false;
    }

    public boolean equals(getBadDebtDataBean_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBadDebtDataBean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBadDebtDataBean_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBadDebtDataBean_argsStandardSchemeFactory implements SchemeFactory {
      public getBadDebtDataBean_argsStandardScheme getScheme() {
        return new getBadDebtDataBean_argsStandardScheme();
      }
    }

    private static class getBadDebtDataBean_argsStandardScheme extends StandardScheme<getBadDebtDataBean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBadDebtDataBean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBadDebtDataBean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBadDebtDataBean_argsTupleSchemeFactory implements SchemeFactory {
      public getBadDebtDataBean_argsTupleScheme getScheme() {
        return new getBadDebtDataBean_argsTupleScheme();
      }
    }

    private static class getBadDebtDataBean_argsTupleScheme extends TupleScheme<getBadDebtDataBean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBadDebtDataBean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBadDebtDataBean_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getBadDebtDataBean_result implements org.apache.thrift.TBase<getBadDebtDataBean_result, getBadDebtDataBean_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBadDebtDataBean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBadDebtDataBean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBadDebtDataBean_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBadDebtDataBean_resultTupleSchemeFactory());
    }

    public List<BadDebtDataBean> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BadDebtDataBean.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBadDebtDataBean_result.class, metaDataMap);
    }

    public getBadDebtDataBean_result() {
    }

    public getBadDebtDataBean_result(
      List<BadDebtDataBean> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBadDebtDataBean_result(getBadDebtDataBean_result other) {
      if (other.isSetSuccess()) {
        List<BadDebtDataBean> __this__success = new ArrayList<BadDebtDataBean>(other.success.size());
        for (BadDebtDataBean other_element : other.success) {
          __this__success.add(new BadDebtDataBean(other_element));
        }
        this.success = __this__success;
      }
    }

    public getBadDebtDataBean_result deepCopy() {
      return new getBadDebtDataBean_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<BadDebtDataBean> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(BadDebtDataBean elem) {
      if (this.success == null) {
        this.success = new ArrayList<BadDebtDataBean>();
      }
      this.success.add(elem);
    }

    public List<BadDebtDataBean> getSuccess() {
      return this.success;
    }

    public getBadDebtDataBean_result setSuccess(List<BadDebtDataBean> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<BadDebtDataBean>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBadDebtDataBean_result)
        return this.equals((getBadDebtDataBean_result)that);
      return false;
    }

    public boolean equals(getBadDebtDataBean_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBadDebtDataBean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBadDebtDataBean_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBadDebtDataBean_resultStandardSchemeFactory implements SchemeFactory {
      public getBadDebtDataBean_resultStandardScheme getScheme() {
        return new getBadDebtDataBean_resultStandardScheme();
      }
    }

    private static class getBadDebtDataBean_resultStandardScheme extends StandardScheme<getBadDebtDataBean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBadDebtDataBean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new ArrayList<BadDebtDataBean>(_list136.size);
                  BadDebtDataBean _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new BadDebtDataBean();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBadDebtDataBean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (BadDebtDataBean _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBadDebtDataBean_resultTupleSchemeFactory implements SchemeFactory {
      public getBadDebtDataBean_resultTupleScheme getScheme() {
        return new getBadDebtDataBean_resultTupleScheme();
      }
    }

    private static class getBadDebtDataBean_resultTupleScheme extends TupleScheme<getBadDebtDataBean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBadDebtDataBean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (BadDebtDataBean _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBadDebtDataBean_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<BadDebtDataBean>(_list141.size);
            BadDebtDataBean _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new BadDebtDataBean();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class activateTheLatestPlan_args implements org.apache.thrift.TBase<activateTheLatestPlan_args, activateTheLatestPlan_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateTheLatestPlan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateTheLatestPlan_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateTheLatestPlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateTheLatestPlan_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateTheLatestPlan_args.class, metaDataMap);
    }

    public activateTheLatestPlan_args() {
    }

    public activateTheLatestPlan_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateTheLatestPlan_args(activateTheLatestPlan_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public activateTheLatestPlan_args deepCopy() {
      return new activateTheLatestPlan_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public activateTheLatestPlan_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateTheLatestPlan_args)
        return this.equals((activateTheLatestPlan_args)that);
      return false;
    }

    public boolean equals(activateTheLatestPlan_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateTheLatestPlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateTheLatestPlan_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateTheLatestPlan_argsStandardSchemeFactory implements SchemeFactory {
      public activateTheLatestPlan_argsStandardScheme getScheme() {
        return new activateTheLatestPlan_argsStandardScheme();
      }
    }

    private static class activateTheLatestPlan_argsStandardScheme extends StandardScheme<activateTheLatestPlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateTheLatestPlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateTheLatestPlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateTheLatestPlan_argsTupleSchemeFactory implements SchemeFactory {
      public activateTheLatestPlan_argsTupleScheme getScheme() {
        return new activateTheLatestPlan_argsTupleScheme();
      }
    }

    private static class activateTheLatestPlan_argsTupleScheme extends TupleScheme<activateTheLatestPlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateTheLatestPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateTheLatestPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class activateTheLatestPlan_result implements org.apache.thrift.TBase<activateTheLatestPlan_result, activateTheLatestPlan_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateTheLatestPlan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateTheLatestPlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateTheLatestPlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateTheLatestPlan_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateTheLatestPlan_result.class, metaDataMap);
    }

    public activateTheLatestPlan_result() {
    }

    public activateTheLatestPlan_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateTheLatestPlan_result(activateTheLatestPlan_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public activateTheLatestPlan_result deepCopy() {
      return new activateTheLatestPlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public activateTheLatestPlan_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateTheLatestPlan_result)
        return this.equals((activateTheLatestPlan_result)that);
      return false;
    }

    public boolean equals(activateTheLatestPlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateTheLatestPlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateTheLatestPlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateTheLatestPlan_resultStandardSchemeFactory implements SchemeFactory {
      public activateTheLatestPlan_resultStandardScheme getScheme() {
        return new activateTheLatestPlan_resultStandardScheme();
      }
    }

    private static class activateTheLatestPlan_resultStandardScheme extends StandardScheme<activateTheLatestPlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateTheLatestPlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateTheLatestPlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateTheLatestPlan_resultTupleSchemeFactory implements SchemeFactory {
      public activateTheLatestPlan_resultTupleScheme getScheme() {
        return new activateTheLatestPlan_resultTupleScheme();
      }
    }

    private static class activateTheLatestPlan_resultTupleScheme extends TupleScheme<activateTheLatestPlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateTheLatestPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateTheLatestPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverdueByDate_args implements org.apache.thrift.TBase<getOverdueByDate_args, getOverdueByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueByDate_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField P_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("p_pid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField C_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cDate", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueByDate_argsTupleSchemeFactory());
    }

    public int loanId; // required
    public int p_pid; // required
    public String cDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId"),
      P_PID((short)2, "p_pid"),
      C_DATE((short)3, "cDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          case 2: // P_PID
            return P_PID;
          case 3: // C_DATE
            return C_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private static final int __P_PID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_PID, new org.apache.thrift.meta_data.FieldMetaData("p_pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.C_DATE, new org.apache.thrift.meta_data.FieldMetaData("cDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueByDate_args.class, metaDataMap);
    }

    public getOverdueByDate_args() {
    }

    public getOverdueByDate_args(
      int loanId,
      int p_pid,
      String cDate)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
      this.p_pid = p_pid;
      setP_pidIsSet(true);
      this.cDate = cDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueByDate_args(getOverdueByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
      this.p_pid = other.p_pid;
      if (other.isSetCDate()) {
        this.cDate = other.cDate;
      }
    }

    public getOverdueByDate_args deepCopy() {
      return new getOverdueByDate_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
      setP_pidIsSet(false);
      this.p_pid = 0;
      this.cDate = null;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getOverdueByDate_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public int getP_pid() {
      return this.p_pid;
    }

    public getOverdueByDate_args setP_pid(int p_pid) {
      this.p_pid = p_pid;
      setP_pidIsSet(true);
      return this;
    }

    public void unsetP_pid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P_PID_ISSET_ID);
    }

    /** Returns true if field p_pid is set (has been assigned a value) and false otherwise */
    public boolean isSetP_pid() {
      return EncodingUtils.testBit(__isset_bitfield, __P_PID_ISSET_ID);
    }

    public void setP_pidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P_PID_ISSET_ID, value);
    }

    public String getCDate() {
      return this.cDate;
    }

    public getOverdueByDate_args setCDate(String cDate) {
      this.cDate = cDate;
      return this;
    }

    public void unsetCDate() {
      this.cDate = null;
    }

    /** Returns true if field cDate is set (has been assigned a value) and false otherwise */
    public boolean isSetCDate() {
      return this.cDate != null;
    }

    public void setCDateIsSet(boolean value) {
      if (!value) {
        this.cDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      case P_PID:
        if (value == null) {
          unsetP_pid();
        } else {
          setP_pid((Integer)value);
        }
        break;

      case C_DATE:
        if (value == null) {
          unsetCDate();
        } else {
          setCDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      case P_PID:
        return Integer.valueOf(getP_pid());

      case C_DATE:
        return getCDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      case P_PID:
        return isSetP_pid();
      case C_DATE:
        return isSetCDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueByDate_args)
        return this.equals((getOverdueByDate_args)that);
      return false;
    }

    public boolean equals(getOverdueByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      boolean this_present_p_pid = true;
      boolean that_present_p_pid = true;
      if (this_present_p_pid || that_present_p_pid) {
        if (!(this_present_p_pid && that_present_p_pid))
          return false;
        if (this.p_pid != that.p_pid)
          return false;
      }

      boolean this_present_cDate = true && this.isSetCDate();
      boolean that_present_cDate = true && that.isSetCDate();
      if (this_present_cDate || that_present_cDate) {
        if (!(this_present_cDate && that_present_cDate))
          return false;
        if (!this.cDate.equals(that.cDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      boolean present_p_pid = true;
      list.add(present_p_pid);
      if (present_p_pid)
        list.add(p_pid);

      boolean present_cDate = true && (isSetCDate());
      list.add(present_cDate);
      if (present_cDate)
        list.add(cDate);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetP_pid()).compareTo(other.isSetP_pid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP_pid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p_pid, other.p_pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCDate()).compareTo(other.isSetCDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cDate, other.cDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueByDate_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("p_pid:");
      sb.append(this.p_pid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("cDate:");
      if (this.cDate == null) {
        sb.append("null");
      } else {
        sb.append(this.cDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getOverdueByDate_argsStandardScheme getScheme() {
        return new getOverdueByDate_argsStandardScheme();
      }
    }

    private static class getOverdueByDate_argsStandardScheme extends StandardScheme<getOverdueByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // P_PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.p_pid = iprot.readI32();
                struct.setP_pidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cDate = iprot.readString();
                struct.setCDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(P_PID_FIELD_DESC);
        oprot.writeI32(struct.p_pid);
        oprot.writeFieldEnd();
        if (struct.cDate != null) {
          oprot.writeFieldBegin(C_DATE_FIELD_DESC);
          oprot.writeString(struct.cDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getOverdueByDate_argsTupleScheme getScheme() {
        return new getOverdueByDate_argsTupleScheme();
      }
    }

    private static class getOverdueByDate_argsTupleScheme extends TupleScheme<getOverdueByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        if (struct.isSetP_pid()) {
          optionals.set(1);
        }
        if (struct.isSetCDate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
        if (struct.isSetP_pid()) {
          oprot.writeI32(struct.p_pid);
        }
        if (struct.isSetCDate()) {
          oprot.writeString(struct.cDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.p_pid = iprot.readI32();
          struct.setP_pidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cDate = iprot.readString();
          struct.setCDateIsSet(true);
        }
      }
    }

  }

  public static class getOverdueByDate_result implements org.apache.thrift.TBase<getOverdueByDate_result, getOverdueByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueByDate_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueByDate_result.class, metaDataMap);
    }

    public getOverdueByDate_result() {
    }

    public getOverdueByDate_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueByDate_result(getOverdueByDate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getOverdueByDate_result deepCopy() {
      return new getOverdueByDate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getOverdueByDate_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueByDate_result)
        return this.equals((getOverdueByDate_result)that);
      return false;
    }

    public boolean equals(getOverdueByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueByDate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getOverdueByDate_resultStandardScheme getScheme() {
        return new getOverdueByDate_resultStandardScheme();
      }
    }

    private static class getOverdueByDate_resultStandardScheme extends StandardScheme<getOverdueByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getOverdueByDate_resultTupleScheme getScheme() {
        return new getOverdueByDate_resultTupleScheme();
      }
    }

    private static class getOverdueByDate_resultTupleScheme extends TupleScheme<getOverdueByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCustArrearsbyProjectView_args implements org.apache.thrift.TBase<getCustArrearsbyProjectView_args, getCustArrearsbyProjectView_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCustArrearsbyProjectView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustArrearsbyProjectView_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustArrearsbyProjectView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustArrearsbyProjectView_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustArrearsbyProjectView_args.class, metaDataMap);
    }

    public getCustArrearsbyProjectView_args() {
    }

    public getCustArrearsbyProjectView_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustArrearsbyProjectView_args(getCustArrearsbyProjectView_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getCustArrearsbyProjectView_args deepCopy() {
      return new getCustArrearsbyProjectView_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getCustArrearsbyProjectView_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustArrearsbyProjectView_args)
        return this.equals((getCustArrearsbyProjectView_args)that);
      return false;
    }

    public boolean equals(getCustArrearsbyProjectView_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustArrearsbyProjectView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustArrearsbyProjectView_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustArrearsbyProjectView_argsStandardSchemeFactory implements SchemeFactory {
      public getCustArrearsbyProjectView_argsStandardScheme getScheme() {
        return new getCustArrearsbyProjectView_argsStandardScheme();
      }
    }

    private static class getCustArrearsbyProjectView_argsStandardScheme extends StandardScheme<getCustArrearsbyProjectView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustArrearsbyProjectView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustArrearsbyProjectView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustArrearsbyProjectView_argsTupleSchemeFactory implements SchemeFactory {
      public getCustArrearsbyProjectView_argsTupleScheme getScheme() {
        return new getCustArrearsbyProjectView_argsTupleScheme();
      }
    }

    private static class getCustArrearsbyProjectView_argsTupleScheme extends TupleScheme<getCustArrearsbyProjectView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustArrearsbyProjectView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustArrearsbyProjectView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getCustArrearsbyProjectView_result implements org.apache.thrift.TBase<getCustArrearsbyProjectView_result, getCustArrearsbyProjectView_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCustArrearsbyProjectView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCustArrearsbyProjectView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCustArrearsbyProjectView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCustArrearsbyProjectView_resultTupleSchemeFactory());
    }

    public CustArrearsView success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CustArrearsView.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCustArrearsbyProjectView_result.class, metaDataMap);
    }

    public getCustArrearsbyProjectView_result() {
    }

    public getCustArrearsbyProjectView_result(
      CustArrearsView success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCustArrearsbyProjectView_result(getCustArrearsbyProjectView_result other) {
      if (other.isSetSuccess()) {
        this.success = new CustArrearsView(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public getCustArrearsbyProjectView_result deepCopy() {
      return new getCustArrearsbyProjectView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public CustArrearsView getSuccess() {
      return this.success;
    }

    public getCustArrearsbyProjectView_result setSuccess(CustArrearsView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public getCustArrearsbyProjectView_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CustArrearsView)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCustArrearsbyProjectView_result)
        return this.equals((getCustArrearsbyProjectView_result)that);
      return false;
    }

    public boolean equals(getCustArrearsbyProjectView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCustArrearsbyProjectView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCustArrearsbyProjectView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCustArrearsbyProjectView_resultStandardSchemeFactory implements SchemeFactory {
      public getCustArrearsbyProjectView_resultStandardScheme getScheme() {
        return new getCustArrearsbyProjectView_resultStandardScheme();
      }
    }

    private static class getCustArrearsbyProjectView_resultStandardScheme extends StandardScheme<getCustArrearsbyProjectView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCustArrearsbyProjectView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CustArrearsView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCustArrearsbyProjectView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCustArrearsbyProjectView_resultTupleSchemeFactory implements SchemeFactory {
      public getCustArrearsbyProjectView_resultTupleScheme getScheme() {
        return new getCustArrearsbyProjectView_resultTupleScheme();
      }
    }

    private static class getCustArrearsbyProjectView_resultTupleScheme extends TupleScheme<getCustArrearsbyProjectView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCustArrearsbyProjectView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCustArrearsbyProjectView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CustArrearsView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class addFinanceMonthlyReport_args implements org.apache.thrift.TBase<addFinanceMonthlyReport_args, addFinanceMonthlyReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceMonthlyReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceMonthlyReport_args");

    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceMonthlyReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceMonthlyReport_argsTupleSchemeFactory());
    }

    public String startDate; // required
    public String endDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_DATE((short)1, "startDate"),
      END_DATE((short)2, "endDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_DATE
            return START_DATE;
          case 2: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceMonthlyReport_args.class, metaDataMap);
    }

    public addFinanceMonthlyReport_args() {
    }

    public addFinanceMonthlyReport_args(
      String startDate,
      String endDate)
    {
      this();
      this.startDate = startDate;
      this.endDate = endDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceMonthlyReport_args(addFinanceMonthlyReport_args other) {
      if (other.isSetStartDate()) {
        this.startDate = other.startDate;
      }
      if (other.isSetEndDate()) {
        this.endDate = other.endDate;
      }
    }

    public addFinanceMonthlyReport_args deepCopy() {
      return new addFinanceMonthlyReport_args(this);
    }

    @Override
    public void clear() {
      this.startDate = null;
      this.endDate = null;
    }

    public String getStartDate() {
      return this.startDate;
    }

    public addFinanceMonthlyReport_args setStartDate(String startDate) {
      this.startDate = startDate;
      return this;
    }

    public void unsetStartDate() {
      this.startDate = null;
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return this.startDate != null;
    }

    public void setStartDateIsSet(boolean value) {
      if (!value) {
        this.startDate = null;
      }
    }

    public String getEndDate() {
      return this.endDate;
    }

    public addFinanceMonthlyReport_args setEndDate(String endDate) {
      this.endDate = endDate;
      return this;
    }

    public void unsetEndDate() {
      this.endDate = null;
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return this.endDate != null;
    }

    public void setEndDateIsSet(boolean value) {
      if (!value) {
        this.endDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceMonthlyReport_args)
        return this.equals((addFinanceMonthlyReport_args)that);
      return false;
    }

    public boolean equals(addFinanceMonthlyReport_args that) {
      if (that == null)
        return false;

      boolean this_present_startDate = true && this.isSetStartDate();
      boolean that_present_startDate = true && that.isSetStartDate();
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (!this.startDate.equals(that.startDate))
          return false;
      }

      boolean this_present_endDate = true && this.isSetEndDate();
      boolean that_present_endDate = true && that.isSetEndDate();
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (!this.endDate.equals(that.endDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startDate = true && (isSetStartDate());
      list.add(present_startDate);
      if (present_startDate)
        list.add(startDate);

      boolean present_endDate = true && (isSetEndDate());
      list.add(present_endDate);
      if (present_endDate)
        list.add(endDate);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceMonthlyReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceMonthlyReport_args(");
      boolean first = true;

      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceMonthlyReport_argsStandardSchemeFactory implements SchemeFactory {
      public addFinanceMonthlyReport_argsStandardScheme getScheme() {
        return new addFinanceMonthlyReport_argsStandardScheme();
      }
    }

    private static class addFinanceMonthlyReport_argsStandardScheme extends StandardScheme<addFinanceMonthlyReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceMonthlyReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startDate = iprot.readString();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endDate = iprot.readString();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceMonthlyReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startDate != null) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
        if (struct.endDate != null) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceMonthlyReport_argsTupleSchemeFactory implements SchemeFactory {
      public addFinanceMonthlyReport_argsTupleScheme getScheme() {
        return new addFinanceMonthlyReport_argsTupleScheme();
      }
    }

    private static class addFinanceMonthlyReport_argsTupleScheme extends TupleScheme<addFinanceMonthlyReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceMonthlyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartDate()) {
          optionals.set(0);
        }
        if (struct.isSetEndDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStartDate()) {
          oprot.writeString(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeString(struct.endDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceMonthlyReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.startDate = iprot.readString();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endDate = iprot.readString();
          struct.setEndDateIsSet(true);
        }
      }
    }

  }

  public static class addFinanceMonthlyReport_result implements org.apache.thrift.TBase<addFinanceMonthlyReport_result, addFinanceMonthlyReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFinanceMonthlyReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFinanceMonthlyReport_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFinanceMonthlyReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFinanceMonthlyReport_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFinanceMonthlyReport_result.class, metaDataMap);
    }

    public addFinanceMonthlyReport_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFinanceMonthlyReport_result(addFinanceMonthlyReport_result other) {
    }

    public addFinanceMonthlyReport_result deepCopy() {
      return new addFinanceMonthlyReport_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFinanceMonthlyReport_result)
        return this.equals((addFinanceMonthlyReport_result)that);
      return false;
    }

    public boolean equals(addFinanceMonthlyReport_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addFinanceMonthlyReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFinanceMonthlyReport_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFinanceMonthlyReport_resultStandardSchemeFactory implements SchemeFactory {
      public addFinanceMonthlyReport_resultStandardScheme getScheme() {
        return new addFinanceMonthlyReport_resultStandardScheme();
      }
    }

    private static class addFinanceMonthlyReport_resultStandardScheme extends StandardScheme<addFinanceMonthlyReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFinanceMonthlyReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFinanceMonthlyReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFinanceMonthlyReport_resultTupleSchemeFactory implements SchemeFactory {
      public addFinanceMonthlyReport_resultTupleScheme getScheme() {
        return new addFinanceMonthlyReport_resultTupleScheme();
      }
    }

    private static class addFinanceMonthlyReport_resultTupleScheme extends TupleScheme<addFinanceMonthlyReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFinanceMonthlyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFinanceMonthlyReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listMonthlyReportRecords_args implements org.apache.thrift.TBase<listMonthlyReportRecords_args, listMonthlyReportRecords_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMonthlyReportRecords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMonthlyReportRecords_args");

    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMonthlyReportRecords_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMonthlyReportRecords_argsTupleSchemeFactory());
    }

    public MonthlyReportRecordCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITION((short)1, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyReportRecordCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMonthlyReportRecords_args.class, metaDataMap);
    }

    public listMonthlyReportRecords_args() {
    }

    public listMonthlyReportRecords_args(
      MonthlyReportRecordCondition condition)
    {
      this();
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMonthlyReportRecords_args(listMonthlyReportRecords_args other) {
      if (other.isSetCondition()) {
        this.condition = new MonthlyReportRecordCondition(other.condition);
      }
    }

    public listMonthlyReportRecords_args deepCopy() {
      return new listMonthlyReportRecords_args(this);
    }

    @Override
    public void clear() {
      this.condition = null;
    }

    public MonthlyReportRecordCondition getCondition() {
      return this.condition;
    }

    public listMonthlyReportRecords_args setCondition(MonthlyReportRecordCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MonthlyReportRecordCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMonthlyReportRecords_args)
        return this.equals((listMonthlyReportRecords_args)that);
      return false;
    }

    public boolean equals(listMonthlyReportRecords_args that) {
      if (that == null)
        return false;

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_condition = true && (isSetCondition());
      list.add(present_condition);
      if (present_condition)
        list.add(condition);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMonthlyReportRecords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMonthlyReportRecords_args(");
      boolean first = true;

      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMonthlyReportRecords_argsStandardSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecords_argsStandardScheme getScheme() {
        return new listMonthlyReportRecords_argsStandardScheme();
      }
    }

    private static class listMonthlyReportRecords_argsStandardScheme extends StandardScheme<listMonthlyReportRecords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMonthlyReportRecords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MonthlyReportRecordCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMonthlyReportRecords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMonthlyReportRecords_argsTupleSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecords_argsTupleScheme getScheme() {
        return new listMonthlyReportRecords_argsTupleScheme();
      }
    }

    private static class listMonthlyReportRecords_argsTupleScheme extends TupleScheme<listMonthlyReportRecords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecords_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.condition = new MonthlyReportRecordCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class listMonthlyReportRecords_result implements org.apache.thrift.TBase<listMonthlyReportRecords_result, listMonthlyReportRecords_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMonthlyReportRecords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMonthlyReportRecords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMonthlyReportRecords_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMonthlyReportRecords_resultTupleSchemeFactory());
    }

    public List<MonthlyReportRecord> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyReportRecord.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMonthlyReportRecords_result.class, metaDataMap);
    }

    public listMonthlyReportRecords_result() {
    }

    public listMonthlyReportRecords_result(
      List<MonthlyReportRecord> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMonthlyReportRecords_result(listMonthlyReportRecords_result other) {
      if (other.isSetSuccess()) {
        List<MonthlyReportRecord> __this__success = new ArrayList<MonthlyReportRecord>(other.success.size());
        for (MonthlyReportRecord other_element : other.success) {
          __this__success.add(new MonthlyReportRecord(other_element));
        }
        this.success = __this__success;
      }
    }

    public listMonthlyReportRecords_result deepCopy() {
      return new listMonthlyReportRecords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MonthlyReportRecord> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MonthlyReportRecord elem) {
      if (this.success == null) {
        this.success = new ArrayList<MonthlyReportRecord>();
      }
      this.success.add(elem);
    }

    public List<MonthlyReportRecord> getSuccess() {
      return this.success;
    }

    public listMonthlyReportRecords_result setSuccess(List<MonthlyReportRecord> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MonthlyReportRecord>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMonthlyReportRecords_result)
        return this.equals((listMonthlyReportRecords_result)that);
      return false;
    }

    public boolean equals(listMonthlyReportRecords_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMonthlyReportRecords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMonthlyReportRecords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMonthlyReportRecords_resultStandardSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecords_resultStandardScheme getScheme() {
        return new listMonthlyReportRecords_resultStandardScheme();
      }
    }

    private static class listMonthlyReportRecords_resultStandardScheme extends StandardScheme<listMonthlyReportRecords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMonthlyReportRecords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new ArrayList<MonthlyReportRecord>(_list144.size);
                  MonthlyReportRecord _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new MonthlyReportRecord();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMonthlyReportRecords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MonthlyReportRecord _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMonthlyReportRecords_resultTupleSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecords_resultTupleScheme getScheme() {
        return new listMonthlyReportRecords_resultTupleScheme();
      }
    }

    private static class listMonthlyReportRecords_resultTupleScheme extends TupleScheme<listMonthlyReportRecords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MonthlyReportRecord _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecords_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MonthlyReportRecord>(_list149.size);
            MonthlyReportRecord _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new MonthlyReportRecord();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class listMonthlyReportRecordsTotal_args implements org.apache.thrift.TBase<listMonthlyReportRecordsTotal_args, listMonthlyReportRecordsTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<listMonthlyReportRecordsTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMonthlyReportRecordsTotal_args");

    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMonthlyReportRecordsTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMonthlyReportRecordsTotal_argsTupleSchemeFactory());
    }

    public MonthlyReportRecordCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITION((short)1, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyReportRecordCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMonthlyReportRecordsTotal_args.class, metaDataMap);
    }

    public listMonthlyReportRecordsTotal_args() {
    }

    public listMonthlyReportRecordsTotal_args(
      MonthlyReportRecordCondition condition)
    {
      this();
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMonthlyReportRecordsTotal_args(listMonthlyReportRecordsTotal_args other) {
      if (other.isSetCondition()) {
        this.condition = new MonthlyReportRecordCondition(other.condition);
      }
    }

    public listMonthlyReportRecordsTotal_args deepCopy() {
      return new listMonthlyReportRecordsTotal_args(this);
    }

    @Override
    public void clear() {
      this.condition = null;
    }

    public MonthlyReportRecordCondition getCondition() {
      return this.condition;
    }

    public listMonthlyReportRecordsTotal_args setCondition(MonthlyReportRecordCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MonthlyReportRecordCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMonthlyReportRecordsTotal_args)
        return this.equals((listMonthlyReportRecordsTotal_args)that);
      return false;
    }

    public boolean equals(listMonthlyReportRecordsTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_condition = true && (isSetCondition());
      list.add(present_condition);
      if (present_condition)
        list.add(condition);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMonthlyReportRecordsTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMonthlyReportRecordsTotal_args(");
      boolean first = true;

      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMonthlyReportRecordsTotal_argsStandardSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecordsTotal_argsStandardScheme getScheme() {
        return new listMonthlyReportRecordsTotal_argsStandardScheme();
      }
    }

    private static class listMonthlyReportRecordsTotal_argsStandardScheme extends StandardScheme<listMonthlyReportRecordsTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMonthlyReportRecordsTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MonthlyReportRecordCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMonthlyReportRecordsTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMonthlyReportRecordsTotal_argsTupleSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecordsTotal_argsTupleScheme getScheme() {
        return new listMonthlyReportRecordsTotal_argsTupleScheme();
      }
    }

    private static class listMonthlyReportRecordsTotal_argsTupleScheme extends TupleScheme<listMonthlyReportRecordsTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecordsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecordsTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.condition = new MonthlyReportRecordCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class listMonthlyReportRecordsTotal_result implements org.apache.thrift.TBase<listMonthlyReportRecordsTotal_result, listMonthlyReportRecordsTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<listMonthlyReportRecordsTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listMonthlyReportRecordsTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listMonthlyReportRecordsTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listMonthlyReportRecordsTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listMonthlyReportRecordsTotal_result.class, metaDataMap);
    }

    public listMonthlyReportRecordsTotal_result() {
    }

    public listMonthlyReportRecordsTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listMonthlyReportRecordsTotal_result(listMonthlyReportRecordsTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public listMonthlyReportRecordsTotal_result deepCopy() {
      return new listMonthlyReportRecordsTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public listMonthlyReportRecordsTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listMonthlyReportRecordsTotal_result)
        return this.equals((listMonthlyReportRecordsTotal_result)that);
      return false;
    }

    public boolean equals(listMonthlyReportRecordsTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(listMonthlyReportRecordsTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listMonthlyReportRecordsTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listMonthlyReportRecordsTotal_resultStandardSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecordsTotal_resultStandardScheme getScheme() {
        return new listMonthlyReportRecordsTotal_resultStandardScheme();
      }
    }

    private static class listMonthlyReportRecordsTotal_resultStandardScheme extends StandardScheme<listMonthlyReportRecordsTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listMonthlyReportRecordsTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listMonthlyReportRecordsTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listMonthlyReportRecordsTotal_resultTupleSchemeFactory implements SchemeFactory {
      public listMonthlyReportRecordsTotal_resultTupleScheme getScheme() {
        return new listMonthlyReportRecordsTotal_resultTupleScheme();
      }
    }

    private static class listMonthlyReportRecordsTotal_resultTupleScheme extends TupleScheme<listMonthlyReportRecordsTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecordsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listMonthlyReportRecordsTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateStatus_args implements org.apache.thrift.TBase<updateStatus_args, updateStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_args");

    private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatus_argsTupleSchemeFactory());
    }

    public MonthlyReportRecordCondition condition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONDITION((short)1, "condition");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONDITION
            return CONDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyReportRecordCondition.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_args.class, metaDataMap);
    }

    public updateStatus_args() {
    }

    public updateStatus_args(
      MonthlyReportRecordCondition condition)
    {
      this();
      this.condition = condition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatus_args(updateStatus_args other) {
      if (other.isSetCondition()) {
        this.condition = new MonthlyReportRecordCondition(other.condition);
      }
    }

    public updateStatus_args deepCopy() {
      return new updateStatus_args(this);
    }

    @Override
    public void clear() {
      this.condition = null;
    }

    public MonthlyReportRecordCondition getCondition() {
      return this.condition;
    }

    public updateStatus_args setCondition(MonthlyReportRecordCondition condition) {
      this.condition = condition;
      return this;
    }

    public void unsetCondition() {
      this.condition = null;
    }

    /** Returns true if field condition is set (has been assigned a value) and false otherwise */
    public boolean isSetCondition() {
      return this.condition != null;
    }

    public void setConditionIsSet(boolean value) {
      if (!value) {
        this.condition = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONDITION:
        if (value == null) {
          unsetCondition();
        } else {
          setCondition((MonthlyReportRecordCondition)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITION:
        return getCondition();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONDITION:
        return isSetCondition();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatus_args)
        return this.equals((updateStatus_args)that);
      return false;
    }

    public boolean equals(updateStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_condition = true && this.isSetCondition();
      boolean that_present_condition = true && that.isSetCondition();
      if (this_present_condition || that_present_condition) {
        if (!(this_present_condition && that_present_condition))
          return false;
        if (!this.condition.equals(that.condition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_condition = true && (isSetCondition());
      list.add(present_condition);
      if (present_condition)
        list.add(condition);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCondition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatus_args(");
      boolean first = true;

      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (condition != null) {
        condition.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateStatus_argsStandardScheme getScheme() {
        return new updateStatus_argsStandardScheme();
      }
    }

    private static class updateStatus_argsStandardScheme extends StandardScheme<updateStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.condition = new MonthlyReportRecordCondition();
                struct.condition.read(iprot);
                struct.setConditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.condition != null) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          struct.condition.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateStatus_argsTupleScheme getScheme() {
        return new updateStatus_argsTupleScheme();
      }
    }

    private static class updateStatus_argsTupleScheme extends TupleScheme<updateStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCondition()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCondition()) {
          struct.condition.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.condition = new MonthlyReportRecordCondition();
          struct.condition.read(iprot);
          struct.setConditionIsSet(true);
        }
      }
    }

  }

  public static class updateStatus_result implements org.apache.thrift.TBase<updateStatus_result, updateStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateStatus_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatus_result.class, metaDataMap);
    }

    public updateStatus_result() {
    }

    public updateStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatus_result(updateStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStatus_result deepCopy() {
      return new updateStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateStatus_result)
        return this.equals((updateStatus_result)that);
      return false;
    }

    public boolean equals(updateStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateStatus_resultStandardScheme getScheme() {
        return new updateStatus_resultStandardScheme();
      }
    }

    private static class updateStatus_resultStandardScheme extends StandardScheme<updateStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateStatus_resultTupleScheme getScheme() {
        return new updateStatus_resultTupleScheme();
      }
    }

    private static class updateStatus_resultTupleScheme extends TupleScheme<updateStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteMonthlyReportRecordsById_args implements org.apache.thrift.TBase<deleteMonthlyReportRecordsById_args, deleteMonthlyReportRecordsById_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMonthlyReportRecordsById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMonthlyReportRecordsById_args");

    private static final org.apache.thrift.protocol.TField IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ids", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMonthlyReportRecordsById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMonthlyReportRecordsById_argsTupleSchemeFactory());
    }

    public String ids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IDS((short)1, "ids");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IDS
            return IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IDS, new org.apache.thrift.meta_data.FieldMetaData("ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMonthlyReportRecordsById_args.class, metaDataMap);
    }

    public deleteMonthlyReportRecordsById_args() {
    }

    public deleteMonthlyReportRecordsById_args(
      String ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMonthlyReportRecordsById_args(deleteMonthlyReportRecordsById_args other) {
      if (other.isSetIds()) {
        this.ids = other.ids;
      }
    }

    public deleteMonthlyReportRecordsById_args deepCopy() {
      return new deleteMonthlyReportRecordsById_args(this);
    }

    @Override
    public void clear() {
      this.ids = null;
    }

    public String getIds() {
      return this.ids;
    }

    public deleteMonthlyReportRecordsById_args setIds(String ids) {
      this.ids = ids;
      return this;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IDS:
        if (value == null) {
          unsetIds();
        } else {
          setIds((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IDS:
        return getIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IDS:
        return isSetIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMonthlyReportRecordsById_args)
        return this.equals((deleteMonthlyReportRecordsById_args)that);
      return false;
    }

    public boolean equals(deleteMonthlyReportRecordsById_args that) {
      if (that == null)
        return false;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ids = true && (isSetIds());
      list.add(present_ids);
      if (present_ids)
        list.add(ids);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMonthlyReportRecordsById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIds()).compareTo(other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMonthlyReportRecordsById_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMonthlyReportRecordsById_argsStandardSchemeFactory implements SchemeFactory {
      public deleteMonthlyReportRecordsById_argsStandardScheme getScheme() {
        return new deleteMonthlyReportRecordsById_argsStandardScheme();
      }
    }

    private static class deleteMonthlyReportRecordsById_argsStandardScheme extends StandardScheme<deleteMonthlyReportRecordsById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMonthlyReportRecordsById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ids = iprot.readString();
                struct.setIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMonthlyReportRecordsById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ids != null) {
          oprot.writeFieldBegin(IDS_FIELD_DESC);
          oprot.writeString(struct.ids);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMonthlyReportRecordsById_argsTupleSchemeFactory implements SchemeFactory {
      public deleteMonthlyReportRecordsById_argsTupleScheme getScheme() {
        return new deleteMonthlyReportRecordsById_argsTupleScheme();
      }
    }

    private static class deleteMonthlyReportRecordsById_argsTupleScheme extends TupleScheme<deleteMonthlyReportRecordsById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMonthlyReportRecordsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIds()) {
          oprot.writeString(struct.ids);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMonthlyReportRecordsById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ids = iprot.readString();
          struct.setIdsIsSet(true);
        }
      }
    }

  }

  public static class deleteMonthlyReportRecordsById_result implements org.apache.thrift.TBase<deleteMonthlyReportRecordsById_result, deleteMonthlyReportRecordsById_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteMonthlyReportRecordsById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteMonthlyReportRecordsById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteMonthlyReportRecordsById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteMonthlyReportRecordsById_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteMonthlyReportRecordsById_result.class, metaDataMap);
    }

    public deleteMonthlyReportRecordsById_result() {
    }

    public deleteMonthlyReportRecordsById_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteMonthlyReportRecordsById_result(deleteMonthlyReportRecordsById_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteMonthlyReportRecordsById_result deepCopy() {
      return new deleteMonthlyReportRecordsById_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public deleteMonthlyReportRecordsById_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteMonthlyReportRecordsById_result)
        return this.equals((deleteMonthlyReportRecordsById_result)that);
      return false;
    }

    public boolean equals(deleteMonthlyReportRecordsById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteMonthlyReportRecordsById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteMonthlyReportRecordsById_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteMonthlyReportRecordsById_resultStandardSchemeFactory implements SchemeFactory {
      public deleteMonthlyReportRecordsById_resultStandardScheme getScheme() {
        return new deleteMonthlyReportRecordsById_resultStandardScheme();
      }
    }

    private static class deleteMonthlyReportRecordsById_resultStandardScheme extends StandardScheme<deleteMonthlyReportRecordsById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteMonthlyReportRecordsById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteMonthlyReportRecordsById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteMonthlyReportRecordsById_resultTupleSchemeFactory implements SchemeFactory {
      public deleteMonthlyReportRecordsById_resultTupleScheme getScheme() {
        return new deleteMonthlyReportRecordsById_resultTupleScheme();
      }
    }

    private static class deleteMonthlyReportRecordsById_resultTupleScheme extends TupleScheme<deleteMonthlyReportRecordsById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteMonthlyReportRecordsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteMonthlyReportRecordsById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkLoanIdByProjectNo_args implements org.apache.thrift.TBase<checkLoanIdByProjectNo_args, checkLoanIdByProjectNo_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkLoanIdByProjectNo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkLoanIdByProjectNo_args");

    private static final org.apache.thrift.protocol.TField PROJECT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkLoanIdByProjectNo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkLoanIdByProjectNo_argsTupleSchemeFactory());
    }

    public String projectNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_NO((short)1, "projectNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_NO
            return PROJECT_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_NO, new org.apache.thrift.meta_data.FieldMetaData("projectNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkLoanIdByProjectNo_args.class, metaDataMap);
    }

    public checkLoanIdByProjectNo_args() {
    }

    public checkLoanIdByProjectNo_args(
      String projectNo)
    {
      this();
      this.projectNo = projectNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLoanIdByProjectNo_args(checkLoanIdByProjectNo_args other) {
      if (other.isSetProjectNo()) {
        this.projectNo = other.projectNo;
      }
    }

    public checkLoanIdByProjectNo_args deepCopy() {
      return new checkLoanIdByProjectNo_args(this);
    }

    @Override
    public void clear() {
      this.projectNo = null;
    }

    public String getProjectNo() {
      return this.projectNo;
    }

    public checkLoanIdByProjectNo_args setProjectNo(String projectNo) {
      this.projectNo = projectNo;
      return this;
    }

    public void unsetProjectNo() {
      this.projectNo = null;
    }

    /** Returns true if field projectNo is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectNo() {
      return this.projectNo != null;
    }

    public void setProjectNoIsSet(boolean value) {
      if (!value) {
        this.projectNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_NO:
        if (value == null) {
          unsetProjectNo();
        } else {
          setProjectNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_NO:
        return getProjectNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_NO:
        return isSetProjectNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLoanIdByProjectNo_args)
        return this.equals((checkLoanIdByProjectNo_args)that);
      return false;
    }

    public boolean equals(checkLoanIdByProjectNo_args that) {
      if (that == null)
        return false;

      boolean this_present_projectNo = true && this.isSetProjectNo();
      boolean that_present_projectNo = true && that.isSetProjectNo();
      if (this_present_projectNo || that_present_projectNo) {
        if (!(this_present_projectNo && that_present_projectNo))
          return false;
        if (!this.projectNo.equals(that.projectNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectNo = true && (isSetProjectNo());
      list.add(present_projectNo);
      if (present_projectNo)
        list.add(projectNo);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkLoanIdByProjectNo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectNo()).compareTo(other.isSetProjectNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNo, other.projectNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkLoanIdByProjectNo_args(");
      boolean first = true;

      sb.append("projectNo:");
      if (this.projectNo == null) {
        sb.append("null");
      } else {
        sb.append(this.projectNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkLoanIdByProjectNo_argsStandardSchemeFactory implements SchemeFactory {
      public checkLoanIdByProjectNo_argsStandardScheme getScheme() {
        return new checkLoanIdByProjectNo_argsStandardScheme();
      }
    }

    private static class checkLoanIdByProjectNo_argsStandardScheme extends StandardScheme<checkLoanIdByProjectNo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkLoanIdByProjectNo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.projectNo = iprot.readString();
                struct.setProjectNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkLoanIdByProjectNo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.projectNo != null) {
          oprot.writeFieldBegin(PROJECT_NO_FIELD_DESC);
          oprot.writeString(struct.projectNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkLoanIdByProjectNo_argsTupleSchemeFactory implements SchemeFactory {
      public checkLoanIdByProjectNo_argsTupleScheme getScheme() {
        return new checkLoanIdByProjectNo_argsTupleScheme();
      }
    }

    private static class checkLoanIdByProjectNo_argsTupleScheme extends TupleScheme<checkLoanIdByProjectNo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkLoanIdByProjectNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectNo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectNo()) {
          oprot.writeString(struct.projectNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkLoanIdByProjectNo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectNo = iprot.readString();
          struct.setProjectNoIsSet(true);
        }
      }
    }

  }

  public static class checkLoanIdByProjectNo_result implements org.apache.thrift.TBase<checkLoanIdByProjectNo_result, checkLoanIdByProjectNo_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkLoanIdByProjectNo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkLoanIdByProjectNo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkLoanIdByProjectNo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkLoanIdByProjectNo_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkLoanIdByProjectNo_result.class, metaDataMap);
    }

    public checkLoanIdByProjectNo_result() {
    }

    public checkLoanIdByProjectNo_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkLoanIdByProjectNo_result(checkLoanIdByProjectNo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkLoanIdByProjectNo_result deepCopy() {
      return new checkLoanIdByProjectNo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkLoanIdByProjectNo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkLoanIdByProjectNo_result)
        return this.equals((checkLoanIdByProjectNo_result)that);
      return false;
    }

    public boolean equals(checkLoanIdByProjectNo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(checkLoanIdByProjectNo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkLoanIdByProjectNo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkLoanIdByProjectNo_resultStandardSchemeFactory implements SchemeFactory {
      public checkLoanIdByProjectNo_resultStandardScheme getScheme() {
        return new checkLoanIdByProjectNo_resultStandardScheme();
      }
    }

    private static class checkLoanIdByProjectNo_resultStandardScheme extends StandardScheme<checkLoanIdByProjectNo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkLoanIdByProjectNo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkLoanIdByProjectNo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkLoanIdByProjectNo_resultTupleSchemeFactory implements SchemeFactory {
      public checkLoanIdByProjectNo_resultTupleScheme getScheme() {
        return new checkLoanIdByProjectNo_resultTupleScheme();
      }
    }

    private static class checkLoanIdByProjectNo_resultTupleScheme extends TupleScheme<checkLoanIdByProjectNo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkLoanIdByProjectNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkLoanIdByProjectNo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveMonthlyReportRecord_args implements org.apache.thrift.TBase<saveMonthlyReportRecord_args, saveMonthlyReportRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveMonthlyReportRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMonthlyReportRecord_args");

    private static final org.apache.thrift.protocol.TField MONTHLY_REPORT_RECORD_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyReportRecord", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMonthlyReportRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMonthlyReportRecord_argsTupleSchemeFactory());
    }

    public MonthlyReportRecord monthlyReportRecord; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MONTHLY_REPORT_RECORD((short)1, "monthlyReportRecord");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MONTHLY_REPORT_RECORD
            return MONTHLY_REPORT_RECORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MONTHLY_REPORT_RECORD, new org.apache.thrift.meta_data.FieldMetaData("monthlyReportRecord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyReportRecord.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMonthlyReportRecord_args.class, metaDataMap);
    }

    public saveMonthlyReportRecord_args() {
    }

    public saveMonthlyReportRecord_args(
      MonthlyReportRecord monthlyReportRecord)
    {
      this();
      this.monthlyReportRecord = monthlyReportRecord;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMonthlyReportRecord_args(saveMonthlyReportRecord_args other) {
      if (other.isSetMonthlyReportRecord()) {
        this.monthlyReportRecord = new MonthlyReportRecord(other.monthlyReportRecord);
      }
    }

    public saveMonthlyReportRecord_args deepCopy() {
      return new saveMonthlyReportRecord_args(this);
    }

    @Override
    public void clear() {
      this.monthlyReportRecord = null;
    }

    public MonthlyReportRecord getMonthlyReportRecord() {
      return this.monthlyReportRecord;
    }

    public saveMonthlyReportRecord_args setMonthlyReportRecord(MonthlyReportRecord monthlyReportRecord) {
      this.monthlyReportRecord = monthlyReportRecord;
      return this;
    }

    public void unsetMonthlyReportRecord() {
      this.monthlyReportRecord = null;
    }

    /** Returns true if field monthlyReportRecord is set (has been assigned a value) and false otherwise */
    public boolean isSetMonthlyReportRecord() {
      return this.monthlyReportRecord != null;
    }

    public void setMonthlyReportRecordIsSet(boolean value) {
      if (!value) {
        this.monthlyReportRecord = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MONTHLY_REPORT_RECORD:
        if (value == null) {
          unsetMonthlyReportRecord();
        } else {
          setMonthlyReportRecord((MonthlyReportRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MONTHLY_REPORT_RECORD:
        return getMonthlyReportRecord();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MONTHLY_REPORT_RECORD:
        return isSetMonthlyReportRecord();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMonthlyReportRecord_args)
        return this.equals((saveMonthlyReportRecord_args)that);
      return false;
    }

    public boolean equals(saveMonthlyReportRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_monthlyReportRecord = true && this.isSetMonthlyReportRecord();
      boolean that_present_monthlyReportRecord = true && that.isSetMonthlyReportRecord();
      if (this_present_monthlyReportRecord || that_present_monthlyReportRecord) {
        if (!(this_present_monthlyReportRecord && that_present_monthlyReportRecord))
          return false;
        if (!this.monthlyReportRecord.equals(that.monthlyReportRecord))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_monthlyReportRecord = true && (isSetMonthlyReportRecord());
      list.add(present_monthlyReportRecord);
      if (present_monthlyReportRecord)
        list.add(monthlyReportRecord);

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMonthlyReportRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMonthlyReportRecord()).compareTo(other.isSetMonthlyReportRecord());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMonthlyReportRecord()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyReportRecord, other.monthlyReportRecord);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMonthlyReportRecord_args(");
      boolean first = true;

      sb.append("monthlyReportRecord:");
      if (this.monthlyReportRecord == null) {
        sb.append("null");
      } else {
        sb.append(this.monthlyReportRecord);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (monthlyReportRecord != null) {
        monthlyReportRecord.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMonthlyReportRecord_argsStandardSchemeFactory implements SchemeFactory {
      public saveMonthlyReportRecord_argsStandardScheme getScheme() {
        return new saveMonthlyReportRecord_argsStandardScheme();
      }
    }

    private static class saveMonthlyReportRecord_argsStandardScheme extends StandardScheme<saveMonthlyReportRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMonthlyReportRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MONTHLY_REPORT_RECORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.monthlyReportRecord = new MonthlyReportRecord();
                struct.monthlyReportRecord.read(iprot);
                struct.setMonthlyReportRecordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMonthlyReportRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.monthlyReportRecord != null) {
          oprot.writeFieldBegin(MONTHLY_REPORT_RECORD_FIELD_DESC);
          struct.monthlyReportRecord.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMonthlyReportRecord_argsTupleSchemeFactory implements SchemeFactory {
      public saveMonthlyReportRecord_argsTupleScheme getScheme() {
        return new saveMonthlyReportRecord_argsTupleScheme();
      }
    }

    private static class saveMonthlyReportRecord_argsTupleScheme extends TupleScheme<saveMonthlyReportRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMonthlyReportRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMonthlyReportRecord()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMonthlyReportRecord()) {
          struct.monthlyReportRecord.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMonthlyReportRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.monthlyReportRecord = new MonthlyReportRecord();
          struct.monthlyReportRecord.read(iprot);
          struct.setMonthlyReportRecordIsSet(true);
        }
      }
    }

  }

  public static class saveMonthlyReportRecord_result implements org.apache.thrift.TBase<saveMonthlyReportRecord_result, saveMonthlyReportRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveMonthlyReportRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveMonthlyReportRecord_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveMonthlyReportRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveMonthlyReportRecord_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveMonthlyReportRecord_result.class, metaDataMap);
    }

    public saveMonthlyReportRecord_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveMonthlyReportRecord_result(saveMonthlyReportRecord_result other) {
    }

    public saveMonthlyReportRecord_result deepCopy() {
      return new saveMonthlyReportRecord_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveMonthlyReportRecord_result)
        return this.equals((saveMonthlyReportRecord_result)that);
      return false;
    }

    public boolean equals(saveMonthlyReportRecord_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(saveMonthlyReportRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveMonthlyReportRecord_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveMonthlyReportRecord_resultStandardSchemeFactory implements SchemeFactory {
      public saveMonthlyReportRecord_resultStandardScheme getScheme() {
        return new saveMonthlyReportRecord_resultStandardScheme();
      }
    }

    private static class saveMonthlyReportRecord_resultStandardScheme extends StandardScheme<saveMonthlyReportRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveMonthlyReportRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveMonthlyReportRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveMonthlyReportRecord_resultTupleSchemeFactory implements SchemeFactory {
      public saveMonthlyReportRecord_resultTupleScheme getScheme() {
        return new saveMonthlyReportRecord_resultTupleScheme();
      }
    }

    private static class saveMonthlyReportRecord_resultTupleScheme extends TupleScheme<saveMonthlyReportRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveMonthlyReportRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveMonthlyReportRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateRepaymentPlan_args implements org.apache.thrift.TBase<updateRepaymentPlan_args, updateRepaymentPlan_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepaymentPlan_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepaymentPlan_args");

    private static final org.apache.thrift.protocol.TField RED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("redId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepaymentPlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepaymentPlan_argsTupleSchemeFactory());
    }

    public int redId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RED_ID((short)1, "redId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RED_ID
            return RED_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REDID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RED_ID, new org.apache.thrift.meta_data.FieldMetaData("redId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepaymentPlan_args.class, metaDataMap);
    }

    public updateRepaymentPlan_args() {
    }

    public updateRepaymentPlan_args(
      int redId)
    {
      this();
      this.redId = redId;
      setRedIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepaymentPlan_args(updateRepaymentPlan_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.redId = other.redId;
    }

    public updateRepaymentPlan_args deepCopy() {
      return new updateRepaymentPlan_args(this);
    }

    @Override
    public void clear() {
      setRedIdIsSet(false);
      this.redId = 0;
    }

    public int getRedId() {
      return this.redId;
    }

    public updateRepaymentPlan_args setRedId(int redId) {
      this.redId = redId;
      setRedIdIsSet(true);
      return this;
    }

    public void unsetRedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REDID_ISSET_ID);
    }

    /** Returns true if field redId is set (has been assigned a value) and false otherwise */
    public boolean isSetRedId() {
      return EncodingUtils.testBit(__isset_bitfield, __REDID_ISSET_ID);
    }

    public void setRedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RED_ID:
        if (value == null) {
          unsetRedId();
        } else {
          setRedId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RED_ID:
        return Integer.valueOf(getRedId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RED_ID:
        return isSetRedId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepaymentPlan_args)
        return this.equals((updateRepaymentPlan_args)that);
      return false;
    }

    public boolean equals(updateRepaymentPlan_args that) {
      if (that == null)
        return false;

      boolean this_present_redId = true;
      boolean that_present_redId = true;
      if (this_present_redId || that_present_redId) {
        if (!(this_present_redId && that_present_redId))
          return false;
        if (this.redId != that.redId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_redId = true;
      list.add(present_redId);
      if (present_redId)
        list.add(redId);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepaymentPlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRedId()).compareTo(other.isSetRedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.redId, other.redId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepaymentPlan_args(");
      boolean first = true;

      sb.append("redId:");
      sb.append(this.redId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepaymentPlan_argsStandardSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_argsStandardScheme getScheme() {
        return new updateRepaymentPlan_argsStandardScheme();
      }
    }

    private static class updateRepaymentPlan_argsStandardScheme extends StandardScheme<updateRepaymentPlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.redId = iprot.readI32();
                struct.setRedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RED_ID_FIELD_DESC);
        oprot.writeI32(struct.redId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepaymentPlan_argsTupleSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_argsTupleScheme getScheme() {
        return new updateRepaymentPlan_argsTupleScheme();
      }
    }

    private static class updateRepaymentPlan_argsTupleScheme extends TupleScheme<updateRepaymentPlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRedId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRedId()) {
          oprot.writeI32(struct.redId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.redId = iprot.readI32();
          struct.setRedIdIsSet(true);
        }
      }
    }

  }

  public static class updateRepaymentPlan_result implements org.apache.thrift.TBase<updateRepaymentPlan_result, updateRepaymentPlan_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepaymentPlan_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepaymentPlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepaymentPlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepaymentPlan_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepaymentPlan_result.class, metaDataMap);
    }

    public updateRepaymentPlan_result() {
    }

    public updateRepaymentPlan_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepaymentPlan_result(updateRepaymentPlan_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateRepaymentPlan_result deepCopy() {
      return new updateRepaymentPlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateRepaymentPlan_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateRepaymentPlan_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepaymentPlan_result)
        return this.equals((updateRepaymentPlan_result)that);
      return false;
    }

    public boolean equals(updateRepaymentPlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepaymentPlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepaymentPlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepaymentPlan_resultStandardSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_resultStandardScheme getScheme() {
        return new updateRepaymentPlan_resultStandardScheme();
      }
    }

    private static class updateRepaymentPlan_resultStandardScheme extends StandardScheme<updateRepaymentPlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepaymentPlan_resultTupleSchemeFactory implements SchemeFactory {
      public updateRepaymentPlan_resultTupleScheme getScheme() {
        return new updateRepaymentPlan_resultTupleScheme();
      }
    }

    private static class updateRepaymentPlan_resultTupleScheme extends TupleScheme<updateRepaymentPlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepaymentPlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLoanCycleNumAndAmt_args implements org.apache.thrift.TBase<getLoanCycleNumAndAmt_args, getLoanCycleNumAndAmt_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanCycleNumAndAmt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanCycleNumAndAmt_args");

    private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanCycleNumAndAmt_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanCycleNumAndAmt_argsTupleSchemeFactory());
    }

    public int loanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOAN_ID((short)1, "loanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOAN_ID
            return LOAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOANID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanCycleNumAndAmt_args.class, metaDataMap);
    }

    public getLoanCycleNumAndAmt_args() {
    }

    public getLoanCycleNumAndAmt_args(
      int loanId)
    {
      this();
      this.loanId = loanId;
      setLoanIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanCycleNumAndAmt_args(getLoanCycleNumAndAmt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.loanId = other.loanId;
    }

    public getLoanCycleNumAndAmt_args deepCopy() {
      return new getLoanCycleNumAndAmt_args(this);
    }

    @Override
    public void clear() {
      setLoanIdIsSet(false);
      this.loanId = 0;
    }

    public int getLoanId() {
      return this.loanId;
    }

    public getLoanCycleNumAndAmt_args setLoanId(int loanId) {
      this.loanId = loanId;
      setLoanIdIsSet(true);
      return this;
    }

    public void unsetLoanId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
    public boolean isSetLoanId() {
      return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
    }

    public void setLoanIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOAN_ID:
        if (value == null) {
          unsetLoanId();
        } else {
          setLoanId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOAN_ID:
        return Integer.valueOf(getLoanId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOAN_ID:
        return isSetLoanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanCycleNumAndAmt_args)
        return this.equals((getLoanCycleNumAndAmt_args)that);
      return false;
    }

    public boolean equals(getLoanCycleNumAndAmt_args that) {
      if (that == null)
        return false;

      boolean this_present_loanId = true;
      boolean that_present_loanId = true;
      if (this_present_loanId || that_present_loanId) {
        if (!(this_present_loanId && that_present_loanId))
          return false;
        if (this.loanId != that.loanId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_loanId = true;
      list.add(present_loanId);
      if (present_loanId)
        list.add(loanId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanCycleNumAndAmt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanCycleNumAndAmt_args(");
      boolean first = true;

      sb.append("loanId:");
      sb.append(this.loanId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanCycleNumAndAmt_argsStandardSchemeFactory implements SchemeFactory {
      public getLoanCycleNumAndAmt_argsStandardScheme getScheme() {
        return new getLoanCycleNumAndAmt_argsStandardScheme();
      }
    }

    private static class getLoanCycleNumAndAmt_argsStandardScheme extends StandardScheme<getLoanCycleNumAndAmt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanCycleNumAndAmt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.loanId = iprot.readI32();
                struct.setLoanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanCycleNumAndAmt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeI32(struct.loanId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanCycleNumAndAmt_argsTupleSchemeFactory implements SchemeFactory {
      public getLoanCycleNumAndAmt_argsTupleScheme getScheme() {
        return new getLoanCycleNumAndAmt_argsTupleScheme();
      }
    }

    private static class getLoanCycleNumAndAmt_argsTupleScheme extends TupleScheme<getLoanCycleNumAndAmt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanCycleNumAndAmt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoanId()) {
          oprot.writeI32(struct.loanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanCycleNumAndAmt_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loanId = iprot.readI32();
          struct.setLoanIdIsSet(true);
        }
      }
    }

  }

  public static class getLoanCycleNumAndAmt_result implements org.apache.thrift.TBase<getLoanCycleNumAndAmt_result, getLoanCycleNumAndAmt_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLoanCycleNumAndAmt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLoanCycleNumAndAmt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLoanCycleNumAndAmt_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLoanCycleNumAndAmt_resultTupleSchemeFactory());
    }

    public LoanCycleNumView success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoanCycleNumView.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLoanCycleNumAndAmt_result.class, metaDataMap);
    }

    public getLoanCycleNumAndAmt_result() {
    }

    public getLoanCycleNumAndAmt_result(
      LoanCycleNumView success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLoanCycleNumAndAmt_result(getLoanCycleNumAndAmt_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoanCycleNumView(other.success);
      }
    }

    public getLoanCycleNumAndAmt_result deepCopy() {
      return new getLoanCycleNumAndAmt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LoanCycleNumView getSuccess() {
      return this.success;
    }

    public getLoanCycleNumAndAmt_result setSuccess(LoanCycleNumView success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoanCycleNumView)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLoanCycleNumAndAmt_result)
        return this.equals((getLoanCycleNumAndAmt_result)that);
      return false;
    }

    public boolean equals(getLoanCycleNumAndAmt_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLoanCycleNumAndAmt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLoanCycleNumAndAmt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLoanCycleNumAndAmt_resultStandardSchemeFactory implements SchemeFactory {
      public getLoanCycleNumAndAmt_resultStandardScheme getScheme() {
        return new getLoanCycleNumAndAmt_resultStandardScheme();
      }
    }

    private static class getLoanCycleNumAndAmt_resultStandardScheme extends StandardScheme<getLoanCycleNumAndAmt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLoanCycleNumAndAmt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoanCycleNumView();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLoanCycleNumAndAmt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLoanCycleNumAndAmt_resultTupleSchemeFactory implements SchemeFactory {
      public getLoanCycleNumAndAmt_resultTupleScheme getScheme() {
        return new getLoanCycleNumAndAmt_resultTupleScheme();
      }
    }

    private static class getLoanCycleNumAndAmt_resultTupleScheme extends TupleScheme<getLoanCycleNumAndAmt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLoanCycleNumAndAmt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLoanCycleNumAndAmt_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LoanCycleNumView();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

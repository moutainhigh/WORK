/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.contract;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-28")
public class ContractNumber implements org.apache.thrift.TBase<ContractNumber, ContractNumber._Fields>, java.io.Serializable, Cloneable, Comparable<ContractNumber> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContractNumber");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentContractId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("yearCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORG_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTRACT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("contractIndex", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PARENT_CONTRACT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("parentContractIndex", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ContractNumberStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ContractNumberTupleSchemeFactory());
  }

  public int pid; // required
  public int contractId; // required
  public int parentContractId; // required
  public String yearCode; // required
  public String orgCode; // required
  public String contractType; // required
  public int contractIndex; // required
  public int status; // required
  public String parentContractIndex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CONTRACT_ID((short)2, "contractId"),
    PARENT_CONTRACT_ID((short)3, "parentContractId"),
    YEAR_CODE((short)4, "yearCode"),
    ORG_CODE((short)5, "orgCode"),
    CONTRACT_TYPE((short)6, "contractType"),
    CONTRACT_INDEX((short)7, "contractIndex"),
    STATUS((short)8, "status"),
    PARENT_CONTRACT_INDEX((short)9, "parentContractIndex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CONTRACT_ID
          return CONTRACT_ID;
        case 3: // PARENT_CONTRACT_ID
          return PARENT_CONTRACT_ID;
        case 4: // YEAR_CODE
          return YEAR_CODE;
        case 5: // ORG_CODE
          return ORG_CODE;
        case 6: // CONTRACT_TYPE
          return CONTRACT_TYPE;
        case 7: // CONTRACT_INDEX
          return CONTRACT_INDEX;
        case 8: // STATUS
          return STATUS;
        case 9: // PARENT_CONTRACT_INDEX
          return PARENT_CONTRACT_INDEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CONTRACTID_ISSET_ID = 1;
  private static final int __PARENTCONTRACTID_ISSET_ID = 2;
  private static final int __CONTRACTINDEX_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentContractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.YEAR_CODE, new org.apache.thrift.meta_data.FieldMetaData("yearCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_CODE, new org.apache.thrift.meta_data.FieldMetaData("orgCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contractType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("contractIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARENT_CONTRACT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("parentContractIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContractNumber.class, metaDataMap);
  }

  public ContractNumber() {
  }

  public ContractNumber(
    int pid,
    int contractId,
    int parentContractId,
    String yearCode,
    String orgCode,
    String contractType,
    int contractIndex,
    int status,
    String parentContractIndex)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.contractId = contractId;
    setContractIdIsSet(true);
    this.parentContractId = parentContractId;
    setParentContractIdIsSet(true);
    this.yearCode = yearCode;
    this.orgCode = orgCode;
    this.contractType = contractType;
    this.contractIndex = contractIndex;
    setContractIndexIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.parentContractIndex = parentContractIndex;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContractNumber(ContractNumber other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.contractId = other.contractId;
    this.parentContractId = other.parentContractId;
    if (other.isSetYearCode()) {
      this.yearCode = other.yearCode;
    }
    if (other.isSetOrgCode()) {
      this.orgCode = other.orgCode;
    }
    if (other.isSetContractType()) {
      this.contractType = other.contractType;
    }
    this.contractIndex = other.contractIndex;
    this.status = other.status;
    if (other.isSetParentContractIndex()) {
      this.parentContractIndex = other.parentContractIndex;
    }
  }

  public ContractNumber deepCopy() {
    return new ContractNumber(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setContractIdIsSet(false);
    this.contractId = 0;
    setParentContractIdIsSet(false);
    this.parentContractId = 0;
    this.yearCode = null;
    this.orgCode = null;
    this.contractType = null;
    setContractIndexIsSet(false);
    this.contractIndex = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.parentContractIndex = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ContractNumber setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getContractId() {
    return this.contractId;
  }

  public ContractNumber setContractId(int contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public int getParentContractId() {
    return this.parentContractId;
  }

  public ContractNumber setParentContractId(int parentContractId) {
    this.parentContractId = parentContractId;
    setParentContractIdIsSet(true);
    return this;
  }

  public void unsetParentContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTCONTRACTID_ISSET_ID);
  }

  /** Returns true if field parentContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTCONTRACTID_ISSET_ID);
  }

  public void setParentContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTCONTRACTID_ISSET_ID, value);
  }

  public String getYearCode() {
    return this.yearCode;
  }

  public ContractNumber setYearCode(String yearCode) {
    this.yearCode = yearCode;
    return this;
  }

  public void unsetYearCode() {
    this.yearCode = null;
  }

  /** Returns true if field yearCode is set (has been assigned a value) and false otherwise */
  public boolean isSetYearCode() {
    return this.yearCode != null;
  }

  public void setYearCodeIsSet(boolean value) {
    if (!value) {
      this.yearCode = null;
    }
  }

  public String getOrgCode() {
    return this.orgCode;
  }

  public ContractNumber setOrgCode(String orgCode) {
    this.orgCode = orgCode;
    return this;
  }

  public void unsetOrgCode() {
    this.orgCode = null;
  }

  /** Returns true if field orgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgCode() {
    return this.orgCode != null;
  }

  public void setOrgCodeIsSet(boolean value) {
    if (!value) {
      this.orgCode = null;
    }
  }

  public String getContractType() {
    return this.contractType;
  }

  public ContractNumber setContractType(String contractType) {
    this.contractType = contractType;
    return this;
  }

  public void unsetContractType() {
    this.contractType = null;
  }

  /** Returns true if field contractType is set (has been assigned a value) and false otherwise */
  public boolean isSetContractType() {
    return this.contractType != null;
  }

  public void setContractTypeIsSet(boolean value) {
    if (!value) {
      this.contractType = null;
    }
  }

  public int getContractIndex() {
    return this.contractIndex;
  }

  public ContractNumber setContractIndex(int contractIndex) {
    this.contractIndex = contractIndex;
    setContractIndexIsSet(true);
    return this;
  }

  public void unsetContractIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTINDEX_ISSET_ID);
  }

  /** Returns true if field contractIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetContractIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTINDEX_ISSET_ID);
  }

  public void setContractIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTINDEX_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public ContractNumber setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getParentContractIndex() {
    return this.parentContractIndex;
  }

  public ContractNumber setParentContractIndex(String parentContractIndex) {
    this.parentContractIndex = parentContractIndex;
    return this;
  }

  public void unsetParentContractIndex() {
    this.parentContractIndex = null;
  }

  /** Returns true if field parentContractIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetParentContractIndex() {
    return this.parentContractIndex != null;
  }

  public void setParentContractIndexIsSet(boolean value) {
    if (!value) {
      this.parentContractIndex = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Integer)value);
      }
      break;

    case PARENT_CONTRACT_ID:
      if (value == null) {
        unsetParentContractId();
      } else {
        setParentContractId((Integer)value);
      }
      break;

    case YEAR_CODE:
      if (value == null) {
        unsetYearCode();
      } else {
        setYearCode((String)value);
      }
      break;

    case ORG_CODE:
      if (value == null) {
        unsetOrgCode();
      } else {
        setOrgCode((String)value);
      }
      break;

    case CONTRACT_TYPE:
      if (value == null) {
        unsetContractType();
      } else {
        setContractType((String)value);
      }
      break;

    case CONTRACT_INDEX:
      if (value == null) {
        unsetContractIndex();
      } else {
        setContractIndex((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PARENT_CONTRACT_INDEX:
      if (value == null) {
        unsetParentContractIndex();
      } else {
        setParentContractIndex((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CONTRACT_ID:
      return Integer.valueOf(getContractId());

    case PARENT_CONTRACT_ID:
      return Integer.valueOf(getParentContractId());

    case YEAR_CODE:
      return getYearCode();

    case ORG_CODE:
      return getOrgCode();

    case CONTRACT_TYPE:
      return getContractType();

    case CONTRACT_INDEX:
      return Integer.valueOf(getContractIndex());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PARENT_CONTRACT_INDEX:
      return getParentContractIndex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CONTRACT_ID:
      return isSetContractId();
    case PARENT_CONTRACT_ID:
      return isSetParentContractId();
    case YEAR_CODE:
      return isSetYearCode();
    case ORG_CODE:
      return isSetOrgCode();
    case CONTRACT_TYPE:
      return isSetContractType();
    case CONTRACT_INDEX:
      return isSetContractIndex();
    case STATUS:
      return isSetStatus();
    case PARENT_CONTRACT_INDEX:
      return isSetParentContractIndex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContractNumber)
      return this.equals((ContractNumber)that);
    return false;
  }

  public boolean equals(ContractNumber that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_contractId = true;
    boolean that_present_contractId = true;
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_parentContractId = true;
    boolean that_present_parentContractId = true;
    if (this_present_parentContractId || that_present_parentContractId) {
      if (!(this_present_parentContractId && that_present_parentContractId))
        return false;
      if (this.parentContractId != that.parentContractId)
        return false;
    }

    boolean this_present_yearCode = true && this.isSetYearCode();
    boolean that_present_yearCode = true && that.isSetYearCode();
    if (this_present_yearCode || that_present_yearCode) {
      if (!(this_present_yearCode && that_present_yearCode))
        return false;
      if (!this.yearCode.equals(that.yearCode))
        return false;
    }

    boolean this_present_orgCode = true && this.isSetOrgCode();
    boolean that_present_orgCode = true && that.isSetOrgCode();
    if (this_present_orgCode || that_present_orgCode) {
      if (!(this_present_orgCode && that_present_orgCode))
        return false;
      if (!this.orgCode.equals(that.orgCode))
        return false;
    }

    boolean this_present_contractType = true && this.isSetContractType();
    boolean that_present_contractType = true && that.isSetContractType();
    if (this_present_contractType || that_present_contractType) {
      if (!(this_present_contractType && that_present_contractType))
        return false;
      if (!this.contractType.equals(that.contractType))
        return false;
    }

    boolean this_present_contractIndex = true;
    boolean that_present_contractIndex = true;
    if (this_present_contractIndex || that_present_contractIndex) {
      if (!(this_present_contractIndex && that_present_contractIndex))
        return false;
      if (this.contractIndex != that.contractIndex)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_parentContractIndex = true && this.isSetParentContractIndex();
    boolean that_present_parentContractIndex = true && that.isSetParentContractIndex();
    if (this_present_parentContractIndex || that_present_parentContractIndex) {
      if (!(this_present_parentContractIndex && that_present_parentContractIndex))
        return false;
      if (!this.parentContractIndex.equals(that.parentContractIndex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_contractId = true;
    list.add(present_contractId);
    if (present_contractId)
      list.add(contractId);

    boolean present_parentContractId = true;
    list.add(present_parentContractId);
    if (present_parentContractId)
      list.add(parentContractId);

    boolean present_yearCode = true && (isSetYearCode());
    list.add(present_yearCode);
    if (present_yearCode)
      list.add(yearCode);

    boolean present_orgCode = true && (isSetOrgCode());
    list.add(present_orgCode);
    if (present_orgCode)
      list.add(orgCode);

    boolean present_contractType = true && (isSetContractType());
    list.add(present_contractType);
    if (present_contractType)
      list.add(contractType);

    boolean present_contractIndex = true;
    list.add(present_contractIndex);
    if (present_contractIndex)
      list.add(contractIndex);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_parentContractIndex = true && (isSetParentContractIndex());
    list.add(present_parentContractIndex);
    if (present_parentContractIndex)
      list.add(parentContractIndex);

    return list.hashCode();
  }

  @Override
  public int compareTo(ContractNumber other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentContractId()).compareTo(other.isSetParentContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentContractId, other.parentContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYearCode()).compareTo(other.isSetYearCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYearCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yearCode, other.yearCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgCode()).compareTo(other.isSetOrgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgCode, other.orgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractType()).compareTo(other.isSetContractType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractType, other.contractType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractIndex()).compareTo(other.isSetContractIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractIndex, other.contractIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentContractIndex()).compareTo(other.isSetParentContractIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentContractIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentContractIndex, other.parentContractIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ContractNumber(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    sb.append(this.contractId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentContractId:");
    sb.append(this.parentContractId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("yearCode:");
    if (this.yearCode == null) {
      sb.append("null");
    } else {
      sb.append(this.yearCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgCode:");
    if (this.orgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.orgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractType:");
    if (this.contractType == null) {
      sb.append("null");
    } else {
      sb.append(this.contractType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractIndex:");
    sb.append(this.contractIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentContractIndex:");
    if (this.parentContractIndex == null) {
      sb.append("null");
    } else {
      sb.append(this.parentContractIndex);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContractNumberStandardSchemeFactory implements SchemeFactory {
    public ContractNumberStandardScheme getScheme() {
      return new ContractNumberStandardScheme();
    }
  }

  private static class ContractNumberStandardScheme extends StandardScheme<ContractNumber> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContractNumber struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractId = iprot.readI32();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentContractId = iprot.readI32();
              struct.setParentContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.yearCode = iprot.readString();
              struct.setYearCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORG_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgCode = iprot.readString();
              struct.setOrgCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractType = iprot.readString();
              struct.setContractTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTRACT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractIndex = iprot.readI32();
              struct.setContractIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PARENT_CONTRACT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentContractIndex = iprot.readString();
              struct.setParentContractIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContractNumber struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.contractId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_CONTRACT_ID_FIELD_DESC);
      oprot.writeI32(struct.parentContractId);
      oprot.writeFieldEnd();
      if (struct.yearCode != null) {
        oprot.writeFieldBegin(YEAR_CODE_FIELD_DESC);
        oprot.writeString(struct.yearCode);
        oprot.writeFieldEnd();
      }
      if (struct.orgCode != null) {
        oprot.writeFieldBegin(ORG_CODE_FIELD_DESC);
        oprot.writeString(struct.orgCode);
        oprot.writeFieldEnd();
      }
      if (struct.contractType != null) {
        oprot.writeFieldBegin(CONTRACT_TYPE_FIELD_DESC);
        oprot.writeString(struct.contractType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONTRACT_INDEX_FIELD_DESC);
      oprot.writeI32(struct.contractIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.parentContractIndex != null) {
        oprot.writeFieldBegin(PARENT_CONTRACT_INDEX_FIELD_DESC);
        oprot.writeString(struct.parentContractIndex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContractNumberTupleSchemeFactory implements SchemeFactory {
    public ContractNumberTupleScheme getScheme() {
      return new ContractNumberTupleScheme();
    }
  }

  private static class ContractNumberTupleScheme extends TupleScheme<ContractNumber> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContractNumber struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetContractId()) {
        optionals.set(1);
      }
      if (struct.isSetParentContractId()) {
        optionals.set(2);
      }
      if (struct.isSetYearCode()) {
        optionals.set(3);
      }
      if (struct.isSetOrgCode()) {
        optionals.set(4);
      }
      if (struct.isSetContractType()) {
        optionals.set(5);
      }
      if (struct.isSetContractIndex()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetParentContractIndex()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetContractId()) {
        oprot.writeI32(struct.contractId);
      }
      if (struct.isSetParentContractId()) {
        oprot.writeI32(struct.parentContractId);
      }
      if (struct.isSetYearCode()) {
        oprot.writeString(struct.yearCode);
      }
      if (struct.isSetOrgCode()) {
        oprot.writeString(struct.orgCode);
      }
      if (struct.isSetContractType()) {
        oprot.writeString(struct.contractType);
      }
      if (struct.isSetContractIndex()) {
        oprot.writeI32(struct.contractIndex);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetParentContractIndex()) {
        oprot.writeString(struct.parentContractIndex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContractNumber struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractId = iprot.readI32();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentContractId = iprot.readI32();
        struct.setParentContractIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.yearCode = iprot.readString();
        struct.setYearCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orgCode = iprot.readString();
        struct.setOrgCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractType = iprot.readString();
        struct.setContractTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contractIndex = iprot.readI32();
        struct.setContractIndexIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.parentContractIndex = iprot.readString();
        struct.setParentContractIndexIsSet(true);
      }
    }
  }

}


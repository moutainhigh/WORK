/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysLookup implements org.apache.thrift.TBase<SysLookup, SysLookup._Fields>, java.io.Serializable, Cloneable, Comparable<SysLookup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysLookup");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOOKUP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOOKUP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOOKUP_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("lookupDesc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_DATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createDatetime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysLookupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysLookupTupleSchemeFactory());
  }

  public int pid; // required
  public String lookupType; // required
  public String lookupName; // required
  public String lookupDesc; // required
  public int status; // required
  public int page; // required
  public int rows; // required
  public String createDatetime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOOKUP_TYPE((short)2, "lookupType"),
    LOOKUP_NAME((short)3, "lookupName"),
    LOOKUP_DESC((short)4, "lookupDesc"),
    STATUS((short)5, "status"),
    PAGE((short)6, "page"),
    ROWS((short)7, "rows"),
    CREATE_DATETIME((short)8, "createDatetime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOOKUP_TYPE
          return LOOKUP_TYPE;
        case 3: // LOOKUP_NAME
          return LOOKUP_NAME;
        case 4: // LOOKUP_DESC
          return LOOKUP_DESC;
        case 5: // STATUS
          return STATUS;
        case 6: // PAGE
          return PAGE;
        case 7: // ROWS
          return ROWS;
        case 8: // CREATE_DATETIME
          return CREATE_DATETIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __PAGE_ISSET_ID = 2;
  private static final int __ROWS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOOKUP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("lookupType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOOKUP_NAME, new org.apache.thrift.meta_data.FieldMetaData("lookupName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOOKUP_DESC, new org.apache.thrift.meta_data.FieldMetaData("lookupDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATETIME, new org.apache.thrift.meta_data.FieldMetaData("createDatetime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysLookup.class, metaDataMap);
  }

  public SysLookup() {
  }

  public SysLookup(
    int pid,
    String lookupType,
    String lookupName,
    String lookupDesc,
    int status,
    int page,
    int rows,
    String createDatetime)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.lookupType = lookupType;
    this.lookupName = lookupName;
    this.lookupDesc = lookupDesc;
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.createDatetime = createDatetime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysLookup(SysLookup other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetLookupType()) {
      this.lookupType = other.lookupType;
    }
    if (other.isSetLookupName()) {
      this.lookupName = other.lookupName;
    }
    if (other.isSetLookupDesc()) {
      this.lookupDesc = other.lookupDesc;
    }
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCreateDatetime()) {
      this.createDatetime = other.createDatetime;
    }
  }

  public SysLookup deepCopy() {
    return new SysLookup(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.lookupType = null;
    this.lookupName = null;
    this.lookupDesc = null;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.createDatetime = null;
  }

  public int getPid() {
    return this.pid;
  }

  public SysLookup setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getLookupType() {
    return this.lookupType;
  }

  public SysLookup setLookupType(String lookupType) {
    this.lookupType = lookupType;
    return this;
  }

  public void unsetLookupType() {
    this.lookupType = null;
  }

  /** Returns true if field lookupType is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupType() {
    return this.lookupType != null;
  }

  public void setLookupTypeIsSet(boolean value) {
    if (!value) {
      this.lookupType = null;
    }
  }

  public String getLookupName() {
    return this.lookupName;
  }

  public SysLookup setLookupName(String lookupName) {
    this.lookupName = lookupName;
    return this;
  }

  public void unsetLookupName() {
    this.lookupName = null;
  }

  /** Returns true if field lookupName is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupName() {
    return this.lookupName != null;
  }

  public void setLookupNameIsSet(boolean value) {
    if (!value) {
      this.lookupName = null;
    }
  }

  public String getLookupDesc() {
    return this.lookupDesc;
  }

  public SysLookup setLookupDesc(String lookupDesc) {
    this.lookupDesc = lookupDesc;
    return this;
  }

  public void unsetLookupDesc() {
    this.lookupDesc = null;
  }

  /** Returns true if field lookupDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetLookupDesc() {
    return this.lookupDesc != null;
  }

  public void setLookupDescIsSet(boolean value) {
    if (!value) {
      this.lookupDesc = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SysLookup setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public SysLookup setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public SysLookup setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCreateDatetime() {
    return this.createDatetime;
  }

  public SysLookup setCreateDatetime(String createDatetime) {
    this.createDatetime = createDatetime;
    return this;
  }

  public void unsetCreateDatetime() {
    this.createDatetime = null;
  }

  /** Returns true if field createDatetime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDatetime() {
    return this.createDatetime != null;
  }

  public void setCreateDatetimeIsSet(boolean value) {
    if (!value) {
      this.createDatetime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOOKUP_TYPE:
      if (value == null) {
        unsetLookupType();
      } else {
        setLookupType((String)value);
      }
      break;

    case LOOKUP_NAME:
      if (value == null) {
        unsetLookupName();
      } else {
        setLookupName((String)value);
      }
      break;

    case LOOKUP_DESC:
      if (value == null) {
        unsetLookupDesc();
      } else {
        setLookupDesc((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CREATE_DATETIME:
      if (value == null) {
        unsetCreateDatetime();
      } else {
        setCreateDatetime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOOKUP_TYPE:
      return getLookupType();

    case LOOKUP_NAME:
      return getLookupName();

    case LOOKUP_DESC:
      return getLookupDesc();

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CREATE_DATETIME:
      return getCreateDatetime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOOKUP_TYPE:
      return isSetLookupType();
    case LOOKUP_NAME:
      return isSetLookupName();
    case LOOKUP_DESC:
      return isSetLookupDesc();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CREATE_DATETIME:
      return isSetCreateDatetime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysLookup)
      return this.equals((SysLookup)that);
    return false;
  }

  public boolean equals(SysLookup that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_lookupType = true && this.isSetLookupType();
    boolean that_present_lookupType = true && that.isSetLookupType();
    if (this_present_lookupType || that_present_lookupType) {
      if (!(this_present_lookupType && that_present_lookupType))
        return false;
      if (!this.lookupType.equals(that.lookupType))
        return false;
    }

    boolean this_present_lookupName = true && this.isSetLookupName();
    boolean that_present_lookupName = true && that.isSetLookupName();
    if (this_present_lookupName || that_present_lookupName) {
      if (!(this_present_lookupName && that_present_lookupName))
        return false;
      if (!this.lookupName.equals(that.lookupName))
        return false;
    }

    boolean this_present_lookupDesc = true && this.isSetLookupDesc();
    boolean that_present_lookupDesc = true && that.isSetLookupDesc();
    if (this_present_lookupDesc || that_present_lookupDesc) {
      if (!(this_present_lookupDesc && that_present_lookupDesc))
        return false;
      if (!this.lookupDesc.equals(that.lookupDesc))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_createDatetime = true && this.isSetCreateDatetime();
    boolean that_present_createDatetime = true && that.isSetCreateDatetime();
    if (this_present_createDatetime || that_present_createDatetime) {
      if (!(this_present_createDatetime && that_present_createDatetime))
        return false;
      if (!this.createDatetime.equals(that.createDatetime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_lookupType = true && (isSetLookupType());
    list.add(present_lookupType);
    if (present_lookupType)
      list.add(lookupType);

    boolean present_lookupName = true && (isSetLookupName());
    list.add(present_lookupName);
    if (present_lookupName)
      list.add(lookupName);

    boolean present_lookupDesc = true && (isSetLookupDesc());
    list.add(present_lookupDesc);
    if (present_lookupDesc)
      list.add(lookupDesc);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_createDatetime = true && (isSetCreateDatetime());
    list.add(present_createDatetime);
    if (present_createDatetime)
      list.add(createDatetime);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysLookup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupType()).compareTo(other.isSetLookupType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupType, other.lookupType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupName()).compareTo(other.isSetLookupName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupName, other.lookupName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLookupDesc()).compareTo(other.isSetLookupDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLookupDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lookupDesc, other.lookupDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDatetime()).compareTo(other.isSetCreateDatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDatetime, other.createDatetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysLookup(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lookupType:");
    if (this.lookupType == null) {
      sb.append("null");
    } else {
      sb.append(this.lookupType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lookupName:");
    if (this.lookupName == null) {
      sb.append("null");
    } else {
      sb.append(this.lookupName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lookupDesc:");
    if (this.lookupDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.lookupDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDatetime:");
    if (this.createDatetime == null) {
      sb.append("null");
    } else {
      sb.append(this.createDatetime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysLookupStandardSchemeFactory implements SchemeFactory {
    public SysLookupStandardScheme getScheme() {
      return new SysLookupStandardScheme();
    }
  }

  private static class SysLookupStandardScheme extends StandardScheme<SysLookup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysLookup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOOKUP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupType = iprot.readString();
              struct.setLookupTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOOKUP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupName = iprot.readString();
              struct.setLookupNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOOKUP_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lookupDesc = iprot.readString();
              struct.setLookupDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_DATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDatetime = iprot.readString();
              struct.setCreateDatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysLookup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.lookupType != null) {
        oprot.writeFieldBegin(LOOKUP_TYPE_FIELD_DESC);
        oprot.writeString(struct.lookupType);
        oprot.writeFieldEnd();
      }
      if (struct.lookupName != null) {
        oprot.writeFieldBegin(LOOKUP_NAME_FIELD_DESC);
        oprot.writeString(struct.lookupName);
        oprot.writeFieldEnd();
      }
      if (struct.lookupDesc != null) {
        oprot.writeFieldBegin(LOOKUP_DESC_FIELD_DESC);
        oprot.writeString(struct.lookupDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.createDatetime != null) {
        oprot.writeFieldBegin(CREATE_DATETIME_FIELD_DESC);
        oprot.writeString(struct.createDatetime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysLookupTupleSchemeFactory implements SchemeFactory {
    public SysLookupTupleScheme getScheme() {
      return new SysLookupTupleScheme();
    }
  }

  private static class SysLookupTupleScheme extends TupleScheme<SysLookup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysLookup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLookupType()) {
        optionals.set(1);
      }
      if (struct.isSetLookupName()) {
        optionals.set(2);
      }
      if (struct.isSetLookupDesc()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetPage()) {
        optionals.set(5);
      }
      if (struct.isSetRows()) {
        optionals.set(6);
      }
      if (struct.isSetCreateDatetime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLookupType()) {
        oprot.writeString(struct.lookupType);
      }
      if (struct.isSetLookupName()) {
        oprot.writeString(struct.lookupName);
      }
      if (struct.isSetLookupDesc()) {
        oprot.writeString(struct.lookupDesc);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCreateDatetime()) {
        oprot.writeString(struct.createDatetime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysLookup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lookupType = iprot.readString();
        struct.setLookupTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lookupName = iprot.readString();
        struct.setLookupNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lookupDesc = iprot.readString();
        struct.setLookupDescIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(6)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createDatetime = iprot.readString();
        struct.setCreateDatetimeIsSet(true);
      }
    }
  }

}


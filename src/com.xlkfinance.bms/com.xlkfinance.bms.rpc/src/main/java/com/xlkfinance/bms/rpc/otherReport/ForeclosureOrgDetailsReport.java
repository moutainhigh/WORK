/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.otherReport;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
public class ForeclosureOrgDetailsReport implements org.apache.thrift.TBase<ForeclosureOrgDetailsReport, ForeclosureOrgDetailsReport._Fields>, java.io.Serializable, Cloneable, Comparable<ForeclosureOrgDetailsReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ForeclosureOrgDetailsReport");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORG_ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgOrgName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHINA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chinaName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDays", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GUARANTEE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeFee", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NEW_PEPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("newPepaymentDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField CHOOSE_MONTH_OR_WEEK_FIELD_DESC = new org.apache.thrift.protocol.TField("chooseMonthOrWeek", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField RE_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("reMonth", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField FROM_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDay", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField END_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("endDay", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField INCLUDE_WT_FIELD_DESC = new org.apache.thrift.protocol.TField("includeWt", org.apache.thrift.protocol.TType.I32, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ForeclosureOrgDetailsReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ForeclosureOrgDetailsReportTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNumber; // required
  public String loanDate; // required
  public String orgOrgName; // required
  public String pmUserName; // required
  public String chinaName; // required
  public double loanAmount; // required
  public int loanDays; // required
  public double guaranteeFee; // required
  public double poundage; // required
  public String paymentDate; // required
  public String newPepaymentDate; // required
  public double repaymentMoney; // required
  public String orgName; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public int chooseMonthOrWeek; // required
  public String reMonth; // required
  public String fromDay; // required
  public String endDay; // required
  public int includeWt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    LOAN_DATE((short)4, "loanDate"),
    ORG_ORG_NAME((short)5, "orgOrgName"),
    PM_USER_NAME((short)6, "pmUserName"),
    CHINA_NAME((short)7, "chinaName"),
    LOAN_AMOUNT((short)8, "loanAmount"),
    LOAN_DAYS((short)9, "loanDays"),
    GUARANTEE_FEE((short)10, "guaranteeFee"),
    POUNDAGE((short)11, "poundage"),
    PAYMENT_DATE((short)12, "paymentDate"),
    NEW_PEPAYMENT_DATE((short)13, "newPepaymentDate"),
    REPAYMENT_MONEY((short)14, "repaymentMoney"),
    ORG_NAME((short)15, "orgName"),
    USER_IDS((short)16, "userIds"),
    PAGE((short)17, "page"),
    ROWS((short)18, "rows"),
    CHOOSE_MONTH_OR_WEEK((short)19, "chooseMonthOrWeek"),
    RE_MONTH((short)20, "reMonth"),
    FROM_DAY((short)21, "fromDay"),
    END_DAY((short)22, "endDay"),
    INCLUDE_WT((short)23, "includeWt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // LOAN_DATE
          return LOAN_DATE;
        case 5: // ORG_ORG_NAME
          return ORG_ORG_NAME;
        case 6: // PM_USER_NAME
          return PM_USER_NAME;
        case 7: // CHINA_NAME
          return CHINA_NAME;
        case 8: // LOAN_AMOUNT
          return LOAN_AMOUNT;
        case 9: // LOAN_DAYS
          return LOAN_DAYS;
        case 10: // GUARANTEE_FEE
          return GUARANTEE_FEE;
        case 11: // POUNDAGE
          return POUNDAGE;
        case 12: // PAYMENT_DATE
          return PAYMENT_DATE;
        case 13: // NEW_PEPAYMENT_DATE
          return NEW_PEPAYMENT_DATE;
        case 14: // REPAYMENT_MONEY
          return REPAYMENT_MONEY;
        case 15: // ORG_NAME
          return ORG_NAME;
        case 16: // USER_IDS
          return USER_IDS;
        case 17: // PAGE
          return PAGE;
        case 18: // ROWS
          return ROWS;
        case 19: // CHOOSE_MONTH_OR_WEEK
          return CHOOSE_MONTH_OR_WEEK;
        case 20: // RE_MONTH
          return RE_MONTH;
        case 21: // FROM_DAY
          return FROM_DAY;
        case 22: // END_DAY
          return END_DAY;
        case 23: // INCLUDE_WT
          return INCLUDE_WT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __LOANAMOUNT_ISSET_ID = 1;
  private static final int __LOANDAYS_ISSET_ID = 2;
  private static final int __GUARANTEEFEE_ISSET_ID = 3;
  private static final int __POUNDAGE_ISSET_ID = 4;
  private static final int __REPAYMENTMONEY_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private static final int __CHOOSEMONTHORWEEK_ISSET_ID = 8;
  private static final int __INCLUDEWT_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgOrgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHINA_NAME, new org.apache.thrift.meta_data.FieldMetaData("chinaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("loanAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("loanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUARANTEE_FEE, new org.apache.thrift.meta_data.FieldMetaData("guaranteeFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("paymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_PEPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("newPepaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("repaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHOOSE_MONTH_OR_WEEK, new org.apache.thrift.meta_data.FieldMetaData("chooseMonthOrWeek", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RE_MONTH, new org.apache.thrift.meta_data.FieldMetaData("reMonth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_DAY, new org.apache.thrift.meta_data.FieldMetaData("fromDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DAY, new org.apache.thrift.meta_data.FieldMetaData("endDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCLUDE_WT, new org.apache.thrift.meta_data.FieldMetaData("includeWt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ForeclosureOrgDetailsReport.class, metaDataMap);
  }

  public ForeclosureOrgDetailsReport() {
  }

  public ForeclosureOrgDetailsReport(
    int projectId,
    String projectName,
    String projectNumber,
    String loanDate,
    String orgOrgName,
    String pmUserName,
    String chinaName,
    double loanAmount,
    int loanDays,
    double guaranteeFee,
    double poundage,
    String paymentDate,
    String newPepaymentDate,
    double repaymentMoney,
    String orgName,
    List<Integer> userIds,
    int page,
    int rows,
    int chooseMonthOrWeek,
    String reMonth,
    String fromDay,
    String endDay,
    int includeWt)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.loanDate = loanDate;
    this.orgOrgName = orgOrgName;
    this.pmUserName = pmUserName;
    this.chinaName = chinaName;
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.paymentDate = paymentDate;
    this.newPepaymentDate = newPepaymentDate;
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    this.orgName = orgName;
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.chooseMonthOrWeek = chooseMonthOrWeek;
    setChooseMonthOrWeekIsSet(true);
    this.reMonth = reMonth;
    this.fromDay = fromDay;
    this.endDay = endDay;
    this.includeWt = includeWt;
    setIncludeWtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ForeclosureOrgDetailsReport(ForeclosureOrgDetailsReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    if (other.isSetOrgOrgName()) {
      this.orgOrgName = other.orgOrgName;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetChinaName()) {
      this.chinaName = other.chinaName;
    }
    this.loanAmount = other.loanAmount;
    this.loanDays = other.loanDays;
    this.guaranteeFee = other.guaranteeFee;
    this.poundage = other.poundage;
    if (other.isSetPaymentDate()) {
      this.paymentDate = other.paymentDate;
    }
    if (other.isSetNewPepaymentDate()) {
      this.newPepaymentDate = other.newPepaymentDate;
    }
    this.repaymentMoney = other.repaymentMoney;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.chooseMonthOrWeek = other.chooseMonthOrWeek;
    if (other.isSetReMonth()) {
      this.reMonth = other.reMonth;
    }
    if (other.isSetFromDay()) {
      this.fromDay = other.fromDay;
    }
    if (other.isSetEndDay()) {
      this.endDay = other.endDay;
    }
    this.includeWt = other.includeWt;
  }

  public ForeclosureOrgDetailsReport deepCopy() {
    return new ForeclosureOrgDetailsReport(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.loanDate = null;
    this.orgOrgName = null;
    this.pmUserName = null;
    this.chinaName = null;
    setLoanAmountIsSet(false);
    this.loanAmount = 0.0;
    setLoanDaysIsSet(false);
    this.loanDays = 0;
    setGuaranteeFeeIsSet(false);
    this.guaranteeFee = 0.0;
    setPoundageIsSet(false);
    this.poundage = 0.0;
    this.paymentDate = null;
    this.newPepaymentDate = null;
    setRepaymentMoneyIsSet(false);
    this.repaymentMoney = 0.0;
    this.orgName = null;
    this.userIds = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setChooseMonthOrWeekIsSet(false);
    this.chooseMonthOrWeek = 0;
    this.reMonth = null;
    this.fromDay = null;
    this.endDay = null;
    setIncludeWtIsSet(false);
    this.includeWt = 0;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ForeclosureOrgDetailsReport setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ForeclosureOrgDetailsReport setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ForeclosureOrgDetailsReport setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public ForeclosureOrgDetailsReport setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public String getOrgOrgName() {
    return this.orgOrgName;
  }

  public ForeclosureOrgDetailsReport setOrgOrgName(String orgOrgName) {
    this.orgOrgName = orgOrgName;
    return this;
  }

  public void unsetOrgOrgName() {
    this.orgOrgName = null;
  }

  /** Returns true if field orgOrgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgOrgName() {
    return this.orgOrgName != null;
  }

  public void setOrgOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgOrgName = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public ForeclosureOrgDetailsReport setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getChinaName() {
    return this.chinaName;
  }

  public ForeclosureOrgDetailsReport setChinaName(String chinaName) {
    this.chinaName = chinaName;
    return this;
  }

  public void unsetChinaName() {
    this.chinaName = null;
  }

  /** Returns true if field chinaName is set (has been assigned a value) and false otherwise */
  public boolean isSetChinaName() {
    return this.chinaName != null;
  }

  public void setChinaNameIsSet(boolean value) {
    if (!value) {
      this.chinaName = null;
    }
  }

  public double getLoanAmount() {
    return this.loanAmount;
  }

  public ForeclosureOrgDetailsReport setLoanAmount(double loanAmount) {
    this.loanAmount = loanAmount;
    setLoanAmountIsSet(true);
    return this;
  }

  public void unsetLoanAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  /** Returns true if field loanAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID);
  }

  public void setLoanAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANAMOUNT_ISSET_ID, value);
  }

  public int getLoanDays() {
    return this.loanDays;
  }

  public ForeclosureOrgDetailsReport setLoanDays(int loanDays) {
    this.loanDays = loanDays;
    setLoanDaysIsSet(true);
    return this;
  }

  public void unsetLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  /** Returns true if field loanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANDAYS_ISSET_ID);
  }

  public void setLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANDAYS_ISSET_ID, value);
  }

  public double getGuaranteeFee() {
    return this.guaranteeFee;
  }

  public ForeclosureOrgDetailsReport setGuaranteeFee(double guaranteeFee) {
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    return this;
  }

  public void unsetGuaranteeFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  /** Returns true if field guaranteeFee is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeFee() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  public void setGuaranteeFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public ForeclosureOrgDetailsReport setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public String getPaymentDate() {
    return this.paymentDate;
  }

  public ForeclosureOrgDetailsReport setPaymentDate(String paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  public void unsetPaymentDate() {
    this.paymentDate = null;
  }

  /** Returns true if field paymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentDate() {
    return this.paymentDate != null;
  }

  public void setPaymentDateIsSet(boolean value) {
    if (!value) {
      this.paymentDate = null;
    }
  }

  public String getNewPepaymentDate() {
    return this.newPepaymentDate;
  }

  public ForeclosureOrgDetailsReport setNewPepaymentDate(String newPepaymentDate) {
    this.newPepaymentDate = newPepaymentDate;
    return this;
  }

  public void unsetNewPepaymentDate() {
    this.newPepaymentDate = null;
  }

  /** Returns true if field newPepaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNewPepaymentDate() {
    return this.newPepaymentDate != null;
  }

  public void setNewPepaymentDateIsSet(boolean value) {
    if (!value) {
      this.newPepaymentDate = null;
    }
  }

  public double getRepaymentMoney() {
    return this.repaymentMoney;
  }

  public ForeclosureOrgDetailsReport setRepaymentMoney(double repaymentMoney) {
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field repaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  public void setRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public ForeclosureOrgDetailsReport setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ForeclosureOrgDetailsReport setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ForeclosureOrgDetailsReport setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ForeclosureOrgDetailsReport setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getChooseMonthOrWeek() {
    return this.chooseMonthOrWeek;
  }

  public ForeclosureOrgDetailsReport setChooseMonthOrWeek(int chooseMonthOrWeek) {
    this.chooseMonthOrWeek = chooseMonthOrWeek;
    setChooseMonthOrWeekIsSet(true);
    return this;
  }

  public void unsetChooseMonthOrWeek() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID);
  }

  /** Returns true if field chooseMonthOrWeek is set (has been assigned a value) and false otherwise */
  public boolean isSetChooseMonthOrWeek() {
    return EncodingUtils.testBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID);
  }

  public void setChooseMonthOrWeekIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHOOSEMONTHORWEEK_ISSET_ID, value);
  }

  public String getReMonth() {
    return this.reMonth;
  }

  public ForeclosureOrgDetailsReport setReMonth(String reMonth) {
    this.reMonth = reMonth;
    return this;
  }

  public void unsetReMonth() {
    this.reMonth = null;
  }

  /** Returns true if field reMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetReMonth() {
    return this.reMonth != null;
  }

  public void setReMonthIsSet(boolean value) {
    if (!value) {
      this.reMonth = null;
    }
  }

  public String getFromDay() {
    return this.fromDay;
  }

  public ForeclosureOrgDetailsReport setFromDay(String fromDay) {
    this.fromDay = fromDay;
    return this;
  }

  public void unsetFromDay() {
    this.fromDay = null;
  }

  /** Returns true if field fromDay is set (has been assigned a value) and false otherwise */
  public boolean isSetFromDay() {
    return this.fromDay != null;
  }

  public void setFromDayIsSet(boolean value) {
    if (!value) {
      this.fromDay = null;
    }
  }

  public String getEndDay() {
    return this.endDay;
  }

  public ForeclosureOrgDetailsReport setEndDay(String endDay) {
    this.endDay = endDay;
    return this;
  }

  public void unsetEndDay() {
    this.endDay = null;
  }

  /** Returns true if field endDay is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDay() {
    return this.endDay != null;
  }

  public void setEndDayIsSet(boolean value) {
    if (!value) {
      this.endDay = null;
    }
  }

  public int getIncludeWt() {
    return this.includeWt;
  }

  public ForeclosureOrgDetailsReport setIncludeWt(int includeWt) {
    this.includeWt = includeWt;
    setIncludeWtIsSet(true);
    return this;
  }

  public void unsetIncludeWt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCLUDEWT_ISSET_ID);
  }

  /** Returns true if field includeWt is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludeWt() {
    return EncodingUtils.testBit(__isset_bitfield, __INCLUDEWT_ISSET_ID);
  }

  public void setIncludeWtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCLUDEWT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case ORG_ORG_NAME:
      if (value == null) {
        unsetOrgOrgName();
      } else {
        setOrgOrgName((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case CHINA_NAME:
      if (value == null) {
        unsetChinaName();
      } else {
        setChinaName((String)value);
      }
      break;

    case LOAN_AMOUNT:
      if (value == null) {
        unsetLoanAmount();
      } else {
        setLoanAmount((Double)value);
      }
      break;

    case LOAN_DAYS:
      if (value == null) {
        unsetLoanDays();
      } else {
        setLoanDays((Integer)value);
      }
      break;

    case GUARANTEE_FEE:
      if (value == null) {
        unsetGuaranteeFee();
      } else {
        setGuaranteeFee((Double)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case PAYMENT_DATE:
      if (value == null) {
        unsetPaymentDate();
      } else {
        setPaymentDate((String)value);
      }
      break;

    case NEW_PEPAYMENT_DATE:
      if (value == null) {
        unsetNewPepaymentDate();
      } else {
        setNewPepaymentDate((String)value);
      }
      break;

    case REPAYMENT_MONEY:
      if (value == null) {
        unsetRepaymentMoney();
      } else {
        setRepaymentMoney((Double)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CHOOSE_MONTH_OR_WEEK:
      if (value == null) {
        unsetChooseMonthOrWeek();
      } else {
        setChooseMonthOrWeek((Integer)value);
      }
      break;

    case RE_MONTH:
      if (value == null) {
        unsetReMonth();
      } else {
        setReMonth((String)value);
      }
      break;

    case FROM_DAY:
      if (value == null) {
        unsetFromDay();
      } else {
        setFromDay((String)value);
      }
      break;

    case END_DAY:
      if (value == null) {
        unsetEndDay();
      } else {
        setEndDay((String)value);
      }
      break;

    case INCLUDE_WT:
      if (value == null) {
        unsetIncludeWt();
      } else {
        setIncludeWt((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case LOAN_DATE:
      return getLoanDate();

    case ORG_ORG_NAME:
      return getOrgOrgName();

    case PM_USER_NAME:
      return getPmUserName();

    case CHINA_NAME:
      return getChinaName();

    case LOAN_AMOUNT:
      return Double.valueOf(getLoanAmount());

    case LOAN_DAYS:
      return Integer.valueOf(getLoanDays());

    case GUARANTEE_FEE:
      return Double.valueOf(getGuaranteeFee());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case PAYMENT_DATE:
      return getPaymentDate();

    case NEW_PEPAYMENT_DATE:
      return getNewPepaymentDate();

    case REPAYMENT_MONEY:
      return Double.valueOf(getRepaymentMoney());

    case ORG_NAME:
      return getOrgName();

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CHOOSE_MONTH_OR_WEEK:
      return Integer.valueOf(getChooseMonthOrWeek());

    case RE_MONTH:
      return getReMonth();

    case FROM_DAY:
      return getFromDay();

    case END_DAY:
      return getEndDay();

    case INCLUDE_WT:
      return Integer.valueOf(getIncludeWt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case LOAN_DATE:
      return isSetLoanDate();
    case ORG_ORG_NAME:
      return isSetOrgOrgName();
    case PM_USER_NAME:
      return isSetPmUserName();
    case CHINA_NAME:
      return isSetChinaName();
    case LOAN_AMOUNT:
      return isSetLoanAmount();
    case LOAN_DAYS:
      return isSetLoanDays();
    case GUARANTEE_FEE:
      return isSetGuaranteeFee();
    case POUNDAGE:
      return isSetPoundage();
    case PAYMENT_DATE:
      return isSetPaymentDate();
    case NEW_PEPAYMENT_DATE:
      return isSetNewPepaymentDate();
    case REPAYMENT_MONEY:
      return isSetRepaymentMoney();
    case ORG_NAME:
      return isSetOrgName();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CHOOSE_MONTH_OR_WEEK:
      return isSetChooseMonthOrWeek();
    case RE_MONTH:
      return isSetReMonth();
    case FROM_DAY:
      return isSetFromDay();
    case END_DAY:
      return isSetEndDay();
    case INCLUDE_WT:
      return isSetIncludeWt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ForeclosureOrgDetailsReport)
      return this.equals((ForeclosureOrgDetailsReport)that);
    return false;
  }

  public boolean equals(ForeclosureOrgDetailsReport that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_orgOrgName = true && this.isSetOrgOrgName();
    boolean that_present_orgOrgName = true && that.isSetOrgOrgName();
    if (this_present_orgOrgName || that_present_orgOrgName) {
      if (!(this_present_orgOrgName && that_present_orgOrgName))
        return false;
      if (!this.orgOrgName.equals(that.orgOrgName))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_chinaName = true && this.isSetChinaName();
    boolean that_present_chinaName = true && that.isSetChinaName();
    if (this_present_chinaName || that_present_chinaName) {
      if (!(this_present_chinaName && that_present_chinaName))
        return false;
      if (!this.chinaName.equals(that.chinaName))
        return false;
    }

    boolean this_present_loanAmount = true;
    boolean that_present_loanAmount = true;
    if (this_present_loanAmount || that_present_loanAmount) {
      if (!(this_present_loanAmount && that_present_loanAmount))
        return false;
      if (this.loanAmount != that.loanAmount)
        return false;
    }

    boolean this_present_loanDays = true;
    boolean that_present_loanDays = true;
    if (this_present_loanDays || that_present_loanDays) {
      if (!(this_present_loanDays && that_present_loanDays))
        return false;
      if (this.loanDays != that.loanDays)
        return false;
    }

    boolean this_present_guaranteeFee = true;
    boolean that_present_guaranteeFee = true;
    if (this_present_guaranteeFee || that_present_guaranteeFee) {
      if (!(this_present_guaranteeFee && that_present_guaranteeFee))
        return false;
      if (this.guaranteeFee != that.guaranteeFee)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_paymentDate = true && this.isSetPaymentDate();
    boolean that_present_paymentDate = true && that.isSetPaymentDate();
    if (this_present_paymentDate || that_present_paymentDate) {
      if (!(this_present_paymentDate && that_present_paymentDate))
        return false;
      if (!this.paymentDate.equals(that.paymentDate))
        return false;
    }

    boolean this_present_newPepaymentDate = true && this.isSetNewPepaymentDate();
    boolean that_present_newPepaymentDate = true && that.isSetNewPepaymentDate();
    if (this_present_newPepaymentDate || that_present_newPepaymentDate) {
      if (!(this_present_newPepaymentDate && that_present_newPepaymentDate))
        return false;
      if (!this.newPepaymentDate.equals(that.newPepaymentDate))
        return false;
    }

    boolean this_present_repaymentMoney = true;
    boolean that_present_repaymentMoney = true;
    if (this_present_repaymentMoney || that_present_repaymentMoney) {
      if (!(this_present_repaymentMoney && that_present_repaymentMoney))
        return false;
      if (this.repaymentMoney != that.repaymentMoney)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_chooseMonthOrWeek = true;
    boolean that_present_chooseMonthOrWeek = true;
    if (this_present_chooseMonthOrWeek || that_present_chooseMonthOrWeek) {
      if (!(this_present_chooseMonthOrWeek && that_present_chooseMonthOrWeek))
        return false;
      if (this.chooseMonthOrWeek != that.chooseMonthOrWeek)
        return false;
    }

    boolean this_present_reMonth = true && this.isSetReMonth();
    boolean that_present_reMonth = true && that.isSetReMonth();
    if (this_present_reMonth || that_present_reMonth) {
      if (!(this_present_reMonth && that_present_reMonth))
        return false;
      if (!this.reMonth.equals(that.reMonth))
        return false;
    }

    boolean this_present_fromDay = true && this.isSetFromDay();
    boolean that_present_fromDay = true && that.isSetFromDay();
    if (this_present_fromDay || that_present_fromDay) {
      if (!(this_present_fromDay && that_present_fromDay))
        return false;
      if (!this.fromDay.equals(that.fromDay))
        return false;
    }

    boolean this_present_endDay = true && this.isSetEndDay();
    boolean that_present_endDay = true && that.isSetEndDay();
    if (this_present_endDay || that_present_endDay) {
      if (!(this_present_endDay && that_present_endDay))
        return false;
      if (!this.endDay.equals(that.endDay))
        return false;
    }

    boolean this_present_includeWt = true;
    boolean that_present_includeWt = true;
    if (this_present_includeWt || that_present_includeWt) {
      if (!(this_present_includeWt && that_present_includeWt))
        return false;
      if (this.includeWt != that.includeWt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_orgOrgName = true && (isSetOrgOrgName());
    list.add(present_orgOrgName);
    if (present_orgOrgName)
      list.add(orgOrgName);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_chinaName = true && (isSetChinaName());
    list.add(present_chinaName);
    if (present_chinaName)
      list.add(chinaName);

    boolean present_loanAmount = true;
    list.add(present_loanAmount);
    if (present_loanAmount)
      list.add(loanAmount);

    boolean present_loanDays = true;
    list.add(present_loanDays);
    if (present_loanDays)
      list.add(loanDays);

    boolean present_guaranteeFee = true;
    list.add(present_guaranteeFee);
    if (present_guaranteeFee)
      list.add(guaranteeFee);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_paymentDate = true && (isSetPaymentDate());
    list.add(present_paymentDate);
    if (present_paymentDate)
      list.add(paymentDate);

    boolean present_newPepaymentDate = true && (isSetNewPepaymentDate());
    list.add(present_newPepaymentDate);
    if (present_newPepaymentDate)
      list.add(newPepaymentDate);

    boolean present_repaymentMoney = true;
    list.add(present_repaymentMoney);
    if (present_repaymentMoney)
      list.add(repaymentMoney);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_chooseMonthOrWeek = true;
    list.add(present_chooseMonthOrWeek);
    if (present_chooseMonthOrWeek)
      list.add(chooseMonthOrWeek);

    boolean present_reMonth = true && (isSetReMonth());
    list.add(present_reMonth);
    if (present_reMonth)
      list.add(reMonth);

    boolean present_fromDay = true && (isSetFromDay());
    list.add(present_fromDay);
    if (present_fromDay)
      list.add(fromDay);

    boolean present_endDay = true && (isSetEndDay());
    list.add(present_endDay);
    if (present_endDay)
      list.add(endDay);

    boolean present_includeWt = true;
    list.add(present_includeWt);
    if (present_includeWt)
      list.add(includeWt);

    return list.hashCode();
  }

  @Override
  public int compareTo(ForeclosureOrgDetailsReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgOrgName()).compareTo(other.isSetOrgOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgOrgName, other.orgOrgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChinaName()).compareTo(other.isSetChinaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChinaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chinaName, other.chinaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanAmount()).compareTo(other.isSetLoanAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanAmount, other.loanAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDays()).compareTo(other.isSetLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDays, other.loanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeFee()).compareTo(other.isSetGuaranteeFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeFee, other.guaranteeFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentDate()).compareTo(other.isSetPaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentDate, other.paymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewPepaymentDate()).compareTo(other.isSetNewPepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPepaymentDate, other.newPepaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentMoney()).compareTo(other.isSetRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentMoney, other.repaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChooseMonthOrWeek()).compareTo(other.isSetChooseMonthOrWeek());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChooseMonthOrWeek()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chooseMonthOrWeek, other.chooseMonthOrWeek);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReMonth()).compareTo(other.isSetReMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reMonth, other.reMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFromDay()).compareTo(other.isSetFromDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDay, other.fromDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDay()).compareTo(other.isSetEndDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDay, other.endDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncludeWt()).compareTo(other.isSetIncludeWt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludeWt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeWt, other.includeWt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ForeclosureOrgDetailsReport(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgOrgName:");
    if (this.orgOrgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgOrgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chinaName:");
    if (this.chinaName == null) {
      sb.append("null");
    } else {
      sb.append(this.chinaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanAmount:");
    sb.append(this.loanAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDays:");
    sb.append(this.loanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeFee:");
    sb.append(this.guaranteeFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentDate:");
    if (this.paymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newPepaymentDate:");
    if (this.newPepaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.newPepaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentMoney:");
    sb.append(this.repaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chooseMonthOrWeek:");
    sb.append(this.chooseMonthOrWeek);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reMonth:");
    if (this.reMonth == null) {
      sb.append("null");
    } else {
      sb.append(this.reMonth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromDay:");
    if (this.fromDay == null) {
      sb.append("null");
    } else {
      sb.append(this.fromDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDay:");
    if (this.endDay == null) {
      sb.append("null");
    } else {
      sb.append(this.endDay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("includeWt:");
    sb.append(this.includeWt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ForeclosureOrgDetailsReportStandardSchemeFactory implements SchemeFactory {
    public ForeclosureOrgDetailsReportStandardScheme getScheme() {
      return new ForeclosureOrgDetailsReportStandardScheme();
    }
  }

  private static class ForeclosureOrgDetailsReportStandardScheme extends StandardScheme<ForeclosureOrgDetailsReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ForeclosureOrgDetailsReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORG_ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgOrgName = iprot.readString();
              struct.setOrgOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHINA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chinaName = iprot.readString();
              struct.setChinaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanAmount = iprot.readDouble();
              struct.setLoanAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanDays = iprot.readI32();
              struct.setLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GUARANTEE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.guaranteeFee = iprot.readDouble();
              struct.setGuaranteeFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentDate = iprot.readString();
              struct.setPaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NEW_PEPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newPepaymentDate = iprot.readString();
              struct.setNewPepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentMoney = iprot.readDouble();
              struct.setRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list8.size);
                int _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readI32();
                  struct.userIds.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CHOOSE_MONTH_OR_WEEK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chooseMonthOrWeek = iprot.readI32();
              struct.setChooseMonthOrWeekIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // RE_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reMonth = iprot.readString();
              struct.setReMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FROM_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fromDay = iprot.readString();
              struct.setFromDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // END_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDay = iprot.readString();
              struct.setEndDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // INCLUDE_WT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.includeWt = iprot.readI32();
              struct.setIncludeWtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ForeclosureOrgDetailsReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      if (struct.orgOrgName != null) {
        oprot.writeFieldBegin(ORG_ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgOrgName);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.chinaName != null) {
        oprot.writeFieldBegin(CHINA_NAME_FIELD_DESC);
        oprot.writeString(struct.chinaName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.loanAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.loanDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUARANTEE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.guaranteeFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      if (struct.paymentDate != null) {
        oprot.writeFieldBegin(PAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.paymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.newPepaymentDate != null) {
        oprot.writeFieldBegin(NEW_PEPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.newPepaymentDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.repaymentMoney);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter11 : struct.userIds)
          {
            oprot.writeI32(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHOOSE_MONTH_OR_WEEK_FIELD_DESC);
      oprot.writeI32(struct.chooseMonthOrWeek);
      oprot.writeFieldEnd();
      if (struct.reMonth != null) {
        oprot.writeFieldBegin(RE_MONTH_FIELD_DESC);
        oprot.writeString(struct.reMonth);
        oprot.writeFieldEnd();
      }
      if (struct.fromDay != null) {
        oprot.writeFieldBegin(FROM_DAY_FIELD_DESC);
        oprot.writeString(struct.fromDay);
        oprot.writeFieldEnd();
      }
      if (struct.endDay != null) {
        oprot.writeFieldBegin(END_DAY_FIELD_DESC);
        oprot.writeString(struct.endDay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INCLUDE_WT_FIELD_DESC);
      oprot.writeI32(struct.includeWt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ForeclosureOrgDetailsReportTupleSchemeFactory implements SchemeFactory {
    public ForeclosureOrgDetailsReportTupleScheme getScheme() {
      return new ForeclosureOrgDetailsReportTupleScheme();
    }
  }

  private static class ForeclosureOrgDetailsReportTupleScheme extends TupleScheme<ForeclosureOrgDetailsReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ForeclosureOrgDetailsReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(3);
      }
      if (struct.isSetOrgOrgName()) {
        optionals.set(4);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(5);
      }
      if (struct.isSetChinaName()) {
        optionals.set(6);
      }
      if (struct.isSetLoanAmount()) {
        optionals.set(7);
      }
      if (struct.isSetLoanDays()) {
        optionals.set(8);
      }
      if (struct.isSetGuaranteeFee()) {
        optionals.set(9);
      }
      if (struct.isSetPoundage()) {
        optionals.set(10);
      }
      if (struct.isSetPaymentDate()) {
        optionals.set(11);
      }
      if (struct.isSetNewPepaymentDate()) {
        optionals.set(12);
      }
      if (struct.isSetRepaymentMoney()) {
        optionals.set(13);
      }
      if (struct.isSetOrgName()) {
        optionals.set(14);
      }
      if (struct.isSetUserIds()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      if (struct.isSetRows()) {
        optionals.set(17);
      }
      if (struct.isSetChooseMonthOrWeek()) {
        optionals.set(18);
      }
      if (struct.isSetReMonth()) {
        optionals.set(19);
      }
      if (struct.isSetFromDay()) {
        optionals.set(20);
      }
      if (struct.isSetEndDay()) {
        optionals.set(21);
      }
      if (struct.isSetIncludeWt()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetOrgOrgName()) {
        oprot.writeString(struct.orgOrgName);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetChinaName()) {
        oprot.writeString(struct.chinaName);
      }
      if (struct.isSetLoanAmount()) {
        oprot.writeDouble(struct.loanAmount);
      }
      if (struct.isSetLoanDays()) {
        oprot.writeI32(struct.loanDays);
      }
      if (struct.isSetGuaranteeFee()) {
        oprot.writeDouble(struct.guaranteeFee);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetPaymentDate()) {
        oprot.writeString(struct.paymentDate);
      }
      if (struct.isSetNewPepaymentDate()) {
        oprot.writeString(struct.newPepaymentDate);
      }
      if (struct.isSetRepaymentMoney()) {
        oprot.writeDouble(struct.repaymentMoney);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter12 : struct.userIds)
          {
            oprot.writeI32(_iter12);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetChooseMonthOrWeek()) {
        oprot.writeI32(struct.chooseMonthOrWeek);
      }
      if (struct.isSetReMonth()) {
        oprot.writeString(struct.reMonth);
      }
      if (struct.isSetFromDay()) {
        oprot.writeString(struct.fromDay);
      }
      if (struct.isSetEndDay()) {
        oprot.writeString(struct.endDay);
      }
      if (struct.isSetIncludeWt()) {
        oprot.writeI32(struct.includeWt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ForeclosureOrgDetailsReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orgOrgName = iprot.readString();
        struct.setOrgOrgNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.chinaName = iprot.readString();
        struct.setChinaNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loanAmount = iprot.readDouble();
        struct.setLoanAmountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.loanDays = iprot.readI32();
        struct.setLoanDaysIsSet(true);
      }
      if (incoming.get(9)) {
        struct.guaranteeFee = iprot.readDouble();
        struct.setGuaranteeFeeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.paymentDate = iprot.readString();
        struct.setPaymentDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.newPepaymentDate = iprot.readString();
        struct.setNewPepaymentDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.repaymentMoney = iprot.readDouble();
        struct.setRepaymentMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.userIds.add(_elem14);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.chooseMonthOrWeek = iprot.readI32();
        struct.setChooseMonthOrWeekIsSet(true);
      }
      if (incoming.get(19)) {
        struct.reMonth = iprot.readString();
        struct.setReMonthIsSet(true);
      }
      if (incoming.get(20)) {
        struct.fromDay = iprot.readString();
        struct.setFromDayIsSet(true);
      }
      if (incoming.get(21)) {
        struct.endDay = iprot.readString();
        struct.setEndDayIsSet(true);
      }
      if (incoming.get(22)) {
        struct.includeWt = iprot.readI32();
        struct.setIncludeWtIsSet(true);
      }
    }
  }

}


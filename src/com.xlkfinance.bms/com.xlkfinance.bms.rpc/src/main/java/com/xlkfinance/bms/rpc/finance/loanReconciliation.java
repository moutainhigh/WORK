/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class loanReconciliation implements org.apache.thrift.TBase<loanReconciliation, loanReconciliation._Fields>, java.io.Serializable, Cloneable, Comparable<loanReconciliation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loanReconciliation");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_INFO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loan_info_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationCycleNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REALTIME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("realtimeId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationDt", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GEN_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("genDttm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationUserId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new loanReconciliationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new loanReconciliationTupleSchemeFactory());
  }

  public int pid; // required
  public int loan_info_id; // required
  public int reconciliationType; // required
  public int reconciliationCycleNum; // required
  public int realtimeId; // required
  public double reconciliationAmt; // required
  public String reconciliationDt; // required
  public String genDttm; // required
  public int reconciliationUserId; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_INFO_ID((short)2, "loan_info_id"),
    RECONCILIATION_TYPE((short)3, "reconciliationType"),
    RECONCILIATION_CYCLE_NUM((short)4, "reconciliationCycleNum"),
    REALTIME_ID((short)5, "realtimeId"),
    RECONCILIATION_AMT((short)6, "reconciliationAmt"),
    RECONCILIATION_DT((short)7, "reconciliationDt"),
    GEN_DTTM((short)8, "genDttm"),
    RECONCILIATION_USER_ID((short)9, "reconciliationUserId"),
    STATUS((short)10, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_INFO_ID
          return LOAN_INFO_ID;
        case 3: // RECONCILIATION_TYPE
          return RECONCILIATION_TYPE;
        case 4: // RECONCILIATION_CYCLE_NUM
          return RECONCILIATION_CYCLE_NUM;
        case 5: // REALTIME_ID
          return REALTIME_ID;
        case 6: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 7: // RECONCILIATION_DT
          return RECONCILIATION_DT;
        case 8: // GEN_DTTM
          return GEN_DTTM;
        case 9: // RECONCILIATION_USER_ID
          return RECONCILIATION_USER_ID;
        case 10: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOAN_INFO_ID_ISSET_ID = 1;
  private static final int __RECONCILIATIONTYPE_ISSET_ID = 2;
  private static final int __RECONCILIATIONCYCLENUM_ISSET_ID = 3;
  private static final int __REALTIMEID_ISSET_ID = 4;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 5;
  private static final int __RECONCILIATIONUSERID_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_INFO_ID, new org.apache.thrift.meta_data.FieldMetaData("loan_info_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECONCILIATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reconciliationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECONCILIATION_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("reconciliationCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REALTIME_ID, new org.apache.thrift.meta_data.FieldMetaData("realtimeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION_DT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEN_DTTM, new org.apache.thrift.meta_data.FieldMetaData("genDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECONCILIATION_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("reconciliationUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loanReconciliation.class, metaDataMap);
  }

  public loanReconciliation() {
  }

  public loanReconciliation(
    int pid,
    int loan_info_id,
    int reconciliationType,
    int reconciliationCycleNum,
    int realtimeId,
    double reconciliationAmt,
    String reconciliationDt,
    String genDttm,
    int reconciliationUserId,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loan_info_id = loan_info_id;
    setLoan_info_idIsSet(true);
    this.reconciliationType = reconciliationType;
    setReconciliationTypeIsSet(true);
    this.reconciliationCycleNum = reconciliationCycleNum;
    setReconciliationCycleNumIsSet(true);
    this.realtimeId = realtimeId;
    setRealtimeIdIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.reconciliationDt = reconciliationDt;
    this.genDttm = genDttm;
    this.reconciliationUserId = reconciliationUserId;
    setReconciliationUserIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public loanReconciliation(loanReconciliation other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loan_info_id = other.loan_info_id;
    this.reconciliationType = other.reconciliationType;
    this.reconciliationCycleNum = other.reconciliationCycleNum;
    this.realtimeId = other.realtimeId;
    this.reconciliationAmt = other.reconciliationAmt;
    if (other.isSetReconciliationDt()) {
      this.reconciliationDt = other.reconciliationDt;
    }
    if (other.isSetGenDttm()) {
      this.genDttm = other.genDttm;
    }
    this.reconciliationUserId = other.reconciliationUserId;
    this.status = other.status;
  }

  public loanReconciliation deepCopy() {
    return new loanReconciliation(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoan_info_idIsSet(false);
    this.loan_info_id = 0;
    setReconciliationTypeIsSet(false);
    this.reconciliationType = 0;
    setReconciliationCycleNumIsSet(false);
    this.reconciliationCycleNum = 0;
    setRealtimeIdIsSet(false);
    this.realtimeId = 0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    this.reconciliationDt = null;
    this.genDttm = null;
    setReconciliationUserIdIsSet(false);
    this.reconciliationUserId = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public loanReconciliation setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoan_info_id() {
    return this.loan_info_id;
  }

  public loanReconciliation setLoan_info_id(int loan_info_id) {
    this.loan_info_id = loan_info_id;
    setLoan_info_idIsSet(true);
    return this;
  }

  public void unsetLoan_info_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOAN_INFO_ID_ISSET_ID);
  }

  /** Returns true if field loan_info_id is set (has been assigned a value) and false otherwise */
  public boolean isSetLoan_info_id() {
    return EncodingUtils.testBit(__isset_bitfield, __LOAN_INFO_ID_ISSET_ID);
  }

  public void setLoan_info_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOAN_INFO_ID_ISSET_ID, value);
  }

  public int getReconciliationType() {
    return this.reconciliationType;
  }

  public loanReconciliation setReconciliationType(int reconciliationType) {
    this.reconciliationType = reconciliationType;
    setReconciliationTypeIsSet(true);
    return this;
  }

  public void unsetReconciliationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONTYPE_ISSET_ID);
  }

  /** Returns true if field reconciliationType is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONTYPE_ISSET_ID);
  }

  public void setReconciliationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONTYPE_ISSET_ID, value);
  }

  public int getReconciliationCycleNum() {
    return this.reconciliationCycleNum;
  }

  public loanReconciliation setReconciliationCycleNum(int reconciliationCycleNum) {
    this.reconciliationCycleNum = reconciliationCycleNum;
    setReconciliationCycleNumIsSet(true);
    return this;
  }

  public void unsetReconciliationCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONCYCLENUM_ISSET_ID);
  }

  /** Returns true if field reconciliationCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONCYCLENUM_ISSET_ID);
  }

  public void setReconciliationCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONCYCLENUM_ISSET_ID, value);
  }

  public int getRealtimeId() {
    return this.realtimeId;
  }

  public loanReconciliation setRealtimeId(int realtimeId) {
    this.realtimeId = realtimeId;
    setRealtimeIdIsSet(true);
    return this;
  }

  public void unsetRealtimeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALTIMEID_ISSET_ID);
  }

  /** Returns true if field realtimeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRealtimeId() {
    return EncodingUtils.testBit(__isset_bitfield, __REALTIMEID_ISSET_ID);
  }

  public void setRealtimeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALTIMEID_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public loanReconciliation setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public String getReconciliationDt() {
    return this.reconciliationDt;
  }

  public loanReconciliation setReconciliationDt(String reconciliationDt) {
    this.reconciliationDt = reconciliationDt;
    return this;
  }

  public void unsetReconciliationDt() {
    this.reconciliationDt = null;
  }

  /** Returns true if field reconciliationDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationDt() {
    return this.reconciliationDt != null;
  }

  public void setReconciliationDtIsSet(boolean value) {
    if (!value) {
      this.reconciliationDt = null;
    }
  }

  public String getGenDttm() {
    return this.genDttm;
  }

  public loanReconciliation setGenDttm(String genDttm) {
    this.genDttm = genDttm;
    return this;
  }

  public void unsetGenDttm() {
    this.genDttm = null;
  }

  /** Returns true if field genDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetGenDttm() {
    return this.genDttm != null;
  }

  public void setGenDttmIsSet(boolean value) {
    if (!value) {
      this.genDttm = null;
    }
  }

  public int getReconciliationUserId() {
    return this.reconciliationUserId;
  }

  public loanReconciliation setReconciliationUserId(int reconciliationUserId) {
    this.reconciliationUserId = reconciliationUserId;
    setReconciliationUserIdIsSet(true);
    return this;
  }

  public void unsetReconciliationUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONUSERID_ISSET_ID);
  }

  /** Returns true if field reconciliationUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONUSERID_ISSET_ID);
  }

  public void setReconciliationUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONUSERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public loanReconciliation setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_INFO_ID:
      if (value == null) {
        unsetLoan_info_id();
      } else {
        setLoan_info_id((Integer)value);
      }
      break;

    case RECONCILIATION_TYPE:
      if (value == null) {
        unsetReconciliationType();
      } else {
        setReconciliationType((Integer)value);
      }
      break;

    case RECONCILIATION_CYCLE_NUM:
      if (value == null) {
        unsetReconciliationCycleNum();
      } else {
        setReconciliationCycleNum((Integer)value);
      }
      break;

    case REALTIME_ID:
      if (value == null) {
        unsetRealtimeId();
      } else {
        setRealtimeId((Integer)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case RECONCILIATION_DT:
      if (value == null) {
        unsetReconciliationDt();
      } else {
        setReconciliationDt((String)value);
      }
      break;

    case GEN_DTTM:
      if (value == null) {
        unsetGenDttm();
      } else {
        setGenDttm((String)value);
      }
      break;

    case RECONCILIATION_USER_ID:
      if (value == null) {
        unsetReconciliationUserId();
      } else {
        setReconciliationUserId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_INFO_ID:
      return Integer.valueOf(getLoan_info_id());

    case RECONCILIATION_TYPE:
      return Integer.valueOf(getReconciliationType());

    case RECONCILIATION_CYCLE_NUM:
      return Integer.valueOf(getReconciliationCycleNum());

    case REALTIME_ID:
      return Integer.valueOf(getRealtimeId());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case RECONCILIATION_DT:
      return getReconciliationDt();

    case GEN_DTTM:
      return getGenDttm();

    case RECONCILIATION_USER_ID:
      return Integer.valueOf(getReconciliationUserId());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_INFO_ID:
      return isSetLoan_info_id();
    case RECONCILIATION_TYPE:
      return isSetReconciliationType();
    case RECONCILIATION_CYCLE_NUM:
      return isSetReconciliationCycleNum();
    case REALTIME_ID:
      return isSetRealtimeId();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case RECONCILIATION_DT:
      return isSetReconciliationDt();
    case GEN_DTTM:
      return isSetGenDttm();
    case RECONCILIATION_USER_ID:
      return isSetReconciliationUserId();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof loanReconciliation)
      return this.equals((loanReconciliation)that);
    return false;
  }

  public boolean equals(loanReconciliation that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loan_info_id = true;
    boolean that_present_loan_info_id = true;
    if (this_present_loan_info_id || that_present_loan_info_id) {
      if (!(this_present_loan_info_id && that_present_loan_info_id))
        return false;
      if (this.loan_info_id != that.loan_info_id)
        return false;
    }

    boolean this_present_reconciliationType = true;
    boolean that_present_reconciliationType = true;
    if (this_present_reconciliationType || that_present_reconciliationType) {
      if (!(this_present_reconciliationType && that_present_reconciliationType))
        return false;
      if (this.reconciliationType != that.reconciliationType)
        return false;
    }

    boolean this_present_reconciliationCycleNum = true;
    boolean that_present_reconciliationCycleNum = true;
    if (this_present_reconciliationCycleNum || that_present_reconciliationCycleNum) {
      if (!(this_present_reconciliationCycleNum && that_present_reconciliationCycleNum))
        return false;
      if (this.reconciliationCycleNum != that.reconciliationCycleNum)
        return false;
    }

    boolean this_present_realtimeId = true;
    boolean that_present_realtimeId = true;
    if (this_present_realtimeId || that_present_realtimeId) {
      if (!(this_present_realtimeId && that_present_realtimeId))
        return false;
      if (this.realtimeId != that.realtimeId)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_reconciliationDt = true && this.isSetReconciliationDt();
    boolean that_present_reconciliationDt = true && that.isSetReconciliationDt();
    if (this_present_reconciliationDt || that_present_reconciliationDt) {
      if (!(this_present_reconciliationDt && that_present_reconciliationDt))
        return false;
      if (!this.reconciliationDt.equals(that.reconciliationDt))
        return false;
    }

    boolean this_present_genDttm = true && this.isSetGenDttm();
    boolean that_present_genDttm = true && that.isSetGenDttm();
    if (this_present_genDttm || that_present_genDttm) {
      if (!(this_present_genDttm && that_present_genDttm))
        return false;
      if (!this.genDttm.equals(that.genDttm))
        return false;
    }

    boolean this_present_reconciliationUserId = true;
    boolean that_present_reconciliationUserId = true;
    if (this_present_reconciliationUserId || that_present_reconciliationUserId) {
      if (!(this_present_reconciliationUserId && that_present_reconciliationUserId))
        return false;
      if (this.reconciliationUserId != that.reconciliationUserId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loan_info_id = true;
    list.add(present_loan_info_id);
    if (present_loan_info_id)
      list.add(loan_info_id);

    boolean present_reconciliationType = true;
    list.add(present_reconciliationType);
    if (present_reconciliationType)
      list.add(reconciliationType);

    boolean present_reconciliationCycleNum = true;
    list.add(present_reconciliationCycleNum);
    if (present_reconciliationCycleNum)
      list.add(reconciliationCycleNum);

    boolean present_realtimeId = true;
    list.add(present_realtimeId);
    if (present_realtimeId)
      list.add(realtimeId);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_reconciliationDt = true && (isSetReconciliationDt());
    list.add(present_reconciliationDt);
    if (present_reconciliationDt)
      list.add(reconciliationDt);

    boolean present_genDttm = true && (isSetGenDttm());
    list.add(present_genDttm);
    if (present_genDttm)
      list.add(genDttm);

    boolean present_reconciliationUserId = true;
    list.add(present_reconciliationUserId);
    if (present_reconciliationUserId)
      list.add(reconciliationUserId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(loanReconciliation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoan_info_id()).compareTo(other.isSetLoan_info_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoan_info_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loan_info_id, other.loan_info_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationType()).compareTo(other.isSetReconciliationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationType, other.reconciliationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationCycleNum()).compareTo(other.isSetReconciliationCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationCycleNum, other.reconciliationCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealtimeId()).compareTo(other.isSetRealtimeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealtimeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realtimeId, other.realtimeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationDt()).compareTo(other.isSetReconciliationDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationDt, other.reconciliationDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenDttm()).compareTo(other.isSetGenDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genDttm, other.genDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationUserId()).compareTo(other.isSetReconciliationUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationUserId, other.reconciliationUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("loanReconciliation(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loan_info_id:");
    sb.append(this.loan_info_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationType:");
    sb.append(this.reconciliationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationCycleNum:");
    sb.append(this.reconciliationCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realtimeId:");
    sb.append(this.realtimeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationDt:");
    if (this.reconciliationDt == null) {
      sb.append("null");
    } else {
      sb.append(this.reconciliationDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genDttm:");
    if (this.genDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.genDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationUserId:");
    sb.append(this.reconciliationUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class loanReconciliationStandardSchemeFactory implements SchemeFactory {
    public loanReconciliationStandardScheme getScheme() {
      return new loanReconciliationStandardScheme();
    }
  }

  private static class loanReconciliationStandardScheme extends StandardScheme<loanReconciliation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, loanReconciliation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_INFO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loan_info_id = iprot.readI32();
              struct.setLoan_info_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECONCILIATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconciliationType = iprot.readI32();
              struct.setReconciliationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECONCILIATION_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconciliationCycleNum = iprot.readI32();
              struct.setReconciliationCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REALTIME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.realtimeId = iprot.readI32();
              struct.setRealtimeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECONCILIATION_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reconciliationDt = iprot.readString();
              struct.setReconciliationDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GEN_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genDttm = iprot.readString();
              struct.setGenDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECONCILIATION_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconciliationUserId = iprot.readI32();
              struct.setReconciliationUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, loanReconciliation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_INFO_ID_FIELD_DESC);
      oprot.writeI32(struct.loan_info_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.reconciliationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.reconciliationCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REALTIME_ID_FIELD_DESC);
      oprot.writeI32(struct.realtimeId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      if (struct.reconciliationDt != null) {
        oprot.writeFieldBegin(RECONCILIATION_DT_FIELD_DESC);
        oprot.writeString(struct.reconciliationDt);
        oprot.writeFieldEnd();
      }
      if (struct.genDttm != null) {
        oprot.writeFieldBegin(GEN_DTTM_FIELD_DESC);
        oprot.writeString(struct.genDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECONCILIATION_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.reconciliationUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class loanReconciliationTupleSchemeFactory implements SchemeFactory {
    public loanReconciliationTupleScheme getScheme() {
      return new loanReconciliationTupleScheme();
    }
  }

  private static class loanReconciliationTupleScheme extends TupleScheme<loanReconciliation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, loanReconciliation struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoan_info_id()) {
        optionals.set(1);
      }
      if (struct.isSetReconciliationType()) {
        optionals.set(2);
      }
      if (struct.isSetReconciliationCycleNum()) {
        optionals.set(3);
      }
      if (struct.isSetRealtimeId()) {
        optionals.set(4);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(5);
      }
      if (struct.isSetReconciliationDt()) {
        optionals.set(6);
      }
      if (struct.isSetGenDttm()) {
        optionals.set(7);
      }
      if (struct.isSetReconciliationUserId()) {
        optionals.set(8);
      }
      if (struct.isSetStatus()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoan_info_id()) {
        oprot.writeI32(struct.loan_info_id);
      }
      if (struct.isSetReconciliationType()) {
        oprot.writeI32(struct.reconciliationType);
      }
      if (struct.isSetReconciliationCycleNum()) {
        oprot.writeI32(struct.reconciliationCycleNum);
      }
      if (struct.isSetRealtimeId()) {
        oprot.writeI32(struct.realtimeId);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetReconciliationDt()) {
        oprot.writeString(struct.reconciliationDt);
      }
      if (struct.isSetGenDttm()) {
        oprot.writeString(struct.genDttm);
      }
      if (struct.isSetReconciliationUserId()) {
        oprot.writeI32(struct.reconciliationUserId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, loanReconciliation struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loan_info_id = iprot.readI32();
        struct.setLoan_info_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reconciliationType = iprot.readI32();
        struct.setReconciliationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reconciliationCycleNum = iprot.readI32();
        struct.setReconciliationCycleNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.realtimeId = iprot.readI32();
        struct.setRealtimeIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reconciliationDt = iprot.readString();
        struct.setReconciliationDtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.genDttm = iprot.readString();
        struct.setGenDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.reconciliationUserId = iprot.readI32();
        struct.setReconciliationUserIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


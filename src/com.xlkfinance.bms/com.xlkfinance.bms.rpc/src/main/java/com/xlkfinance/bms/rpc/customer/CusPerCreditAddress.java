/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerCreditAddress implements org.apache.thrift.TBase<CusPerCreditAddress, CusPerCreditAddress._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerCreditAddress> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerCreditAddress");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_PER_CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusPerCredit", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PROVINCE_FIELD_DESC = new org.apache.thrift.protocol.TField("province", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COUNTY_FIELD_DESC = new org.apache.thrift.protocol.TField("county", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ROAD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roadName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ROAD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("roadNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CMT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cmtName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ZIP_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("zipCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LIVE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("liveDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ADDR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("addrType", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerCreditAddressStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerCreditAddressTupleSchemeFactory());
  }

  public int pid; // required
  public CusPerCredit cusPerCredit; // required
  public String province; // required
  public String city; // required
  public String county; // required
  public String roadName; // required
  public String roadNo; // required
  public String cmtName; // required
  public String zipCode; // required
  public String liveDate; // required
  public String addrType; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_PER_CREDIT((short)2, "cusPerCredit"),
    PROVINCE((short)3, "province"),
    CITY((short)4, "city"),
    COUNTY((short)5, "county"),
    ROAD_NAME((short)6, "roadName"),
    ROAD_NO((short)7, "roadNo"),
    CMT_NAME((short)8, "cmtName"),
    ZIP_CODE((short)9, "zipCode"),
    LIVE_DATE((short)10, "liveDate"),
    ADDR_TYPE((short)11, "addrType"),
    STATUS((short)12, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_PER_CREDIT
          return CUS_PER_CREDIT;
        case 3: // PROVINCE
          return PROVINCE;
        case 4: // CITY
          return CITY;
        case 5: // COUNTY
          return COUNTY;
        case 6: // ROAD_NAME
          return ROAD_NAME;
        case 7: // ROAD_NO
          return ROAD_NO;
        case 8: // CMT_NAME
          return CMT_NAME;
        case 9: // ZIP_CODE
          return ZIP_CODE;
        case 10: // LIVE_DATE
          return LIVE_DATE;
        case 11: // ADDR_TYPE
          return ADDR_TYPE;
        case 12: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_PER_CREDIT, new org.apache.thrift.meta_data.FieldMetaData("cusPerCredit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusPerCredit.class)));
    tmpMap.put(_Fields.PROVINCE, new org.apache.thrift.meta_data.FieldMetaData("province", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTY, new org.apache.thrift.meta_data.FieldMetaData("county", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROAD_NAME, new org.apache.thrift.meta_data.FieldMetaData("roadName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROAD_NO, new org.apache.thrift.meta_data.FieldMetaData("roadNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CMT_NAME, new org.apache.thrift.meta_data.FieldMetaData("cmtName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZIP_CODE, new org.apache.thrift.meta_data.FieldMetaData("zipCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVE_DATE, new org.apache.thrift.meta_data.FieldMetaData("liveDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("addrType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerCreditAddress.class, metaDataMap);
  }

  public CusPerCreditAddress() {
  }

  public CusPerCreditAddress(
    int pid,
    CusPerCredit cusPerCredit,
    String province,
    String city,
    String county,
    String roadName,
    String roadNo,
    String cmtName,
    String zipCode,
    String liveDate,
    String addrType,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusPerCredit = cusPerCredit;
    this.province = province;
    this.city = city;
    this.county = county;
    this.roadName = roadName;
    this.roadNo = roadNo;
    this.cmtName = cmtName;
    this.zipCode = zipCode;
    this.liveDate = liveDate;
    this.addrType = addrType;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerCreditAddress(CusPerCreditAddress other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusPerCredit()) {
      this.cusPerCredit = new CusPerCredit(other.cusPerCredit);
    }
    if (other.isSetProvince()) {
      this.province = other.province;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetCounty()) {
      this.county = other.county;
    }
    if (other.isSetRoadName()) {
      this.roadName = other.roadName;
    }
    if (other.isSetRoadNo()) {
      this.roadNo = other.roadNo;
    }
    if (other.isSetCmtName()) {
      this.cmtName = other.cmtName;
    }
    if (other.isSetZipCode()) {
      this.zipCode = other.zipCode;
    }
    if (other.isSetLiveDate()) {
      this.liveDate = other.liveDate;
    }
    if (other.isSetAddrType()) {
      this.addrType = other.addrType;
    }
    this.status = other.status;
  }

  public CusPerCreditAddress deepCopy() {
    return new CusPerCreditAddress(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusPerCredit = null;
    this.province = null;
    this.city = null;
    this.county = null;
    this.roadName = null;
    this.roadNo = null;
    this.cmtName = null;
    this.zipCode = null;
    this.liveDate = null;
    this.addrType = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerCreditAddress setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusPerCredit getCusPerCredit() {
    return this.cusPerCredit;
  }

  public CusPerCreditAddress setCusPerCredit(CusPerCredit cusPerCredit) {
    this.cusPerCredit = cusPerCredit;
    return this;
  }

  public void unsetCusPerCredit() {
    this.cusPerCredit = null;
  }

  /** Returns true if field cusPerCredit is set (has been assigned a value) and false otherwise */
  public boolean isSetCusPerCredit() {
    return this.cusPerCredit != null;
  }

  public void setCusPerCreditIsSet(boolean value) {
    if (!value) {
      this.cusPerCredit = null;
    }
  }

  public String getProvince() {
    return this.province;
  }

  public CusPerCreditAddress setProvince(String province) {
    this.province = province;
    return this;
  }

  public void unsetProvince() {
    this.province = null;
  }

  /** Returns true if field province is set (has been assigned a value) and false otherwise */
  public boolean isSetProvince() {
    return this.province != null;
  }

  public void setProvinceIsSet(boolean value) {
    if (!value) {
      this.province = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public CusPerCreditAddress setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getCounty() {
    return this.county;
  }

  public CusPerCreditAddress setCounty(String county) {
    this.county = county;
    return this;
  }

  public void unsetCounty() {
    this.county = null;
  }

  /** Returns true if field county is set (has been assigned a value) and false otherwise */
  public boolean isSetCounty() {
    return this.county != null;
  }

  public void setCountyIsSet(boolean value) {
    if (!value) {
      this.county = null;
    }
  }

  public String getRoadName() {
    return this.roadName;
  }

  public CusPerCreditAddress setRoadName(String roadName) {
    this.roadName = roadName;
    return this;
  }

  public void unsetRoadName() {
    this.roadName = null;
  }

  /** Returns true if field roadName is set (has been assigned a value) and false otherwise */
  public boolean isSetRoadName() {
    return this.roadName != null;
  }

  public void setRoadNameIsSet(boolean value) {
    if (!value) {
      this.roadName = null;
    }
  }

  public String getRoadNo() {
    return this.roadNo;
  }

  public CusPerCreditAddress setRoadNo(String roadNo) {
    this.roadNo = roadNo;
    return this;
  }

  public void unsetRoadNo() {
    this.roadNo = null;
  }

  /** Returns true if field roadNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRoadNo() {
    return this.roadNo != null;
  }

  public void setRoadNoIsSet(boolean value) {
    if (!value) {
      this.roadNo = null;
    }
  }

  public String getCmtName() {
    return this.cmtName;
  }

  public CusPerCreditAddress setCmtName(String cmtName) {
    this.cmtName = cmtName;
    return this;
  }

  public void unsetCmtName() {
    this.cmtName = null;
  }

  /** Returns true if field cmtName is set (has been assigned a value) and false otherwise */
  public boolean isSetCmtName() {
    return this.cmtName != null;
  }

  public void setCmtNameIsSet(boolean value) {
    if (!value) {
      this.cmtName = null;
    }
  }

  public String getZipCode() {
    return this.zipCode;
  }

  public CusPerCreditAddress setZipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  public void unsetZipCode() {
    this.zipCode = null;
  }

  /** Returns true if field zipCode is set (has been assigned a value) and false otherwise */
  public boolean isSetZipCode() {
    return this.zipCode != null;
  }

  public void setZipCodeIsSet(boolean value) {
    if (!value) {
      this.zipCode = null;
    }
  }

  public String getLiveDate() {
    return this.liveDate;
  }

  public CusPerCreditAddress setLiveDate(String liveDate) {
    this.liveDate = liveDate;
    return this;
  }

  public void unsetLiveDate() {
    this.liveDate = null;
  }

  /** Returns true if field liveDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveDate() {
    return this.liveDate != null;
  }

  public void setLiveDateIsSet(boolean value) {
    if (!value) {
      this.liveDate = null;
    }
  }

  public String getAddrType() {
    return this.addrType;
  }

  public CusPerCreditAddress setAddrType(String addrType) {
    this.addrType = addrType;
    return this;
  }

  public void unsetAddrType() {
    this.addrType = null;
  }

  /** Returns true if field addrType is set (has been assigned a value) and false otherwise */
  public boolean isSetAddrType() {
    return this.addrType != null;
  }

  public void setAddrTypeIsSet(boolean value) {
    if (!value) {
      this.addrType = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerCreditAddress setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_PER_CREDIT:
      if (value == null) {
        unsetCusPerCredit();
      } else {
        setCusPerCredit((CusPerCredit)value);
      }
      break;

    case PROVINCE:
      if (value == null) {
        unsetProvince();
      } else {
        setProvince((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case COUNTY:
      if (value == null) {
        unsetCounty();
      } else {
        setCounty((String)value);
      }
      break;

    case ROAD_NAME:
      if (value == null) {
        unsetRoadName();
      } else {
        setRoadName((String)value);
      }
      break;

    case ROAD_NO:
      if (value == null) {
        unsetRoadNo();
      } else {
        setRoadNo((String)value);
      }
      break;

    case CMT_NAME:
      if (value == null) {
        unsetCmtName();
      } else {
        setCmtName((String)value);
      }
      break;

    case ZIP_CODE:
      if (value == null) {
        unsetZipCode();
      } else {
        setZipCode((String)value);
      }
      break;

    case LIVE_DATE:
      if (value == null) {
        unsetLiveDate();
      } else {
        setLiveDate((String)value);
      }
      break;

    case ADDR_TYPE:
      if (value == null) {
        unsetAddrType();
      } else {
        setAddrType((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_PER_CREDIT:
      return getCusPerCredit();

    case PROVINCE:
      return getProvince();

    case CITY:
      return getCity();

    case COUNTY:
      return getCounty();

    case ROAD_NAME:
      return getRoadName();

    case ROAD_NO:
      return getRoadNo();

    case CMT_NAME:
      return getCmtName();

    case ZIP_CODE:
      return getZipCode();

    case LIVE_DATE:
      return getLiveDate();

    case ADDR_TYPE:
      return getAddrType();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_PER_CREDIT:
      return isSetCusPerCredit();
    case PROVINCE:
      return isSetProvince();
    case CITY:
      return isSetCity();
    case COUNTY:
      return isSetCounty();
    case ROAD_NAME:
      return isSetRoadName();
    case ROAD_NO:
      return isSetRoadNo();
    case CMT_NAME:
      return isSetCmtName();
    case ZIP_CODE:
      return isSetZipCode();
    case LIVE_DATE:
      return isSetLiveDate();
    case ADDR_TYPE:
      return isSetAddrType();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerCreditAddress)
      return this.equals((CusPerCreditAddress)that);
    return false;
  }

  public boolean equals(CusPerCreditAddress that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusPerCredit = true && this.isSetCusPerCredit();
    boolean that_present_cusPerCredit = true && that.isSetCusPerCredit();
    if (this_present_cusPerCredit || that_present_cusPerCredit) {
      if (!(this_present_cusPerCredit && that_present_cusPerCredit))
        return false;
      if (!this.cusPerCredit.equals(that.cusPerCredit))
        return false;
    }

    boolean this_present_province = true && this.isSetProvince();
    boolean that_present_province = true && that.isSetProvince();
    if (this_present_province || that_present_province) {
      if (!(this_present_province && that_present_province))
        return false;
      if (!this.province.equals(that.province))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_county = true && this.isSetCounty();
    boolean that_present_county = true && that.isSetCounty();
    if (this_present_county || that_present_county) {
      if (!(this_present_county && that_present_county))
        return false;
      if (!this.county.equals(that.county))
        return false;
    }

    boolean this_present_roadName = true && this.isSetRoadName();
    boolean that_present_roadName = true && that.isSetRoadName();
    if (this_present_roadName || that_present_roadName) {
      if (!(this_present_roadName && that_present_roadName))
        return false;
      if (!this.roadName.equals(that.roadName))
        return false;
    }

    boolean this_present_roadNo = true && this.isSetRoadNo();
    boolean that_present_roadNo = true && that.isSetRoadNo();
    if (this_present_roadNo || that_present_roadNo) {
      if (!(this_present_roadNo && that_present_roadNo))
        return false;
      if (!this.roadNo.equals(that.roadNo))
        return false;
    }

    boolean this_present_cmtName = true && this.isSetCmtName();
    boolean that_present_cmtName = true && that.isSetCmtName();
    if (this_present_cmtName || that_present_cmtName) {
      if (!(this_present_cmtName && that_present_cmtName))
        return false;
      if (!this.cmtName.equals(that.cmtName))
        return false;
    }

    boolean this_present_zipCode = true && this.isSetZipCode();
    boolean that_present_zipCode = true && that.isSetZipCode();
    if (this_present_zipCode || that_present_zipCode) {
      if (!(this_present_zipCode && that_present_zipCode))
        return false;
      if (!this.zipCode.equals(that.zipCode))
        return false;
    }

    boolean this_present_liveDate = true && this.isSetLiveDate();
    boolean that_present_liveDate = true && that.isSetLiveDate();
    if (this_present_liveDate || that_present_liveDate) {
      if (!(this_present_liveDate && that_present_liveDate))
        return false;
      if (!this.liveDate.equals(that.liveDate))
        return false;
    }

    boolean this_present_addrType = true && this.isSetAddrType();
    boolean that_present_addrType = true && that.isSetAddrType();
    if (this_present_addrType || that_present_addrType) {
      if (!(this_present_addrType && that_present_addrType))
        return false;
      if (!this.addrType.equals(that.addrType))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusPerCredit = true && (isSetCusPerCredit());
    list.add(present_cusPerCredit);
    if (present_cusPerCredit)
      list.add(cusPerCredit);

    boolean present_province = true && (isSetProvince());
    list.add(present_province);
    if (present_province)
      list.add(province);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_county = true && (isSetCounty());
    list.add(present_county);
    if (present_county)
      list.add(county);

    boolean present_roadName = true && (isSetRoadName());
    list.add(present_roadName);
    if (present_roadName)
      list.add(roadName);

    boolean present_roadNo = true && (isSetRoadNo());
    list.add(present_roadNo);
    if (present_roadNo)
      list.add(roadNo);

    boolean present_cmtName = true && (isSetCmtName());
    list.add(present_cmtName);
    if (present_cmtName)
      list.add(cmtName);

    boolean present_zipCode = true && (isSetZipCode());
    list.add(present_zipCode);
    if (present_zipCode)
      list.add(zipCode);

    boolean present_liveDate = true && (isSetLiveDate());
    list.add(present_liveDate);
    if (present_liveDate)
      list.add(liveDate);

    boolean present_addrType = true && (isSetAddrType());
    list.add(present_addrType);
    if (present_addrType)
      list.add(addrType);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerCreditAddress other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusPerCredit()).compareTo(other.isSetCusPerCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusPerCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusPerCredit, other.cusPerCredit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvince()).compareTo(other.isSetProvince());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvince()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.province, other.province);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCounty()).compareTo(other.isSetCounty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.county, other.county);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoadName()).compareTo(other.isSetRoadName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoadName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roadName, other.roadName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoadNo()).compareTo(other.isSetRoadNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoadNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roadNo, other.roadNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmtName()).compareTo(other.isSetCmtName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmtName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmtName, other.cmtName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZipCode()).compareTo(other.isSetZipCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZipCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zipCode, other.zipCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveDate()).compareTo(other.isSetLiveDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveDate, other.liveDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddrType()).compareTo(other.isSetAddrType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddrType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addrType, other.addrType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerCreditAddress(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusPerCredit:");
    if (this.cusPerCredit == null) {
      sb.append("null");
    } else {
      sb.append(this.cusPerCredit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("province:");
    if (this.province == null) {
      sb.append("null");
    } else {
      sb.append(this.province);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("county:");
    if (this.county == null) {
      sb.append("null");
    } else {
      sb.append(this.county);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roadName:");
    if (this.roadName == null) {
      sb.append("null");
    } else {
      sb.append(this.roadName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roadNo:");
    if (this.roadNo == null) {
      sb.append("null");
    } else {
      sb.append(this.roadNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cmtName:");
    if (this.cmtName == null) {
      sb.append("null");
    } else {
      sb.append(this.cmtName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("zipCode:");
    if (this.zipCode == null) {
      sb.append("null");
    } else {
      sb.append(this.zipCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveDate:");
    if (this.liveDate == null) {
      sb.append("null");
    } else {
      sb.append(this.liveDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("addrType:");
    if (this.addrType == null) {
      sb.append("null");
    } else {
      sb.append(this.addrType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusPerCredit != null) {
      cusPerCredit.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerCreditAddressStandardSchemeFactory implements SchemeFactory {
    public CusPerCreditAddressStandardScheme getScheme() {
      return new CusPerCreditAddressStandardScheme();
    }
  }

  private static class CusPerCreditAddressStandardScheme extends StandardScheme<CusPerCreditAddress> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerCreditAddress struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_PER_CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusPerCredit = new CusPerCredit();
              struct.cusPerCredit.read(iprot);
              struct.setCusPerCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROVINCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.province = iprot.readString();
              struct.setProvinceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.county = iprot.readString();
              struct.setCountyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ROAD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roadName = iprot.readString();
              struct.setRoadNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ROAD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roadNo = iprot.readString();
              struct.setRoadNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CMT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cmtName = iprot.readString();
              struct.setCmtNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ZIP_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zipCode = iprot.readString();
              struct.setZipCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIVE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveDate = iprot.readString();
              struct.setLiveDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADDR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.addrType = iprot.readString();
              struct.setAddrTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerCreditAddress struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusPerCredit != null) {
        oprot.writeFieldBegin(CUS_PER_CREDIT_FIELD_DESC);
        struct.cusPerCredit.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.province != null) {
        oprot.writeFieldBegin(PROVINCE_FIELD_DESC);
        oprot.writeString(struct.province);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.county != null) {
        oprot.writeFieldBegin(COUNTY_FIELD_DESC);
        oprot.writeString(struct.county);
        oprot.writeFieldEnd();
      }
      if (struct.roadName != null) {
        oprot.writeFieldBegin(ROAD_NAME_FIELD_DESC);
        oprot.writeString(struct.roadName);
        oprot.writeFieldEnd();
      }
      if (struct.roadNo != null) {
        oprot.writeFieldBegin(ROAD_NO_FIELD_DESC);
        oprot.writeString(struct.roadNo);
        oprot.writeFieldEnd();
      }
      if (struct.cmtName != null) {
        oprot.writeFieldBegin(CMT_NAME_FIELD_DESC);
        oprot.writeString(struct.cmtName);
        oprot.writeFieldEnd();
      }
      if (struct.zipCode != null) {
        oprot.writeFieldBegin(ZIP_CODE_FIELD_DESC);
        oprot.writeString(struct.zipCode);
        oprot.writeFieldEnd();
      }
      if (struct.liveDate != null) {
        oprot.writeFieldBegin(LIVE_DATE_FIELD_DESC);
        oprot.writeString(struct.liveDate);
        oprot.writeFieldEnd();
      }
      if (struct.addrType != null) {
        oprot.writeFieldBegin(ADDR_TYPE_FIELD_DESC);
        oprot.writeString(struct.addrType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerCreditAddressTupleSchemeFactory implements SchemeFactory {
    public CusPerCreditAddressTupleScheme getScheme() {
      return new CusPerCreditAddressTupleScheme();
    }
  }

  private static class CusPerCreditAddressTupleScheme extends TupleScheme<CusPerCreditAddress> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerCreditAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusPerCredit()) {
        optionals.set(1);
      }
      if (struct.isSetProvince()) {
        optionals.set(2);
      }
      if (struct.isSetCity()) {
        optionals.set(3);
      }
      if (struct.isSetCounty()) {
        optionals.set(4);
      }
      if (struct.isSetRoadName()) {
        optionals.set(5);
      }
      if (struct.isSetRoadNo()) {
        optionals.set(6);
      }
      if (struct.isSetCmtName()) {
        optionals.set(7);
      }
      if (struct.isSetZipCode()) {
        optionals.set(8);
      }
      if (struct.isSetLiveDate()) {
        optionals.set(9);
      }
      if (struct.isSetAddrType()) {
        optionals.set(10);
      }
      if (struct.isSetStatus()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusPerCredit()) {
        struct.cusPerCredit.write(oprot);
      }
      if (struct.isSetProvince()) {
        oprot.writeString(struct.province);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetCounty()) {
        oprot.writeString(struct.county);
      }
      if (struct.isSetRoadName()) {
        oprot.writeString(struct.roadName);
      }
      if (struct.isSetRoadNo()) {
        oprot.writeString(struct.roadNo);
      }
      if (struct.isSetCmtName()) {
        oprot.writeString(struct.cmtName);
      }
      if (struct.isSetZipCode()) {
        oprot.writeString(struct.zipCode);
      }
      if (struct.isSetLiveDate()) {
        oprot.writeString(struct.liveDate);
      }
      if (struct.isSetAddrType()) {
        oprot.writeString(struct.addrType);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerCreditAddress struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusPerCredit = new CusPerCredit();
        struct.cusPerCredit.read(iprot);
        struct.setCusPerCreditIsSet(true);
      }
      if (incoming.get(2)) {
        struct.province = iprot.readString();
        struct.setProvinceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.county = iprot.readString();
        struct.setCountyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.roadName = iprot.readString();
        struct.setRoadNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.roadNo = iprot.readString();
        struct.setRoadNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cmtName = iprot.readString();
        struct.setCmtNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.zipCode = iprot.readString();
        struct.setZipCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.liveDate = iprot.readString();
        struct.setLiveDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.addrType = iprot.readString();
        struct.setAddrTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


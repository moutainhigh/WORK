/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComFinanceReport implements org.apache.thrift.TBase<CusComFinanceReport, CusComFinanceReport._Fields>, java.io.Serializable, Cloneable, Comparable<CusComFinanceReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComFinanceReport");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACCOUNTING_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("accountingYear", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNTING_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("accountingMonth", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField REPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REPORT_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("reportDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPORT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportUserId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField REPORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reportName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComFinanceReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComFinanceReportTupleSchemeFactory());
  }

  public int pid; // required
  public int comId; // required
  public int accountingYear; // required
  public int accountingMonth; // required
  public String reportType; // required
  public String reportDttm; // required
  public int reportUserId; // required
  public String reportName; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    COM_ID((short)2, "comId"),
    ACCOUNTING_YEAR((short)3, "accountingYear"),
    ACCOUNTING_MONTH((short)4, "accountingMonth"),
    REPORT_TYPE((short)5, "reportType"),
    REPORT_DTTM((short)6, "reportDttm"),
    REPORT_USER_ID((short)7, "reportUserId"),
    REPORT_NAME((short)8, "reportName"),
    STATUS((short)9, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // COM_ID
          return COM_ID;
        case 3: // ACCOUNTING_YEAR
          return ACCOUNTING_YEAR;
        case 4: // ACCOUNTING_MONTH
          return ACCOUNTING_MONTH;
        case 5: // REPORT_TYPE
          return REPORT_TYPE;
        case 6: // REPORT_DTTM
          return REPORT_DTTM;
        case 7: // REPORT_USER_ID
          return REPORT_USER_ID;
        case 8: // REPORT_NAME
          return REPORT_NAME;
        case 9: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __COMID_ISSET_ID = 1;
  private static final int __ACCOUNTINGYEAR_ISSET_ID = 2;
  private static final int __ACCOUNTINGMONTH_ISSET_ID = 3;
  private static final int __REPORTUSERID_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COM_ID, new org.apache.thrift.meta_data.FieldMetaData("comId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNTING_YEAR, new org.apache.thrift.meta_data.FieldMetaData("accountingYear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNTING_MONTH, new org.apache.thrift.meta_data.FieldMetaData("accountingMonth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reportType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_DTTM, new org.apache.thrift.meta_data.FieldMetaData("reportDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("reportUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("reportName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComFinanceReport.class, metaDataMap);
  }

  public CusComFinanceReport() {
  }

  public CusComFinanceReport(
    int pid,
    int comId,
    int accountingYear,
    int accountingMonth,
    String reportType,
    String reportDttm,
    int reportUserId,
    String reportName,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.comId = comId;
    setComIdIsSet(true);
    this.accountingYear = accountingYear;
    setAccountingYearIsSet(true);
    this.accountingMonth = accountingMonth;
    setAccountingMonthIsSet(true);
    this.reportType = reportType;
    this.reportDttm = reportDttm;
    this.reportUserId = reportUserId;
    setReportUserIdIsSet(true);
    this.reportName = reportName;
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComFinanceReport(CusComFinanceReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.comId = other.comId;
    this.accountingYear = other.accountingYear;
    this.accountingMonth = other.accountingMonth;
    if (other.isSetReportType()) {
      this.reportType = other.reportType;
    }
    if (other.isSetReportDttm()) {
      this.reportDttm = other.reportDttm;
    }
    this.reportUserId = other.reportUserId;
    if (other.isSetReportName()) {
      this.reportName = other.reportName;
    }
    this.status = other.status;
  }

  public CusComFinanceReport deepCopy() {
    return new CusComFinanceReport(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setComIdIsSet(false);
    this.comId = 0;
    setAccountingYearIsSet(false);
    this.accountingYear = 0;
    setAccountingMonthIsSet(false);
    this.accountingMonth = 0;
    this.reportType = null;
    this.reportDttm = null;
    setReportUserIdIsSet(false);
    this.reportUserId = 0;
    this.reportName = null;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComFinanceReport setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getComId() {
    return this.comId;
  }

  public CusComFinanceReport setComId(int comId) {
    this.comId = comId;
    setComIdIsSet(true);
    return this;
  }

  public void unsetComId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMID_ISSET_ID);
  }

  /** Returns true if field comId is set (has been assigned a value) and false otherwise */
  public boolean isSetComId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMID_ISSET_ID);
  }

  public void setComIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMID_ISSET_ID, value);
  }

  public int getAccountingYear() {
    return this.accountingYear;
  }

  public CusComFinanceReport setAccountingYear(int accountingYear) {
    this.accountingYear = accountingYear;
    setAccountingYearIsSet(true);
    return this;
  }

  public void unsetAccountingYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTINGYEAR_ISSET_ID);
  }

  /** Returns true if field accountingYear is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountingYear() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTINGYEAR_ISSET_ID);
  }

  public void setAccountingYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTINGYEAR_ISSET_ID, value);
  }

  public int getAccountingMonth() {
    return this.accountingMonth;
  }

  public CusComFinanceReport setAccountingMonth(int accountingMonth) {
    this.accountingMonth = accountingMonth;
    setAccountingMonthIsSet(true);
    return this;
  }

  public void unsetAccountingMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTINGMONTH_ISSET_ID);
  }

  /** Returns true if field accountingMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountingMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTINGMONTH_ISSET_ID);
  }

  public void setAccountingMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTINGMONTH_ISSET_ID, value);
  }

  public String getReportType() {
    return this.reportType;
  }

  public CusComFinanceReport setReportType(String reportType) {
    this.reportType = reportType;
    return this;
  }

  public void unsetReportType() {
    this.reportType = null;
  }

  /** Returns true if field reportType is set (has been assigned a value) and false otherwise */
  public boolean isSetReportType() {
    return this.reportType != null;
  }

  public void setReportTypeIsSet(boolean value) {
    if (!value) {
      this.reportType = null;
    }
  }

  public String getReportDttm() {
    return this.reportDttm;
  }

  public CusComFinanceReport setReportDttm(String reportDttm) {
    this.reportDttm = reportDttm;
    return this;
  }

  public void unsetReportDttm() {
    this.reportDttm = null;
  }

  /** Returns true if field reportDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetReportDttm() {
    return this.reportDttm != null;
  }

  public void setReportDttmIsSet(boolean value) {
    if (!value) {
      this.reportDttm = null;
    }
  }

  public int getReportUserId() {
    return this.reportUserId;
  }

  public CusComFinanceReport setReportUserId(int reportUserId) {
    this.reportUserId = reportUserId;
    setReportUserIdIsSet(true);
    return this;
  }

  public void unsetReportUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTUSERID_ISSET_ID);
  }

  /** Returns true if field reportUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetReportUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTUSERID_ISSET_ID);
  }

  public void setReportUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTUSERID_ISSET_ID, value);
  }

  public String getReportName() {
    return this.reportName;
  }

  public CusComFinanceReport setReportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  public void unsetReportName() {
    this.reportName = null;
  }

  /** Returns true if field reportName is set (has been assigned a value) and false otherwise */
  public boolean isSetReportName() {
    return this.reportName != null;
  }

  public void setReportNameIsSet(boolean value) {
    if (!value) {
      this.reportName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComFinanceReport setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case COM_ID:
      if (value == null) {
        unsetComId();
      } else {
        setComId((Integer)value);
      }
      break;

    case ACCOUNTING_YEAR:
      if (value == null) {
        unsetAccountingYear();
      } else {
        setAccountingYear((Integer)value);
      }
      break;

    case ACCOUNTING_MONTH:
      if (value == null) {
        unsetAccountingMonth();
      } else {
        setAccountingMonth((Integer)value);
      }
      break;

    case REPORT_TYPE:
      if (value == null) {
        unsetReportType();
      } else {
        setReportType((String)value);
      }
      break;

    case REPORT_DTTM:
      if (value == null) {
        unsetReportDttm();
      } else {
        setReportDttm((String)value);
      }
      break;

    case REPORT_USER_ID:
      if (value == null) {
        unsetReportUserId();
      } else {
        setReportUserId((Integer)value);
      }
      break;

    case REPORT_NAME:
      if (value == null) {
        unsetReportName();
      } else {
        setReportName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case COM_ID:
      return Integer.valueOf(getComId());

    case ACCOUNTING_YEAR:
      return Integer.valueOf(getAccountingYear());

    case ACCOUNTING_MONTH:
      return Integer.valueOf(getAccountingMonth());

    case REPORT_TYPE:
      return getReportType();

    case REPORT_DTTM:
      return getReportDttm();

    case REPORT_USER_ID:
      return Integer.valueOf(getReportUserId());

    case REPORT_NAME:
      return getReportName();

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case COM_ID:
      return isSetComId();
    case ACCOUNTING_YEAR:
      return isSetAccountingYear();
    case ACCOUNTING_MONTH:
      return isSetAccountingMonth();
    case REPORT_TYPE:
      return isSetReportType();
    case REPORT_DTTM:
      return isSetReportDttm();
    case REPORT_USER_ID:
      return isSetReportUserId();
    case REPORT_NAME:
      return isSetReportName();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComFinanceReport)
      return this.equals((CusComFinanceReport)that);
    return false;
  }

  public boolean equals(CusComFinanceReport that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_comId = true;
    boolean that_present_comId = true;
    if (this_present_comId || that_present_comId) {
      if (!(this_present_comId && that_present_comId))
        return false;
      if (this.comId != that.comId)
        return false;
    }

    boolean this_present_accountingYear = true;
    boolean that_present_accountingYear = true;
    if (this_present_accountingYear || that_present_accountingYear) {
      if (!(this_present_accountingYear && that_present_accountingYear))
        return false;
      if (this.accountingYear != that.accountingYear)
        return false;
    }

    boolean this_present_accountingMonth = true;
    boolean that_present_accountingMonth = true;
    if (this_present_accountingMonth || that_present_accountingMonth) {
      if (!(this_present_accountingMonth && that_present_accountingMonth))
        return false;
      if (this.accountingMonth != that.accountingMonth)
        return false;
    }

    boolean this_present_reportType = true && this.isSetReportType();
    boolean that_present_reportType = true && that.isSetReportType();
    if (this_present_reportType || that_present_reportType) {
      if (!(this_present_reportType && that_present_reportType))
        return false;
      if (!this.reportType.equals(that.reportType))
        return false;
    }

    boolean this_present_reportDttm = true && this.isSetReportDttm();
    boolean that_present_reportDttm = true && that.isSetReportDttm();
    if (this_present_reportDttm || that_present_reportDttm) {
      if (!(this_present_reportDttm && that_present_reportDttm))
        return false;
      if (!this.reportDttm.equals(that.reportDttm))
        return false;
    }

    boolean this_present_reportUserId = true;
    boolean that_present_reportUserId = true;
    if (this_present_reportUserId || that_present_reportUserId) {
      if (!(this_present_reportUserId && that_present_reportUserId))
        return false;
      if (this.reportUserId != that.reportUserId)
        return false;
    }

    boolean this_present_reportName = true && this.isSetReportName();
    boolean that_present_reportName = true && that.isSetReportName();
    if (this_present_reportName || that_present_reportName) {
      if (!(this_present_reportName && that_present_reportName))
        return false;
      if (!this.reportName.equals(that.reportName))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_comId = true;
    list.add(present_comId);
    if (present_comId)
      list.add(comId);

    boolean present_accountingYear = true;
    list.add(present_accountingYear);
    if (present_accountingYear)
      list.add(accountingYear);

    boolean present_accountingMonth = true;
    list.add(present_accountingMonth);
    if (present_accountingMonth)
      list.add(accountingMonth);

    boolean present_reportType = true && (isSetReportType());
    list.add(present_reportType);
    if (present_reportType)
      list.add(reportType);

    boolean present_reportDttm = true && (isSetReportDttm());
    list.add(present_reportDttm);
    if (present_reportDttm)
      list.add(reportDttm);

    boolean present_reportUserId = true;
    list.add(present_reportUserId);
    if (present_reportUserId)
      list.add(reportUserId);

    boolean present_reportName = true && (isSetReportName());
    list.add(present_reportName);
    if (present_reportName)
      list.add(reportName);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComFinanceReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComId()).compareTo(other.isSetComId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comId, other.comId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountingYear()).compareTo(other.isSetAccountingYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountingYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountingYear, other.accountingYear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountingMonth()).compareTo(other.isSetAccountingMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountingMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountingMonth, other.accountingMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportType()).compareTo(other.isSetReportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportType, other.reportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportDttm()).compareTo(other.isSetReportDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportDttm, other.reportDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportUserId()).compareTo(other.isSetReportUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportUserId, other.reportUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportName()).compareTo(other.isSetReportName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportName, other.reportName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComFinanceReport(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comId:");
    sb.append(this.comId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountingYear:");
    sb.append(this.accountingYear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountingMonth:");
    sb.append(this.accountingMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportType:");
    if (this.reportType == null) {
      sb.append("null");
    } else {
      sb.append(this.reportType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportDttm:");
    if (this.reportDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.reportDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportUserId:");
    sb.append(this.reportUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportName:");
    if (this.reportName == null) {
      sb.append("null");
    } else {
      sb.append(this.reportName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComFinanceReportStandardSchemeFactory implements SchemeFactory {
    public CusComFinanceReportStandardScheme getScheme() {
      return new CusComFinanceReportStandardScheme();
    }
  }

  private static class CusComFinanceReportStandardScheme extends StandardScheme<CusComFinanceReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComFinanceReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comId = iprot.readI32();
              struct.setComIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACCOUNTING_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountingYear = iprot.readI32();
              struct.setAccountingYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNTING_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountingMonth = iprot.readI32();
              struct.setAccountingMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportType = iprot.readString();
              struct.setReportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPORT_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportDttm = iprot.readString();
              struct.setReportDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPORT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportUserId = iprot.readI32();
              struct.setReportUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportName = iprot.readString();
              struct.setReportNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComFinanceReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COM_ID_FIELD_DESC);
      oprot.writeI32(struct.comId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNTING_YEAR_FIELD_DESC);
      oprot.writeI32(struct.accountingYear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNTING_MONTH_FIELD_DESC);
      oprot.writeI32(struct.accountingMonth);
      oprot.writeFieldEnd();
      if (struct.reportType != null) {
        oprot.writeFieldBegin(REPORT_TYPE_FIELD_DESC);
        oprot.writeString(struct.reportType);
        oprot.writeFieldEnd();
      }
      if (struct.reportDttm != null) {
        oprot.writeFieldBegin(REPORT_DTTM_FIELD_DESC);
        oprot.writeString(struct.reportDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPORT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.reportUserId);
      oprot.writeFieldEnd();
      if (struct.reportName != null) {
        oprot.writeFieldBegin(REPORT_NAME_FIELD_DESC);
        oprot.writeString(struct.reportName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComFinanceReportTupleSchemeFactory implements SchemeFactory {
    public CusComFinanceReportTupleScheme getScheme() {
      return new CusComFinanceReportTupleScheme();
    }
  }

  private static class CusComFinanceReportTupleScheme extends TupleScheme<CusComFinanceReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComFinanceReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetComId()) {
        optionals.set(1);
      }
      if (struct.isSetAccountingYear()) {
        optionals.set(2);
      }
      if (struct.isSetAccountingMonth()) {
        optionals.set(3);
      }
      if (struct.isSetReportType()) {
        optionals.set(4);
      }
      if (struct.isSetReportDttm()) {
        optionals.set(5);
      }
      if (struct.isSetReportUserId()) {
        optionals.set(6);
      }
      if (struct.isSetReportName()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetComId()) {
        oprot.writeI32(struct.comId);
      }
      if (struct.isSetAccountingYear()) {
        oprot.writeI32(struct.accountingYear);
      }
      if (struct.isSetAccountingMonth()) {
        oprot.writeI32(struct.accountingMonth);
      }
      if (struct.isSetReportType()) {
        oprot.writeString(struct.reportType);
      }
      if (struct.isSetReportDttm()) {
        oprot.writeString(struct.reportDttm);
      }
      if (struct.isSetReportUserId()) {
        oprot.writeI32(struct.reportUserId);
      }
      if (struct.isSetReportName()) {
        oprot.writeString(struct.reportName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComFinanceReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.comId = iprot.readI32();
        struct.setComIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.accountingYear = iprot.readI32();
        struct.setAccountingYearIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accountingMonth = iprot.readI32();
        struct.setAccountingMonthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.reportType = iprot.readString();
        struct.setReportTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.reportDttm = iprot.readString();
        struct.setReportDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.reportUserId = iprot.readI32();
        struct.setReportUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.reportName = iprot.readString();
        struct.setReportNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusEstQuota implements org.apache.thrift.TBase<CusEstQuota, CusEstQuota._Fields>, java.io.Serializable, Cloneable, Comparable<CusEstQuota> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusEstQuota");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_EST_FACTOR_WEIGHTS_FIELD_DESC = new org.apache.thrift.protocol.TField("cusEstFactorWeights", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField QUOTA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("quotaName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TOTAL_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalScore", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusEstQuotaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusEstQuotaTupleSchemeFactory());
  }

  public int pid; // required
  public CusEstFactorWeights cusEstFactorWeights; // required
  public String quotaName; // required
  public String remark; // required
  public int status; // required
  public List<CusEstOption> options; // required
  public double totalScore; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_EST_FACTOR_WEIGHTS((short)2, "cusEstFactorWeights"),
    QUOTA_NAME((short)3, "quotaName"),
    REMARK((short)4, "remark"),
    STATUS((short)5, "status"),
    OPTIONS((short)6, "options"),
    TOTAL_SCORE((short)7, "totalScore");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_EST_FACTOR_WEIGHTS
          return CUS_EST_FACTOR_WEIGHTS;
        case 3: // QUOTA_NAME
          return QUOTA_NAME;
        case 4: // REMARK
          return REMARK;
        case 5: // STATUS
          return STATUS;
        case 6: // OPTIONS
          return OPTIONS;
        case 7: // TOTAL_SCORE
          return TOTAL_SCORE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private static final int __TOTALSCORE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_EST_FACTOR_WEIGHTS, new org.apache.thrift.meta_data.FieldMetaData("cusEstFactorWeights", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusEstFactorWeights.class)));
    tmpMap.put(_Fields.QUOTA_NAME, new org.apache.thrift.meta_data.FieldMetaData("quotaName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "CusEstOption"))));
    tmpMap.put(_Fields.TOTAL_SCORE, new org.apache.thrift.meta_data.FieldMetaData("totalScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusEstQuota.class, metaDataMap);
  }

  public CusEstQuota() {
  }

  public CusEstQuota(
    int pid,
    CusEstFactorWeights cusEstFactorWeights,
    String quotaName,
    String remark,
    int status,
    List<CusEstOption> options,
    double totalScore)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusEstFactorWeights = cusEstFactorWeights;
    this.quotaName = quotaName;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.options = options;
    this.totalScore = totalScore;
    setTotalScoreIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusEstQuota(CusEstQuota other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusEstFactorWeights()) {
      this.cusEstFactorWeights = new CusEstFactorWeights(other.cusEstFactorWeights);
    }
    if (other.isSetQuotaName()) {
      this.quotaName = other.quotaName;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetOptions()) {
      List<CusEstOption> __this__options = new ArrayList<CusEstOption>(other.options.size());
      for (CusEstOption other_element : other.options) {
        __this__options.add(other_element);
      }
      this.options = __this__options;
    }
    this.totalScore = other.totalScore;
  }

  public CusEstQuota deepCopy() {
    return new CusEstQuota(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusEstFactorWeights = null;
    this.quotaName = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.options = null;
    setTotalScoreIsSet(false);
    this.totalScore = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusEstQuota setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusEstFactorWeights getCusEstFactorWeights() {
    return this.cusEstFactorWeights;
  }

  public CusEstQuota setCusEstFactorWeights(CusEstFactorWeights cusEstFactorWeights) {
    this.cusEstFactorWeights = cusEstFactorWeights;
    return this;
  }

  public void unsetCusEstFactorWeights() {
    this.cusEstFactorWeights = null;
  }

  /** Returns true if field cusEstFactorWeights is set (has been assigned a value) and false otherwise */
  public boolean isSetCusEstFactorWeights() {
    return this.cusEstFactorWeights != null;
  }

  public void setCusEstFactorWeightsIsSet(boolean value) {
    if (!value) {
      this.cusEstFactorWeights = null;
    }
  }

  public String getQuotaName() {
    return this.quotaName;
  }

  public CusEstQuota setQuotaName(String quotaName) {
    this.quotaName = quotaName;
    return this;
  }

  public void unsetQuotaName() {
    this.quotaName = null;
  }

  /** Returns true if field quotaName is set (has been assigned a value) and false otherwise */
  public boolean isSetQuotaName() {
    return this.quotaName != null;
  }

  public void setQuotaNameIsSet(boolean value) {
    if (!value) {
      this.quotaName = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusEstQuota setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusEstQuota setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getOptionsSize() {
    return (this.options == null) ? 0 : this.options.size();
  }

  public java.util.Iterator<CusEstOption> getOptionsIterator() {
    return (this.options == null) ? null : this.options.iterator();
  }

  public void addToOptions(CusEstOption elem) {
    if (this.options == null) {
      this.options = new ArrayList<CusEstOption>();
    }
    this.options.add(elem);
  }

  public List<CusEstOption> getOptions() {
    return this.options;
  }

  public CusEstQuota setOptions(List<CusEstOption> options) {
    this.options = options;
    return this;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public double getTotalScore() {
    return this.totalScore;
  }

  public CusEstQuota setTotalScore(double totalScore) {
    this.totalScore = totalScore;
    setTotalScoreIsSet(true);
    return this;
  }

  public void unsetTotalScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSCORE_ISSET_ID);
  }

  /** Returns true if field totalScore is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalScore() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSCORE_ISSET_ID);
  }

  public void setTotalScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSCORE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_EST_FACTOR_WEIGHTS:
      if (value == null) {
        unsetCusEstFactorWeights();
      } else {
        setCusEstFactorWeights((CusEstFactorWeights)value);
      }
      break;

    case QUOTA_NAME:
      if (value == null) {
        unsetQuotaName();
      } else {
        setQuotaName((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((List<CusEstOption>)value);
      }
      break;

    case TOTAL_SCORE:
      if (value == null) {
        unsetTotalScore();
      } else {
        setTotalScore((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_EST_FACTOR_WEIGHTS:
      return getCusEstFactorWeights();

    case QUOTA_NAME:
      return getQuotaName();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case OPTIONS:
      return getOptions();

    case TOTAL_SCORE:
      return Double.valueOf(getTotalScore());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_EST_FACTOR_WEIGHTS:
      return isSetCusEstFactorWeights();
    case QUOTA_NAME:
      return isSetQuotaName();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case OPTIONS:
      return isSetOptions();
    case TOTAL_SCORE:
      return isSetTotalScore();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusEstQuota)
      return this.equals((CusEstQuota)that);
    return false;
  }

  public boolean equals(CusEstQuota that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusEstFactorWeights = true && this.isSetCusEstFactorWeights();
    boolean that_present_cusEstFactorWeights = true && that.isSetCusEstFactorWeights();
    if (this_present_cusEstFactorWeights || that_present_cusEstFactorWeights) {
      if (!(this_present_cusEstFactorWeights && that_present_cusEstFactorWeights))
        return false;
      if (!this.cusEstFactorWeights.equals(that.cusEstFactorWeights))
        return false;
    }

    boolean this_present_quotaName = true && this.isSetQuotaName();
    boolean that_present_quotaName = true && that.isSetQuotaName();
    if (this_present_quotaName || that_present_quotaName) {
      if (!(this_present_quotaName && that_present_quotaName))
        return false;
      if (!this.quotaName.equals(that.quotaName))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    boolean this_present_totalScore = true;
    boolean that_present_totalScore = true;
    if (this_present_totalScore || that_present_totalScore) {
      if (!(this_present_totalScore && that_present_totalScore))
        return false;
      if (this.totalScore != that.totalScore)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusEstFactorWeights = true && (isSetCusEstFactorWeights());
    list.add(present_cusEstFactorWeights);
    if (present_cusEstFactorWeights)
      list.add(cusEstFactorWeights);

    boolean present_quotaName = true && (isSetQuotaName());
    list.add(present_quotaName);
    if (present_quotaName)
      list.add(quotaName);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_options = true && (isSetOptions());
    list.add(present_options);
    if (present_options)
      list.add(options);

    boolean present_totalScore = true;
    list.add(present_totalScore);
    if (present_totalScore)
      list.add(totalScore);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusEstQuota other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusEstFactorWeights()).compareTo(other.isSetCusEstFactorWeights());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusEstFactorWeights()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusEstFactorWeights, other.cusEstFactorWeights);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuotaName()).compareTo(other.isSetQuotaName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuotaName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quotaName, other.quotaName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalScore()).compareTo(other.isSetTotalScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalScore, other.totalScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusEstQuota(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusEstFactorWeights:");
    if (this.cusEstFactorWeights == null) {
      sb.append("null");
    } else {
      sb.append(this.cusEstFactorWeights);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("quotaName:");
    if (this.quotaName == null) {
      sb.append("null");
    } else {
      sb.append(this.quotaName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("options:");
    if (this.options == null) {
      sb.append("null");
    } else {
      sb.append(this.options);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalScore:");
    sb.append(this.totalScore);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusEstFactorWeights != null) {
      cusEstFactorWeights.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusEstQuotaStandardSchemeFactory implements SchemeFactory {
    public CusEstQuotaStandardScheme getScheme() {
      return new CusEstQuotaStandardScheme();
    }
  }

  private static class CusEstQuotaStandardScheme extends StandardScheme<CusEstQuota> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusEstQuota struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_EST_FACTOR_WEIGHTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusEstFactorWeights = new CusEstFactorWeights();
              struct.cusEstFactorWeights.read(iprot);
              struct.setCusEstFactorWeightsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUOTA_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.quotaName = iprot.readString();
              struct.setQuotaNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.options = new ArrayList<CusEstOption>(_list48.size);
                CusEstOption _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new CusEstOption();
                  _elem49.read(iprot);
                  struct.options.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOTAL_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalScore = iprot.readDouble();
              struct.setTotalScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusEstQuota struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusEstFactorWeights != null) {
        oprot.writeFieldBegin(CUS_EST_FACTOR_WEIGHTS_FIELD_DESC);
        struct.cusEstFactorWeights.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.quotaName != null) {
        oprot.writeFieldBegin(QUOTA_NAME_FIELD_DESC);
        oprot.writeString(struct.quotaName);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.options != null) {
        oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.options.size()));
          for (CusEstOption _iter51 : struct.options)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_SCORE_FIELD_DESC);
      oprot.writeDouble(struct.totalScore);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusEstQuotaTupleSchemeFactory implements SchemeFactory {
    public CusEstQuotaTupleScheme getScheme() {
      return new CusEstQuotaTupleScheme();
    }
  }

  private static class CusEstQuotaTupleScheme extends TupleScheme<CusEstQuota> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusEstQuota struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusEstFactorWeights()) {
        optionals.set(1);
      }
      if (struct.isSetQuotaName()) {
        optionals.set(2);
      }
      if (struct.isSetRemark()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetOptions()) {
        optionals.set(5);
      }
      if (struct.isSetTotalScore()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusEstFactorWeights()) {
        struct.cusEstFactorWeights.write(oprot);
      }
      if (struct.isSetQuotaName()) {
        oprot.writeString(struct.quotaName);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetOptions()) {
        {
          oprot.writeI32(struct.options.size());
          for (CusEstOption _iter52 : struct.options)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetTotalScore()) {
        oprot.writeDouble(struct.totalScore);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusEstQuota struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusEstFactorWeights = new CusEstFactorWeights();
        struct.cusEstFactorWeights.read(iprot);
        struct.setCusEstFactorWeightsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quotaName = iprot.readString();
        struct.setQuotaNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.options = new ArrayList<CusEstOption>(_list53.size);
          CusEstOption _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new CusEstOption();
            _elem54.read(iprot);
            struct.options.add(_elem54);
          }
        }
        struct.setOptionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalScore = iprot.readDouble();
        struct.setTotalScoreIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class CustArrearsView implements org.apache.thrift.TBase<CustArrearsView, CustArrearsView._Fields>, java.io.Serializable, Cloneable, Comparable<CustArrearsView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CustArrearsView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("contractNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablePrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivableInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivableMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivableOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField RECEIVED_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField RECEIVED_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField RECEIVED_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField RECEIVED_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField RECEIVED_EXPIRE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedExpireInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField RECEIVED_OVERDUE_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedOverduePenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_OVERDUE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedOverdueInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_OVERDUE_PUNITIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedOverduePunitive", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField RECEIVE_TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTotalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField DUE_UN_RECEIVED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("dueUnReceivedTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)26);
  private static final org.apache.thrift.protocol.TField NO_RECEIVE_TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("noReceiveTotalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField OUTSTANDING_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("outstandingTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField COM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comId", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField NO_RECEIVE_TOTAL_AMT_IM_FIELD_DESC = new org.apache.thrift.protocol.TField("noReceiveTotalAmt_im", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_SURPLUS_FIELD_DESC = new org.apache.thrift.protocol.TField("principalSurplus", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField OVERDUE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueCount", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField RECEIVABLE_PRINCIPAL_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("receivablePrincipalStr", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_SURPLUS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("principalSurplusStr", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField TOTAL_FEED_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("totalFeedStr", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField NO_RECEIVE_TOTAL_AMT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("noReceiveTotalAmtStr", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_OVERDUE_INTEREST_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedOverdueInterestStr", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField UN_RECEIVED_OVERDUE_PUNITIVE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("unReceivedOverduePunitiveStr", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField CONTRACT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractUrl", org.apache.thrift.protocol.TType.STRING, (short)40);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CustArrearsViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CustArrearsViewTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public String projectName; // required
  public String projectNumber; // required
  public String contractNo; // required
  public String contractId; // required
  public String cusName; // required
  public int acctId; // required
  public double receivablePrincipal; // required
  public double receivableInterest; // required
  public double receivableMangCost; // required
  public double receivableOtherCost; // required
  public double receivedPrincipal; // required
  public double receivedInterest; // required
  public double receivedMangCost; // required
  public double receivedOtherCost; // required
  public double receivedExpireInterest; // required
  public double receivedOverduePenalty; // required
  public double unReceivedPrincipal; // required
  public double unReceivedInterest; // required
  public double unReceivedMangCost; // required
  public double unReceivedOtherCost; // required
  public double unReceivedOverdueInterest; // required
  public double unReceivedOverduePunitive; // required
  public double receiveTotalAmt; // required
  public double dueUnReceivedTotal; // required
  public double noReceiveTotalAmt; // required
  public double outstandingTotal; // required
  public int comId; // required
  public int cusType; // required
  public double noReceiveTotalAmt_im; // required
  public double principalSurplus; // required
  public int overdueCount; // required
  public String receivablePrincipalStr; // required
  public String principalSurplusStr; // required
  public String totalFeedStr; // required
  public String noReceiveTotalAmtStr; // required
  public String unReceivedOverdueInterestStr; // required
  public String unReceivedOverduePunitiveStr; // required
  public String contractUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    PROJECT_NAME((short)3, "projectName"),
    PROJECT_NUMBER((short)4, "projectNumber"),
    CONTRACT_NO((short)5, "contractNo"),
    CONTRACT_ID((short)6, "contractId"),
    CUS_NAME((short)7, "cusName"),
    ACCT_ID((short)8, "acctId"),
    RECEIVABLE_PRINCIPAL((short)9, "receivablePrincipal"),
    RECEIVABLE_INTEREST((short)10, "receivableInterest"),
    RECEIVABLE_MANG_COST((short)11, "receivableMangCost"),
    RECEIVABLE_OTHER_COST((short)12, "receivableOtherCost"),
    RECEIVED_PRINCIPAL((short)13, "receivedPrincipal"),
    RECEIVED_INTEREST((short)14, "receivedInterest"),
    RECEIVED_MANG_COST((short)15, "receivedMangCost"),
    RECEIVED_OTHER_COST((short)16, "receivedOtherCost"),
    RECEIVED_EXPIRE_INTEREST((short)17, "receivedExpireInterest"),
    RECEIVED_OVERDUE_PENALTY((short)18, "receivedOverduePenalty"),
    UN_RECEIVED_PRINCIPAL((short)19, "unReceivedPrincipal"),
    UN_RECEIVED_INTEREST((short)20, "unReceivedInterest"),
    UN_RECEIVED_MANG_COST((short)21, "unReceivedMangCost"),
    UN_RECEIVED_OTHER_COST((short)22, "unReceivedOtherCost"),
    UN_RECEIVED_OVERDUE_INTEREST((short)23, "unReceivedOverdueInterest"),
    UN_RECEIVED_OVERDUE_PUNITIVE((short)24, "unReceivedOverduePunitive"),
    RECEIVE_TOTAL_AMT((short)25, "receiveTotalAmt"),
    DUE_UN_RECEIVED_TOTAL((short)26, "dueUnReceivedTotal"),
    NO_RECEIVE_TOTAL_AMT((short)27, "noReceiveTotalAmt"),
    OUTSTANDING_TOTAL((short)28, "outstandingTotal"),
    COM_ID((short)29, "comId"),
    CUS_TYPE((short)30, "cusType"),
    NO_RECEIVE_TOTAL_AMT_IM((short)31, "noReceiveTotalAmt_im"),
    PRINCIPAL_SURPLUS((short)32, "principalSurplus"),
    OVERDUE_COUNT((short)33, "overdueCount"),
    RECEIVABLE_PRINCIPAL_STR((short)34, "receivablePrincipalStr"),
    PRINCIPAL_SURPLUS_STR((short)35, "principalSurplusStr"),
    TOTAL_FEED_STR((short)36, "totalFeedStr"),
    NO_RECEIVE_TOTAL_AMT_STR((short)37, "noReceiveTotalAmtStr"),
    UN_RECEIVED_OVERDUE_INTEREST_STR((short)38, "unReceivedOverdueInterestStr"),
    UN_RECEIVED_OVERDUE_PUNITIVE_STR((short)39, "unReceivedOverduePunitiveStr"),
    CONTRACT_URL((short)40, "contractUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 5: // CONTRACT_NO
          return CONTRACT_NO;
        case 6: // CONTRACT_ID
          return CONTRACT_ID;
        case 7: // CUS_NAME
          return CUS_NAME;
        case 8: // ACCT_ID
          return ACCT_ID;
        case 9: // RECEIVABLE_PRINCIPAL
          return RECEIVABLE_PRINCIPAL;
        case 10: // RECEIVABLE_INTEREST
          return RECEIVABLE_INTEREST;
        case 11: // RECEIVABLE_MANG_COST
          return RECEIVABLE_MANG_COST;
        case 12: // RECEIVABLE_OTHER_COST
          return RECEIVABLE_OTHER_COST;
        case 13: // RECEIVED_PRINCIPAL
          return RECEIVED_PRINCIPAL;
        case 14: // RECEIVED_INTEREST
          return RECEIVED_INTEREST;
        case 15: // RECEIVED_MANG_COST
          return RECEIVED_MANG_COST;
        case 16: // RECEIVED_OTHER_COST
          return RECEIVED_OTHER_COST;
        case 17: // RECEIVED_EXPIRE_INTEREST
          return RECEIVED_EXPIRE_INTEREST;
        case 18: // RECEIVED_OVERDUE_PENALTY
          return RECEIVED_OVERDUE_PENALTY;
        case 19: // UN_RECEIVED_PRINCIPAL
          return UN_RECEIVED_PRINCIPAL;
        case 20: // UN_RECEIVED_INTEREST
          return UN_RECEIVED_INTEREST;
        case 21: // UN_RECEIVED_MANG_COST
          return UN_RECEIVED_MANG_COST;
        case 22: // UN_RECEIVED_OTHER_COST
          return UN_RECEIVED_OTHER_COST;
        case 23: // UN_RECEIVED_OVERDUE_INTEREST
          return UN_RECEIVED_OVERDUE_INTEREST;
        case 24: // UN_RECEIVED_OVERDUE_PUNITIVE
          return UN_RECEIVED_OVERDUE_PUNITIVE;
        case 25: // RECEIVE_TOTAL_AMT
          return RECEIVE_TOTAL_AMT;
        case 26: // DUE_UN_RECEIVED_TOTAL
          return DUE_UN_RECEIVED_TOTAL;
        case 27: // NO_RECEIVE_TOTAL_AMT
          return NO_RECEIVE_TOTAL_AMT;
        case 28: // OUTSTANDING_TOTAL
          return OUTSTANDING_TOTAL;
        case 29: // COM_ID
          return COM_ID;
        case 30: // CUS_TYPE
          return CUS_TYPE;
        case 31: // NO_RECEIVE_TOTAL_AMT_IM
          return NO_RECEIVE_TOTAL_AMT_IM;
        case 32: // PRINCIPAL_SURPLUS
          return PRINCIPAL_SURPLUS;
        case 33: // OVERDUE_COUNT
          return OVERDUE_COUNT;
        case 34: // RECEIVABLE_PRINCIPAL_STR
          return RECEIVABLE_PRINCIPAL_STR;
        case 35: // PRINCIPAL_SURPLUS_STR
          return PRINCIPAL_SURPLUS_STR;
        case 36: // TOTAL_FEED_STR
          return TOTAL_FEED_STR;
        case 37: // NO_RECEIVE_TOTAL_AMT_STR
          return NO_RECEIVE_TOTAL_AMT_STR;
        case 38: // UN_RECEIVED_OVERDUE_INTEREST_STR
          return UN_RECEIVED_OVERDUE_INTEREST_STR;
        case 39: // UN_RECEIVED_OVERDUE_PUNITIVE_STR
          return UN_RECEIVED_OVERDUE_PUNITIVE_STR;
        case 40: // CONTRACT_URL
          return CONTRACT_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __ACCTID_ISSET_ID = 2;
  private static final int __RECEIVABLEPRINCIPAL_ISSET_ID = 3;
  private static final int __RECEIVABLEINTEREST_ISSET_ID = 4;
  private static final int __RECEIVABLEMANGCOST_ISSET_ID = 5;
  private static final int __RECEIVABLEOTHERCOST_ISSET_ID = 6;
  private static final int __RECEIVEDPRINCIPAL_ISSET_ID = 7;
  private static final int __RECEIVEDINTEREST_ISSET_ID = 8;
  private static final int __RECEIVEDMANGCOST_ISSET_ID = 9;
  private static final int __RECEIVEDOTHERCOST_ISSET_ID = 10;
  private static final int __RECEIVEDEXPIREINTEREST_ISSET_ID = 11;
  private static final int __RECEIVEDOVERDUEPENALTY_ISSET_ID = 12;
  private static final int __UNRECEIVEDPRINCIPAL_ISSET_ID = 13;
  private static final int __UNRECEIVEDINTEREST_ISSET_ID = 14;
  private static final int __UNRECEIVEDMANGCOST_ISSET_ID = 15;
  private static final int __UNRECEIVEDOTHERCOST_ISSET_ID = 16;
  private static final int __UNRECEIVEDOVERDUEINTEREST_ISSET_ID = 17;
  private static final int __UNRECEIVEDOVERDUEPUNITIVE_ISSET_ID = 18;
  private static final int __RECEIVETOTALAMT_ISSET_ID = 19;
  private static final int __DUEUNRECEIVEDTOTAL_ISSET_ID = 20;
  private static final int __NORECEIVETOTALAMT_ISSET_ID = 21;
  private static final int __OUTSTANDINGTOTAL_ISSET_ID = 22;
  private static final int __COMID_ISSET_ID = 23;
  private static final int __CUSTYPE_ISSET_ID = 24;
  private static final int __NORECEIVETOTALAMT_IM_ISSET_ID = 25;
  private static final int __PRINCIPALSURPLUS_ISSET_ID = 26;
  private static final int __OVERDUECOUNT_ISSET_ID = 27;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("contractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVABLE_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("receivablePrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVABLE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("receivableInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVABLE_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("receivableMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVABLE_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("receivableOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("receivedPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("receivedInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("receivedMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("receivedOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_EXPIRE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("receivedExpireInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_OVERDUE_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("receivedOverduePenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECEIVED_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("unReceivedPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECEIVED_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("unReceivedInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECEIVED_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("unReceivedMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECEIVED_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("unReceivedOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECEIVED_OVERDUE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("unReceivedOverdueInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECEIVED_OVERDUE_PUNITIVE, new org.apache.thrift.meta_data.FieldMetaData("unReceivedOverduePunitive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVE_TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("receiveTotalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DUE_UN_RECEIVED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("dueUnReceivedTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NO_RECEIVE_TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("noReceiveTotalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTSTANDING_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("outstandingTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COM_ID, new org.apache.thrift.meta_data.FieldMetaData("comId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NO_RECEIVE_TOTAL_AMT_IM, new org.apache.thrift.meta_data.FieldMetaData("noReceiveTotalAmt_im", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_SURPLUS, new org.apache.thrift.meta_data.FieldMetaData("principalSurplus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("overdueCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIVABLE_PRINCIPAL_STR, new org.apache.thrift.meta_data.FieldMetaData("receivablePrincipalStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL_SURPLUS_STR, new org.apache.thrift.meta_data.FieldMetaData("principalSurplusStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_FEED_STR, new org.apache.thrift.meta_data.FieldMetaData("totalFeedStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NO_RECEIVE_TOTAL_AMT_STR, new org.apache.thrift.meta_data.FieldMetaData("noReceiveTotalAmtStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UN_RECEIVED_OVERDUE_INTEREST_STR, new org.apache.thrift.meta_data.FieldMetaData("unReceivedOverdueInterestStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UN_RECEIVED_OVERDUE_PUNITIVE_STR, new org.apache.thrift.meta_data.FieldMetaData("unReceivedOverduePunitiveStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_URL, new org.apache.thrift.meta_data.FieldMetaData("contractUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CustArrearsView.class, metaDataMap);
  }

  public CustArrearsView() {
  }

  public CustArrearsView(
    int pid,
    int loanId,
    String projectName,
    String projectNumber,
    String contractNo,
    String contractId,
    String cusName,
    int acctId,
    double receivablePrincipal,
    double receivableInterest,
    double receivableMangCost,
    double receivableOtherCost,
    double receivedPrincipal,
    double receivedInterest,
    double receivedMangCost,
    double receivedOtherCost,
    double receivedExpireInterest,
    double receivedOverduePenalty,
    double unReceivedPrincipal,
    double unReceivedInterest,
    double unReceivedMangCost,
    double unReceivedOtherCost,
    double unReceivedOverdueInterest,
    double unReceivedOverduePunitive,
    double receiveTotalAmt,
    double dueUnReceivedTotal,
    double noReceiveTotalAmt,
    double outstandingTotal,
    int comId,
    int cusType,
    double noReceiveTotalAmt_im,
    double principalSurplus,
    int overdueCount,
    String receivablePrincipalStr,
    String principalSurplusStr,
    String totalFeedStr,
    String noReceiveTotalAmtStr,
    String unReceivedOverdueInterestStr,
    String unReceivedOverduePunitiveStr,
    String contractUrl)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.contractNo = contractNo;
    this.contractId = contractId;
    this.cusName = cusName;
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.receivablePrincipal = receivablePrincipal;
    setReceivablePrincipalIsSet(true);
    this.receivableInterest = receivableInterest;
    setReceivableInterestIsSet(true);
    this.receivableMangCost = receivableMangCost;
    setReceivableMangCostIsSet(true);
    this.receivableOtherCost = receivableOtherCost;
    setReceivableOtherCostIsSet(true);
    this.receivedPrincipal = receivedPrincipal;
    setReceivedPrincipalIsSet(true);
    this.receivedInterest = receivedInterest;
    setReceivedInterestIsSet(true);
    this.receivedMangCost = receivedMangCost;
    setReceivedMangCostIsSet(true);
    this.receivedOtherCost = receivedOtherCost;
    setReceivedOtherCostIsSet(true);
    this.receivedExpireInterest = receivedExpireInterest;
    setReceivedExpireInterestIsSet(true);
    this.receivedOverduePenalty = receivedOverduePenalty;
    setReceivedOverduePenaltyIsSet(true);
    this.unReceivedPrincipal = unReceivedPrincipal;
    setUnReceivedPrincipalIsSet(true);
    this.unReceivedInterest = unReceivedInterest;
    setUnReceivedInterestIsSet(true);
    this.unReceivedMangCost = unReceivedMangCost;
    setUnReceivedMangCostIsSet(true);
    this.unReceivedOtherCost = unReceivedOtherCost;
    setUnReceivedOtherCostIsSet(true);
    this.unReceivedOverdueInterest = unReceivedOverdueInterest;
    setUnReceivedOverdueInterestIsSet(true);
    this.unReceivedOverduePunitive = unReceivedOverduePunitive;
    setUnReceivedOverduePunitiveIsSet(true);
    this.receiveTotalAmt = receiveTotalAmt;
    setReceiveTotalAmtIsSet(true);
    this.dueUnReceivedTotal = dueUnReceivedTotal;
    setDueUnReceivedTotalIsSet(true);
    this.noReceiveTotalAmt = noReceiveTotalAmt;
    setNoReceiveTotalAmtIsSet(true);
    this.outstandingTotal = outstandingTotal;
    setOutstandingTotalIsSet(true);
    this.comId = comId;
    setComIdIsSet(true);
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.noReceiveTotalAmt_im = noReceiveTotalAmt_im;
    setNoReceiveTotalAmt_imIsSet(true);
    this.principalSurplus = principalSurplus;
    setPrincipalSurplusIsSet(true);
    this.overdueCount = overdueCount;
    setOverdueCountIsSet(true);
    this.receivablePrincipalStr = receivablePrincipalStr;
    this.principalSurplusStr = principalSurplusStr;
    this.totalFeedStr = totalFeedStr;
    this.noReceiveTotalAmtStr = noReceiveTotalAmtStr;
    this.unReceivedOverdueInterestStr = unReceivedOverdueInterestStr;
    this.unReceivedOverduePunitiveStr = unReceivedOverduePunitiveStr;
    this.contractUrl = contractUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CustArrearsView(CustArrearsView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetContractNo()) {
      this.contractNo = other.contractNo;
    }
    if (other.isSetContractId()) {
      this.contractId = other.contractId;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.acctId = other.acctId;
    this.receivablePrincipal = other.receivablePrincipal;
    this.receivableInterest = other.receivableInterest;
    this.receivableMangCost = other.receivableMangCost;
    this.receivableOtherCost = other.receivableOtherCost;
    this.receivedPrincipal = other.receivedPrincipal;
    this.receivedInterest = other.receivedInterest;
    this.receivedMangCost = other.receivedMangCost;
    this.receivedOtherCost = other.receivedOtherCost;
    this.receivedExpireInterest = other.receivedExpireInterest;
    this.receivedOverduePenalty = other.receivedOverduePenalty;
    this.unReceivedPrincipal = other.unReceivedPrincipal;
    this.unReceivedInterest = other.unReceivedInterest;
    this.unReceivedMangCost = other.unReceivedMangCost;
    this.unReceivedOtherCost = other.unReceivedOtherCost;
    this.unReceivedOverdueInterest = other.unReceivedOverdueInterest;
    this.unReceivedOverduePunitive = other.unReceivedOverduePunitive;
    this.receiveTotalAmt = other.receiveTotalAmt;
    this.dueUnReceivedTotal = other.dueUnReceivedTotal;
    this.noReceiveTotalAmt = other.noReceiveTotalAmt;
    this.outstandingTotal = other.outstandingTotal;
    this.comId = other.comId;
    this.cusType = other.cusType;
    this.noReceiveTotalAmt_im = other.noReceiveTotalAmt_im;
    this.principalSurplus = other.principalSurplus;
    this.overdueCount = other.overdueCount;
    if (other.isSetReceivablePrincipalStr()) {
      this.receivablePrincipalStr = other.receivablePrincipalStr;
    }
    if (other.isSetPrincipalSurplusStr()) {
      this.principalSurplusStr = other.principalSurplusStr;
    }
    if (other.isSetTotalFeedStr()) {
      this.totalFeedStr = other.totalFeedStr;
    }
    if (other.isSetNoReceiveTotalAmtStr()) {
      this.noReceiveTotalAmtStr = other.noReceiveTotalAmtStr;
    }
    if (other.isSetUnReceivedOverdueInterestStr()) {
      this.unReceivedOverdueInterestStr = other.unReceivedOverdueInterestStr;
    }
    if (other.isSetUnReceivedOverduePunitiveStr()) {
      this.unReceivedOverduePunitiveStr = other.unReceivedOverduePunitiveStr;
    }
    if (other.isSetContractUrl()) {
      this.contractUrl = other.contractUrl;
    }
  }

  public CustArrearsView deepCopy() {
    return new CustArrearsView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.projectName = null;
    this.projectNumber = null;
    this.contractNo = null;
    this.contractId = null;
    this.cusName = null;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setReceivablePrincipalIsSet(false);
    this.receivablePrincipal = 0.0;
    setReceivableInterestIsSet(false);
    this.receivableInterest = 0.0;
    setReceivableMangCostIsSet(false);
    this.receivableMangCost = 0.0;
    setReceivableOtherCostIsSet(false);
    this.receivableOtherCost = 0.0;
    setReceivedPrincipalIsSet(false);
    this.receivedPrincipal = 0.0;
    setReceivedInterestIsSet(false);
    this.receivedInterest = 0.0;
    setReceivedMangCostIsSet(false);
    this.receivedMangCost = 0.0;
    setReceivedOtherCostIsSet(false);
    this.receivedOtherCost = 0.0;
    setReceivedExpireInterestIsSet(false);
    this.receivedExpireInterest = 0.0;
    setReceivedOverduePenaltyIsSet(false);
    this.receivedOverduePenalty = 0.0;
    setUnReceivedPrincipalIsSet(false);
    this.unReceivedPrincipal = 0.0;
    setUnReceivedInterestIsSet(false);
    this.unReceivedInterest = 0.0;
    setUnReceivedMangCostIsSet(false);
    this.unReceivedMangCost = 0.0;
    setUnReceivedOtherCostIsSet(false);
    this.unReceivedOtherCost = 0.0;
    setUnReceivedOverdueInterestIsSet(false);
    this.unReceivedOverdueInterest = 0.0;
    setUnReceivedOverduePunitiveIsSet(false);
    this.unReceivedOverduePunitive = 0.0;
    setReceiveTotalAmtIsSet(false);
    this.receiveTotalAmt = 0.0;
    setDueUnReceivedTotalIsSet(false);
    this.dueUnReceivedTotal = 0.0;
    setNoReceiveTotalAmtIsSet(false);
    this.noReceiveTotalAmt = 0.0;
    setOutstandingTotalIsSet(false);
    this.outstandingTotal = 0.0;
    setComIdIsSet(false);
    this.comId = 0;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setNoReceiveTotalAmt_imIsSet(false);
    this.noReceiveTotalAmt_im = 0.0;
    setPrincipalSurplusIsSet(false);
    this.principalSurplus = 0.0;
    setOverdueCountIsSet(false);
    this.overdueCount = 0;
    this.receivablePrincipalStr = null;
    this.principalSurplusStr = null;
    this.totalFeedStr = null;
    this.noReceiveTotalAmtStr = null;
    this.unReceivedOverdueInterestStr = null;
    this.unReceivedOverduePunitiveStr = null;
    this.contractUrl = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CustArrearsView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public CustArrearsView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public CustArrearsView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public CustArrearsView setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getContractNo() {
    return this.contractNo;
  }

  public CustArrearsView setContractNo(String contractNo) {
    this.contractNo = contractNo;
    return this;
  }

  public void unsetContractNo() {
    this.contractNo = null;
  }

  /** Returns true if field contractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetContractNo() {
    return this.contractNo != null;
  }

  public void setContractNoIsSet(boolean value) {
    if (!value) {
      this.contractNo = null;
    }
  }

  public String getContractId() {
    return this.contractId;
  }

  public CustArrearsView setContractId(String contractId) {
    this.contractId = contractId;
    return this;
  }

  public void unsetContractId() {
    this.contractId = null;
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return this.contractId != null;
  }

  public void setContractIdIsSet(boolean value) {
    if (!value) {
      this.contractId = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public CustArrearsView setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CustArrearsView setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public double getReceivablePrincipal() {
    return this.receivablePrincipal;
  }

  public CustArrearsView setReceivablePrincipal(double receivablePrincipal) {
    this.receivablePrincipal = receivablePrincipal;
    setReceivablePrincipalIsSet(true);
    return this;
  }

  public void unsetReceivablePrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLEPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field receivablePrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivablePrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLEPRINCIPAL_ISSET_ID);
  }

  public void setReceivablePrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLEPRINCIPAL_ISSET_ID, value);
  }

  public double getReceivableInterest() {
    return this.receivableInterest;
  }

  public CustArrearsView setReceivableInterest(double receivableInterest) {
    this.receivableInterest = receivableInterest;
    setReceivableInterestIsSet(true);
    return this;
  }

  public void unsetReceivableInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLEINTEREST_ISSET_ID);
  }

  /** Returns true if field receivableInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivableInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLEINTEREST_ISSET_ID);
  }

  public void setReceivableInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLEINTEREST_ISSET_ID, value);
  }

  public double getReceivableMangCost() {
    return this.receivableMangCost;
  }

  public CustArrearsView setReceivableMangCost(double receivableMangCost) {
    this.receivableMangCost = receivableMangCost;
    setReceivableMangCostIsSet(true);
    return this;
  }

  public void unsetReceivableMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLEMANGCOST_ISSET_ID);
  }

  /** Returns true if field receivableMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivableMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLEMANGCOST_ISSET_ID);
  }

  public void setReceivableMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLEMANGCOST_ISSET_ID, value);
  }

  public double getReceivableOtherCost() {
    return this.receivableOtherCost;
  }

  public CustArrearsView setReceivableOtherCost(double receivableOtherCost) {
    this.receivableOtherCost = receivableOtherCost;
    setReceivableOtherCostIsSet(true);
    return this;
  }

  public void unsetReceivableOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVABLEOTHERCOST_ISSET_ID);
  }

  /** Returns true if field receivableOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivableOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVABLEOTHERCOST_ISSET_ID);
  }

  public void setReceivableOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVABLEOTHERCOST_ISSET_ID, value);
  }

  public double getReceivedPrincipal() {
    return this.receivedPrincipal;
  }

  public CustArrearsView setReceivedPrincipal(double receivedPrincipal) {
    this.receivedPrincipal = receivedPrincipal;
    setReceivedPrincipalIsSet(true);
    return this;
  }

  public void unsetReceivedPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field receivedPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDPRINCIPAL_ISSET_ID);
  }

  public void setReceivedPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDPRINCIPAL_ISSET_ID, value);
  }

  public double getReceivedInterest() {
    return this.receivedInterest;
  }

  public CustArrearsView setReceivedInterest(double receivedInterest) {
    this.receivedInterest = receivedInterest;
    setReceivedInterestIsSet(true);
    return this;
  }

  public void unsetReceivedInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDINTEREST_ISSET_ID);
  }

  /** Returns true if field receivedInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDINTEREST_ISSET_ID);
  }

  public void setReceivedInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDINTEREST_ISSET_ID, value);
  }

  public double getReceivedMangCost() {
    return this.receivedMangCost;
  }

  public CustArrearsView setReceivedMangCost(double receivedMangCost) {
    this.receivedMangCost = receivedMangCost;
    setReceivedMangCostIsSet(true);
    return this;
  }

  public void unsetReceivedMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDMANGCOST_ISSET_ID);
  }

  /** Returns true if field receivedMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDMANGCOST_ISSET_ID);
  }

  public void setReceivedMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDMANGCOST_ISSET_ID, value);
  }

  public double getReceivedOtherCost() {
    return this.receivedOtherCost;
  }

  public CustArrearsView setReceivedOtherCost(double receivedOtherCost) {
    this.receivedOtherCost = receivedOtherCost;
    setReceivedOtherCostIsSet(true);
    return this;
  }

  public void unsetReceivedOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field receivedOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDOTHERCOST_ISSET_ID);
  }

  public void setReceivedOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDOTHERCOST_ISSET_ID, value);
  }

  public double getReceivedExpireInterest() {
    return this.receivedExpireInterest;
  }

  public CustArrearsView setReceivedExpireInterest(double receivedExpireInterest) {
    this.receivedExpireInterest = receivedExpireInterest;
    setReceivedExpireInterestIsSet(true);
    return this;
  }

  public void unsetReceivedExpireInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDEXPIREINTEREST_ISSET_ID);
  }

  /** Returns true if field receivedExpireInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedExpireInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDEXPIREINTEREST_ISSET_ID);
  }

  public void setReceivedExpireInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDEXPIREINTEREST_ISSET_ID, value);
  }

  public double getReceivedOverduePenalty() {
    return this.receivedOverduePenalty;
  }

  public CustArrearsView setReceivedOverduePenalty(double receivedOverduePenalty) {
    this.receivedOverduePenalty = receivedOverduePenalty;
    setReceivedOverduePenaltyIsSet(true);
    return this;
  }

  public void unsetReceivedOverduePenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDOVERDUEPENALTY_ISSET_ID);
  }

  /** Returns true if field receivedOverduePenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedOverduePenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDOVERDUEPENALTY_ISSET_ID);
  }

  public void setReceivedOverduePenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDOVERDUEPENALTY_ISSET_ID, value);
  }

  public double getUnReceivedPrincipal() {
    return this.unReceivedPrincipal;
  }

  public CustArrearsView setUnReceivedPrincipal(double unReceivedPrincipal) {
    this.unReceivedPrincipal = unReceivedPrincipal;
    setUnReceivedPrincipalIsSet(true);
    return this;
  }

  public void unsetUnReceivedPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECEIVEDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field unReceivedPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECEIVEDPRINCIPAL_ISSET_ID);
  }

  public void setUnReceivedPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECEIVEDPRINCIPAL_ISSET_ID, value);
  }

  public double getUnReceivedInterest() {
    return this.unReceivedInterest;
  }

  public CustArrearsView setUnReceivedInterest(double unReceivedInterest) {
    this.unReceivedInterest = unReceivedInterest;
    setUnReceivedInterestIsSet(true);
    return this;
  }

  public void unsetUnReceivedInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECEIVEDINTEREST_ISSET_ID);
  }

  /** Returns true if field unReceivedInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECEIVEDINTEREST_ISSET_ID);
  }

  public void setUnReceivedInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECEIVEDINTEREST_ISSET_ID, value);
  }

  public double getUnReceivedMangCost() {
    return this.unReceivedMangCost;
  }

  public CustArrearsView setUnReceivedMangCost(double unReceivedMangCost) {
    this.unReceivedMangCost = unReceivedMangCost;
    setUnReceivedMangCostIsSet(true);
    return this;
  }

  public void unsetUnReceivedMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECEIVEDMANGCOST_ISSET_ID);
  }

  /** Returns true if field unReceivedMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECEIVEDMANGCOST_ISSET_ID);
  }

  public void setUnReceivedMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECEIVEDMANGCOST_ISSET_ID, value);
  }

  public double getUnReceivedOtherCost() {
    return this.unReceivedOtherCost;
  }

  public CustArrearsView setUnReceivedOtherCost(double unReceivedOtherCost) {
    this.unReceivedOtherCost = unReceivedOtherCost;
    setUnReceivedOtherCostIsSet(true);
    return this;
  }

  public void unsetUnReceivedOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECEIVEDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field unReceivedOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECEIVEDOTHERCOST_ISSET_ID);
  }

  public void setUnReceivedOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECEIVEDOTHERCOST_ISSET_ID, value);
  }

  public double getUnReceivedOverdueInterest() {
    return this.unReceivedOverdueInterest;
  }

  public CustArrearsView setUnReceivedOverdueInterest(double unReceivedOverdueInterest) {
    this.unReceivedOverdueInterest = unReceivedOverdueInterest;
    setUnReceivedOverdueInterestIsSet(true);
    return this;
  }

  public void unsetUnReceivedOverdueInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECEIVEDOVERDUEINTEREST_ISSET_ID);
  }

  /** Returns true if field unReceivedOverdueInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedOverdueInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECEIVEDOVERDUEINTEREST_ISSET_ID);
  }

  public void setUnReceivedOverdueInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECEIVEDOVERDUEINTEREST_ISSET_ID, value);
  }

  public double getUnReceivedOverduePunitive() {
    return this.unReceivedOverduePunitive;
  }

  public CustArrearsView setUnReceivedOverduePunitive(double unReceivedOverduePunitive) {
    this.unReceivedOverduePunitive = unReceivedOverduePunitive;
    setUnReceivedOverduePunitiveIsSet(true);
    return this;
  }

  public void unsetUnReceivedOverduePunitive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECEIVEDOVERDUEPUNITIVE_ISSET_ID);
  }

  /** Returns true if field unReceivedOverduePunitive is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedOverduePunitive() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECEIVEDOVERDUEPUNITIVE_ISSET_ID);
  }

  public void setUnReceivedOverduePunitiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECEIVEDOVERDUEPUNITIVE_ISSET_ID, value);
  }

  public double getReceiveTotalAmt() {
    return this.receiveTotalAmt;
  }

  public CustArrearsView setReceiveTotalAmt(double receiveTotalAmt) {
    this.receiveTotalAmt = receiveTotalAmt;
    setReceiveTotalAmtIsSet(true);
    return this;
  }

  public void unsetReceiveTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVETOTALAMT_ISSET_ID);
  }

  /** Returns true if field receiveTotalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVETOTALAMT_ISSET_ID);
  }

  public void setReceiveTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVETOTALAMT_ISSET_ID, value);
  }

  public double getDueUnReceivedTotal() {
    return this.dueUnReceivedTotal;
  }

  public CustArrearsView setDueUnReceivedTotal(double dueUnReceivedTotal) {
    this.dueUnReceivedTotal = dueUnReceivedTotal;
    setDueUnReceivedTotalIsSet(true);
    return this;
  }

  public void unsetDueUnReceivedTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUEUNRECEIVEDTOTAL_ISSET_ID);
  }

  /** Returns true if field dueUnReceivedTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetDueUnReceivedTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __DUEUNRECEIVEDTOTAL_ISSET_ID);
  }

  public void setDueUnReceivedTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUEUNRECEIVEDTOTAL_ISSET_ID, value);
  }

  public double getNoReceiveTotalAmt() {
    return this.noReceiveTotalAmt;
  }

  public CustArrearsView setNoReceiveTotalAmt(double noReceiveTotalAmt) {
    this.noReceiveTotalAmt = noReceiveTotalAmt;
    setNoReceiveTotalAmtIsSet(true);
    return this;
  }

  public void unsetNoReceiveTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORECEIVETOTALAMT_ISSET_ID);
  }

  /** Returns true if field noReceiveTotalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReceiveTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __NORECEIVETOTALAMT_ISSET_ID);
  }

  public void setNoReceiveTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORECEIVETOTALAMT_ISSET_ID, value);
  }

  public double getOutstandingTotal() {
    return this.outstandingTotal;
  }

  public CustArrearsView setOutstandingTotal(double outstandingTotal) {
    this.outstandingTotal = outstandingTotal;
    setOutstandingTotalIsSet(true);
    return this;
  }

  public void unsetOutstandingTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTSTANDINGTOTAL_ISSET_ID);
  }

  /** Returns true if field outstandingTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetOutstandingTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTSTANDINGTOTAL_ISSET_ID);
  }

  public void setOutstandingTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTSTANDINGTOTAL_ISSET_ID, value);
  }

  public int getComId() {
    return this.comId;
  }

  public CustArrearsView setComId(int comId) {
    this.comId = comId;
    setComIdIsSet(true);
    return this;
  }

  public void unsetComId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMID_ISSET_ID);
  }

  /** Returns true if field comId is set (has been assigned a value) and false otherwise */
  public boolean isSetComId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMID_ISSET_ID);
  }

  public void setComIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMID_ISSET_ID, value);
  }

  public int getCusType() {
    return this.cusType;
  }

  public CustArrearsView setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public double getNoReceiveTotalAmt_im() {
    return this.noReceiveTotalAmt_im;
  }

  public CustArrearsView setNoReceiveTotalAmt_im(double noReceiveTotalAmt_im) {
    this.noReceiveTotalAmt_im = noReceiveTotalAmt_im;
    setNoReceiveTotalAmt_imIsSet(true);
    return this;
  }

  public void unsetNoReceiveTotalAmt_im() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NORECEIVETOTALAMT_IM_ISSET_ID);
  }

  /** Returns true if field noReceiveTotalAmt_im is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReceiveTotalAmt_im() {
    return EncodingUtils.testBit(__isset_bitfield, __NORECEIVETOTALAMT_IM_ISSET_ID);
  }

  public void setNoReceiveTotalAmt_imIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NORECEIVETOTALAMT_IM_ISSET_ID, value);
  }

  public double getPrincipalSurplus() {
    return this.principalSurplus;
  }

  public CustArrearsView setPrincipalSurplus(double principalSurplus) {
    this.principalSurplus = principalSurplus;
    setPrincipalSurplusIsSet(true);
    return this;
  }

  public void unsetPrincipalSurplus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALSURPLUS_ISSET_ID);
  }

  /** Returns true if field principalSurplus is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalSurplus() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALSURPLUS_ISSET_ID);
  }

  public void setPrincipalSurplusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALSURPLUS_ISSET_ID, value);
  }

  public int getOverdueCount() {
    return this.overdueCount;
  }

  public CustArrearsView setOverdueCount(int overdueCount) {
    this.overdueCount = overdueCount;
    setOverdueCountIsSet(true);
    return this;
  }

  public void unsetOverdueCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUECOUNT_ISSET_ID);
  }

  /** Returns true if field overdueCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueCount() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUECOUNT_ISSET_ID);
  }

  public void setOverdueCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUECOUNT_ISSET_ID, value);
  }

  public String getReceivablePrincipalStr() {
    return this.receivablePrincipalStr;
  }

  public CustArrearsView setReceivablePrincipalStr(String receivablePrincipalStr) {
    this.receivablePrincipalStr = receivablePrincipalStr;
    return this;
  }

  public void unsetReceivablePrincipalStr() {
    this.receivablePrincipalStr = null;
  }

  /** Returns true if field receivablePrincipalStr is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivablePrincipalStr() {
    return this.receivablePrincipalStr != null;
  }

  public void setReceivablePrincipalStrIsSet(boolean value) {
    if (!value) {
      this.receivablePrincipalStr = null;
    }
  }

  public String getPrincipalSurplusStr() {
    return this.principalSurplusStr;
  }

  public CustArrearsView setPrincipalSurplusStr(String principalSurplusStr) {
    this.principalSurplusStr = principalSurplusStr;
    return this;
  }

  public void unsetPrincipalSurplusStr() {
    this.principalSurplusStr = null;
  }

  /** Returns true if field principalSurplusStr is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalSurplusStr() {
    return this.principalSurplusStr != null;
  }

  public void setPrincipalSurplusStrIsSet(boolean value) {
    if (!value) {
      this.principalSurplusStr = null;
    }
  }

  public String getTotalFeedStr() {
    return this.totalFeedStr;
  }

  public CustArrearsView setTotalFeedStr(String totalFeedStr) {
    this.totalFeedStr = totalFeedStr;
    return this;
  }

  public void unsetTotalFeedStr() {
    this.totalFeedStr = null;
  }

  /** Returns true if field totalFeedStr is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalFeedStr() {
    return this.totalFeedStr != null;
  }

  public void setTotalFeedStrIsSet(boolean value) {
    if (!value) {
      this.totalFeedStr = null;
    }
  }

  public String getNoReceiveTotalAmtStr() {
    return this.noReceiveTotalAmtStr;
  }

  public CustArrearsView setNoReceiveTotalAmtStr(String noReceiveTotalAmtStr) {
    this.noReceiveTotalAmtStr = noReceiveTotalAmtStr;
    return this;
  }

  public void unsetNoReceiveTotalAmtStr() {
    this.noReceiveTotalAmtStr = null;
  }

  /** Returns true if field noReceiveTotalAmtStr is set (has been assigned a value) and false otherwise */
  public boolean isSetNoReceiveTotalAmtStr() {
    return this.noReceiveTotalAmtStr != null;
  }

  public void setNoReceiveTotalAmtStrIsSet(boolean value) {
    if (!value) {
      this.noReceiveTotalAmtStr = null;
    }
  }

  public String getUnReceivedOverdueInterestStr() {
    return this.unReceivedOverdueInterestStr;
  }

  public CustArrearsView setUnReceivedOverdueInterestStr(String unReceivedOverdueInterestStr) {
    this.unReceivedOverdueInterestStr = unReceivedOverdueInterestStr;
    return this;
  }

  public void unsetUnReceivedOverdueInterestStr() {
    this.unReceivedOverdueInterestStr = null;
  }

  /** Returns true if field unReceivedOverdueInterestStr is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedOverdueInterestStr() {
    return this.unReceivedOverdueInterestStr != null;
  }

  public void setUnReceivedOverdueInterestStrIsSet(boolean value) {
    if (!value) {
      this.unReceivedOverdueInterestStr = null;
    }
  }

  public String getUnReceivedOverduePunitiveStr() {
    return this.unReceivedOverduePunitiveStr;
  }

  public CustArrearsView setUnReceivedOverduePunitiveStr(String unReceivedOverduePunitiveStr) {
    this.unReceivedOverduePunitiveStr = unReceivedOverduePunitiveStr;
    return this;
  }

  public void unsetUnReceivedOverduePunitiveStr() {
    this.unReceivedOverduePunitiveStr = null;
  }

  /** Returns true if field unReceivedOverduePunitiveStr is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReceivedOverduePunitiveStr() {
    return this.unReceivedOverduePunitiveStr != null;
  }

  public void setUnReceivedOverduePunitiveStrIsSet(boolean value) {
    if (!value) {
      this.unReceivedOverduePunitiveStr = null;
    }
  }

  public String getContractUrl() {
    return this.contractUrl;
  }

  public CustArrearsView setContractUrl(String contractUrl) {
    this.contractUrl = contractUrl;
    return this;
  }

  public void unsetContractUrl() {
    this.contractUrl = null;
  }

  /** Returns true if field contractUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetContractUrl() {
    return this.contractUrl != null;
  }

  public void setContractUrlIsSet(boolean value) {
    if (!value) {
      this.contractUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CONTRACT_NO:
      if (value == null) {
        unsetContractNo();
      } else {
        setContractNo((String)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case RECEIVABLE_PRINCIPAL:
      if (value == null) {
        unsetReceivablePrincipal();
      } else {
        setReceivablePrincipal((Double)value);
      }
      break;

    case RECEIVABLE_INTEREST:
      if (value == null) {
        unsetReceivableInterest();
      } else {
        setReceivableInterest((Double)value);
      }
      break;

    case RECEIVABLE_MANG_COST:
      if (value == null) {
        unsetReceivableMangCost();
      } else {
        setReceivableMangCost((Double)value);
      }
      break;

    case RECEIVABLE_OTHER_COST:
      if (value == null) {
        unsetReceivableOtherCost();
      } else {
        setReceivableOtherCost((Double)value);
      }
      break;

    case RECEIVED_PRINCIPAL:
      if (value == null) {
        unsetReceivedPrincipal();
      } else {
        setReceivedPrincipal((Double)value);
      }
      break;

    case RECEIVED_INTEREST:
      if (value == null) {
        unsetReceivedInterest();
      } else {
        setReceivedInterest((Double)value);
      }
      break;

    case RECEIVED_MANG_COST:
      if (value == null) {
        unsetReceivedMangCost();
      } else {
        setReceivedMangCost((Double)value);
      }
      break;

    case RECEIVED_OTHER_COST:
      if (value == null) {
        unsetReceivedOtherCost();
      } else {
        setReceivedOtherCost((Double)value);
      }
      break;

    case RECEIVED_EXPIRE_INTEREST:
      if (value == null) {
        unsetReceivedExpireInterest();
      } else {
        setReceivedExpireInterest((Double)value);
      }
      break;

    case RECEIVED_OVERDUE_PENALTY:
      if (value == null) {
        unsetReceivedOverduePenalty();
      } else {
        setReceivedOverduePenalty((Double)value);
      }
      break;

    case UN_RECEIVED_PRINCIPAL:
      if (value == null) {
        unsetUnReceivedPrincipal();
      } else {
        setUnReceivedPrincipal((Double)value);
      }
      break;

    case UN_RECEIVED_INTEREST:
      if (value == null) {
        unsetUnReceivedInterest();
      } else {
        setUnReceivedInterest((Double)value);
      }
      break;

    case UN_RECEIVED_MANG_COST:
      if (value == null) {
        unsetUnReceivedMangCost();
      } else {
        setUnReceivedMangCost((Double)value);
      }
      break;

    case UN_RECEIVED_OTHER_COST:
      if (value == null) {
        unsetUnReceivedOtherCost();
      } else {
        setUnReceivedOtherCost((Double)value);
      }
      break;

    case UN_RECEIVED_OVERDUE_INTEREST:
      if (value == null) {
        unsetUnReceivedOverdueInterest();
      } else {
        setUnReceivedOverdueInterest((Double)value);
      }
      break;

    case UN_RECEIVED_OVERDUE_PUNITIVE:
      if (value == null) {
        unsetUnReceivedOverduePunitive();
      } else {
        setUnReceivedOverduePunitive((Double)value);
      }
      break;

    case RECEIVE_TOTAL_AMT:
      if (value == null) {
        unsetReceiveTotalAmt();
      } else {
        setReceiveTotalAmt((Double)value);
      }
      break;

    case DUE_UN_RECEIVED_TOTAL:
      if (value == null) {
        unsetDueUnReceivedTotal();
      } else {
        setDueUnReceivedTotal((Double)value);
      }
      break;

    case NO_RECEIVE_TOTAL_AMT:
      if (value == null) {
        unsetNoReceiveTotalAmt();
      } else {
        setNoReceiveTotalAmt((Double)value);
      }
      break;

    case OUTSTANDING_TOTAL:
      if (value == null) {
        unsetOutstandingTotal();
      } else {
        setOutstandingTotal((Double)value);
      }
      break;

    case COM_ID:
      if (value == null) {
        unsetComId();
      } else {
        setComId((Integer)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case NO_RECEIVE_TOTAL_AMT_IM:
      if (value == null) {
        unsetNoReceiveTotalAmt_im();
      } else {
        setNoReceiveTotalAmt_im((Double)value);
      }
      break;

    case PRINCIPAL_SURPLUS:
      if (value == null) {
        unsetPrincipalSurplus();
      } else {
        setPrincipalSurplus((Double)value);
      }
      break;

    case OVERDUE_COUNT:
      if (value == null) {
        unsetOverdueCount();
      } else {
        setOverdueCount((Integer)value);
      }
      break;

    case RECEIVABLE_PRINCIPAL_STR:
      if (value == null) {
        unsetReceivablePrincipalStr();
      } else {
        setReceivablePrincipalStr((String)value);
      }
      break;

    case PRINCIPAL_SURPLUS_STR:
      if (value == null) {
        unsetPrincipalSurplusStr();
      } else {
        setPrincipalSurplusStr((String)value);
      }
      break;

    case TOTAL_FEED_STR:
      if (value == null) {
        unsetTotalFeedStr();
      } else {
        setTotalFeedStr((String)value);
      }
      break;

    case NO_RECEIVE_TOTAL_AMT_STR:
      if (value == null) {
        unsetNoReceiveTotalAmtStr();
      } else {
        setNoReceiveTotalAmtStr((String)value);
      }
      break;

    case UN_RECEIVED_OVERDUE_INTEREST_STR:
      if (value == null) {
        unsetUnReceivedOverdueInterestStr();
      } else {
        setUnReceivedOverdueInterestStr((String)value);
      }
      break;

    case UN_RECEIVED_OVERDUE_PUNITIVE_STR:
      if (value == null) {
        unsetUnReceivedOverduePunitiveStr();
      } else {
        setUnReceivedOverduePunitiveStr((String)value);
      }
      break;

    case CONTRACT_URL:
      if (value == null) {
        unsetContractUrl();
      } else {
        setContractUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CONTRACT_NO:
      return getContractNo();

    case CONTRACT_ID:
      return getContractId();

    case CUS_NAME:
      return getCusName();

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case RECEIVABLE_PRINCIPAL:
      return Double.valueOf(getReceivablePrincipal());

    case RECEIVABLE_INTEREST:
      return Double.valueOf(getReceivableInterest());

    case RECEIVABLE_MANG_COST:
      return Double.valueOf(getReceivableMangCost());

    case RECEIVABLE_OTHER_COST:
      return Double.valueOf(getReceivableOtherCost());

    case RECEIVED_PRINCIPAL:
      return Double.valueOf(getReceivedPrincipal());

    case RECEIVED_INTEREST:
      return Double.valueOf(getReceivedInterest());

    case RECEIVED_MANG_COST:
      return Double.valueOf(getReceivedMangCost());

    case RECEIVED_OTHER_COST:
      return Double.valueOf(getReceivedOtherCost());

    case RECEIVED_EXPIRE_INTEREST:
      return Double.valueOf(getReceivedExpireInterest());

    case RECEIVED_OVERDUE_PENALTY:
      return Double.valueOf(getReceivedOverduePenalty());

    case UN_RECEIVED_PRINCIPAL:
      return Double.valueOf(getUnReceivedPrincipal());

    case UN_RECEIVED_INTEREST:
      return Double.valueOf(getUnReceivedInterest());

    case UN_RECEIVED_MANG_COST:
      return Double.valueOf(getUnReceivedMangCost());

    case UN_RECEIVED_OTHER_COST:
      return Double.valueOf(getUnReceivedOtherCost());

    case UN_RECEIVED_OVERDUE_INTEREST:
      return Double.valueOf(getUnReceivedOverdueInterest());

    case UN_RECEIVED_OVERDUE_PUNITIVE:
      return Double.valueOf(getUnReceivedOverduePunitive());

    case RECEIVE_TOTAL_AMT:
      return Double.valueOf(getReceiveTotalAmt());

    case DUE_UN_RECEIVED_TOTAL:
      return Double.valueOf(getDueUnReceivedTotal());

    case NO_RECEIVE_TOTAL_AMT:
      return Double.valueOf(getNoReceiveTotalAmt());

    case OUTSTANDING_TOTAL:
      return Double.valueOf(getOutstandingTotal());

    case COM_ID:
      return Integer.valueOf(getComId());

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case NO_RECEIVE_TOTAL_AMT_IM:
      return Double.valueOf(getNoReceiveTotalAmt_im());

    case PRINCIPAL_SURPLUS:
      return Double.valueOf(getPrincipalSurplus());

    case OVERDUE_COUNT:
      return Integer.valueOf(getOverdueCount());

    case RECEIVABLE_PRINCIPAL_STR:
      return getReceivablePrincipalStr();

    case PRINCIPAL_SURPLUS_STR:
      return getPrincipalSurplusStr();

    case TOTAL_FEED_STR:
      return getTotalFeedStr();

    case NO_RECEIVE_TOTAL_AMT_STR:
      return getNoReceiveTotalAmtStr();

    case UN_RECEIVED_OVERDUE_INTEREST_STR:
      return getUnReceivedOverdueInterestStr();

    case UN_RECEIVED_OVERDUE_PUNITIVE_STR:
      return getUnReceivedOverduePunitiveStr();

    case CONTRACT_URL:
      return getContractUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CONTRACT_NO:
      return isSetContractNo();
    case CONTRACT_ID:
      return isSetContractId();
    case CUS_NAME:
      return isSetCusName();
    case ACCT_ID:
      return isSetAcctId();
    case RECEIVABLE_PRINCIPAL:
      return isSetReceivablePrincipal();
    case RECEIVABLE_INTEREST:
      return isSetReceivableInterest();
    case RECEIVABLE_MANG_COST:
      return isSetReceivableMangCost();
    case RECEIVABLE_OTHER_COST:
      return isSetReceivableOtherCost();
    case RECEIVED_PRINCIPAL:
      return isSetReceivedPrincipal();
    case RECEIVED_INTEREST:
      return isSetReceivedInterest();
    case RECEIVED_MANG_COST:
      return isSetReceivedMangCost();
    case RECEIVED_OTHER_COST:
      return isSetReceivedOtherCost();
    case RECEIVED_EXPIRE_INTEREST:
      return isSetReceivedExpireInterest();
    case RECEIVED_OVERDUE_PENALTY:
      return isSetReceivedOverduePenalty();
    case UN_RECEIVED_PRINCIPAL:
      return isSetUnReceivedPrincipal();
    case UN_RECEIVED_INTEREST:
      return isSetUnReceivedInterest();
    case UN_RECEIVED_MANG_COST:
      return isSetUnReceivedMangCost();
    case UN_RECEIVED_OTHER_COST:
      return isSetUnReceivedOtherCost();
    case UN_RECEIVED_OVERDUE_INTEREST:
      return isSetUnReceivedOverdueInterest();
    case UN_RECEIVED_OVERDUE_PUNITIVE:
      return isSetUnReceivedOverduePunitive();
    case RECEIVE_TOTAL_AMT:
      return isSetReceiveTotalAmt();
    case DUE_UN_RECEIVED_TOTAL:
      return isSetDueUnReceivedTotal();
    case NO_RECEIVE_TOTAL_AMT:
      return isSetNoReceiveTotalAmt();
    case OUTSTANDING_TOTAL:
      return isSetOutstandingTotal();
    case COM_ID:
      return isSetComId();
    case CUS_TYPE:
      return isSetCusType();
    case NO_RECEIVE_TOTAL_AMT_IM:
      return isSetNoReceiveTotalAmt_im();
    case PRINCIPAL_SURPLUS:
      return isSetPrincipalSurplus();
    case OVERDUE_COUNT:
      return isSetOverdueCount();
    case RECEIVABLE_PRINCIPAL_STR:
      return isSetReceivablePrincipalStr();
    case PRINCIPAL_SURPLUS_STR:
      return isSetPrincipalSurplusStr();
    case TOTAL_FEED_STR:
      return isSetTotalFeedStr();
    case NO_RECEIVE_TOTAL_AMT_STR:
      return isSetNoReceiveTotalAmtStr();
    case UN_RECEIVED_OVERDUE_INTEREST_STR:
      return isSetUnReceivedOverdueInterestStr();
    case UN_RECEIVED_OVERDUE_PUNITIVE_STR:
      return isSetUnReceivedOverduePunitiveStr();
    case CONTRACT_URL:
      return isSetContractUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CustArrearsView)
      return this.equals((CustArrearsView)that);
    return false;
  }

  public boolean equals(CustArrearsView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_contractNo = true && this.isSetContractNo();
    boolean that_present_contractNo = true && that.isSetContractNo();
    if (this_present_contractNo || that_present_contractNo) {
      if (!(this_present_contractNo && that_present_contractNo))
        return false;
      if (!this.contractNo.equals(that.contractNo))
        return false;
    }

    boolean this_present_contractId = true && this.isSetContractId();
    boolean that_present_contractId = true && that.isSetContractId();
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (!this.contractId.equals(that.contractId))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_receivablePrincipal = true;
    boolean that_present_receivablePrincipal = true;
    if (this_present_receivablePrincipal || that_present_receivablePrincipal) {
      if (!(this_present_receivablePrincipal && that_present_receivablePrincipal))
        return false;
      if (this.receivablePrincipal != that.receivablePrincipal)
        return false;
    }

    boolean this_present_receivableInterest = true;
    boolean that_present_receivableInterest = true;
    if (this_present_receivableInterest || that_present_receivableInterest) {
      if (!(this_present_receivableInterest && that_present_receivableInterest))
        return false;
      if (this.receivableInterest != that.receivableInterest)
        return false;
    }

    boolean this_present_receivableMangCost = true;
    boolean that_present_receivableMangCost = true;
    if (this_present_receivableMangCost || that_present_receivableMangCost) {
      if (!(this_present_receivableMangCost && that_present_receivableMangCost))
        return false;
      if (this.receivableMangCost != that.receivableMangCost)
        return false;
    }

    boolean this_present_receivableOtherCost = true;
    boolean that_present_receivableOtherCost = true;
    if (this_present_receivableOtherCost || that_present_receivableOtherCost) {
      if (!(this_present_receivableOtherCost && that_present_receivableOtherCost))
        return false;
      if (this.receivableOtherCost != that.receivableOtherCost)
        return false;
    }

    boolean this_present_receivedPrincipal = true;
    boolean that_present_receivedPrincipal = true;
    if (this_present_receivedPrincipal || that_present_receivedPrincipal) {
      if (!(this_present_receivedPrincipal && that_present_receivedPrincipal))
        return false;
      if (this.receivedPrincipal != that.receivedPrincipal)
        return false;
    }

    boolean this_present_receivedInterest = true;
    boolean that_present_receivedInterest = true;
    if (this_present_receivedInterest || that_present_receivedInterest) {
      if (!(this_present_receivedInterest && that_present_receivedInterest))
        return false;
      if (this.receivedInterest != that.receivedInterest)
        return false;
    }

    boolean this_present_receivedMangCost = true;
    boolean that_present_receivedMangCost = true;
    if (this_present_receivedMangCost || that_present_receivedMangCost) {
      if (!(this_present_receivedMangCost && that_present_receivedMangCost))
        return false;
      if (this.receivedMangCost != that.receivedMangCost)
        return false;
    }

    boolean this_present_receivedOtherCost = true;
    boolean that_present_receivedOtherCost = true;
    if (this_present_receivedOtherCost || that_present_receivedOtherCost) {
      if (!(this_present_receivedOtherCost && that_present_receivedOtherCost))
        return false;
      if (this.receivedOtherCost != that.receivedOtherCost)
        return false;
    }

    boolean this_present_receivedExpireInterest = true;
    boolean that_present_receivedExpireInterest = true;
    if (this_present_receivedExpireInterest || that_present_receivedExpireInterest) {
      if (!(this_present_receivedExpireInterest && that_present_receivedExpireInterest))
        return false;
      if (this.receivedExpireInterest != that.receivedExpireInterest)
        return false;
    }

    boolean this_present_receivedOverduePenalty = true;
    boolean that_present_receivedOverduePenalty = true;
    if (this_present_receivedOverduePenalty || that_present_receivedOverduePenalty) {
      if (!(this_present_receivedOverduePenalty && that_present_receivedOverduePenalty))
        return false;
      if (this.receivedOverduePenalty != that.receivedOverduePenalty)
        return false;
    }

    boolean this_present_unReceivedPrincipal = true;
    boolean that_present_unReceivedPrincipal = true;
    if (this_present_unReceivedPrincipal || that_present_unReceivedPrincipal) {
      if (!(this_present_unReceivedPrincipal && that_present_unReceivedPrincipal))
        return false;
      if (this.unReceivedPrincipal != that.unReceivedPrincipal)
        return false;
    }

    boolean this_present_unReceivedInterest = true;
    boolean that_present_unReceivedInterest = true;
    if (this_present_unReceivedInterest || that_present_unReceivedInterest) {
      if (!(this_present_unReceivedInterest && that_present_unReceivedInterest))
        return false;
      if (this.unReceivedInterest != that.unReceivedInterest)
        return false;
    }

    boolean this_present_unReceivedMangCost = true;
    boolean that_present_unReceivedMangCost = true;
    if (this_present_unReceivedMangCost || that_present_unReceivedMangCost) {
      if (!(this_present_unReceivedMangCost && that_present_unReceivedMangCost))
        return false;
      if (this.unReceivedMangCost != that.unReceivedMangCost)
        return false;
    }

    boolean this_present_unReceivedOtherCost = true;
    boolean that_present_unReceivedOtherCost = true;
    if (this_present_unReceivedOtherCost || that_present_unReceivedOtherCost) {
      if (!(this_present_unReceivedOtherCost && that_present_unReceivedOtherCost))
        return false;
      if (this.unReceivedOtherCost != that.unReceivedOtherCost)
        return false;
    }

    boolean this_present_unReceivedOverdueInterest = true;
    boolean that_present_unReceivedOverdueInterest = true;
    if (this_present_unReceivedOverdueInterest || that_present_unReceivedOverdueInterest) {
      if (!(this_present_unReceivedOverdueInterest && that_present_unReceivedOverdueInterest))
        return false;
      if (this.unReceivedOverdueInterest != that.unReceivedOverdueInterest)
        return false;
    }

    boolean this_present_unReceivedOverduePunitive = true;
    boolean that_present_unReceivedOverduePunitive = true;
    if (this_present_unReceivedOverduePunitive || that_present_unReceivedOverduePunitive) {
      if (!(this_present_unReceivedOverduePunitive && that_present_unReceivedOverduePunitive))
        return false;
      if (this.unReceivedOverduePunitive != that.unReceivedOverduePunitive)
        return false;
    }

    boolean this_present_receiveTotalAmt = true;
    boolean that_present_receiveTotalAmt = true;
    if (this_present_receiveTotalAmt || that_present_receiveTotalAmt) {
      if (!(this_present_receiveTotalAmt && that_present_receiveTotalAmt))
        return false;
      if (this.receiveTotalAmt != that.receiveTotalAmt)
        return false;
    }

    boolean this_present_dueUnReceivedTotal = true;
    boolean that_present_dueUnReceivedTotal = true;
    if (this_present_dueUnReceivedTotal || that_present_dueUnReceivedTotal) {
      if (!(this_present_dueUnReceivedTotal && that_present_dueUnReceivedTotal))
        return false;
      if (this.dueUnReceivedTotal != that.dueUnReceivedTotal)
        return false;
    }

    boolean this_present_noReceiveTotalAmt = true;
    boolean that_present_noReceiveTotalAmt = true;
    if (this_present_noReceiveTotalAmt || that_present_noReceiveTotalAmt) {
      if (!(this_present_noReceiveTotalAmt && that_present_noReceiveTotalAmt))
        return false;
      if (this.noReceiveTotalAmt != that.noReceiveTotalAmt)
        return false;
    }

    boolean this_present_outstandingTotal = true;
    boolean that_present_outstandingTotal = true;
    if (this_present_outstandingTotal || that_present_outstandingTotal) {
      if (!(this_present_outstandingTotal && that_present_outstandingTotal))
        return false;
      if (this.outstandingTotal != that.outstandingTotal)
        return false;
    }

    boolean this_present_comId = true;
    boolean that_present_comId = true;
    if (this_present_comId || that_present_comId) {
      if (!(this_present_comId && that_present_comId))
        return false;
      if (this.comId != that.comId)
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_noReceiveTotalAmt_im = true;
    boolean that_present_noReceiveTotalAmt_im = true;
    if (this_present_noReceiveTotalAmt_im || that_present_noReceiveTotalAmt_im) {
      if (!(this_present_noReceiveTotalAmt_im && that_present_noReceiveTotalAmt_im))
        return false;
      if (this.noReceiveTotalAmt_im != that.noReceiveTotalAmt_im)
        return false;
    }

    boolean this_present_principalSurplus = true;
    boolean that_present_principalSurplus = true;
    if (this_present_principalSurplus || that_present_principalSurplus) {
      if (!(this_present_principalSurplus && that_present_principalSurplus))
        return false;
      if (this.principalSurplus != that.principalSurplus)
        return false;
    }

    boolean this_present_overdueCount = true;
    boolean that_present_overdueCount = true;
    if (this_present_overdueCount || that_present_overdueCount) {
      if (!(this_present_overdueCount && that_present_overdueCount))
        return false;
      if (this.overdueCount != that.overdueCount)
        return false;
    }

    boolean this_present_receivablePrincipalStr = true && this.isSetReceivablePrincipalStr();
    boolean that_present_receivablePrincipalStr = true && that.isSetReceivablePrincipalStr();
    if (this_present_receivablePrincipalStr || that_present_receivablePrincipalStr) {
      if (!(this_present_receivablePrincipalStr && that_present_receivablePrincipalStr))
        return false;
      if (!this.receivablePrincipalStr.equals(that.receivablePrincipalStr))
        return false;
    }

    boolean this_present_principalSurplusStr = true && this.isSetPrincipalSurplusStr();
    boolean that_present_principalSurplusStr = true && that.isSetPrincipalSurplusStr();
    if (this_present_principalSurplusStr || that_present_principalSurplusStr) {
      if (!(this_present_principalSurplusStr && that_present_principalSurplusStr))
        return false;
      if (!this.principalSurplusStr.equals(that.principalSurplusStr))
        return false;
    }

    boolean this_present_totalFeedStr = true && this.isSetTotalFeedStr();
    boolean that_present_totalFeedStr = true && that.isSetTotalFeedStr();
    if (this_present_totalFeedStr || that_present_totalFeedStr) {
      if (!(this_present_totalFeedStr && that_present_totalFeedStr))
        return false;
      if (!this.totalFeedStr.equals(that.totalFeedStr))
        return false;
    }

    boolean this_present_noReceiveTotalAmtStr = true && this.isSetNoReceiveTotalAmtStr();
    boolean that_present_noReceiveTotalAmtStr = true && that.isSetNoReceiveTotalAmtStr();
    if (this_present_noReceiveTotalAmtStr || that_present_noReceiveTotalAmtStr) {
      if (!(this_present_noReceiveTotalAmtStr && that_present_noReceiveTotalAmtStr))
        return false;
      if (!this.noReceiveTotalAmtStr.equals(that.noReceiveTotalAmtStr))
        return false;
    }

    boolean this_present_unReceivedOverdueInterestStr = true && this.isSetUnReceivedOverdueInterestStr();
    boolean that_present_unReceivedOverdueInterestStr = true && that.isSetUnReceivedOverdueInterestStr();
    if (this_present_unReceivedOverdueInterestStr || that_present_unReceivedOverdueInterestStr) {
      if (!(this_present_unReceivedOverdueInterestStr && that_present_unReceivedOverdueInterestStr))
        return false;
      if (!this.unReceivedOverdueInterestStr.equals(that.unReceivedOverdueInterestStr))
        return false;
    }

    boolean this_present_unReceivedOverduePunitiveStr = true && this.isSetUnReceivedOverduePunitiveStr();
    boolean that_present_unReceivedOverduePunitiveStr = true && that.isSetUnReceivedOverduePunitiveStr();
    if (this_present_unReceivedOverduePunitiveStr || that_present_unReceivedOverduePunitiveStr) {
      if (!(this_present_unReceivedOverduePunitiveStr && that_present_unReceivedOverduePunitiveStr))
        return false;
      if (!this.unReceivedOverduePunitiveStr.equals(that.unReceivedOverduePunitiveStr))
        return false;
    }

    boolean this_present_contractUrl = true && this.isSetContractUrl();
    boolean that_present_contractUrl = true && that.isSetContractUrl();
    if (this_present_contractUrl || that_present_contractUrl) {
      if (!(this_present_contractUrl && that_present_contractUrl))
        return false;
      if (!this.contractUrl.equals(that.contractUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_contractNo = true && (isSetContractNo());
    list.add(present_contractNo);
    if (present_contractNo)
      list.add(contractNo);

    boolean present_contractId = true && (isSetContractId());
    list.add(present_contractId);
    if (present_contractId)
      list.add(contractId);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_receivablePrincipal = true;
    list.add(present_receivablePrincipal);
    if (present_receivablePrincipal)
      list.add(receivablePrincipal);

    boolean present_receivableInterest = true;
    list.add(present_receivableInterest);
    if (present_receivableInterest)
      list.add(receivableInterest);

    boolean present_receivableMangCost = true;
    list.add(present_receivableMangCost);
    if (present_receivableMangCost)
      list.add(receivableMangCost);

    boolean present_receivableOtherCost = true;
    list.add(present_receivableOtherCost);
    if (present_receivableOtherCost)
      list.add(receivableOtherCost);

    boolean present_receivedPrincipal = true;
    list.add(present_receivedPrincipal);
    if (present_receivedPrincipal)
      list.add(receivedPrincipal);

    boolean present_receivedInterest = true;
    list.add(present_receivedInterest);
    if (present_receivedInterest)
      list.add(receivedInterest);

    boolean present_receivedMangCost = true;
    list.add(present_receivedMangCost);
    if (present_receivedMangCost)
      list.add(receivedMangCost);

    boolean present_receivedOtherCost = true;
    list.add(present_receivedOtherCost);
    if (present_receivedOtherCost)
      list.add(receivedOtherCost);

    boolean present_receivedExpireInterest = true;
    list.add(present_receivedExpireInterest);
    if (present_receivedExpireInterest)
      list.add(receivedExpireInterest);

    boolean present_receivedOverduePenalty = true;
    list.add(present_receivedOverduePenalty);
    if (present_receivedOverduePenalty)
      list.add(receivedOverduePenalty);

    boolean present_unReceivedPrincipal = true;
    list.add(present_unReceivedPrincipal);
    if (present_unReceivedPrincipal)
      list.add(unReceivedPrincipal);

    boolean present_unReceivedInterest = true;
    list.add(present_unReceivedInterest);
    if (present_unReceivedInterest)
      list.add(unReceivedInterest);

    boolean present_unReceivedMangCost = true;
    list.add(present_unReceivedMangCost);
    if (present_unReceivedMangCost)
      list.add(unReceivedMangCost);

    boolean present_unReceivedOtherCost = true;
    list.add(present_unReceivedOtherCost);
    if (present_unReceivedOtherCost)
      list.add(unReceivedOtherCost);

    boolean present_unReceivedOverdueInterest = true;
    list.add(present_unReceivedOverdueInterest);
    if (present_unReceivedOverdueInterest)
      list.add(unReceivedOverdueInterest);

    boolean present_unReceivedOverduePunitive = true;
    list.add(present_unReceivedOverduePunitive);
    if (present_unReceivedOverduePunitive)
      list.add(unReceivedOverduePunitive);

    boolean present_receiveTotalAmt = true;
    list.add(present_receiveTotalAmt);
    if (present_receiveTotalAmt)
      list.add(receiveTotalAmt);

    boolean present_dueUnReceivedTotal = true;
    list.add(present_dueUnReceivedTotal);
    if (present_dueUnReceivedTotal)
      list.add(dueUnReceivedTotal);

    boolean present_noReceiveTotalAmt = true;
    list.add(present_noReceiveTotalAmt);
    if (present_noReceiveTotalAmt)
      list.add(noReceiveTotalAmt);

    boolean present_outstandingTotal = true;
    list.add(present_outstandingTotal);
    if (present_outstandingTotal)
      list.add(outstandingTotal);

    boolean present_comId = true;
    list.add(present_comId);
    if (present_comId)
      list.add(comId);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_noReceiveTotalAmt_im = true;
    list.add(present_noReceiveTotalAmt_im);
    if (present_noReceiveTotalAmt_im)
      list.add(noReceiveTotalAmt_im);

    boolean present_principalSurplus = true;
    list.add(present_principalSurplus);
    if (present_principalSurplus)
      list.add(principalSurplus);

    boolean present_overdueCount = true;
    list.add(present_overdueCount);
    if (present_overdueCount)
      list.add(overdueCount);

    boolean present_receivablePrincipalStr = true && (isSetReceivablePrincipalStr());
    list.add(present_receivablePrincipalStr);
    if (present_receivablePrincipalStr)
      list.add(receivablePrincipalStr);

    boolean present_principalSurplusStr = true && (isSetPrincipalSurplusStr());
    list.add(present_principalSurplusStr);
    if (present_principalSurplusStr)
      list.add(principalSurplusStr);

    boolean present_totalFeedStr = true && (isSetTotalFeedStr());
    list.add(present_totalFeedStr);
    if (present_totalFeedStr)
      list.add(totalFeedStr);

    boolean present_noReceiveTotalAmtStr = true && (isSetNoReceiveTotalAmtStr());
    list.add(present_noReceiveTotalAmtStr);
    if (present_noReceiveTotalAmtStr)
      list.add(noReceiveTotalAmtStr);

    boolean present_unReceivedOverdueInterestStr = true && (isSetUnReceivedOverdueInterestStr());
    list.add(present_unReceivedOverdueInterestStr);
    if (present_unReceivedOverdueInterestStr)
      list.add(unReceivedOverdueInterestStr);

    boolean present_unReceivedOverduePunitiveStr = true && (isSetUnReceivedOverduePunitiveStr());
    list.add(present_unReceivedOverduePunitiveStr);
    if (present_unReceivedOverduePunitiveStr)
      list.add(unReceivedOverduePunitiveStr);

    boolean present_contractUrl = true && (isSetContractUrl());
    list.add(present_contractUrl);
    if (present_contractUrl)
      list.add(contractUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(CustArrearsView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractNo()).compareTo(other.isSetContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractNo, other.contractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivablePrincipal()).compareTo(other.isSetReceivablePrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivablePrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablePrincipal, other.receivablePrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivableInterest()).compareTo(other.isSetReceivableInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivableInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivableInterest, other.receivableInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivableMangCost()).compareTo(other.isSetReceivableMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivableMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivableMangCost, other.receivableMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivableOtherCost()).compareTo(other.isSetReceivableOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivableOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivableOtherCost, other.receivableOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedPrincipal()).compareTo(other.isSetReceivedPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedPrincipal, other.receivedPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedInterest()).compareTo(other.isSetReceivedInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedInterest, other.receivedInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedMangCost()).compareTo(other.isSetReceivedMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedMangCost, other.receivedMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedOtherCost()).compareTo(other.isSetReceivedOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedOtherCost, other.receivedOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedExpireInterest()).compareTo(other.isSetReceivedExpireInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedExpireInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedExpireInterest, other.receivedExpireInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedOverduePenalty()).compareTo(other.isSetReceivedOverduePenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedOverduePenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedOverduePenalty, other.receivedOverduePenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedPrincipal()).compareTo(other.isSetUnReceivedPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedPrincipal, other.unReceivedPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedInterest()).compareTo(other.isSetUnReceivedInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedInterest, other.unReceivedInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedMangCost()).compareTo(other.isSetUnReceivedMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedMangCost, other.unReceivedMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedOtherCost()).compareTo(other.isSetUnReceivedOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedOtherCost, other.unReceivedOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedOverdueInterest()).compareTo(other.isSetUnReceivedOverdueInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedOverdueInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedOverdueInterest, other.unReceivedOverdueInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedOverduePunitive()).compareTo(other.isSetUnReceivedOverduePunitive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedOverduePunitive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedOverduePunitive, other.unReceivedOverduePunitive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveTotalAmt()).compareTo(other.isSetReceiveTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTotalAmt, other.receiveTotalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDueUnReceivedTotal()).compareTo(other.isSetDueUnReceivedTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueUnReceivedTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueUnReceivedTotal, other.dueUnReceivedTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReceiveTotalAmt()).compareTo(other.isSetNoReceiveTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReceiveTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReceiveTotalAmt, other.noReceiveTotalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutstandingTotal()).compareTo(other.isSetOutstandingTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutstandingTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outstandingTotal, other.outstandingTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComId()).compareTo(other.isSetComId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comId, other.comId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReceiveTotalAmt_im()).compareTo(other.isSetNoReceiveTotalAmt_im());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReceiveTotalAmt_im()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReceiveTotalAmt_im, other.noReceiveTotalAmt_im);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalSurplus()).compareTo(other.isSetPrincipalSurplus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalSurplus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalSurplus, other.principalSurplus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueCount()).compareTo(other.isSetOverdueCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueCount, other.overdueCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivablePrincipalStr()).compareTo(other.isSetReceivablePrincipalStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivablePrincipalStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivablePrincipalStr, other.receivablePrincipalStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalSurplusStr()).compareTo(other.isSetPrincipalSurplusStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalSurplusStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalSurplusStr, other.principalSurplusStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalFeedStr()).compareTo(other.isSetTotalFeedStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalFeedStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalFeedStr, other.totalFeedStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoReceiveTotalAmtStr()).compareTo(other.isSetNoReceiveTotalAmtStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoReceiveTotalAmtStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noReceiveTotalAmtStr, other.noReceiveTotalAmtStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedOverdueInterestStr()).compareTo(other.isSetUnReceivedOverdueInterestStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedOverdueInterestStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedOverdueInterestStr, other.unReceivedOverdueInterestStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReceivedOverduePunitiveStr()).compareTo(other.isSetUnReceivedOverduePunitiveStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReceivedOverduePunitiveStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReceivedOverduePunitiveStr, other.unReceivedOverduePunitiveStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractUrl()).compareTo(other.isSetContractUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractUrl, other.contractUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CustArrearsView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractNo:");
    if (this.contractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.contractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractId:");
    if (this.contractId == null) {
      sb.append("null");
    } else {
      sb.append(this.contractId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivablePrincipal:");
    sb.append(this.receivablePrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivableInterest:");
    sb.append(this.receivableInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivableMangCost:");
    sb.append(this.receivableMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivableOtherCost:");
    sb.append(this.receivableOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedPrincipal:");
    sb.append(this.receivedPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedInterest:");
    sb.append(this.receivedInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedMangCost:");
    sb.append(this.receivedMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedOtherCost:");
    sb.append(this.receivedOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedExpireInterest:");
    sb.append(this.receivedExpireInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedOverduePenalty:");
    sb.append(this.receivedOverduePenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedPrincipal:");
    sb.append(this.unReceivedPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedInterest:");
    sb.append(this.unReceivedInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedMangCost:");
    sb.append(this.unReceivedMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedOtherCost:");
    sb.append(this.unReceivedOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedOverdueInterest:");
    sb.append(this.unReceivedOverdueInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedOverduePunitive:");
    sb.append(this.unReceivedOverduePunitive);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveTotalAmt:");
    sb.append(this.receiveTotalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueUnReceivedTotal:");
    sb.append(this.dueUnReceivedTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReceiveTotalAmt:");
    sb.append(this.noReceiveTotalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outstandingTotal:");
    sb.append(this.outstandingTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comId:");
    sb.append(this.comId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReceiveTotalAmt_im:");
    sb.append(this.noReceiveTotalAmt_im);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalSurplus:");
    sb.append(this.principalSurplus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueCount:");
    sb.append(this.overdueCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivablePrincipalStr:");
    if (this.receivablePrincipalStr == null) {
      sb.append("null");
    } else {
      sb.append(this.receivablePrincipalStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalSurplusStr:");
    if (this.principalSurplusStr == null) {
      sb.append("null");
    } else {
      sb.append(this.principalSurplusStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalFeedStr:");
    if (this.totalFeedStr == null) {
      sb.append("null");
    } else {
      sb.append(this.totalFeedStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noReceiveTotalAmtStr:");
    if (this.noReceiveTotalAmtStr == null) {
      sb.append("null");
    } else {
      sb.append(this.noReceiveTotalAmtStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedOverdueInterestStr:");
    if (this.unReceivedOverdueInterestStr == null) {
      sb.append("null");
    } else {
      sb.append(this.unReceivedOverdueInterestStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReceivedOverduePunitiveStr:");
    if (this.unReceivedOverduePunitiveStr == null) {
      sb.append("null");
    } else {
      sb.append(this.unReceivedOverduePunitiveStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contractUrl:");
    if (this.contractUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.contractUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CustArrearsViewStandardSchemeFactory implements SchemeFactory {
    public CustArrearsViewStandardScheme getScheme() {
      return new CustArrearsViewStandardScheme();
    }
  }

  private static class CustArrearsViewStandardScheme extends StandardScheme<CustArrearsView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CustArrearsView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractNo = iprot.readString();
              struct.setContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractId = iprot.readString();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECEIVABLE_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivablePrincipal = iprot.readDouble();
              struct.setReceivablePrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECEIVABLE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivableInterest = iprot.readDouble();
              struct.setReceivableInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECEIVABLE_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivableMangCost = iprot.readDouble();
              struct.setReceivableMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RECEIVABLE_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivableOtherCost = iprot.readDouble();
              struct.setReceivableOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RECEIVED_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedPrincipal = iprot.readDouble();
              struct.setReceivedPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RECEIVED_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedInterest = iprot.readDouble();
              struct.setReceivedInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RECEIVED_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedMangCost = iprot.readDouble();
              struct.setReceivedMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RECEIVED_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedOtherCost = iprot.readDouble();
              struct.setReceivedOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RECEIVED_EXPIRE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedExpireInterest = iprot.readDouble();
              struct.setReceivedExpireInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RECEIVED_OVERDUE_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedOverduePenalty = iprot.readDouble();
              struct.setReceivedOverduePenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // UN_RECEIVED_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReceivedPrincipal = iprot.readDouble();
              struct.setUnReceivedPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UN_RECEIVED_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReceivedInterest = iprot.readDouble();
              struct.setUnReceivedInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // UN_RECEIVED_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReceivedMangCost = iprot.readDouble();
              struct.setUnReceivedMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UN_RECEIVED_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReceivedOtherCost = iprot.readDouble();
              struct.setUnReceivedOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UN_RECEIVED_OVERDUE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReceivedOverdueInterest = iprot.readDouble();
              struct.setUnReceivedOverdueInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UN_RECEIVED_OVERDUE_PUNITIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReceivedOverduePunitive = iprot.readDouble();
              struct.setUnReceivedOverduePunitiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RECEIVE_TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receiveTotalAmt = iprot.readDouble();
              struct.setReceiveTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // DUE_UN_RECEIVED_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dueUnReceivedTotal = iprot.readDouble();
              struct.setDueUnReceivedTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // NO_RECEIVE_TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noReceiveTotalAmt = iprot.readDouble();
              struct.setNoReceiveTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OUTSTANDING_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outstandingTotal = iprot.readDouble();
              struct.setOutstandingTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // COM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comId = iprot.readI32();
              struct.setComIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // NO_RECEIVE_TOTAL_AMT_IM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.noReceiveTotalAmt_im = iprot.readDouble();
              struct.setNoReceiveTotalAmt_imIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PRINCIPAL_SURPLUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalSurplus = iprot.readDouble();
              struct.setPrincipalSurplusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // OVERDUE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueCount = iprot.readI32();
              struct.setOverdueCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // RECEIVABLE_PRINCIPAL_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receivablePrincipalStr = iprot.readString();
              struct.setReceivablePrincipalStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PRINCIPAL_SURPLUS_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.principalSurplusStr = iprot.readString();
              struct.setPrincipalSurplusStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // TOTAL_FEED_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.totalFeedStr = iprot.readString();
              struct.setTotalFeedStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // NO_RECEIVE_TOTAL_AMT_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noReceiveTotalAmtStr = iprot.readString();
              struct.setNoReceiveTotalAmtStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // UN_RECEIVED_OVERDUE_INTEREST_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unReceivedOverdueInterestStr = iprot.readString();
              struct.setUnReceivedOverdueInterestStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // UN_RECEIVED_OVERDUE_PUNITIVE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unReceivedOverduePunitiveStr = iprot.readString();
              struct.setUnReceivedOverduePunitiveStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CONTRACT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractUrl = iprot.readString();
              struct.setContractUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CustArrearsView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.contractNo != null) {
        oprot.writeFieldBegin(CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.contractNo);
        oprot.writeFieldEnd();
      }
      if (struct.contractId != null) {
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeString(struct.contractId);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLE_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.receivablePrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.receivableInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLE_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.receivableMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVABLE_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.receivableOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.receivedPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.receivedInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.receivedMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.receivedOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_EXPIRE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.receivedExpireInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_OVERDUE_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.receivedOverduePenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECEIVED_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.unReceivedPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECEIVED_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.unReceivedInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECEIVED_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.unReceivedMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECEIVED_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.unReceivedOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECEIVED_OVERDUE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.unReceivedOverdueInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECEIVED_OVERDUE_PUNITIVE_FIELD_DESC);
      oprot.writeDouble(struct.unReceivedOverduePunitive);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVE_TOTAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.receiveTotalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUE_UN_RECEIVED_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.dueUnReceivedTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_RECEIVE_TOTAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.noReceiveTotalAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTSTANDING_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.outstandingTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COM_ID_FIELD_DESC);
      oprot.writeI32(struct.comId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NO_RECEIVE_TOTAL_AMT_IM_FIELD_DESC);
      oprot.writeDouble(struct.noReceiveTotalAmt_im);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_SURPLUS_FIELD_DESC);
      oprot.writeDouble(struct.principalSurplus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.overdueCount);
      oprot.writeFieldEnd();
      if (struct.receivablePrincipalStr != null) {
        oprot.writeFieldBegin(RECEIVABLE_PRINCIPAL_STR_FIELD_DESC);
        oprot.writeString(struct.receivablePrincipalStr);
        oprot.writeFieldEnd();
      }
      if (struct.principalSurplusStr != null) {
        oprot.writeFieldBegin(PRINCIPAL_SURPLUS_STR_FIELD_DESC);
        oprot.writeString(struct.principalSurplusStr);
        oprot.writeFieldEnd();
      }
      if (struct.totalFeedStr != null) {
        oprot.writeFieldBegin(TOTAL_FEED_STR_FIELD_DESC);
        oprot.writeString(struct.totalFeedStr);
        oprot.writeFieldEnd();
      }
      if (struct.noReceiveTotalAmtStr != null) {
        oprot.writeFieldBegin(NO_RECEIVE_TOTAL_AMT_STR_FIELD_DESC);
        oprot.writeString(struct.noReceiveTotalAmtStr);
        oprot.writeFieldEnd();
      }
      if (struct.unReceivedOverdueInterestStr != null) {
        oprot.writeFieldBegin(UN_RECEIVED_OVERDUE_INTEREST_STR_FIELD_DESC);
        oprot.writeString(struct.unReceivedOverdueInterestStr);
        oprot.writeFieldEnd();
      }
      if (struct.unReceivedOverduePunitiveStr != null) {
        oprot.writeFieldBegin(UN_RECEIVED_OVERDUE_PUNITIVE_STR_FIELD_DESC);
        oprot.writeString(struct.unReceivedOverduePunitiveStr);
        oprot.writeFieldEnd();
      }
      if (struct.contractUrl != null) {
        oprot.writeFieldBegin(CONTRACT_URL_FIELD_DESC);
        oprot.writeString(struct.contractUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CustArrearsViewTupleSchemeFactory implements SchemeFactory {
    public CustArrearsViewTupleScheme getScheme() {
      return new CustArrearsViewTupleScheme();
    }
  }

  private static class CustArrearsViewTupleScheme extends TupleScheme<CustArrearsView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CustArrearsView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(3);
      }
      if (struct.isSetContractNo()) {
        optionals.set(4);
      }
      if (struct.isSetContractId()) {
        optionals.set(5);
      }
      if (struct.isSetCusName()) {
        optionals.set(6);
      }
      if (struct.isSetAcctId()) {
        optionals.set(7);
      }
      if (struct.isSetReceivablePrincipal()) {
        optionals.set(8);
      }
      if (struct.isSetReceivableInterest()) {
        optionals.set(9);
      }
      if (struct.isSetReceivableMangCost()) {
        optionals.set(10);
      }
      if (struct.isSetReceivableOtherCost()) {
        optionals.set(11);
      }
      if (struct.isSetReceivedPrincipal()) {
        optionals.set(12);
      }
      if (struct.isSetReceivedInterest()) {
        optionals.set(13);
      }
      if (struct.isSetReceivedMangCost()) {
        optionals.set(14);
      }
      if (struct.isSetReceivedOtherCost()) {
        optionals.set(15);
      }
      if (struct.isSetReceivedExpireInterest()) {
        optionals.set(16);
      }
      if (struct.isSetReceivedOverduePenalty()) {
        optionals.set(17);
      }
      if (struct.isSetUnReceivedPrincipal()) {
        optionals.set(18);
      }
      if (struct.isSetUnReceivedInterest()) {
        optionals.set(19);
      }
      if (struct.isSetUnReceivedMangCost()) {
        optionals.set(20);
      }
      if (struct.isSetUnReceivedOtherCost()) {
        optionals.set(21);
      }
      if (struct.isSetUnReceivedOverdueInterest()) {
        optionals.set(22);
      }
      if (struct.isSetUnReceivedOverduePunitive()) {
        optionals.set(23);
      }
      if (struct.isSetReceiveTotalAmt()) {
        optionals.set(24);
      }
      if (struct.isSetDueUnReceivedTotal()) {
        optionals.set(25);
      }
      if (struct.isSetNoReceiveTotalAmt()) {
        optionals.set(26);
      }
      if (struct.isSetOutstandingTotal()) {
        optionals.set(27);
      }
      if (struct.isSetComId()) {
        optionals.set(28);
      }
      if (struct.isSetCusType()) {
        optionals.set(29);
      }
      if (struct.isSetNoReceiveTotalAmt_im()) {
        optionals.set(30);
      }
      if (struct.isSetPrincipalSurplus()) {
        optionals.set(31);
      }
      if (struct.isSetOverdueCount()) {
        optionals.set(32);
      }
      if (struct.isSetReceivablePrincipalStr()) {
        optionals.set(33);
      }
      if (struct.isSetPrincipalSurplusStr()) {
        optionals.set(34);
      }
      if (struct.isSetTotalFeedStr()) {
        optionals.set(35);
      }
      if (struct.isSetNoReceiveTotalAmtStr()) {
        optionals.set(36);
      }
      if (struct.isSetUnReceivedOverdueInterestStr()) {
        optionals.set(37);
      }
      if (struct.isSetUnReceivedOverduePunitiveStr()) {
        optionals.set(38);
      }
      if (struct.isSetContractUrl()) {
        optionals.set(39);
      }
      oprot.writeBitSet(optionals, 40);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetContractNo()) {
        oprot.writeString(struct.contractNo);
      }
      if (struct.isSetContractId()) {
        oprot.writeString(struct.contractId);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetReceivablePrincipal()) {
        oprot.writeDouble(struct.receivablePrincipal);
      }
      if (struct.isSetReceivableInterest()) {
        oprot.writeDouble(struct.receivableInterest);
      }
      if (struct.isSetReceivableMangCost()) {
        oprot.writeDouble(struct.receivableMangCost);
      }
      if (struct.isSetReceivableOtherCost()) {
        oprot.writeDouble(struct.receivableOtherCost);
      }
      if (struct.isSetReceivedPrincipal()) {
        oprot.writeDouble(struct.receivedPrincipal);
      }
      if (struct.isSetReceivedInterest()) {
        oprot.writeDouble(struct.receivedInterest);
      }
      if (struct.isSetReceivedMangCost()) {
        oprot.writeDouble(struct.receivedMangCost);
      }
      if (struct.isSetReceivedOtherCost()) {
        oprot.writeDouble(struct.receivedOtherCost);
      }
      if (struct.isSetReceivedExpireInterest()) {
        oprot.writeDouble(struct.receivedExpireInterest);
      }
      if (struct.isSetReceivedOverduePenalty()) {
        oprot.writeDouble(struct.receivedOverduePenalty);
      }
      if (struct.isSetUnReceivedPrincipal()) {
        oprot.writeDouble(struct.unReceivedPrincipal);
      }
      if (struct.isSetUnReceivedInterest()) {
        oprot.writeDouble(struct.unReceivedInterest);
      }
      if (struct.isSetUnReceivedMangCost()) {
        oprot.writeDouble(struct.unReceivedMangCost);
      }
      if (struct.isSetUnReceivedOtherCost()) {
        oprot.writeDouble(struct.unReceivedOtherCost);
      }
      if (struct.isSetUnReceivedOverdueInterest()) {
        oprot.writeDouble(struct.unReceivedOverdueInterest);
      }
      if (struct.isSetUnReceivedOverduePunitive()) {
        oprot.writeDouble(struct.unReceivedOverduePunitive);
      }
      if (struct.isSetReceiveTotalAmt()) {
        oprot.writeDouble(struct.receiveTotalAmt);
      }
      if (struct.isSetDueUnReceivedTotal()) {
        oprot.writeDouble(struct.dueUnReceivedTotal);
      }
      if (struct.isSetNoReceiveTotalAmt()) {
        oprot.writeDouble(struct.noReceiveTotalAmt);
      }
      if (struct.isSetOutstandingTotal()) {
        oprot.writeDouble(struct.outstandingTotal);
      }
      if (struct.isSetComId()) {
        oprot.writeI32(struct.comId);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetNoReceiveTotalAmt_im()) {
        oprot.writeDouble(struct.noReceiveTotalAmt_im);
      }
      if (struct.isSetPrincipalSurplus()) {
        oprot.writeDouble(struct.principalSurplus);
      }
      if (struct.isSetOverdueCount()) {
        oprot.writeI32(struct.overdueCount);
      }
      if (struct.isSetReceivablePrincipalStr()) {
        oprot.writeString(struct.receivablePrincipalStr);
      }
      if (struct.isSetPrincipalSurplusStr()) {
        oprot.writeString(struct.principalSurplusStr);
      }
      if (struct.isSetTotalFeedStr()) {
        oprot.writeString(struct.totalFeedStr);
      }
      if (struct.isSetNoReceiveTotalAmtStr()) {
        oprot.writeString(struct.noReceiveTotalAmtStr);
      }
      if (struct.isSetUnReceivedOverdueInterestStr()) {
        oprot.writeString(struct.unReceivedOverdueInterestStr);
      }
      if (struct.isSetUnReceivedOverduePunitiveStr()) {
        oprot.writeString(struct.unReceivedOverduePunitiveStr);
      }
      if (struct.isSetContractUrl()) {
        oprot.writeString(struct.contractUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CustArrearsView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(40);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractNo = iprot.readString();
        struct.setContractNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractId = iprot.readString();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.receivablePrincipal = iprot.readDouble();
        struct.setReceivablePrincipalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.receivableInterest = iprot.readDouble();
        struct.setReceivableInterestIsSet(true);
      }
      if (incoming.get(10)) {
        struct.receivableMangCost = iprot.readDouble();
        struct.setReceivableMangCostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.receivableOtherCost = iprot.readDouble();
        struct.setReceivableOtherCostIsSet(true);
      }
      if (incoming.get(12)) {
        struct.receivedPrincipal = iprot.readDouble();
        struct.setReceivedPrincipalIsSet(true);
      }
      if (incoming.get(13)) {
        struct.receivedInterest = iprot.readDouble();
        struct.setReceivedInterestIsSet(true);
      }
      if (incoming.get(14)) {
        struct.receivedMangCost = iprot.readDouble();
        struct.setReceivedMangCostIsSet(true);
      }
      if (incoming.get(15)) {
        struct.receivedOtherCost = iprot.readDouble();
        struct.setReceivedOtherCostIsSet(true);
      }
      if (incoming.get(16)) {
        struct.receivedExpireInterest = iprot.readDouble();
        struct.setReceivedExpireInterestIsSet(true);
      }
      if (incoming.get(17)) {
        struct.receivedOverduePenalty = iprot.readDouble();
        struct.setReceivedOverduePenaltyIsSet(true);
      }
      if (incoming.get(18)) {
        struct.unReceivedPrincipal = iprot.readDouble();
        struct.setUnReceivedPrincipalIsSet(true);
      }
      if (incoming.get(19)) {
        struct.unReceivedInterest = iprot.readDouble();
        struct.setUnReceivedInterestIsSet(true);
      }
      if (incoming.get(20)) {
        struct.unReceivedMangCost = iprot.readDouble();
        struct.setUnReceivedMangCostIsSet(true);
      }
      if (incoming.get(21)) {
        struct.unReceivedOtherCost = iprot.readDouble();
        struct.setUnReceivedOtherCostIsSet(true);
      }
      if (incoming.get(22)) {
        struct.unReceivedOverdueInterest = iprot.readDouble();
        struct.setUnReceivedOverdueInterestIsSet(true);
      }
      if (incoming.get(23)) {
        struct.unReceivedOverduePunitive = iprot.readDouble();
        struct.setUnReceivedOverduePunitiveIsSet(true);
      }
      if (incoming.get(24)) {
        struct.receiveTotalAmt = iprot.readDouble();
        struct.setReceiveTotalAmtIsSet(true);
      }
      if (incoming.get(25)) {
        struct.dueUnReceivedTotal = iprot.readDouble();
        struct.setDueUnReceivedTotalIsSet(true);
      }
      if (incoming.get(26)) {
        struct.noReceiveTotalAmt = iprot.readDouble();
        struct.setNoReceiveTotalAmtIsSet(true);
      }
      if (incoming.get(27)) {
        struct.outstandingTotal = iprot.readDouble();
        struct.setOutstandingTotalIsSet(true);
      }
      if (incoming.get(28)) {
        struct.comId = iprot.readI32();
        struct.setComIdIsSet(true);
      }
      if (incoming.get(29)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.noReceiveTotalAmt_im = iprot.readDouble();
        struct.setNoReceiveTotalAmt_imIsSet(true);
      }
      if (incoming.get(31)) {
        struct.principalSurplus = iprot.readDouble();
        struct.setPrincipalSurplusIsSet(true);
      }
      if (incoming.get(32)) {
        struct.overdueCount = iprot.readI32();
        struct.setOverdueCountIsSet(true);
      }
      if (incoming.get(33)) {
        struct.receivablePrincipalStr = iprot.readString();
        struct.setReceivablePrincipalStrIsSet(true);
      }
      if (incoming.get(34)) {
        struct.principalSurplusStr = iprot.readString();
        struct.setPrincipalSurplusStrIsSet(true);
      }
      if (incoming.get(35)) {
        struct.totalFeedStr = iprot.readString();
        struct.setTotalFeedStrIsSet(true);
      }
      if (incoming.get(36)) {
        struct.noReceiveTotalAmtStr = iprot.readString();
        struct.setNoReceiveTotalAmtStrIsSet(true);
      }
      if (incoming.get(37)) {
        struct.unReceivedOverdueInterestStr = iprot.readString();
        struct.setUnReceivedOverdueInterestStrIsSet(true);
      }
      if (incoming.get(38)) {
        struct.unReceivedOverduePunitiveStr = iprot.readString();
        struct.setUnReceivedOverduePunitiveStrIsSet(true);
      }
      if (incoming.get(39)) {
        struct.contractUrl = iprot.readString();
        struct.setContractUrlIsSet(true);
      }
    }
  }

}


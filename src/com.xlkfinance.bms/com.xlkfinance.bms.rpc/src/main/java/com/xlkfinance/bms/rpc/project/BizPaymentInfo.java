/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class BizPaymentInfo implements org.apache.thrift.TBase<BizPaymentInfo, BizPaymentInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizPaymentInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizPaymentInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPlanId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACTUAL_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ACTUAL_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("actualInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ACTUAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ACTUAL_PRINCIPAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPrincipalTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizPaymentInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizPaymentInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int loanPlanId; // required
  public double actualPrincipal; // required
  public double actualInterest; // required
  public double actualTotal; // required
  public String actualPrincipalTime; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    LOAN_PLAN_ID((short)3, "loanPlanId"),
    ACTUAL_PRINCIPAL((short)4, "actualPrincipal"),
    ACTUAL_INTEREST((short)5, "actualInterest"),
    ACTUAL_TOTAL((short)6, "actualTotal"),
    ACTUAL_PRINCIPAL_TIME((short)7, "actualPrincipalTime"),
    CREATE_DATE((short)8, "createDate"),
    CREATER_ID((short)9, "createrId"),
    UPDATE_ID((short)10, "updateId"),
    UPDATE_DATE((short)11, "updateDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // LOAN_PLAN_ID
          return LOAN_PLAN_ID;
        case 4: // ACTUAL_PRINCIPAL
          return ACTUAL_PRINCIPAL;
        case 5: // ACTUAL_INTEREST
          return ACTUAL_INTEREST;
        case 6: // ACTUAL_TOTAL
          return ACTUAL_TOTAL;
        case 7: // ACTUAL_PRINCIPAL_TIME
          return ACTUAL_PRINCIPAL_TIME;
        case 8: // CREATE_DATE
          return CREATE_DATE;
        case 9: // CREATER_ID
          return CREATER_ID;
        case 10: // UPDATE_ID
          return UPDATE_ID;
        case 11: // UPDATE_DATE
          return UPDATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __LOANPLANID_ISSET_ID = 2;
  private static final int __ACTUALPRINCIPAL_ISSET_ID = 3;
  private static final int __ACTUALINTEREST_ISSET_ID = 4;
  private static final int __ACTUALTOTAL_ISSET_ID = 5;
  private static final int __CREATERID_ISSET_ID = 6;
  private static final int __UPDATEID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("actualPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("actualInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("actualTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PRINCIPAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualPrincipalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizPaymentInfo.class, metaDataMap);
  }

  public BizPaymentInfo() {
  }

  public BizPaymentInfo(
    int pid,
    int projectId,
    int loanPlanId,
    double actualPrincipal,
    double actualInterest,
    double actualTotal,
    String actualPrincipalTime,
    String createDate,
    int createrId,
    int updateId,
    String updateDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanPlanId = loanPlanId;
    setLoanPlanIdIsSet(true);
    this.actualPrincipal = actualPrincipal;
    setActualPrincipalIsSet(true);
    this.actualInterest = actualInterest;
    setActualInterestIsSet(true);
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    this.actualPrincipalTime = actualPrincipalTime;
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizPaymentInfo(BizPaymentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.loanPlanId = other.loanPlanId;
    this.actualPrincipal = other.actualPrincipal;
    this.actualInterest = other.actualInterest;
    this.actualTotal = other.actualTotal;
    if (other.isSetActualPrincipalTime()) {
      this.actualPrincipalTime = other.actualPrincipalTime;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
  }

  public BizPaymentInfo deepCopy() {
    return new BizPaymentInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLoanPlanIdIsSet(false);
    this.loanPlanId = 0;
    setActualPrincipalIsSet(false);
    this.actualPrincipal = 0.0;
    setActualInterestIsSet(false);
    this.actualInterest = 0.0;
    setActualTotalIsSet(false);
    this.actualTotal = 0.0;
    this.actualPrincipalTime = null;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizPaymentInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizPaymentInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getLoanPlanId() {
    return this.loanPlanId;
  }

  public BizPaymentInfo setLoanPlanId(int loanPlanId) {
    this.loanPlanId = loanPlanId;
    setLoanPlanIdIsSet(true);
    return this;
  }

  public void unsetLoanPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANPLANID_ISSET_ID);
  }

  /** Returns true if field loanPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANPLANID_ISSET_ID);
  }

  public void setLoanPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANPLANID_ISSET_ID, value);
  }

  public double getActualPrincipal() {
    return this.actualPrincipal;
  }

  public BizPaymentInfo setActualPrincipal(double actualPrincipal) {
    this.actualPrincipal = actualPrincipal;
    setActualPrincipalIsSet(true);
    return this;
  }

  public void unsetActualPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field actualPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID);
  }

  public void setActualPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID, value);
  }

  public double getActualInterest() {
    return this.actualInterest;
  }

  public BizPaymentInfo setActualInterest(double actualInterest) {
    this.actualInterest = actualInterest;
    setActualInterestIsSet(true);
    return this;
  }

  public void unsetActualInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID);
  }

  /** Returns true if field actualInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetActualInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID);
  }

  public void setActualInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID, value);
  }

  public double getActualTotal() {
    return this.actualTotal;
  }

  public BizPaymentInfo setActualTotal(double actualTotal) {
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    return this;
  }

  public void unsetActualTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  /** Returns true if field actualTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  public void setActualTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID, value);
  }

  public String getActualPrincipalTime() {
    return this.actualPrincipalTime;
  }

  public BizPaymentInfo setActualPrincipalTime(String actualPrincipalTime) {
    this.actualPrincipalTime = actualPrincipalTime;
    return this;
  }

  public void unsetActualPrincipalTime() {
    this.actualPrincipalTime = null;
  }

  /** Returns true if field actualPrincipalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPrincipalTime() {
    return this.actualPrincipalTime != null;
  }

  public void setActualPrincipalTimeIsSet(boolean value) {
    if (!value) {
      this.actualPrincipalTime = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizPaymentInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizPaymentInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizPaymentInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizPaymentInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_PLAN_ID:
      if (value == null) {
        unsetLoanPlanId();
      } else {
        setLoanPlanId((Integer)value);
      }
      break;

    case ACTUAL_PRINCIPAL:
      if (value == null) {
        unsetActualPrincipal();
      } else {
        setActualPrincipal((Double)value);
      }
      break;

    case ACTUAL_INTEREST:
      if (value == null) {
        unsetActualInterest();
      } else {
        setActualInterest((Double)value);
      }
      break;

    case ACTUAL_TOTAL:
      if (value == null) {
        unsetActualTotal();
      } else {
        setActualTotal((Double)value);
      }
      break;

    case ACTUAL_PRINCIPAL_TIME:
      if (value == null) {
        unsetActualPrincipalTime();
      } else {
        setActualPrincipalTime((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_PLAN_ID:
      return Integer.valueOf(getLoanPlanId());

    case ACTUAL_PRINCIPAL:
      return Double.valueOf(getActualPrincipal());

    case ACTUAL_INTEREST:
      return Double.valueOf(getActualInterest());

    case ACTUAL_TOTAL:
      return Double.valueOf(getActualTotal());

    case ACTUAL_PRINCIPAL_TIME:
      return getActualPrincipalTime();

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_PLAN_ID:
      return isSetLoanPlanId();
    case ACTUAL_PRINCIPAL:
      return isSetActualPrincipal();
    case ACTUAL_INTEREST:
      return isSetActualInterest();
    case ACTUAL_TOTAL:
      return isSetActualTotal();
    case ACTUAL_PRINCIPAL_TIME:
      return isSetActualPrincipalTime();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizPaymentInfo)
      return this.equals((BizPaymentInfo)that);
    return false;
  }

  public boolean equals(BizPaymentInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanPlanId = true;
    boolean that_present_loanPlanId = true;
    if (this_present_loanPlanId || that_present_loanPlanId) {
      if (!(this_present_loanPlanId && that_present_loanPlanId))
        return false;
      if (this.loanPlanId != that.loanPlanId)
        return false;
    }

    boolean this_present_actualPrincipal = true;
    boolean that_present_actualPrincipal = true;
    if (this_present_actualPrincipal || that_present_actualPrincipal) {
      if (!(this_present_actualPrincipal && that_present_actualPrincipal))
        return false;
      if (this.actualPrincipal != that.actualPrincipal)
        return false;
    }

    boolean this_present_actualInterest = true;
    boolean that_present_actualInterest = true;
    if (this_present_actualInterest || that_present_actualInterest) {
      if (!(this_present_actualInterest && that_present_actualInterest))
        return false;
      if (this.actualInterest != that.actualInterest)
        return false;
    }

    boolean this_present_actualTotal = true;
    boolean that_present_actualTotal = true;
    if (this_present_actualTotal || that_present_actualTotal) {
      if (!(this_present_actualTotal && that_present_actualTotal))
        return false;
      if (this.actualTotal != that.actualTotal)
        return false;
    }

    boolean this_present_actualPrincipalTime = true && this.isSetActualPrincipalTime();
    boolean that_present_actualPrincipalTime = true && that.isSetActualPrincipalTime();
    if (this_present_actualPrincipalTime || that_present_actualPrincipalTime) {
      if (!(this_present_actualPrincipalTime && that_present_actualPrincipalTime))
        return false;
      if (!this.actualPrincipalTime.equals(that.actualPrincipalTime))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanPlanId = true;
    list.add(present_loanPlanId);
    if (present_loanPlanId)
      list.add(loanPlanId);

    boolean present_actualPrincipal = true;
    list.add(present_actualPrincipal);
    if (present_actualPrincipal)
      list.add(actualPrincipal);

    boolean present_actualInterest = true;
    list.add(present_actualInterest);
    if (present_actualInterest)
      list.add(actualInterest);

    boolean present_actualTotal = true;
    list.add(present_actualTotal);
    if (present_actualTotal)
      list.add(actualTotal);

    boolean present_actualPrincipalTime = true && (isSetActualPrincipalTime());
    list.add(present_actualPrincipalTime);
    if (present_actualPrincipalTime)
      list.add(actualPrincipalTime);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizPaymentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPlanId()).compareTo(other.isSetLoanPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPlanId, other.loanPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPrincipal()).compareTo(other.isSetActualPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPrincipal, other.actualPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualInterest()).compareTo(other.isSetActualInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualInterest, other.actualInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualTotal()).compareTo(other.isSetActualTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualTotal, other.actualTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPrincipalTime()).compareTo(other.isSetActualPrincipalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPrincipalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPrincipalTime, other.actualPrincipalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizPaymentInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPlanId:");
    sb.append(this.loanPlanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPrincipal:");
    sb.append(this.actualPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualInterest:");
    sb.append(this.actualInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualTotal:");
    sb.append(this.actualTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPrincipalTime:");
    if (this.actualPrincipalTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actualPrincipalTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizPaymentInfoStandardSchemeFactory implements SchemeFactory {
    public BizPaymentInfoStandardScheme getScheme() {
      return new BizPaymentInfoStandardScheme();
    }
  }

  private static class BizPaymentInfoStandardScheme extends StandardScheme<BizPaymentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizPaymentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanPlanId = iprot.readI32();
              struct.setLoanPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTUAL_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualPrincipal = iprot.readDouble();
              struct.setActualPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTUAL_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualInterest = iprot.readDouble();
              struct.setActualInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTUAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualTotal = iprot.readDouble();
              struct.setActualTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTUAL_PRINCIPAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualPrincipalTime = iprot.readString();
              struct.setActualPrincipalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizPaymentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanPlanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.actualPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.actualInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.actualTotal);
      oprot.writeFieldEnd();
      if (struct.actualPrincipalTime != null) {
        oprot.writeFieldBegin(ACTUAL_PRINCIPAL_TIME_FIELD_DESC);
        oprot.writeString(struct.actualPrincipalTime);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizPaymentInfoTupleSchemeFactory implements SchemeFactory {
    public BizPaymentInfoTupleScheme getScheme() {
      return new BizPaymentInfoTupleScheme();
    }
  }

  private static class BizPaymentInfoTupleScheme extends TupleScheme<BizPaymentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizPaymentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetLoanPlanId()) {
        optionals.set(2);
      }
      if (struct.isSetActualPrincipal()) {
        optionals.set(3);
      }
      if (struct.isSetActualInterest()) {
        optionals.set(4);
      }
      if (struct.isSetActualTotal()) {
        optionals.set(5);
      }
      if (struct.isSetActualPrincipalTime()) {
        optionals.set(6);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(7);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanPlanId()) {
        oprot.writeI32(struct.loanPlanId);
      }
      if (struct.isSetActualPrincipal()) {
        oprot.writeDouble(struct.actualPrincipal);
      }
      if (struct.isSetActualInterest()) {
        oprot.writeDouble(struct.actualInterest);
      }
      if (struct.isSetActualTotal()) {
        oprot.writeDouble(struct.actualTotal);
      }
      if (struct.isSetActualPrincipalTime()) {
        oprot.writeString(struct.actualPrincipalTime);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizPaymentInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanPlanId = iprot.readI32();
        struct.setLoanPlanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.actualPrincipal = iprot.readDouble();
        struct.setActualPrincipalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.actualInterest = iprot.readDouble();
        struct.setActualInterestIsSet(true);
      }
      if (incoming.get(5)) {
        struct.actualTotal = iprot.readDouble();
        struct.setActualTotalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.actualPrincipalTime = iprot.readString();
        struct.setActualPrincipalTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
    }
  }

}


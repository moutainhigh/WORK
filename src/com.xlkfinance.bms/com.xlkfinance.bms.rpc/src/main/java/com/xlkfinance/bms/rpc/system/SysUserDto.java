/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.system;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-8")
public class SysUserDto implements org.apache.thrift.TBase<SysUserDto, SysUserDto._Fields>, java.io.Serializable, Cloneable, Comparable<SysUserDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SysUserDto");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField JOB_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("jobTitle", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mail", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PWD_FIELD_DESC = new org.apache.thrift.protocol.TField("pwd", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("photoUrl", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PERSONAL_QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("personalQQ", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ENTERPRISE_QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("enterpriseQQ", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField WORK_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("workPhone", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField EXTENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("extension", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField ROLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("roleName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ROLE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("roleDesc", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SysUserDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SysUserDtoTupleSchemeFactory());
  }

  public int pid; // required
  public String userName; // required
  public String realName; // required
  public String memberId; // required
  public int status; // required
  public String department; // required
  public String jobTitle; // required
  public String mail; // required
  public String pwd; // required
  public String photoUrl; // required
  public String token; // required
  public String personalQQ; // required
  public String enterpriseQQ; // required
  public String phone; // required
  public String workPhone; // required
  public String extension; // required
  public String roleName; // required
  public String roleDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    USER_NAME((short)2, "userName"),
    REAL_NAME((short)3, "realName"),
    MEMBER_ID((short)4, "memberId"),
    STATUS((short)5, "status"),
    DEPARTMENT((short)6, "department"),
    JOB_TITLE((short)7, "jobTitle"),
    MAIL((short)8, "mail"),
    PWD((short)9, "pwd"),
    PHOTO_URL((short)10, "photoUrl"),
    TOKEN((short)11, "token"),
    PERSONAL_QQ((short)12, "personalQQ"),
    ENTERPRISE_QQ((short)13, "enterpriseQQ"),
    PHONE((short)14, "phone"),
    WORK_PHONE((short)15, "workPhone"),
    EXTENSION((short)16, "extension"),
    ROLE_NAME((short)17, "roleName"),
    ROLE_DESC((short)18, "roleDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // REAL_NAME
          return REAL_NAME;
        case 4: // MEMBER_ID
          return MEMBER_ID;
        case 5: // STATUS
          return STATUS;
        case 6: // DEPARTMENT
          return DEPARTMENT;
        case 7: // JOB_TITLE
          return JOB_TITLE;
        case 8: // MAIL
          return MAIL;
        case 9: // PWD
          return PWD;
        case 10: // PHOTO_URL
          return PHOTO_URL;
        case 11: // TOKEN
          return TOKEN;
        case 12: // PERSONAL_QQ
          return PERSONAL_QQ;
        case 13: // ENTERPRISE_QQ
          return ENTERPRISE_QQ;
        case 14: // PHONE
          return PHONE;
        case 15: // WORK_PHONE
          return WORK_PHONE;
        case 16: // EXTENSION
          return EXTENSION;
        case 17: // ROLE_NAME
          return ROLE_NAME;
        case 18: // ROLE_DESC
          return ROLE_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __STATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.JOB_TITLE, new org.apache.thrift.meta_data.FieldMetaData("jobTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL, new org.apache.thrift.meta_data.FieldMetaData("mail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PWD, new org.apache.thrift.meta_data.FieldMetaData("pwd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("photoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSONAL_QQ, new org.apache.thrift.meta_data.FieldMetaData("personalQQ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENTERPRISE_QQ, new org.apache.thrift.meta_data.FieldMetaData("enterpriseQQ", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORK_PHONE, new org.apache.thrift.meta_data.FieldMetaData("workPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION, new org.apache.thrift.meta_data.FieldMetaData("extension", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("roleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROLE_DESC, new org.apache.thrift.meta_data.FieldMetaData("roleDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SysUserDto.class, metaDataMap);
  }

  public SysUserDto() {
  }

  public SysUserDto(
    int pid,
    String userName,
    String realName,
    String memberId,
    int status,
    String department,
    String jobTitle,
    String mail,
    String pwd,
    String photoUrl,
    String token,
    String personalQQ,
    String enterpriseQQ,
    String phone,
    String workPhone,
    String extension,
    String roleName,
    String roleDesc)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.userName = userName;
    this.realName = realName;
    this.memberId = memberId;
    this.status = status;
    setStatusIsSet(true);
    this.department = department;
    this.jobTitle = jobTitle;
    this.mail = mail;
    this.pwd = pwd;
    this.photoUrl = photoUrl;
    this.token = token;
    this.personalQQ = personalQQ;
    this.enterpriseQQ = enterpriseQQ;
    this.phone = phone;
    this.workPhone = workPhone;
    this.extension = extension;
    this.roleName = roleName;
    this.roleDesc = roleDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SysUserDto(SysUserDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetMemberId()) {
      this.memberId = other.memberId;
    }
    this.status = other.status;
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetJobTitle()) {
      this.jobTitle = other.jobTitle;
    }
    if (other.isSetMail()) {
      this.mail = other.mail;
    }
    if (other.isSetPwd()) {
      this.pwd = other.pwd;
    }
    if (other.isSetPhotoUrl()) {
      this.photoUrl = other.photoUrl;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetPersonalQQ()) {
      this.personalQQ = other.personalQQ;
    }
    if (other.isSetEnterpriseQQ()) {
      this.enterpriseQQ = other.enterpriseQQ;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetWorkPhone()) {
      this.workPhone = other.workPhone;
    }
    if (other.isSetExtension()) {
      this.extension = other.extension;
    }
    if (other.isSetRoleName()) {
      this.roleName = other.roleName;
    }
    if (other.isSetRoleDesc()) {
      this.roleDesc = other.roleDesc;
    }
  }

  public SysUserDto deepCopy() {
    return new SysUserDto(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.userName = null;
    this.realName = null;
    this.memberId = null;
    setStatusIsSet(false);
    this.status = 0;
    this.department = null;
    this.jobTitle = null;
    this.mail = null;
    this.pwd = null;
    this.photoUrl = null;
    this.token = null;
    this.personalQQ = null;
    this.enterpriseQQ = null;
    this.phone = null;
    this.workPhone = null;
    this.extension = null;
    this.roleName = null;
    this.roleDesc = null;
  }

  public int getPid() {
    return this.pid;
  }

  public SysUserDto setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public SysUserDto setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getRealName() {
    return this.realName;
  }

  public SysUserDto setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getMemberId() {
    return this.memberId;
  }

  public SysUserDto setMemberId(String memberId) {
    this.memberId = memberId;
    return this;
  }

  public void unsetMemberId() {
    this.memberId = null;
  }

  /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberId() {
    return this.memberId != null;
  }

  public void setMemberIdIsSet(boolean value) {
    if (!value) {
      this.memberId = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public SysUserDto setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getDepartment() {
    return this.department;
  }

  public SysUserDto setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public String getJobTitle() {
    return this.jobTitle;
  }

  public SysUserDto setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  public void unsetJobTitle() {
    this.jobTitle = null;
  }

  /** Returns true if field jobTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetJobTitle() {
    return this.jobTitle != null;
  }

  public void setJobTitleIsSet(boolean value) {
    if (!value) {
      this.jobTitle = null;
    }
  }

  public String getMail() {
    return this.mail;
  }

  public SysUserDto setMail(String mail) {
    this.mail = mail;
    return this;
  }

  public void unsetMail() {
    this.mail = null;
  }

  /** Returns true if field mail is set (has been assigned a value) and false otherwise */
  public boolean isSetMail() {
    return this.mail != null;
  }

  public void setMailIsSet(boolean value) {
    if (!value) {
      this.mail = null;
    }
  }

  public String getPwd() {
    return this.pwd;
  }

  public SysUserDto setPwd(String pwd) {
    this.pwd = pwd;
    return this;
  }

  public void unsetPwd() {
    this.pwd = null;
  }

  /** Returns true if field pwd is set (has been assigned a value) and false otherwise */
  public boolean isSetPwd() {
    return this.pwd != null;
  }

  public void setPwdIsSet(boolean value) {
    if (!value) {
      this.pwd = null;
    }
  }

  public String getPhotoUrl() {
    return this.photoUrl;
  }

  public SysUserDto setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  public void unsetPhotoUrl() {
    this.photoUrl = null;
  }

  /** Returns true if field photoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoUrl() {
    return this.photoUrl != null;
  }

  public void setPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.photoUrl = null;
    }
  }

  public String getToken() {
    return this.token;
  }

  public SysUserDto setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getPersonalQQ() {
    return this.personalQQ;
  }

  public SysUserDto setPersonalQQ(String personalQQ) {
    this.personalQQ = personalQQ;
    return this;
  }

  public void unsetPersonalQQ() {
    this.personalQQ = null;
  }

  /** Returns true if field personalQQ is set (has been assigned a value) and false otherwise */
  public boolean isSetPersonalQQ() {
    return this.personalQQ != null;
  }

  public void setPersonalQQIsSet(boolean value) {
    if (!value) {
      this.personalQQ = null;
    }
  }

  public String getEnterpriseQQ() {
    return this.enterpriseQQ;
  }

  public SysUserDto setEnterpriseQQ(String enterpriseQQ) {
    this.enterpriseQQ = enterpriseQQ;
    return this;
  }

  public void unsetEnterpriseQQ() {
    this.enterpriseQQ = null;
  }

  /** Returns true if field enterpriseQQ is set (has been assigned a value) and false otherwise */
  public boolean isSetEnterpriseQQ() {
    return this.enterpriseQQ != null;
  }

  public void setEnterpriseQQIsSet(boolean value) {
    if (!value) {
      this.enterpriseQQ = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public SysUserDto setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getWorkPhone() {
    return this.workPhone;
  }

  public SysUserDto setWorkPhone(String workPhone) {
    this.workPhone = workPhone;
    return this;
  }

  public void unsetWorkPhone() {
    this.workPhone = null;
  }

  /** Returns true if field workPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkPhone() {
    return this.workPhone != null;
  }

  public void setWorkPhoneIsSet(boolean value) {
    if (!value) {
      this.workPhone = null;
    }
  }

  public String getExtension() {
    return this.extension;
  }

  public SysUserDto setExtension(String extension) {
    this.extension = extension;
    return this;
  }

  public void unsetExtension() {
    this.extension = null;
  }

  /** Returns true if field extension is set (has been assigned a value) and false otherwise */
  public boolean isSetExtension() {
    return this.extension != null;
  }

  public void setExtensionIsSet(boolean value) {
    if (!value) {
      this.extension = null;
    }
  }

  public String getRoleName() {
    return this.roleName;
  }

  public SysUserDto setRoleName(String roleName) {
    this.roleName = roleName;
    return this;
  }

  public void unsetRoleName() {
    this.roleName = null;
  }

  /** Returns true if field roleName is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleName() {
    return this.roleName != null;
  }

  public void setRoleNameIsSet(boolean value) {
    if (!value) {
      this.roleName = null;
    }
  }

  public String getRoleDesc() {
    return this.roleDesc;
  }

  public SysUserDto setRoleDesc(String roleDesc) {
    this.roleDesc = roleDesc;
    return this;
  }

  public void unsetRoleDesc() {
    this.roleDesc = null;
  }

  /** Returns true if field roleDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetRoleDesc() {
    return this.roleDesc != null;
  }

  public void setRoleDescIsSet(boolean value) {
    if (!value) {
      this.roleDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case MEMBER_ID:
      if (value == null) {
        unsetMemberId();
      } else {
        setMemberId((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case JOB_TITLE:
      if (value == null) {
        unsetJobTitle();
      } else {
        setJobTitle((String)value);
      }
      break;

    case MAIL:
      if (value == null) {
        unsetMail();
      } else {
        setMail((String)value);
      }
      break;

    case PWD:
      if (value == null) {
        unsetPwd();
      } else {
        setPwd((String)value);
      }
      break;

    case PHOTO_URL:
      if (value == null) {
        unsetPhotoUrl();
      } else {
        setPhotoUrl((String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case PERSONAL_QQ:
      if (value == null) {
        unsetPersonalQQ();
      } else {
        setPersonalQQ((String)value);
      }
      break;

    case ENTERPRISE_QQ:
      if (value == null) {
        unsetEnterpriseQQ();
      } else {
        setEnterpriseQQ((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case WORK_PHONE:
      if (value == null) {
        unsetWorkPhone();
      } else {
        setWorkPhone((String)value);
      }
      break;

    case EXTENSION:
      if (value == null) {
        unsetExtension();
      } else {
        setExtension((String)value);
      }
      break;

    case ROLE_NAME:
      if (value == null) {
        unsetRoleName();
      } else {
        setRoleName((String)value);
      }
      break;

    case ROLE_DESC:
      if (value == null) {
        unsetRoleDesc();
      } else {
        setRoleDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case USER_NAME:
      return getUserName();

    case REAL_NAME:
      return getRealName();

    case MEMBER_ID:
      return getMemberId();

    case STATUS:
      return Integer.valueOf(getStatus());

    case DEPARTMENT:
      return getDepartment();

    case JOB_TITLE:
      return getJobTitle();

    case MAIL:
      return getMail();

    case PWD:
      return getPwd();

    case PHOTO_URL:
      return getPhotoUrl();

    case TOKEN:
      return getToken();

    case PERSONAL_QQ:
      return getPersonalQQ();

    case ENTERPRISE_QQ:
      return getEnterpriseQQ();

    case PHONE:
      return getPhone();

    case WORK_PHONE:
      return getWorkPhone();

    case EXTENSION:
      return getExtension();

    case ROLE_NAME:
      return getRoleName();

    case ROLE_DESC:
      return getRoleDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case USER_NAME:
      return isSetUserName();
    case REAL_NAME:
      return isSetRealName();
    case MEMBER_ID:
      return isSetMemberId();
    case STATUS:
      return isSetStatus();
    case DEPARTMENT:
      return isSetDepartment();
    case JOB_TITLE:
      return isSetJobTitle();
    case MAIL:
      return isSetMail();
    case PWD:
      return isSetPwd();
    case PHOTO_URL:
      return isSetPhotoUrl();
    case TOKEN:
      return isSetToken();
    case PERSONAL_QQ:
      return isSetPersonalQQ();
    case ENTERPRISE_QQ:
      return isSetEnterpriseQQ();
    case PHONE:
      return isSetPhone();
    case WORK_PHONE:
      return isSetWorkPhone();
    case EXTENSION:
      return isSetExtension();
    case ROLE_NAME:
      return isSetRoleName();
    case ROLE_DESC:
      return isSetRoleDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SysUserDto)
      return this.equals((SysUserDto)that);
    return false;
  }

  public boolean equals(SysUserDto that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_memberId = true && this.isSetMemberId();
    boolean that_present_memberId = true && that.isSetMemberId();
    if (this_present_memberId || that_present_memberId) {
      if (!(this_present_memberId && that_present_memberId))
        return false;
      if (!this.memberId.equals(that.memberId))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_jobTitle = true && this.isSetJobTitle();
    boolean that_present_jobTitle = true && that.isSetJobTitle();
    if (this_present_jobTitle || that_present_jobTitle) {
      if (!(this_present_jobTitle && that_present_jobTitle))
        return false;
      if (!this.jobTitle.equals(that.jobTitle))
        return false;
    }

    boolean this_present_mail = true && this.isSetMail();
    boolean that_present_mail = true && that.isSetMail();
    if (this_present_mail || that_present_mail) {
      if (!(this_present_mail && that_present_mail))
        return false;
      if (!this.mail.equals(that.mail))
        return false;
    }

    boolean this_present_pwd = true && this.isSetPwd();
    boolean that_present_pwd = true && that.isSetPwd();
    if (this_present_pwd || that_present_pwd) {
      if (!(this_present_pwd && that_present_pwd))
        return false;
      if (!this.pwd.equals(that.pwd))
        return false;
    }

    boolean this_present_photoUrl = true && this.isSetPhotoUrl();
    boolean that_present_photoUrl = true && that.isSetPhotoUrl();
    if (this_present_photoUrl || that_present_photoUrl) {
      if (!(this_present_photoUrl && that_present_photoUrl))
        return false;
      if (!this.photoUrl.equals(that.photoUrl))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_personalQQ = true && this.isSetPersonalQQ();
    boolean that_present_personalQQ = true && that.isSetPersonalQQ();
    if (this_present_personalQQ || that_present_personalQQ) {
      if (!(this_present_personalQQ && that_present_personalQQ))
        return false;
      if (!this.personalQQ.equals(that.personalQQ))
        return false;
    }

    boolean this_present_enterpriseQQ = true && this.isSetEnterpriseQQ();
    boolean that_present_enterpriseQQ = true && that.isSetEnterpriseQQ();
    if (this_present_enterpriseQQ || that_present_enterpriseQQ) {
      if (!(this_present_enterpriseQQ && that_present_enterpriseQQ))
        return false;
      if (!this.enterpriseQQ.equals(that.enterpriseQQ))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_workPhone = true && this.isSetWorkPhone();
    boolean that_present_workPhone = true && that.isSetWorkPhone();
    if (this_present_workPhone || that_present_workPhone) {
      if (!(this_present_workPhone && that_present_workPhone))
        return false;
      if (!this.workPhone.equals(that.workPhone))
        return false;
    }

    boolean this_present_extension = true && this.isSetExtension();
    boolean that_present_extension = true && that.isSetExtension();
    if (this_present_extension || that_present_extension) {
      if (!(this_present_extension && that_present_extension))
        return false;
      if (!this.extension.equals(that.extension))
        return false;
    }

    boolean this_present_roleName = true && this.isSetRoleName();
    boolean that_present_roleName = true && that.isSetRoleName();
    if (this_present_roleName || that_present_roleName) {
      if (!(this_present_roleName && that_present_roleName))
        return false;
      if (!this.roleName.equals(that.roleName))
        return false;
    }

    boolean this_present_roleDesc = true && this.isSetRoleDesc();
    boolean that_present_roleDesc = true && that.isSetRoleDesc();
    if (this_present_roleDesc || that_present_roleDesc) {
      if (!(this_present_roleDesc && that_present_roleDesc))
        return false;
      if (!this.roleDesc.equals(that.roleDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_memberId = true && (isSetMemberId());
    list.add(present_memberId);
    if (present_memberId)
      list.add(memberId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_department = true && (isSetDepartment());
    list.add(present_department);
    if (present_department)
      list.add(department);

    boolean present_jobTitle = true && (isSetJobTitle());
    list.add(present_jobTitle);
    if (present_jobTitle)
      list.add(jobTitle);

    boolean present_mail = true && (isSetMail());
    list.add(present_mail);
    if (present_mail)
      list.add(mail);

    boolean present_pwd = true && (isSetPwd());
    list.add(present_pwd);
    if (present_pwd)
      list.add(pwd);

    boolean present_photoUrl = true && (isSetPhotoUrl());
    list.add(present_photoUrl);
    if (present_photoUrl)
      list.add(photoUrl);

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_personalQQ = true && (isSetPersonalQQ());
    list.add(present_personalQQ);
    if (present_personalQQ)
      list.add(personalQQ);

    boolean present_enterpriseQQ = true && (isSetEnterpriseQQ());
    list.add(present_enterpriseQQ);
    if (present_enterpriseQQ)
      list.add(enterpriseQQ);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_workPhone = true && (isSetWorkPhone());
    list.add(present_workPhone);
    if (present_workPhone)
      list.add(workPhone);

    boolean present_extension = true && (isSetExtension());
    list.add(present_extension);
    if (present_extension)
      list.add(extension);

    boolean present_roleName = true && (isSetRoleName());
    list.add(present_roleName);
    if (present_roleName)
      list.add(roleName);

    boolean present_roleDesc = true && (isSetRoleDesc());
    list.add(present_roleDesc);
    if (present_roleDesc)
      list.add(roleDesc);

    return list.hashCode();
  }

  @Override
  public int compareTo(SysUserDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberId()).compareTo(other.isSetMemberId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJobTitle()).compareTo(other.isSetJobTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobTitle, other.jobTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMail()).compareTo(other.isSetMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mail, other.mail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPwd()).compareTo(other.isSetPwd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPwd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pwd, other.pwd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoUrl()).compareTo(other.isSetPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoUrl, other.photoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPersonalQQ()).compareTo(other.isSetPersonalQQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPersonalQQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.personalQQ, other.personalQQ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnterpriseQQ()).compareTo(other.isSetEnterpriseQQ());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnterpriseQQ()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enterpriseQQ, other.enterpriseQQ);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkPhone()).compareTo(other.isSetWorkPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workPhone, other.workPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtension()).compareTo(other.isSetExtension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extension, other.extension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleName()).compareTo(other.isSetRoleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleName, other.roleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoleDesc()).compareTo(other.isSetRoleDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoleDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roleDesc, other.roleDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SysUserDto(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberId:");
    if (this.memberId == null) {
      sb.append("null");
    } else {
      sb.append(this.memberId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("department:");
    if (this.department == null) {
      sb.append("null");
    } else {
      sb.append(this.department);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("jobTitle:");
    if (this.jobTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.jobTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mail:");
    if (this.mail == null) {
      sb.append("null");
    } else {
      sb.append(this.mail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pwd:");
    if (this.pwd == null) {
      sb.append("null");
    } else {
      sb.append(this.pwd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photoUrl:");
    if (this.photoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.photoUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("personalQQ:");
    if (this.personalQQ == null) {
      sb.append("null");
    } else {
      sb.append(this.personalQQ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("enterpriseQQ:");
    if (this.enterpriseQQ == null) {
      sb.append("null");
    } else {
      sb.append(this.enterpriseQQ);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workPhone:");
    if (this.workPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.workPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extension:");
    if (this.extension == null) {
      sb.append("null");
    } else {
      sb.append(this.extension);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleName:");
    if (this.roleName == null) {
      sb.append("null");
    } else {
      sb.append(this.roleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roleDesc:");
    if (this.roleDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.roleDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SysUserDtoStandardSchemeFactory implements SchemeFactory {
    public SysUserDtoStandardScheme getScheme() {
      return new SysUserDtoStandardScheme();
    }
  }

  private static class SysUserDtoStandardScheme extends StandardScheme<SysUserDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SysUserDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEMBER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.memberId = iprot.readString();
              struct.setMemberIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // JOB_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobTitle = iprot.readString();
              struct.setJobTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mail = iprot.readString();
              struct.setMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pwd = iprot.readString();
              struct.setPwdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photoUrl = iprot.readString();
              struct.setPhotoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PERSONAL_QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.personalQQ = iprot.readString();
              struct.setPersonalQQIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENTERPRISE_QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.enterpriseQQ = iprot.readString();
              struct.setEnterpriseQQIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WORK_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workPhone = iprot.readString();
              struct.setWorkPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXTENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extension = iprot.readString();
              struct.setExtensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ROLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleName = iprot.readString();
              struct.setRoleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ROLE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roleDesc = iprot.readString();
              struct.setRoleDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SysUserDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.memberId != null) {
        oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
        oprot.writeString(struct.memberId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.department != null) {
        oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.department);
        oprot.writeFieldEnd();
      }
      if (struct.jobTitle != null) {
        oprot.writeFieldBegin(JOB_TITLE_FIELD_DESC);
        oprot.writeString(struct.jobTitle);
        oprot.writeFieldEnd();
      }
      if (struct.mail != null) {
        oprot.writeFieldBegin(MAIL_FIELD_DESC);
        oprot.writeString(struct.mail);
        oprot.writeFieldEnd();
      }
      if (struct.pwd != null) {
        oprot.writeFieldBegin(PWD_FIELD_DESC);
        oprot.writeString(struct.pwd);
        oprot.writeFieldEnd();
      }
      if (struct.photoUrl != null) {
        oprot.writeFieldBegin(PHOTO_URL_FIELD_DESC);
        oprot.writeString(struct.photoUrl);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.personalQQ != null) {
        oprot.writeFieldBegin(PERSONAL_QQ_FIELD_DESC);
        oprot.writeString(struct.personalQQ);
        oprot.writeFieldEnd();
      }
      if (struct.enterpriseQQ != null) {
        oprot.writeFieldBegin(ENTERPRISE_QQ_FIELD_DESC);
        oprot.writeString(struct.enterpriseQQ);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.workPhone != null) {
        oprot.writeFieldBegin(WORK_PHONE_FIELD_DESC);
        oprot.writeString(struct.workPhone);
        oprot.writeFieldEnd();
      }
      if (struct.extension != null) {
        oprot.writeFieldBegin(EXTENSION_FIELD_DESC);
        oprot.writeString(struct.extension);
        oprot.writeFieldEnd();
      }
      if (struct.roleName != null) {
        oprot.writeFieldBegin(ROLE_NAME_FIELD_DESC);
        oprot.writeString(struct.roleName);
        oprot.writeFieldEnd();
      }
      if (struct.roleDesc != null) {
        oprot.writeFieldBegin(ROLE_DESC_FIELD_DESC);
        oprot.writeString(struct.roleDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SysUserDtoTupleSchemeFactory implements SchemeFactory {
    public SysUserDtoTupleScheme getScheme() {
      return new SysUserDtoTupleScheme();
    }
  }

  private static class SysUserDtoTupleScheme extends TupleScheme<SysUserDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SysUserDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetRealName()) {
        optionals.set(2);
      }
      if (struct.isSetMemberId()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetDepartment()) {
        optionals.set(5);
      }
      if (struct.isSetJobTitle()) {
        optionals.set(6);
      }
      if (struct.isSetMail()) {
        optionals.set(7);
      }
      if (struct.isSetPwd()) {
        optionals.set(8);
      }
      if (struct.isSetPhotoUrl()) {
        optionals.set(9);
      }
      if (struct.isSetToken()) {
        optionals.set(10);
      }
      if (struct.isSetPersonalQQ()) {
        optionals.set(11);
      }
      if (struct.isSetEnterpriseQQ()) {
        optionals.set(12);
      }
      if (struct.isSetPhone()) {
        optionals.set(13);
      }
      if (struct.isSetWorkPhone()) {
        optionals.set(14);
      }
      if (struct.isSetExtension()) {
        optionals.set(15);
      }
      if (struct.isSetRoleName()) {
        optionals.set(16);
      }
      if (struct.isSetRoleDesc()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetMemberId()) {
        oprot.writeString(struct.memberId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetJobTitle()) {
        oprot.writeString(struct.jobTitle);
      }
      if (struct.isSetMail()) {
        oprot.writeString(struct.mail);
      }
      if (struct.isSetPwd()) {
        oprot.writeString(struct.pwd);
      }
      if (struct.isSetPhotoUrl()) {
        oprot.writeString(struct.photoUrl);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetPersonalQQ()) {
        oprot.writeString(struct.personalQQ);
      }
      if (struct.isSetEnterpriseQQ()) {
        oprot.writeString(struct.enterpriseQQ);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetWorkPhone()) {
        oprot.writeString(struct.workPhone);
      }
      if (struct.isSetExtension()) {
        oprot.writeString(struct.extension);
      }
      if (struct.isSetRoleName()) {
        oprot.writeString(struct.roleName);
      }
      if (struct.isSetRoleDesc()) {
        oprot.writeString(struct.roleDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SysUserDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.memberId = iprot.readString();
        struct.setMemberIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.jobTitle = iprot.readString();
        struct.setJobTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.mail = iprot.readString();
        struct.setMailIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pwd = iprot.readString();
        struct.setPwdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.photoUrl = iprot.readString();
        struct.setPhotoUrlIsSet(true);
      }
      if (incoming.get(10)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(11)) {
        struct.personalQQ = iprot.readString();
        struct.setPersonalQQIsSet(true);
      }
      if (incoming.get(12)) {
        struct.enterpriseQQ = iprot.readString();
        struct.setEnterpriseQQIsSet(true);
      }
      if (incoming.get(13)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(14)) {
        struct.workPhone = iprot.readString();
        struct.setWorkPhoneIsSet(true);
      }
      if (incoming.get(15)) {
        struct.extension = iprot.readString();
        struct.setExtensionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.roleName = iprot.readString();
        struct.setRoleNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.roleDesc = iprot.readString();
        struct.setRoleDescIsSet(true);
      }
    }
  }

}


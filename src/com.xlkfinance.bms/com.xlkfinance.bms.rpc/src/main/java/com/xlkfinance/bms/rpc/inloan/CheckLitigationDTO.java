/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class CheckLitigationDTO implements org.apache.thrift.TBase<CheckLitigationDTO, CheckLitigationDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CheckLitigationDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CheckLitigationDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CHECK_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ATTACHMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("attachmentId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createrDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField CHECK_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("checkWay", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CREATER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("createrName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField CHECK_HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkHours", org.apache.thrift.protocol.TType.STRING, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CheckLitigationDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CheckLitigationDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int checkStatus; // required
  public int approvalStatus; // required
  public String checkDate; // required
  public String remark; // required
  public int attachmentId; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public String createrDate; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required
  public int checkWay; // required
  public String createrName; // required
  public String checkHours; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)3, "projectId"),
    CHECK_STATUS((short)4, "checkStatus"),
    APPROVAL_STATUS((short)5, "approvalStatus"),
    CHECK_DATE((short)6, "checkDate"),
    REMARK((short)7, "remark"),
    ATTACHMENT_ID((short)8, "attachmentId"),
    CREATER_ID((short)9, "createrId"),
    UPDATE_ID((short)10, "updateId"),
    UPDATE_DATE((short)11, "updateDate"),
    CREATER_DATE((short)12, "createrDate"),
    PAGE((short)13, "page"),
    ROWS((short)14, "rows"),
    USER_IDS((short)15, "userIds"),
    CHECK_WAY((short)16, "checkWay"),
    CREATER_NAME((short)17, "createrName"),
    CHECK_HOURS((short)18, "checkHours");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 3: // PROJECT_ID
          return PROJECT_ID;
        case 4: // CHECK_STATUS
          return CHECK_STATUS;
        case 5: // APPROVAL_STATUS
          return APPROVAL_STATUS;
        case 6: // CHECK_DATE
          return CHECK_DATE;
        case 7: // REMARK
          return REMARK;
        case 8: // ATTACHMENT_ID
          return ATTACHMENT_ID;
        case 9: // CREATER_ID
          return CREATER_ID;
        case 10: // UPDATE_ID
          return UPDATE_ID;
        case 11: // UPDATE_DATE
          return UPDATE_DATE;
        case 12: // CREATER_DATE
          return CREATER_DATE;
        case 13: // PAGE
          return PAGE;
        case 14: // ROWS
          return ROWS;
        case 15: // USER_IDS
          return USER_IDS;
        case 16: // CHECK_WAY
          return CHECK_WAY;
        case 17: // CREATER_NAME
          return CREATER_NAME;
        case 18: // CHECK_HOURS
          return CHECK_HOURS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __CHECKSTATUS_ISSET_ID = 2;
  private static final int __APPROVALSTATUS_ISSET_ID = 3;
  private static final int __ATTACHMENTID_ISSET_ID = 4;
  private static final int __CREATERID_ISSET_ID = 5;
  private static final int __UPDATEID_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __CHECKWAY_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("approvalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_DATE, new org.apache.thrift.meta_data.FieldMetaData("checkDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACHMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("attachmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_DATE, new org.apache.thrift.meta_data.FieldMetaData("createrDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CHECK_WAY, new org.apache.thrift.meta_data.FieldMetaData("checkWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATER_NAME, new org.apache.thrift.meta_data.FieldMetaData("createrName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_HOURS, new org.apache.thrift.meta_data.FieldMetaData("checkHours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CheckLitigationDTO.class, metaDataMap);
  }

  public CheckLitigationDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public CheckLitigationDTO(
    int pid,
    int projectId,
    int checkStatus,
    int approvalStatus,
    String checkDate,
    String remark,
    int attachmentId,
    int createrId,
    int updateId,
    String updateDate,
    String createrDate,
    int page,
    int rows,
    List<Integer> userIds,
    int checkWay,
    String createrName,
    String checkHours)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    this.checkDate = checkDate;
    this.remark = remark;
    this.attachmentId = attachmentId;
    setAttachmentIdIsSet(true);
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.createrDate = createrDate;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
    this.checkWay = checkWay;
    setCheckWayIsSet(true);
    this.createrName = createrName;
    this.checkHours = checkHours;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CheckLitigationDTO(CheckLitigationDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.checkStatus = other.checkStatus;
    this.approvalStatus = other.approvalStatus;
    if (other.isSetCheckDate()) {
      this.checkDate = other.checkDate;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.attachmentId = other.attachmentId;
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetCreaterDate()) {
      this.createrDate = other.createrDate;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.checkWay = other.checkWay;
    if (other.isSetCreaterName()) {
      this.createrName = other.createrName;
    }
    if (other.isSetCheckHours()) {
      this.checkHours = other.checkHours;
    }
  }

  public CheckLitigationDTO deepCopy() {
    return new CheckLitigationDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setCheckStatusIsSet(false);
    this.checkStatus = 0;
    setApprovalStatusIsSet(false);
    this.approvalStatus = 0;
    this.checkDate = null;
    this.remark = null;
    setAttachmentIdIsSet(false);
    this.attachmentId = 0;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.createrDate = null;
    this.page = 1;

    this.rows = 10;

    this.userIds = null;
    setCheckWayIsSet(false);
    this.checkWay = 0;
    this.createrName = null;
    this.checkHours = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CheckLitigationDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public CheckLitigationDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getCheckStatus() {
    return this.checkStatus;
  }

  public CheckLitigationDTO setCheckStatus(int checkStatus) {
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    return this;
  }

  public void unsetCheckStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  public void setCheckStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID, value);
  }

  public int getApprovalStatus() {
    return this.approvalStatus;
  }

  public CheckLitigationDTO setApprovalStatus(int approvalStatus) {
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    return this;
  }

  public void unsetApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field approvalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  public void setApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID, value);
  }

  public String getCheckDate() {
    return this.checkDate;
  }

  public CheckLitigationDTO setCheckDate(String checkDate) {
    this.checkDate = checkDate;
    return this;
  }

  public void unsetCheckDate() {
    this.checkDate = null;
  }

  /** Returns true if field checkDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDate() {
    return this.checkDate != null;
  }

  public void setCheckDateIsSet(boolean value) {
    if (!value) {
      this.checkDate = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CheckLitigationDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getAttachmentId() {
    return this.attachmentId;
  }

  public CheckLitigationDTO setAttachmentId(int attachmentId) {
    this.attachmentId = attachmentId;
    setAttachmentIdIsSet(true);
    return this;
  }

  public void unsetAttachmentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ATTACHMENTID_ISSET_ID);
  }

  /** Returns true if field attachmentId is set (has been assigned a value) and false otherwise */
  public boolean isSetAttachmentId() {
    return EncodingUtils.testBit(__isset_bitfield, __ATTACHMENTID_ISSET_ID);
  }

  public void setAttachmentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ATTACHMENTID_ISSET_ID, value);
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public CheckLitigationDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public CheckLitigationDTO setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public CheckLitigationDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getCreaterDate() {
    return this.createrDate;
  }

  public CheckLitigationDTO setCreaterDate(String createrDate) {
    this.createrDate = createrDate;
    return this;
  }

  public void unsetCreaterDate() {
    this.createrDate = null;
  }

  /** Returns true if field createrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterDate() {
    return this.createrDate != null;
  }

  public void setCreaterDateIsSet(boolean value) {
    if (!value) {
      this.createrDate = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CheckLitigationDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CheckLitigationDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CheckLitigationDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getCheckWay() {
    return this.checkWay;
  }

  public CheckLitigationDTO setCheckWay(int checkWay) {
    this.checkWay = checkWay;
    setCheckWayIsSet(true);
    return this;
  }

  public void unsetCheckWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKWAY_ISSET_ID);
  }

  /** Returns true if field checkWay is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckWay() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKWAY_ISSET_ID);
  }

  public void setCheckWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKWAY_ISSET_ID, value);
  }

  public String getCreaterName() {
    return this.createrName;
  }

  public CheckLitigationDTO setCreaterName(String createrName) {
    this.createrName = createrName;
    return this;
  }

  public void unsetCreaterName() {
    this.createrName = null;
  }

  /** Returns true if field createrName is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterName() {
    return this.createrName != null;
  }

  public void setCreaterNameIsSet(boolean value) {
    if (!value) {
      this.createrName = null;
    }
  }

  public String getCheckHours() {
    return this.checkHours;
  }

  public CheckLitigationDTO setCheckHours(String checkHours) {
    this.checkHours = checkHours;
    return this;
  }

  public void unsetCheckHours() {
    this.checkHours = null;
  }

  /** Returns true if field checkHours is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckHours() {
    return this.checkHours != null;
  }

  public void setCheckHoursIsSet(boolean value) {
    if (!value) {
      this.checkHours = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((Integer)value);
      }
      break;

    case APPROVAL_STATUS:
      if (value == null) {
        unsetApprovalStatus();
      } else {
        setApprovalStatus((Integer)value);
      }
      break;

    case CHECK_DATE:
      if (value == null) {
        unsetCheckDate();
      } else {
        setCheckDate((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case ATTACHMENT_ID:
      if (value == null) {
        unsetAttachmentId();
      } else {
        setAttachmentId((Integer)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case CREATER_DATE:
      if (value == null) {
        unsetCreaterDate();
      } else {
        setCreaterDate((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case CHECK_WAY:
      if (value == null) {
        unsetCheckWay();
      } else {
        setCheckWay((Integer)value);
      }
      break;

    case CREATER_NAME:
      if (value == null) {
        unsetCreaterName();
      } else {
        setCreaterName((String)value);
      }
      break;

    case CHECK_HOURS:
      if (value == null) {
        unsetCheckHours();
      } else {
        setCheckHours((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case CHECK_STATUS:
      return Integer.valueOf(getCheckStatus());

    case APPROVAL_STATUS:
      return Integer.valueOf(getApprovalStatus());

    case CHECK_DATE:
      return getCheckDate();

    case REMARK:
      return getRemark();

    case ATTACHMENT_ID:
      return Integer.valueOf(getAttachmentId());

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case CREATER_DATE:
      return getCreaterDate();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    case CHECK_WAY:
      return Integer.valueOf(getCheckWay());

    case CREATER_NAME:
      return getCreaterName();

    case CHECK_HOURS:
      return getCheckHours();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case APPROVAL_STATUS:
      return isSetApprovalStatus();
    case CHECK_DATE:
      return isSetCheckDate();
    case REMARK:
      return isSetRemark();
    case ATTACHMENT_ID:
      return isSetAttachmentId();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case CREATER_DATE:
      return isSetCreaterDate();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    case CHECK_WAY:
      return isSetCheckWay();
    case CREATER_NAME:
      return isSetCreaterName();
    case CHECK_HOURS:
      return isSetCheckHours();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CheckLitigationDTO)
      return this.equals((CheckLitigationDTO)that);
    return false;
  }

  public boolean equals(CheckLitigationDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_checkStatus = true;
    boolean that_present_checkStatus = true;
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (this.checkStatus != that.checkStatus)
        return false;
    }

    boolean this_present_approvalStatus = true;
    boolean that_present_approvalStatus = true;
    if (this_present_approvalStatus || that_present_approvalStatus) {
      if (!(this_present_approvalStatus && that_present_approvalStatus))
        return false;
      if (this.approvalStatus != that.approvalStatus)
        return false;
    }

    boolean this_present_checkDate = true && this.isSetCheckDate();
    boolean that_present_checkDate = true && that.isSetCheckDate();
    if (this_present_checkDate || that_present_checkDate) {
      if (!(this_present_checkDate && that_present_checkDate))
        return false;
      if (!this.checkDate.equals(that.checkDate))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_attachmentId = true;
    boolean that_present_attachmentId = true;
    if (this_present_attachmentId || that_present_attachmentId) {
      if (!(this_present_attachmentId && that_present_attachmentId))
        return false;
      if (this.attachmentId != that.attachmentId)
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_createrDate = true && this.isSetCreaterDate();
    boolean that_present_createrDate = true && that.isSetCreaterDate();
    if (this_present_createrDate || that_present_createrDate) {
      if (!(this_present_createrDate && that_present_createrDate))
        return false;
      if (!this.createrDate.equals(that.createrDate))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_checkWay = true;
    boolean that_present_checkWay = true;
    if (this_present_checkWay || that_present_checkWay) {
      if (!(this_present_checkWay && that_present_checkWay))
        return false;
      if (this.checkWay != that.checkWay)
        return false;
    }

    boolean this_present_createrName = true && this.isSetCreaterName();
    boolean that_present_createrName = true && that.isSetCreaterName();
    if (this_present_createrName || that_present_createrName) {
      if (!(this_present_createrName && that_present_createrName))
        return false;
      if (!this.createrName.equals(that.createrName))
        return false;
    }

    boolean this_present_checkHours = true && this.isSetCheckHours();
    boolean that_present_checkHours = true && that.isSetCheckHours();
    if (this_present_checkHours || that_present_checkHours) {
      if (!(this_present_checkHours && that_present_checkHours))
        return false;
      if (!this.checkHours.equals(that.checkHours))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_checkStatus = true;
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_approvalStatus = true;
    list.add(present_approvalStatus);
    if (present_approvalStatus)
      list.add(approvalStatus);

    boolean present_checkDate = true && (isSetCheckDate());
    list.add(present_checkDate);
    if (present_checkDate)
      list.add(checkDate);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_attachmentId = true;
    list.add(present_attachmentId);
    if (present_attachmentId)
      list.add(attachmentId);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_createrDate = true && (isSetCreaterDate());
    list.add(present_createrDate);
    if (present_createrDate)
      list.add(createrDate);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_checkWay = true;
    list.add(present_checkWay);
    if (present_checkWay)
      list.add(checkWay);

    boolean present_createrName = true && (isSetCreaterName());
    list.add(present_createrName);
    if (present_createrName)
      list.add(createrName);

    boolean present_checkHours = true && (isSetCheckHours());
    list.add(present_checkHours);
    if (present_checkHours)
      list.add(checkHours);

    return list.hashCode();
  }

  @Override
  public int compareTo(CheckLitigationDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalStatus()).compareTo(other.isSetApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalStatus, other.approvalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDate()).compareTo(other.isSetCheckDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDate, other.checkDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttachmentId()).compareTo(other.isSetAttachmentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttachmentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attachmentId, other.attachmentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterDate()).compareTo(other.isSetCreaterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrDate, other.createrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckWay()).compareTo(other.isSetCheckWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkWay, other.checkWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterName()).compareTo(other.isSetCreaterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrName, other.createrName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckHours()).compareTo(other.isSetCheckHours());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckHours()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkHours, other.checkHours);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CheckLitigationDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    sb.append(this.checkStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalStatus:");
    sb.append(this.approvalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDate:");
    if (this.checkDate == null) {
      sb.append("null");
    } else {
      sb.append(this.checkDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attachmentId:");
    sb.append(this.attachmentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrDate:");
    if (this.createrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkWay:");
    sb.append(this.checkWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrName:");
    if (this.createrName == null) {
      sb.append("null");
    } else {
      sb.append(this.createrName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkHours:");
    if (this.checkHours == null) {
      sb.append("null");
    } else {
      sb.append(this.checkHours);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CheckLitigationDTOStandardSchemeFactory implements SchemeFactory {
    public CheckLitigationDTOStandardScheme getScheme() {
      return new CheckLitigationDTOStandardScheme();
    }
  }

  private static class CheckLitigationDTOStandardScheme extends StandardScheme<CheckLitigationDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CheckLitigationDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkStatus = iprot.readI32();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approvalStatus = iprot.readI32();
              struct.setApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHECK_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkDate = iprot.readString();
              struct.setCheckDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ATTACHMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.attachmentId = iprot.readI32();
              struct.setAttachmentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrDate = iprot.readString();
              struct.setCreaterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list216.size);
                int _elem217;
                for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                {
                  _elem217 = iprot.readI32();
                  struct.userIds.add(_elem217);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CHECK_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkWay = iprot.readI32();
              struct.setCheckWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createrName = iprot.readString();
              struct.setCreaterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CHECK_HOURS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkHours = iprot.readString();
              struct.setCheckHoursIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CheckLitigationDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.approvalStatus);
      oprot.writeFieldEnd();
      if (struct.checkDate != null) {
        oprot.writeFieldBegin(CHECK_DATE_FIELD_DESC);
        oprot.writeString(struct.checkDate);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ATTACHMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.attachmentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.createrDate != null) {
        oprot.writeFieldBegin(CREATER_DATE_FIELD_DESC);
        oprot.writeString(struct.createrDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter219 : struct.userIds)
          {
            oprot.writeI32(_iter219);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_WAY_FIELD_DESC);
      oprot.writeI32(struct.checkWay);
      oprot.writeFieldEnd();
      if (struct.createrName != null) {
        oprot.writeFieldBegin(CREATER_NAME_FIELD_DESC);
        oprot.writeString(struct.createrName);
        oprot.writeFieldEnd();
      }
      if (struct.checkHours != null) {
        oprot.writeFieldBegin(CHECK_HOURS_FIELD_DESC);
        oprot.writeString(struct.checkHours);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CheckLitigationDTOTupleSchemeFactory implements SchemeFactory {
    public CheckLitigationDTOTupleScheme getScheme() {
      return new CheckLitigationDTOTupleScheme();
    }
  }

  private static class CheckLitigationDTOTupleScheme extends TupleScheme<CheckLitigationDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CheckLitigationDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(2);
      }
      if (struct.isSetApprovalStatus()) {
        optionals.set(3);
      }
      if (struct.isSetCheckDate()) {
        optionals.set(4);
      }
      if (struct.isSetRemark()) {
        optionals.set(5);
      }
      if (struct.isSetAttachmentId()) {
        optionals.set(6);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(7);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(9);
      }
      if (struct.isSetCreaterDate()) {
        optionals.set(10);
      }
      if (struct.isSetPage()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetUserIds()) {
        optionals.set(13);
      }
      if (struct.isSetCheckWay()) {
        optionals.set(14);
      }
      if (struct.isSetCreaterName()) {
        optionals.set(15);
      }
      if (struct.isSetCheckHours()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeI32(struct.checkStatus);
      }
      if (struct.isSetApprovalStatus()) {
        oprot.writeI32(struct.approvalStatus);
      }
      if (struct.isSetCheckDate()) {
        oprot.writeString(struct.checkDate);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetAttachmentId()) {
        oprot.writeI32(struct.attachmentId);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetCreaterDate()) {
        oprot.writeString(struct.createrDate);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter220 : struct.userIds)
          {
            oprot.writeI32(_iter220);
          }
        }
      }
      if (struct.isSetCheckWay()) {
        oprot.writeI32(struct.checkWay);
      }
      if (struct.isSetCreaterName()) {
        oprot.writeString(struct.createrName);
      }
      if (struct.isSetCheckHours()) {
        oprot.writeString(struct.checkHours);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CheckLitigationDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.checkStatus = iprot.readI32();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.approvalStatus = iprot.readI32();
        struct.setApprovalStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.checkDate = iprot.readString();
        struct.setCheckDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(6)) {
        struct.attachmentId = iprot.readI32();
        struct.setAttachmentIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createrDate = iprot.readString();
        struct.setCreaterDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list221.size);
          int _elem222;
          for (int _i223 = 0; _i223 < _list221.size; ++_i223)
          {
            _elem222 = iprot.readI32();
            struct.userIds.add(_elem222);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(14)) {
        struct.checkWay = iprot.readI32();
        struct.setCheckWayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createrName = iprot.readString();
        struct.setCreaterNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.checkHours = iprot.readString();
        struct.setCheckHoursIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class BizCalLoanMoney implements org.apache.thrift.TBase<BizCalLoanMoney, BizCalLoanMoney._Fields>, java.io.Serializable, Cloneable, Comparable<BizCalLoanMoney> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizCalLoanMoney");

  private static final org.apache.thrift.protocol.TField RENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField REPAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOAN_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTerm", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LOAN_COEF_FIELD_DESC = new org.apache.thrift.protocol.TField("loanCoef", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField RENTAL_RETURN_FIELD_DESC = new org.apache.thrift.protocol.TField("rentalReturn", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField REPAYMENT_MONEY_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentMoneyTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MONTHLY_REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("monthlyRepaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField PAY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("payMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RESULT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("resultMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField RENT_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("rentTerm", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizCalLoanMoneyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizCalLoanMoneyTupleSchemeFactory());
  }

  public double rentMoney; // required
  public double feeRate; // required
  public int repaymentType; // required
  public int loanTerm; // required
  public double loanCoef; // required
  public double rentalReturn; // required
  public double loanMoney; // required
  public double repaymentMoneyTotal; // required
  public double monthlyRepaymentMoney; // required
  public double payMoney; // required
  public double resultMoney; // required
  public int rentTerm; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RENT_MONEY((short)1, "rentMoney"),
    FEE_RATE((short)2, "feeRate"),
    REPAYMENT_TYPE((short)3, "repaymentType"),
    LOAN_TERM((short)4, "loanTerm"),
    LOAN_COEF((short)5, "loanCoef"),
    RENTAL_RETURN((short)6, "rentalReturn"),
    LOAN_MONEY((short)7, "loanMoney"),
    REPAYMENT_MONEY_TOTAL((short)8, "repaymentMoneyTotal"),
    MONTHLY_REPAYMENT_MONEY((short)9, "monthlyRepaymentMoney"),
    PAY_MONEY((short)10, "payMoney"),
    RESULT_MONEY((short)11, "resultMoney"),
    RENT_TERM((short)12, "rentTerm");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RENT_MONEY
          return RENT_MONEY;
        case 2: // FEE_RATE
          return FEE_RATE;
        case 3: // REPAYMENT_TYPE
          return REPAYMENT_TYPE;
        case 4: // LOAN_TERM
          return LOAN_TERM;
        case 5: // LOAN_COEF
          return LOAN_COEF;
        case 6: // RENTAL_RETURN
          return RENTAL_RETURN;
        case 7: // LOAN_MONEY
          return LOAN_MONEY;
        case 8: // REPAYMENT_MONEY_TOTAL
          return REPAYMENT_MONEY_TOTAL;
        case 9: // MONTHLY_REPAYMENT_MONEY
          return MONTHLY_REPAYMENT_MONEY;
        case 10: // PAY_MONEY
          return PAY_MONEY;
        case 11: // RESULT_MONEY
          return RESULT_MONEY;
        case 12: // RENT_TERM
          return RENT_TERM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RENTMONEY_ISSET_ID = 0;
  private static final int __FEERATE_ISSET_ID = 1;
  private static final int __REPAYMENTTYPE_ISSET_ID = 2;
  private static final int __LOANTERM_ISSET_ID = 3;
  private static final int __LOANCOEF_ISSET_ID = 4;
  private static final int __RENTALRETURN_ISSET_ID = 5;
  private static final int __LOANMONEY_ISSET_ID = 6;
  private static final int __REPAYMENTMONEYTOTAL_ISSET_ID = 7;
  private static final int __MONTHLYREPAYMENTMONEY_ISSET_ID = 8;
  private static final int __PAYMONEY_ISSET_ID = 9;
  private static final int __RESULTMONEY_ISSET_ID = 10;
  private static final int __RENTTERM_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("feeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_TERM, new org.apache.thrift.meta_data.FieldMetaData("loanTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_COEF, new org.apache.thrift.meta_data.FieldMetaData("loanCoef", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RENTAL_RETURN, new org.apache.thrift.meta_data.FieldMetaData("rentalReturn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_MONEY_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("repaymentMoneyTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTHLY_REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("monthlyRepaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("payMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("resultMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RENT_TERM, new org.apache.thrift.meta_data.FieldMetaData("rentTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizCalLoanMoney.class, metaDataMap);
  }

  public BizCalLoanMoney() {
  }

  public BizCalLoanMoney(
    double rentMoney,
    double feeRate,
    int repaymentType,
    int loanTerm,
    double loanCoef,
    double rentalReturn,
    double loanMoney,
    double repaymentMoneyTotal,
    double monthlyRepaymentMoney,
    double payMoney,
    double resultMoney,
    int rentTerm)
  {
    this();
    this.rentMoney = rentMoney;
    setRentMoneyIsSet(true);
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    this.repaymentType = repaymentType;
    setRepaymentTypeIsSet(true);
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    this.loanCoef = loanCoef;
    setLoanCoefIsSet(true);
    this.rentalReturn = rentalReturn;
    setRentalReturnIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.repaymentMoneyTotal = repaymentMoneyTotal;
    setRepaymentMoneyTotalIsSet(true);
    this.monthlyRepaymentMoney = monthlyRepaymentMoney;
    setMonthlyRepaymentMoneyIsSet(true);
    this.payMoney = payMoney;
    setPayMoneyIsSet(true);
    this.resultMoney = resultMoney;
    setResultMoneyIsSet(true);
    this.rentTerm = rentTerm;
    setRentTermIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizCalLoanMoney(BizCalLoanMoney other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rentMoney = other.rentMoney;
    this.feeRate = other.feeRate;
    this.repaymentType = other.repaymentType;
    this.loanTerm = other.loanTerm;
    this.loanCoef = other.loanCoef;
    this.rentalReturn = other.rentalReturn;
    this.loanMoney = other.loanMoney;
    this.repaymentMoneyTotal = other.repaymentMoneyTotal;
    this.monthlyRepaymentMoney = other.monthlyRepaymentMoney;
    this.payMoney = other.payMoney;
    this.resultMoney = other.resultMoney;
    this.rentTerm = other.rentTerm;
  }

  public BizCalLoanMoney deepCopy() {
    return new BizCalLoanMoney(this);
  }

  @Override
  public void clear() {
    setRentMoneyIsSet(false);
    this.rentMoney = 0.0;
    setFeeRateIsSet(false);
    this.feeRate = 0.0;
    setRepaymentTypeIsSet(false);
    this.repaymentType = 0;
    setLoanTermIsSet(false);
    this.loanTerm = 0;
    setLoanCoefIsSet(false);
    this.loanCoef = 0.0;
    setRentalReturnIsSet(false);
    this.rentalReturn = 0.0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setRepaymentMoneyTotalIsSet(false);
    this.repaymentMoneyTotal = 0.0;
    setMonthlyRepaymentMoneyIsSet(false);
    this.monthlyRepaymentMoney = 0.0;
    setPayMoneyIsSet(false);
    this.payMoney = 0.0;
    setResultMoneyIsSet(false);
    this.resultMoney = 0.0;
    setRentTermIsSet(false);
    this.rentTerm = 0;
  }

  public double getRentMoney() {
    return this.rentMoney;
  }

  public BizCalLoanMoney setRentMoney(double rentMoney) {
    this.rentMoney = rentMoney;
    setRentMoneyIsSet(true);
    return this;
  }

  public void unsetRentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTMONEY_ISSET_ID);
  }

  /** Returns true if field rentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTMONEY_ISSET_ID);
  }

  public void setRentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTMONEY_ISSET_ID, value);
  }

  public double getFeeRate() {
    return this.feeRate;
  }

  public BizCalLoanMoney setFeeRate(double feeRate) {
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    return this;
  }

  public void unsetFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  /** Returns true if field feeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  public void setFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEERATE_ISSET_ID, value);
  }

  public int getRepaymentType() {
    return this.repaymentType;
  }

  public BizCalLoanMoney setRepaymentType(int repaymentType) {
    this.repaymentType = repaymentType;
    setRepaymentTypeIsSet(true);
    return this;
  }

  public void unsetRepaymentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTTYPE_ISSET_ID);
  }

  /** Returns true if field repaymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTTYPE_ISSET_ID);
  }

  public void setRepaymentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTTYPE_ISSET_ID, value);
  }

  public int getLoanTerm() {
    return this.loanTerm;
  }

  public BizCalLoanMoney setLoanTerm(int loanTerm) {
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    return this;
  }

  public void unsetLoanTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  /** Returns true if field loanTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  public void setLoanTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANTERM_ISSET_ID, value);
  }

  public double getLoanCoef() {
    return this.loanCoef;
  }

  public BizCalLoanMoney setLoanCoef(double loanCoef) {
    this.loanCoef = loanCoef;
    setLoanCoefIsSet(true);
    return this;
  }

  public void unsetLoanCoef() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANCOEF_ISSET_ID);
  }

  /** Returns true if field loanCoef is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanCoef() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANCOEF_ISSET_ID);
  }

  public void setLoanCoefIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANCOEF_ISSET_ID, value);
  }

  public double getRentalReturn() {
    return this.rentalReturn;
  }

  public BizCalLoanMoney setRentalReturn(double rentalReturn) {
    this.rentalReturn = rentalReturn;
    setRentalReturnIsSet(true);
    return this;
  }

  public void unsetRentalReturn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTALRETURN_ISSET_ID);
  }

  /** Returns true if field rentalReturn is set (has been assigned a value) and false otherwise */
  public boolean isSetRentalReturn() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTALRETURN_ISSET_ID);
  }

  public void setRentalReturnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTALRETURN_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public BizCalLoanMoney setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public double getRepaymentMoneyTotal() {
    return this.repaymentMoneyTotal;
  }

  public BizCalLoanMoney setRepaymentMoneyTotal(double repaymentMoneyTotal) {
    this.repaymentMoneyTotal = repaymentMoneyTotal;
    setRepaymentMoneyTotalIsSet(true);
    return this;
  }

  public void unsetRepaymentMoneyTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTMONEYTOTAL_ISSET_ID);
  }

  /** Returns true if field repaymentMoneyTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentMoneyTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTMONEYTOTAL_ISSET_ID);
  }

  public void setRepaymentMoneyTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTMONEYTOTAL_ISSET_ID, value);
  }

  public double getMonthlyRepaymentMoney() {
    return this.monthlyRepaymentMoney;
  }

  public BizCalLoanMoney setMonthlyRepaymentMoney(double monthlyRepaymentMoney) {
    this.monthlyRepaymentMoney = monthlyRepaymentMoney;
    setMonthlyRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetMonthlyRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLYREPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field monthlyRepaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthlyRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLYREPAYMENTMONEY_ISSET_ID);
  }

  public void setMonthlyRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLYREPAYMENTMONEY_ISSET_ID, value);
  }

  public double getPayMoney() {
    return this.payMoney;
  }

  public BizCalLoanMoney setPayMoney(double payMoney) {
    this.payMoney = payMoney;
    setPayMoneyIsSet(true);
    return this;
  }

  public void unsetPayMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMONEY_ISSET_ID);
  }

  /** Returns true if field payMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetPayMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMONEY_ISSET_ID);
  }

  public void setPayMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMONEY_ISSET_ID, value);
  }

  public double getResultMoney() {
    return this.resultMoney;
  }

  public BizCalLoanMoney setResultMoney(double resultMoney) {
    this.resultMoney = resultMoney;
    setResultMoneyIsSet(true);
    return this;
  }

  public void unsetResultMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULTMONEY_ISSET_ID);
  }

  /** Returns true if field resultMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetResultMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULTMONEY_ISSET_ID);
  }

  public void setResultMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULTMONEY_ISSET_ID, value);
  }

  public int getRentTerm() {
    return this.rentTerm;
  }

  public BizCalLoanMoney setRentTerm(int rentTerm) {
    this.rentTerm = rentTerm;
    setRentTermIsSet(true);
    return this;
  }

  public void unsetRentTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTTERM_ISSET_ID);
  }

  /** Returns true if field rentTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetRentTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTTERM_ISSET_ID);
  }

  public void setRentTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTTERM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RENT_MONEY:
      if (value == null) {
        unsetRentMoney();
      } else {
        setRentMoney((Double)value);
      }
      break;

    case FEE_RATE:
      if (value == null) {
        unsetFeeRate();
      } else {
        setFeeRate((Double)value);
      }
      break;

    case REPAYMENT_TYPE:
      if (value == null) {
        unsetRepaymentType();
      } else {
        setRepaymentType((Integer)value);
      }
      break;

    case LOAN_TERM:
      if (value == null) {
        unsetLoanTerm();
      } else {
        setLoanTerm((Integer)value);
      }
      break;

    case LOAN_COEF:
      if (value == null) {
        unsetLoanCoef();
      } else {
        setLoanCoef((Double)value);
      }
      break;

    case RENTAL_RETURN:
      if (value == null) {
        unsetRentalReturn();
      } else {
        setRentalReturn((Double)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case REPAYMENT_MONEY_TOTAL:
      if (value == null) {
        unsetRepaymentMoneyTotal();
      } else {
        setRepaymentMoneyTotal((Double)value);
      }
      break;

    case MONTHLY_REPAYMENT_MONEY:
      if (value == null) {
        unsetMonthlyRepaymentMoney();
      } else {
        setMonthlyRepaymentMoney((Double)value);
      }
      break;

    case PAY_MONEY:
      if (value == null) {
        unsetPayMoney();
      } else {
        setPayMoney((Double)value);
      }
      break;

    case RESULT_MONEY:
      if (value == null) {
        unsetResultMoney();
      } else {
        setResultMoney((Double)value);
      }
      break;

    case RENT_TERM:
      if (value == null) {
        unsetRentTerm();
      } else {
        setRentTerm((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RENT_MONEY:
      return Double.valueOf(getRentMoney());

    case FEE_RATE:
      return Double.valueOf(getFeeRate());

    case REPAYMENT_TYPE:
      return Integer.valueOf(getRepaymentType());

    case LOAN_TERM:
      return Integer.valueOf(getLoanTerm());

    case LOAN_COEF:
      return Double.valueOf(getLoanCoef());

    case RENTAL_RETURN:
      return Double.valueOf(getRentalReturn());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case REPAYMENT_MONEY_TOTAL:
      return Double.valueOf(getRepaymentMoneyTotal());

    case MONTHLY_REPAYMENT_MONEY:
      return Double.valueOf(getMonthlyRepaymentMoney());

    case PAY_MONEY:
      return Double.valueOf(getPayMoney());

    case RESULT_MONEY:
      return Double.valueOf(getResultMoney());

    case RENT_TERM:
      return Integer.valueOf(getRentTerm());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RENT_MONEY:
      return isSetRentMoney();
    case FEE_RATE:
      return isSetFeeRate();
    case REPAYMENT_TYPE:
      return isSetRepaymentType();
    case LOAN_TERM:
      return isSetLoanTerm();
    case LOAN_COEF:
      return isSetLoanCoef();
    case RENTAL_RETURN:
      return isSetRentalReturn();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case REPAYMENT_MONEY_TOTAL:
      return isSetRepaymentMoneyTotal();
    case MONTHLY_REPAYMENT_MONEY:
      return isSetMonthlyRepaymentMoney();
    case PAY_MONEY:
      return isSetPayMoney();
    case RESULT_MONEY:
      return isSetResultMoney();
    case RENT_TERM:
      return isSetRentTerm();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizCalLoanMoney)
      return this.equals((BizCalLoanMoney)that);
    return false;
  }

  public boolean equals(BizCalLoanMoney that) {
    if (that == null)
      return false;

    boolean this_present_rentMoney = true;
    boolean that_present_rentMoney = true;
    if (this_present_rentMoney || that_present_rentMoney) {
      if (!(this_present_rentMoney && that_present_rentMoney))
        return false;
      if (this.rentMoney != that.rentMoney)
        return false;
    }

    boolean this_present_feeRate = true;
    boolean that_present_feeRate = true;
    if (this_present_feeRate || that_present_feeRate) {
      if (!(this_present_feeRate && that_present_feeRate))
        return false;
      if (this.feeRate != that.feeRate)
        return false;
    }

    boolean this_present_repaymentType = true;
    boolean that_present_repaymentType = true;
    if (this_present_repaymentType || that_present_repaymentType) {
      if (!(this_present_repaymentType && that_present_repaymentType))
        return false;
      if (this.repaymentType != that.repaymentType)
        return false;
    }

    boolean this_present_loanTerm = true;
    boolean that_present_loanTerm = true;
    if (this_present_loanTerm || that_present_loanTerm) {
      if (!(this_present_loanTerm && that_present_loanTerm))
        return false;
      if (this.loanTerm != that.loanTerm)
        return false;
    }

    boolean this_present_loanCoef = true;
    boolean that_present_loanCoef = true;
    if (this_present_loanCoef || that_present_loanCoef) {
      if (!(this_present_loanCoef && that_present_loanCoef))
        return false;
      if (this.loanCoef != that.loanCoef)
        return false;
    }

    boolean this_present_rentalReturn = true;
    boolean that_present_rentalReturn = true;
    if (this_present_rentalReturn || that_present_rentalReturn) {
      if (!(this_present_rentalReturn && that_present_rentalReturn))
        return false;
      if (this.rentalReturn != that.rentalReturn)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_repaymentMoneyTotal = true;
    boolean that_present_repaymentMoneyTotal = true;
    if (this_present_repaymentMoneyTotal || that_present_repaymentMoneyTotal) {
      if (!(this_present_repaymentMoneyTotal && that_present_repaymentMoneyTotal))
        return false;
      if (this.repaymentMoneyTotal != that.repaymentMoneyTotal)
        return false;
    }

    boolean this_present_monthlyRepaymentMoney = true;
    boolean that_present_monthlyRepaymentMoney = true;
    if (this_present_monthlyRepaymentMoney || that_present_monthlyRepaymentMoney) {
      if (!(this_present_monthlyRepaymentMoney && that_present_monthlyRepaymentMoney))
        return false;
      if (this.monthlyRepaymentMoney != that.monthlyRepaymentMoney)
        return false;
    }

    boolean this_present_payMoney = true;
    boolean that_present_payMoney = true;
    if (this_present_payMoney || that_present_payMoney) {
      if (!(this_present_payMoney && that_present_payMoney))
        return false;
      if (this.payMoney != that.payMoney)
        return false;
    }

    boolean this_present_resultMoney = true;
    boolean that_present_resultMoney = true;
    if (this_present_resultMoney || that_present_resultMoney) {
      if (!(this_present_resultMoney && that_present_resultMoney))
        return false;
      if (this.resultMoney != that.resultMoney)
        return false;
    }

    boolean this_present_rentTerm = true;
    boolean that_present_rentTerm = true;
    if (this_present_rentTerm || that_present_rentTerm) {
      if (!(this_present_rentTerm && that_present_rentTerm))
        return false;
      if (this.rentTerm != that.rentTerm)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_rentMoney = true;
    list.add(present_rentMoney);
    if (present_rentMoney)
      list.add(rentMoney);

    boolean present_feeRate = true;
    list.add(present_feeRate);
    if (present_feeRate)
      list.add(feeRate);

    boolean present_repaymentType = true;
    list.add(present_repaymentType);
    if (present_repaymentType)
      list.add(repaymentType);

    boolean present_loanTerm = true;
    list.add(present_loanTerm);
    if (present_loanTerm)
      list.add(loanTerm);

    boolean present_loanCoef = true;
    list.add(present_loanCoef);
    if (present_loanCoef)
      list.add(loanCoef);

    boolean present_rentalReturn = true;
    list.add(present_rentalReturn);
    if (present_rentalReturn)
      list.add(rentalReturn);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_repaymentMoneyTotal = true;
    list.add(present_repaymentMoneyTotal);
    if (present_repaymentMoneyTotal)
      list.add(repaymentMoneyTotal);

    boolean present_monthlyRepaymentMoney = true;
    list.add(present_monthlyRepaymentMoney);
    if (present_monthlyRepaymentMoney)
      list.add(monthlyRepaymentMoney);

    boolean present_payMoney = true;
    list.add(present_payMoney);
    if (present_payMoney)
      list.add(payMoney);

    boolean present_resultMoney = true;
    list.add(present_resultMoney);
    if (present_resultMoney)
      list.add(resultMoney);

    boolean present_rentTerm = true;
    list.add(present_rentTerm);
    if (present_rentTerm)
      list.add(rentTerm);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizCalLoanMoney other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRentMoney()).compareTo(other.isSetRentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentMoney, other.rentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeRate()).compareTo(other.isSetFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeRate, other.feeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentType()).compareTo(other.isSetRepaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentType, other.repaymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTerm()).compareTo(other.isSetLoanTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTerm, other.loanTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanCoef()).compareTo(other.isSetLoanCoef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanCoef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanCoef, other.loanCoef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentalReturn()).compareTo(other.isSetRentalReturn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentalReturn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentalReturn, other.rentalReturn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentMoneyTotal()).compareTo(other.isSetRepaymentMoneyTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentMoneyTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentMoneyTotal, other.repaymentMoneyTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthlyRepaymentMoney()).compareTo(other.isSetMonthlyRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthlyRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthlyRepaymentMoney, other.monthlyRepaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayMoney()).compareTo(other.isSetPayMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payMoney, other.payMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResultMoney()).compareTo(other.isSetResultMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultMoney, other.resultMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentTerm()).compareTo(other.isSetRentTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentTerm, other.rentTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizCalLoanMoney(");
    boolean first = true;

    sb.append("rentMoney:");
    sb.append(this.rentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeRate:");
    sb.append(this.feeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentType:");
    sb.append(this.repaymentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTerm:");
    sb.append(this.loanTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanCoef:");
    sb.append(this.loanCoef);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentalReturn:");
    sb.append(this.rentalReturn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentMoneyTotal:");
    sb.append(this.repaymentMoneyTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthlyRepaymentMoney:");
    sb.append(this.monthlyRepaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payMoney:");
    sb.append(this.payMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultMoney:");
    sb.append(this.resultMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentTerm:");
    sb.append(this.rentTerm);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizCalLoanMoneyStandardSchemeFactory implements SchemeFactory {
    public BizCalLoanMoneyStandardScheme getScheme() {
      return new BizCalLoanMoneyStandardScheme();
    }
  }

  private static class BizCalLoanMoneyStandardScheme extends StandardScheme<BizCalLoanMoney> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizCalLoanMoney struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rentMoney = iprot.readDouble();
              struct.setRentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeRate = iprot.readDouble();
              struct.setFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentType = iprot.readI32();
              struct.setRepaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOAN_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanTerm = iprot.readI32();
              struct.setLoanTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOAN_COEF
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanCoef = iprot.readDouble();
              struct.setLoanCoefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RENTAL_RETURN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rentalReturn = iprot.readDouble();
              struct.setRentalReturnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPAYMENT_MONEY_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentMoneyTotal = iprot.readDouble();
              struct.setRepaymentMoneyTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MONTHLY_REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthlyRepaymentMoney = iprot.readDouble();
              struct.setMonthlyRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payMoney = iprot.readDouble();
              struct.setPayMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RESULT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.resultMoney = iprot.readDouble();
              struct.setResultMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RENT_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rentTerm = iprot.readI32();
              struct.setRentTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizCalLoanMoney struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.rentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.feeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repaymentType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_TERM_FIELD_DESC);
      oprot.writeI32(struct.loanTerm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_COEF_FIELD_DESC);
      oprot.writeDouble(struct.loanCoef);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENTAL_RETURN_FIELD_DESC);
      oprot.writeDouble(struct.rentalReturn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_MONEY_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.repaymentMoneyTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTHLY_REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.monthlyRepaymentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.payMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RESULT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.resultMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENT_TERM_FIELD_DESC);
      oprot.writeI32(struct.rentTerm);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizCalLoanMoneyTupleSchemeFactory implements SchemeFactory {
    public BizCalLoanMoneyTupleScheme getScheme() {
      return new BizCalLoanMoneyTupleScheme();
    }
  }

  private static class BizCalLoanMoneyTupleScheme extends TupleScheme<BizCalLoanMoney> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizCalLoanMoney struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRentMoney()) {
        optionals.set(0);
      }
      if (struct.isSetFeeRate()) {
        optionals.set(1);
      }
      if (struct.isSetRepaymentType()) {
        optionals.set(2);
      }
      if (struct.isSetLoanTerm()) {
        optionals.set(3);
      }
      if (struct.isSetLoanCoef()) {
        optionals.set(4);
      }
      if (struct.isSetRentalReturn()) {
        optionals.set(5);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(6);
      }
      if (struct.isSetRepaymentMoneyTotal()) {
        optionals.set(7);
      }
      if (struct.isSetMonthlyRepaymentMoney()) {
        optionals.set(8);
      }
      if (struct.isSetPayMoney()) {
        optionals.set(9);
      }
      if (struct.isSetResultMoney()) {
        optionals.set(10);
      }
      if (struct.isSetRentTerm()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetRentMoney()) {
        oprot.writeDouble(struct.rentMoney);
      }
      if (struct.isSetFeeRate()) {
        oprot.writeDouble(struct.feeRate);
      }
      if (struct.isSetRepaymentType()) {
        oprot.writeI32(struct.repaymentType);
      }
      if (struct.isSetLoanTerm()) {
        oprot.writeI32(struct.loanTerm);
      }
      if (struct.isSetLoanCoef()) {
        oprot.writeDouble(struct.loanCoef);
      }
      if (struct.isSetRentalReturn()) {
        oprot.writeDouble(struct.rentalReturn);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetRepaymentMoneyTotal()) {
        oprot.writeDouble(struct.repaymentMoneyTotal);
      }
      if (struct.isSetMonthlyRepaymentMoney()) {
        oprot.writeDouble(struct.monthlyRepaymentMoney);
      }
      if (struct.isSetPayMoney()) {
        oprot.writeDouble(struct.payMoney);
      }
      if (struct.isSetResultMoney()) {
        oprot.writeDouble(struct.resultMoney);
      }
      if (struct.isSetRentTerm()) {
        oprot.writeI32(struct.rentTerm);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizCalLoanMoney struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.rentMoney = iprot.readDouble();
        struct.setRentMoneyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.feeRate = iprot.readDouble();
        struct.setFeeRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.repaymentType = iprot.readI32();
        struct.setRepaymentTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loanTerm = iprot.readI32();
        struct.setLoanTermIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loanCoef = iprot.readDouble();
        struct.setLoanCoefIsSet(true);
      }
      if (incoming.get(5)) {
        struct.rentalReturn = iprot.readDouble();
        struct.setRentalReturnIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repaymentMoneyTotal = iprot.readDouble();
        struct.setRepaymentMoneyTotalIsSet(true);
      }
      if (incoming.get(8)) {
        struct.monthlyRepaymentMoney = iprot.readDouble();
        struct.setMonthlyRepaymentMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.payMoney = iprot.readDouble();
        struct.setPayMoneyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.resultMoney = iprot.readDouble();
        struct.setResultMoneyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rentTerm = iprot.readI32();
        struct.setRentTermIsSet(true);
      }
    }
  }

}


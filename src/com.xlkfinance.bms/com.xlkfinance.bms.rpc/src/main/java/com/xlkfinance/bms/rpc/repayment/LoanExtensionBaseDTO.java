/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class LoanExtensionBaseDTO implements org.apache.thrift.TBase<LoanExtensionBaseDTO, LoanExtensionBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<LoanExtensionBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoanExtensionBaseDTO");

  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNum", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_LAST_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttmLast", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REQUEST_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("requestStatus", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ECO_TRADE_FIELD_DESC = new org.apache.thrift.protocol.TField("ecoTrade", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoanExtensionBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoanExtensionBaseDTOTupleSchemeFactory());
  }

  public int projectId; // required
  public String projectName; // required
  public String projectNum; // required
  public String cusName; // required
  public int cusType; // required
  public String requestDttm; // required
  public String requestDttmLast; // required
  public int requestStatus; // required
  public String ecoTrade; // required
  public int page; // required
  public int rows; // required
  public int pmUserId; // required
  public List<Integer> userIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROJECT_ID((short)1, "projectId"),
    PROJECT_NAME((short)2, "projectName"),
    PROJECT_NUM((short)3, "projectNum"),
    CUS_NAME((short)4, "cusName"),
    CUS_TYPE((short)5, "cusType"),
    REQUEST_DTTM((short)6, "requestDttm"),
    REQUEST_DTTM_LAST((short)7, "requestDttmLast"),
    REQUEST_STATUS((short)8, "requestStatus"),
    ECO_TRADE((short)9, "ecoTrade"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    PM_USER_ID((short)12, "pmUserId"),
    USER_IDS((short)13, "userIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROJECT_ID
          return PROJECT_ID;
        case 2: // PROJECT_NAME
          return PROJECT_NAME;
        case 3: // PROJECT_NUM
          return PROJECT_NUM;
        case 4: // CUS_NAME
          return CUS_NAME;
        case 5: // CUS_TYPE
          return CUS_TYPE;
        case 6: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 7: // REQUEST_DTTM_LAST
          return REQUEST_DTTM_LAST;
        case 8: // REQUEST_STATUS
          return REQUEST_STATUS;
        case 9: // ECO_TRADE
          return ECO_TRADE;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // PM_USER_ID
          return PM_USER_ID;
        case 13: // USER_IDS
          return USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private static final int __CUSTYPE_ISSET_ID = 1;
  private static final int __REQUESTSTATUS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private static final int __PMUSERID_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUM, new org.apache.thrift.meta_data.FieldMetaData("projectNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM_LAST, new org.apache.thrift.meta_data.FieldMetaData("requestDttmLast", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_STATUS, new org.apache.thrift.meta_data.FieldMetaData("requestStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ECO_TRADE, new org.apache.thrift.meta_data.FieldMetaData("ecoTrade", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoanExtensionBaseDTO.class, metaDataMap);
  }

  public LoanExtensionBaseDTO() {
  }

  public LoanExtensionBaseDTO(
    int projectId,
    String projectName,
    String projectNum,
    String cusName,
    int cusType,
    String requestDttm,
    String requestDttmLast,
    int requestStatus,
    String ecoTrade,
    int page,
    int rows,
    int pmUserId,
    List<Integer> userIds)
  {
    this();
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
    this.projectNum = projectNum;
    this.cusName = cusName;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.requestDttm = requestDttm;
    this.requestDttmLast = requestDttmLast;
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    this.ecoTrade = ecoTrade;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.userIds = userIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoanExtensionBaseDTO(LoanExtensionBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNum()) {
      this.projectNum = other.projectNum;
    }
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.cusType = other.cusType;
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    if (other.isSetRequestDttmLast()) {
      this.requestDttmLast = other.requestDttmLast;
    }
    this.requestStatus = other.requestStatus;
    if (other.isSetEcoTrade()) {
      this.ecoTrade = other.ecoTrade;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.pmUserId = other.pmUserId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
  }

  public LoanExtensionBaseDTO deepCopy() {
    return new LoanExtensionBaseDTO(this);
  }

  @Override
  public void clear() {
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
    this.projectNum = null;
    this.cusName = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    this.requestDttm = null;
    this.requestDttmLast = null;
    setRequestStatusIsSet(false);
    this.requestStatus = 0;
    this.ecoTrade = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.userIds = null;
  }

  public int getProjectId() {
    return this.projectId;
  }

  public LoanExtensionBaseDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public LoanExtensionBaseDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNum() {
    return this.projectNum;
  }

  public LoanExtensionBaseDTO setProjectNum(String projectNum) {
    this.projectNum = projectNum;
    return this;
  }

  public void unsetProjectNum() {
    this.projectNum = null;
  }

  /** Returns true if field projectNum is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNum() {
    return this.projectNum != null;
  }

  public void setProjectNumIsSet(boolean value) {
    if (!value) {
      this.projectNum = null;
    }
  }

  public String getCusName() {
    return this.cusName;
  }

  public LoanExtensionBaseDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public LoanExtensionBaseDTO setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public LoanExtensionBaseDTO setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public String getRequestDttmLast() {
    return this.requestDttmLast;
  }

  public LoanExtensionBaseDTO setRequestDttmLast(String requestDttmLast) {
    this.requestDttmLast = requestDttmLast;
    return this;
  }

  public void unsetRequestDttmLast() {
    this.requestDttmLast = null;
  }

  /** Returns true if field requestDttmLast is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttmLast() {
    return this.requestDttmLast != null;
  }

  public void setRequestDttmLastIsSet(boolean value) {
    if (!value) {
      this.requestDttmLast = null;
    }
  }

  public int getRequestStatus() {
    return this.requestStatus;
  }

  public LoanExtensionBaseDTO setRequestStatus(int requestStatus) {
    this.requestStatus = requestStatus;
    setRequestStatusIsSet(true);
    return this;
  }

  public void unsetRequestStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  /** Returns true if field requestStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID);
  }

  public void setRequestStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSTATUS_ISSET_ID, value);
  }

  public String getEcoTrade() {
    return this.ecoTrade;
  }

  public LoanExtensionBaseDTO setEcoTrade(String ecoTrade) {
    this.ecoTrade = ecoTrade;
    return this;
  }

  public void unsetEcoTrade() {
    this.ecoTrade = null;
  }

  /** Returns true if field ecoTrade is set (has been assigned a value) and false otherwise */
  public boolean isSetEcoTrade() {
    return this.ecoTrade != null;
  }

  public void setEcoTradeIsSet(boolean value) {
    if (!value) {
      this.ecoTrade = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public LoanExtensionBaseDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public LoanExtensionBaseDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public LoanExtensionBaseDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public LoanExtensionBaseDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUM:
      if (value == null) {
        unsetProjectNum();
      } else {
        setProjectNum((String)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case REQUEST_DTTM_LAST:
      if (value == null) {
        unsetRequestDttmLast();
      } else {
        setRequestDttmLast((String)value);
      }
      break;

    case REQUEST_STATUS:
      if (value == null) {
        unsetRequestStatus();
      } else {
        setRequestStatus((Integer)value);
      }
      break;

    case ECO_TRADE:
      if (value == null) {
        unsetEcoTrade();
      } else {
        setEcoTrade((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUM:
      return getProjectNum();

    case CUS_NAME:
      return getCusName();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case REQUEST_DTTM:
      return getRequestDttm();

    case REQUEST_DTTM_LAST:
      return getRequestDttmLast();

    case REQUEST_STATUS:
      return Integer.valueOf(getRequestStatus());

    case ECO_TRADE:
      return getEcoTrade();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case USER_IDS:
      return getUserIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUM:
      return isSetProjectNum();
    case CUS_NAME:
      return isSetCusName();
    case CUS_TYPE:
      return isSetCusType();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case REQUEST_DTTM_LAST:
      return isSetRequestDttmLast();
    case REQUEST_STATUS:
      return isSetRequestStatus();
    case ECO_TRADE:
      return isSetEcoTrade();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PM_USER_ID:
      return isSetPmUserId();
    case USER_IDS:
      return isSetUserIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoanExtensionBaseDTO)
      return this.equals((LoanExtensionBaseDTO)that);
    return false;
  }

  public boolean equals(LoanExtensionBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNum = true && this.isSetProjectNum();
    boolean that_present_projectNum = true && that.isSetProjectNum();
    if (this_present_projectNum || that_present_projectNum) {
      if (!(this_present_projectNum && that_present_projectNum))
        return false;
      if (!this.projectNum.equals(that.projectNum))
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_requestDttmLast = true && this.isSetRequestDttmLast();
    boolean that_present_requestDttmLast = true && that.isSetRequestDttmLast();
    if (this_present_requestDttmLast || that_present_requestDttmLast) {
      if (!(this_present_requestDttmLast && that_present_requestDttmLast))
        return false;
      if (!this.requestDttmLast.equals(that.requestDttmLast))
        return false;
    }

    boolean this_present_requestStatus = true;
    boolean that_present_requestStatus = true;
    if (this_present_requestStatus || that_present_requestStatus) {
      if (!(this_present_requestStatus && that_present_requestStatus))
        return false;
      if (this.requestStatus != that.requestStatus)
        return false;
    }

    boolean this_present_ecoTrade = true && this.isSetEcoTrade();
    boolean that_present_ecoTrade = true && that.isSetEcoTrade();
    if (this_present_ecoTrade || that_present_ecoTrade) {
      if (!(this_present_ecoTrade && that_present_ecoTrade))
        return false;
      if (!this.ecoTrade.equals(that.ecoTrade))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNum = true && (isSetProjectNum());
    list.add(present_projectNum);
    if (present_projectNum)
      list.add(projectNum);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_requestDttmLast = true && (isSetRequestDttmLast());
    list.add(present_requestDttmLast);
    if (present_requestDttmLast)
      list.add(requestDttmLast);

    boolean present_requestStatus = true;
    list.add(present_requestStatus);
    if (present_requestStatus)
      list.add(requestStatus);

    boolean present_ecoTrade = true && (isSetEcoTrade());
    list.add(present_ecoTrade);
    if (present_ecoTrade)
      list.add(ecoTrade);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(LoanExtensionBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNum()).compareTo(other.isSetProjectNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNum, other.projectNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttmLast()).compareTo(other.isSetRequestDttmLast());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttmLast()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttmLast, other.requestDttmLast);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestStatus()).compareTo(other.isSetRequestStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestStatus, other.requestStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcoTrade()).compareTo(other.isSetEcoTrade());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcoTrade()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecoTrade, other.ecoTrade);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoanExtensionBaseDTO(");
    boolean first = true;

    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNum:");
    if (this.projectNum == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttmLast:");
    if (this.requestDttmLast == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttmLast);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestStatus:");
    sb.append(this.requestStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecoTrade:");
    if (this.ecoTrade == null) {
      sb.append("null");
    } else {
      sb.append(this.ecoTrade);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoanExtensionBaseDTOStandardSchemeFactory implements SchemeFactory {
    public LoanExtensionBaseDTOStandardScheme getScheme() {
      return new LoanExtensionBaseDTOStandardScheme();
    }
  }

  private static class LoanExtensionBaseDTOStandardScheme extends StandardScheme<LoanExtensionBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoanExtensionBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNum = iprot.readString();
              struct.setProjectNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_DTTM_LAST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttmLast = iprot.readString();
              struct.setRequestDttmLastIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REQUEST_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestStatus = iprot.readI32();
              struct.setRequestStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ECO_TRADE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecoTrade = iprot.readString();
              struct.setEcoTradeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list40.size);
                int _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = iprot.readI32();
                  struct.userIds.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoanExtensionBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNum != null) {
        oprot.writeFieldBegin(PROJECT_NUM_FIELD_DESC);
        oprot.writeString(struct.projectNum);
        oprot.writeFieldEnd();
      }
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttmLast != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_LAST_FIELD_DESC);
        oprot.writeString(struct.requestDttmLast);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REQUEST_STATUS_FIELD_DESC);
      oprot.writeI32(struct.requestStatus);
      oprot.writeFieldEnd();
      if (struct.ecoTrade != null) {
        oprot.writeFieldBegin(ECO_TRADE_FIELD_DESC);
        oprot.writeString(struct.ecoTrade);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter43 : struct.userIds)
          {
            oprot.writeI32(_iter43);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoanExtensionBaseDTOTupleSchemeFactory implements SchemeFactory {
    public LoanExtensionBaseDTOTupleScheme getScheme() {
      return new LoanExtensionBaseDTOTupleScheme();
    }
  }

  private static class LoanExtensionBaseDTOTupleScheme extends TupleScheme<LoanExtensionBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoanExtensionBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProjectId()) {
        optionals.set(0);
      }
      if (struct.isSetProjectName()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNum()) {
        optionals.set(2);
      }
      if (struct.isSetCusName()) {
        optionals.set(3);
      }
      if (struct.isSetCusType()) {
        optionals.set(4);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(5);
      }
      if (struct.isSetRequestDttmLast()) {
        optionals.set(6);
      }
      if (struct.isSetRequestStatus()) {
        optionals.set(7);
      }
      if (struct.isSetEcoTrade()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(11);
      }
      if (struct.isSetUserIds()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNum()) {
        oprot.writeString(struct.projectNum);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetRequestDttmLast()) {
        oprot.writeString(struct.requestDttmLast);
      }
      if (struct.isSetRequestStatus()) {
        oprot.writeI32(struct.requestStatus);
      }
      if (struct.isSetEcoTrade()) {
        oprot.writeString(struct.ecoTrade);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter44 : struct.userIds)
          {
            oprot.writeI32(_iter44);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoanExtensionBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNum = iprot.readString();
        struct.setProjectNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestDttmLast = iprot.readString();
        struct.setRequestDttmLastIsSet(true);
      }
      if (incoming.get(7)) {
        struct.requestStatus = iprot.readI32();
        struct.setRequestStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ecoTrade = iprot.readString();
        struct.setEcoTradeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list45.size);
          int _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI32();
            struct.userIds.add(_elem46);
          }
        }
        struct.setUserIdsIsSet(true);
      }
    }
  }

}


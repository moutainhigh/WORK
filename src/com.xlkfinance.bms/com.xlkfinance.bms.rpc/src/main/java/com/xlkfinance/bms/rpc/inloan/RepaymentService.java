/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RepaymentService {

  public interface Iface {

    public List<RepaymentIndexDTO> queryRepaymentIndex(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException;

    public int getRepaymentIndexTotal(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException;

    public List<RepaymentDTO> queryRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException;

    public int getRepaymentTotal(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException;

    public boolean addRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException;

    public RepaymentDTO getRepaymentById(int pid) throws org.apache.thrift.TException;

    public RepaymentDTO getRepaymentByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean updateRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException;

    public List<RepaymentRecordDTO> queryRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException;

    public int getRepaymentRecordTotal(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException;

    public boolean addRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException;

    public RepaymentRecordDTO getRepaymentRecordById(int pid) throws org.apache.thrift.TException;

    public List<OverdueFeeDTO> queryOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException;

    public int getOverdueFeeTotal(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException;

    public boolean addOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException;

    public OverdueFeeDTO getOverdueFeeById(int pid) throws org.apache.thrift.TException;

    public OverdueFeeDTO getOverdueFeeByProjectId(int projectId) throws org.apache.thrift.TException;

    public boolean updateOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException;

    public boolean confirmOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException;

    public List<RepaymentIndexDTO> queryRepaymentInfo(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException;

    public int getRepaymentInfoTotal(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryRepaymentIndex(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentIndexTotal(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRepayment(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentTotal(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRepayment(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateRepayment(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentRecordTotal(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentRecordById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOverdueFeeTotal(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOverdueFeeById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOverdueFeeByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRepaymentInfo(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRepaymentInfoTotal(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<RepaymentIndexDTO> queryRepaymentIndex(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      send_queryRepaymentIndex(repaymentIndexDTO);
      return recv_queryRepaymentIndex();
    }

    public void send_queryRepaymentIndex(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      queryRepaymentIndex_args args = new queryRepaymentIndex_args();
      args.setRepaymentIndexDTO(repaymentIndexDTO);
      sendBase("queryRepaymentIndex", args);
    }

    public List<RepaymentIndexDTO> recv_queryRepaymentIndex() throws org.apache.thrift.TException
    {
      queryRepaymentIndex_result result = new queryRepaymentIndex_result();
      receiveBase(result, "queryRepaymentIndex");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRepaymentIndex failed: unknown result");
    }

    public int getRepaymentIndexTotal(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      send_getRepaymentIndexTotal(repaymentIndexDTO);
      return recv_getRepaymentIndexTotal();
    }

    public void send_getRepaymentIndexTotal(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      getRepaymentIndexTotal_args args = new getRepaymentIndexTotal_args();
      args.setRepaymentIndexDTO(repaymentIndexDTO);
      sendBase("getRepaymentIndexTotal", args);
    }

    public int recv_getRepaymentIndexTotal() throws org.apache.thrift.TException
    {
      getRepaymentIndexTotal_result result = new getRepaymentIndexTotal_result();
      receiveBase(result, "getRepaymentIndexTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentIndexTotal failed: unknown result");
    }

    public List<RepaymentDTO> queryRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      send_queryRepayment(repaymentDTO);
      return recv_queryRepayment();
    }

    public void send_queryRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      queryRepayment_args args = new queryRepayment_args();
      args.setRepaymentDTO(repaymentDTO);
      sendBase("queryRepayment", args);
    }

    public List<RepaymentDTO> recv_queryRepayment() throws org.apache.thrift.TException
    {
      queryRepayment_result result = new queryRepayment_result();
      receiveBase(result, "queryRepayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRepayment failed: unknown result");
    }

    public int getRepaymentTotal(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      send_getRepaymentTotal(repaymentDTO);
      return recv_getRepaymentTotal();
    }

    public void send_getRepaymentTotal(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      getRepaymentTotal_args args = new getRepaymentTotal_args();
      args.setRepaymentDTO(repaymentDTO);
      sendBase("getRepaymentTotal", args);
    }

    public int recv_getRepaymentTotal() throws org.apache.thrift.TException
    {
      getRepaymentTotal_result result = new getRepaymentTotal_result();
      receiveBase(result, "getRepaymentTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentTotal failed: unknown result");
    }

    public boolean addRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      send_addRepayment(repaymentDTO);
      return recv_addRepayment();
    }

    public void send_addRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      addRepayment_args args = new addRepayment_args();
      args.setRepaymentDTO(repaymentDTO);
      sendBase("addRepayment", args);
    }

    public boolean recv_addRepayment() throws org.apache.thrift.TException
    {
      addRepayment_result result = new addRepayment_result();
      receiveBase(result, "addRepayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRepayment failed: unknown result");
    }

    public RepaymentDTO getRepaymentById(int pid) throws org.apache.thrift.TException
    {
      send_getRepaymentById(pid);
      return recv_getRepaymentById();
    }

    public void send_getRepaymentById(int pid) throws org.apache.thrift.TException
    {
      getRepaymentById_args args = new getRepaymentById_args();
      args.setPid(pid);
      sendBase("getRepaymentById", args);
    }

    public RepaymentDTO recv_getRepaymentById() throws org.apache.thrift.TException
    {
      getRepaymentById_result result = new getRepaymentById_result();
      receiveBase(result, "getRepaymentById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentById failed: unknown result");
    }

    public RepaymentDTO getRepaymentByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getRepaymentByProjectId(projectId);
      return recv_getRepaymentByProjectId();
    }

    public void send_getRepaymentByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getRepaymentByProjectId_args args = new getRepaymentByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getRepaymentByProjectId", args);
    }

    public RepaymentDTO recv_getRepaymentByProjectId() throws org.apache.thrift.TException
    {
      getRepaymentByProjectId_result result = new getRepaymentByProjectId_result();
      receiveBase(result, "getRepaymentByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentByProjectId failed: unknown result");
    }

    public boolean updateRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      send_updateRepayment(repaymentDTO);
      return recv_updateRepayment();
    }

    public void send_updateRepayment(RepaymentDTO repaymentDTO) throws org.apache.thrift.TException
    {
      updateRepayment_args args = new updateRepayment_args();
      args.setRepaymentDTO(repaymentDTO);
      sendBase("updateRepayment", args);
    }

    public boolean recv_updateRepayment() throws org.apache.thrift.TException
    {
      updateRepayment_result result = new updateRepayment_result();
      receiveBase(result, "updateRepayment");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateRepayment failed: unknown result");
    }

    public List<RepaymentRecordDTO> queryRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException
    {
      send_queryRepaymentRecord(repaymentRecordDTO);
      return recv_queryRepaymentRecord();
    }

    public void send_queryRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException
    {
      queryRepaymentRecord_args args = new queryRepaymentRecord_args();
      args.setRepaymentRecordDTO(repaymentRecordDTO);
      sendBase("queryRepaymentRecord", args);
    }

    public List<RepaymentRecordDTO> recv_queryRepaymentRecord() throws org.apache.thrift.TException
    {
      queryRepaymentRecord_result result = new queryRepaymentRecord_result();
      receiveBase(result, "queryRepaymentRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRepaymentRecord failed: unknown result");
    }

    public int getRepaymentRecordTotal(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException
    {
      send_getRepaymentRecordTotal(repaymentRecordDTO);
      return recv_getRepaymentRecordTotal();
    }

    public void send_getRepaymentRecordTotal(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException
    {
      getRepaymentRecordTotal_args args = new getRepaymentRecordTotal_args();
      args.setRepaymentRecordDTO(repaymentRecordDTO);
      sendBase("getRepaymentRecordTotal", args);
    }

    public int recv_getRepaymentRecordTotal() throws org.apache.thrift.TException
    {
      getRepaymentRecordTotal_result result = new getRepaymentRecordTotal_result();
      receiveBase(result, "getRepaymentRecordTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentRecordTotal failed: unknown result");
    }

    public boolean addRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException
    {
      send_addRepaymentRecord(repaymentRecordDTO);
      return recv_addRepaymentRecord();
    }

    public void send_addRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO) throws org.apache.thrift.TException
    {
      addRepaymentRecord_args args = new addRepaymentRecord_args();
      args.setRepaymentRecordDTO(repaymentRecordDTO);
      sendBase("addRepaymentRecord", args);
    }

    public boolean recv_addRepaymentRecord() throws org.apache.thrift.TException
    {
      addRepaymentRecord_result result = new addRepaymentRecord_result();
      receiveBase(result, "addRepaymentRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRepaymentRecord failed: unknown result");
    }

    public RepaymentRecordDTO getRepaymentRecordById(int pid) throws org.apache.thrift.TException
    {
      send_getRepaymentRecordById(pid);
      return recv_getRepaymentRecordById();
    }

    public void send_getRepaymentRecordById(int pid) throws org.apache.thrift.TException
    {
      getRepaymentRecordById_args args = new getRepaymentRecordById_args();
      args.setPid(pid);
      sendBase("getRepaymentRecordById", args);
    }

    public RepaymentRecordDTO recv_getRepaymentRecordById() throws org.apache.thrift.TException
    {
      getRepaymentRecordById_result result = new getRepaymentRecordById_result();
      receiveBase(result, "getRepaymentRecordById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentRecordById failed: unknown result");
    }

    public List<OverdueFeeDTO> queryOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      send_queryOverdueFee(overdueFeeDTO);
      return recv_queryOverdueFee();
    }

    public void send_queryOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      queryOverdueFee_args args = new queryOverdueFee_args();
      args.setOverdueFeeDTO(overdueFeeDTO);
      sendBase("queryOverdueFee", args);
    }

    public List<OverdueFeeDTO> recv_queryOverdueFee() throws org.apache.thrift.TException
    {
      queryOverdueFee_result result = new queryOverdueFee_result();
      receiveBase(result, "queryOverdueFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryOverdueFee failed: unknown result");
    }

    public int getOverdueFeeTotal(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      send_getOverdueFeeTotal(overdueFeeDTO);
      return recv_getOverdueFeeTotal();
    }

    public void send_getOverdueFeeTotal(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      getOverdueFeeTotal_args args = new getOverdueFeeTotal_args();
      args.setOverdueFeeDTO(overdueFeeDTO);
      sendBase("getOverdueFeeTotal", args);
    }

    public int recv_getOverdueFeeTotal() throws org.apache.thrift.TException
    {
      getOverdueFeeTotal_result result = new getOverdueFeeTotal_result();
      receiveBase(result, "getOverdueFeeTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverdueFeeTotal failed: unknown result");
    }

    public boolean addOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      send_addOverdueFee(overdueFeeDTO);
      return recv_addOverdueFee();
    }

    public void send_addOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      addOverdueFee_args args = new addOverdueFee_args();
      args.setOverdueFeeDTO(overdueFeeDTO);
      sendBase("addOverdueFee", args);
    }

    public boolean recv_addOverdueFee() throws org.apache.thrift.TException
    {
      addOverdueFee_result result = new addOverdueFee_result();
      receiveBase(result, "addOverdueFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addOverdueFee failed: unknown result");
    }

    public OverdueFeeDTO getOverdueFeeById(int pid) throws org.apache.thrift.TException
    {
      send_getOverdueFeeById(pid);
      return recv_getOverdueFeeById();
    }

    public void send_getOverdueFeeById(int pid) throws org.apache.thrift.TException
    {
      getOverdueFeeById_args args = new getOverdueFeeById_args();
      args.setPid(pid);
      sendBase("getOverdueFeeById", args);
    }

    public OverdueFeeDTO recv_getOverdueFeeById() throws org.apache.thrift.TException
    {
      getOverdueFeeById_result result = new getOverdueFeeById_result();
      receiveBase(result, "getOverdueFeeById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverdueFeeById failed: unknown result");
    }

    public OverdueFeeDTO getOverdueFeeByProjectId(int projectId) throws org.apache.thrift.TException
    {
      send_getOverdueFeeByProjectId(projectId);
      return recv_getOverdueFeeByProjectId();
    }

    public void send_getOverdueFeeByProjectId(int projectId) throws org.apache.thrift.TException
    {
      getOverdueFeeByProjectId_args args = new getOverdueFeeByProjectId_args();
      args.setProjectId(projectId);
      sendBase("getOverdueFeeByProjectId", args);
    }

    public OverdueFeeDTO recv_getOverdueFeeByProjectId() throws org.apache.thrift.TException
    {
      getOverdueFeeByProjectId_result result = new getOverdueFeeByProjectId_result();
      receiveBase(result, "getOverdueFeeByProjectId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOverdueFeeByProjectId failed: unknown result");
    }

    public boolean updateOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      send_updateOverdueFee(overdueFeeDTO);
      return recv_updateOverdueFee();
    }

    public void send_updateOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      updateOverdueFee_args args = new updateOverdueFee_args();
      args.setOverdueFeeDTO(overdueFeeDTO);
      sendBase("updateOverdueFee", args);
    }

    public boolean recv_updateOverdueFee() throws org.apache.thrift.TException
    {
      updateOverdueFee_result result = new updateOverdueFee_result();
      receiveBase(result, "updateOverdueFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateOverdueFee failed: unknown result");
    }

    public boolean confirmOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      send_confirmOverdueFee(overdueFeeDTO);
      return recv_confirmOverdueFee();
    }

    public void send_confirmOverdueFee(OverdueFeeDTO overdueFeeDTO) throws org.apache.thrift.TException
    {
      confirmOverdueFee_args args = new confirmOverdueFee_args();
      args.setOverdueFeeDTO(overdueFeeDTO);
      sendBase("confirmOverdueFee", args);
    }

    public boolean recv_confirmOverdueFee() throws org.apache.thrift.TException
    {
      confirmOverdueFee_result result = new confirmOverdueFee_result();
      receiveBase(result, "confirmOverdueFee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmOverdueFee failed: unknown result");
    }

    public List<RepaymentIndexDTO> queryRepaymentInfo(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      send_queryRepaymentInfo(repaymentIndexDTO);
      return recv_queryRepaymentInfo();
    }

    public void send_queryRepaymentInfo(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      queryRepaymentInfo_args args = new queryRepaymentInfo_args();
      args.setRepaymentIndexDTO(repaymentIndexDTO);
      sendBase("queryRepaymentInfo", args);
    }

    public List<RepaymentIndexDTO> recv_queryRepaymentInfo() throws org.apache.thrift.TException
    {
      queryRepaymentInfo_result result = new queryRepaymentInfo_result();
      receiveBase(result, "queryRepaymentInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRepaymentInfo failed: unknown result");
    }

    public int getRepaymentInfoTotal(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      send_getRepaymentInfoTotal(repaymentIndexDTO);
      return recv_getRepaymentInfoTotal();
    }

    public void send_getRepaymentInfoTotal(RepaymentIndexDTO repaymentIndexDTO) throws org.apache.thrift.TException
    {
      getRepaymentInfoTotal_args args = new getRepaymentInfoTotal_args();
      args.setRepaymentIndexDTO(repaymentIndexDTO);
      sendBase("getRepaymentInfoTotal", args);
    }

    public int recv_getRepaymentInfoTotal() throws org.apache.thrift.TException
    {
      getRepaymentInfoTotal_result result = new getRepaymentInfoTotal_result();
      receiveBase(result, "getRepaymentInfoTotal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRepaymentInfoTotal failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryRepaymentIndex(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRepaymentIndex_call method_call = new queryRepaymentIndex_call(repaymentIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRepaymentIndex_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentIndexDTO repaymentIndexDTO;
      public queryRepaymentIndex_call(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentIndexDTO = repaymentIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRepaymentIndex", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRepaymentIndex_args args = new queryRepaymentIndex_args();
        args.setRepaymentIndexDTO(repaymentIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepaymentIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRepaymentIndex();
      }
    }

    public void getRepaymentIndexTotal(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentIndexTotal_call method_call = new getRepaymentIndexTotal_call(repaymentIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentIndexTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentIndexDTO repaymentIndexDTO;
      public getRepaymentIndexTotal_call(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentIndexDTO = repaymentIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentIndexTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentIndexTotal_args args = new getRepaymentIndexTotal_args();
        args.setRepaymentIndexDTO(repaymentIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentIndexTotal();
      }
    }

    public void queryRepayment(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRepayment_call method_call = new queryRepayment_call(repaymentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRepayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentDTO repaymentDTO;
      public queryRepayment_call(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentDTO = repaymentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRepayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRepayment_args args = new queryRepayment_args();
        args.setRepaymentDTO(repaymentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepaymentDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRepayment();
      }
    }

    public void getRepaymentTotal(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentTotal_call method_call = new getRepaymentTotal_call(repaymentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentDTO repaymentDTO;
      public getRepaymentTotal_call(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentDTO = repaymentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentTotal_args args = new getRepaymentTotal_args();
        args.setRepaymentDTO(repaymentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentTotal();
      }
    }

    public void addRepayment(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRepayment_call method_call = new addRepayment_call(repaymentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRepayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentDTO repaymentDTO;
      public addRepayment_call(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentDTO = repaymentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRepayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRepayment_args args = new addRepayment_args();
        args.setRepaymentDTO(repaymentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRepayment();
      }
    }

    public void getRepaymentById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentById_call method_call = new getRepaymentById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getRepaymentById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentById_args args = new getRepaymentById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RepaymentDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentById();
      }
    }

    public void getRepaymentByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentByProjectId_call method_call = new getRepaymentByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getRepaymentByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentByProjectId_args args = new getRepaymentByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RepaymentDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentByProjectId();
      }
    }

    public void updateRepayment(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateRepayment_call method_call = new updateRepayment_call(repaymentDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateRepayment_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentDTO repaymentDTO;
      public updateRepayment_call(RepaymentDTO repaymentDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentDTO = repaymentDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateRepayment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateRepayment_args args = new updateRepayment_args();
        args.setRepaymentDTO(repaymentDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateRepayment();
      }
    }

    public void queryRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRepaymentRecord_call method_call = new queryRepaymentRecord_call(repaymentRecordDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRepaymentRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentRecordDTO repaymentRecordDTO;
      public queryRepaymentRecord_call(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentRecordDTO = repaymentRecordDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRepaymentRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRepaymentRecord_args args = new queryRepaymentRecord_args();
        args.setRepaymentRecordDTO(repaymentRecordDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepaymentRecordDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRepaymentRecord();
      }
    }

    public void getRepaymentRecordTotal(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentRecordTotal_call method_call = new getRepaymentRecordTotal_call(repaymentRecordDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentRecordTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentRecordDTO repaymentRecordDTO;
      public getRepaymentRecordTotal_call(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentRecordDTO = repaymentRecordDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentRecordTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentRecordTotal_args args = new getRepaymentRecordTotal_args();
        args.setRepaymentRecordDTO(repaymentRecordDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentRecordTotal();
      }
    }

    public void addRepaymentRecord(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRepaymentRecord_call method_call = new addRepaymentRecord_call(repaymentRecordDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRepaymentRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentRecordDTO repaymentRecordDTO;
      public addRepaymentRecord_call(RepaymentRecordDTO repaymentRecordDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentRecordDTO = repaymentRecordDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRepaymentRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRepaymentRecord_args args = new addRepaymentRecord_args();
        args.setRepaymentRecordDTO(repaymentRecordDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRepaymentRecord();
      }
    }

    public void getRepaymentRecordById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentRecordById_call method_call = new getRepaymentRecordById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentRecordById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getRepaymentRecordById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentRecordById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentRecordById_args args = new getRepaymentRecordById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RepaymentRecordDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentRecordById();
      }
    }

    public void queryOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryOverdueFee_call method_call = new queryOverdueFee_call(overdueFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryOverdueFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OverdueFeeDTO overdueFeeDTO;
      public queryOverdueFee_call(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.overdueFeeDTO = overdueFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryOverdueFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryOverdueFee_args args = new queryOverdueFee_args();
        args.setOverdueFeeDTO(overdueFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<OverdueFeeDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryOverdueFee();
      }
    }

    public void getOverdueFeeTotal(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOverdueFeeTotal_call method_call = new getOverdueFeeTotal_call(overdueFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverdueFeeTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OverdueFeeDTO overdueFeeDTO;
      public getOverdueFeeTotal_call(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.overdueFeeDTO = overdueFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverdueFeeTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverdueFeeTotal_args args = new getOverdueFeeTotal_args();
        args.setOverdueFeeDTO(overdueFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverdueFeeTotal();
      }
    }

    public void addOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addOverdueFee_call method_call = new addOverdueFee_call(overdueFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addOverdueFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OverdueFeeDTO overdueFeeDTO;
      public addOverdueFee_call(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.overdueFeeDTO = overdueFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addOverdueFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addOverdueFee_args args = new addOverdueFee_args();
        args.setOverdueFeeDTO(overdueFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addOverdueFee();
      }
    }

    public void getOverdueFeeById(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOverdueFeeById_call method_call = new getOverdueFeeById_call(pid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverdueFeeById_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int pid;
      public getOverdueFeeById_call(int pid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pid = pid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverdueFeeById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverdueFeeById_args args = new getOverdueFeeById_args();
        args.setPid(pid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OverdueFeeDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverdueFeeById();
      }
    }

    public void getOverdueFeeByProjectId(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOverdueFeeByProjectId_call method_call = new getOverdueFeeByProjectId_call(projectId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOverdueFeeByProjectId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int projectId;
      public getOverdueFeeByProjectId_call(int projectId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.projectId = projectId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOverdueFeeByProjectId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOverdueFeeByProjectId_args args = new getOverdueFeeByProjectId_args();
        args.setProjectId(projectId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OverdueFeeDTO getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOverdueFeeByProjectId();
      }
    }

    public void updateOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateOverdueFee_call method_call = new updateOverdueFee_call(overdueFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateOverdueFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OverdueFeeDTO overdueFeeDTO;
      public updateOverdueFee_call(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.overdueFeeDTO = overdueFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateOverdueFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateOverdueFee_args args = new updateOverdueFee_args();
        args.setOverdueFeeDTO(overdueFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateOverdueFee();
      }
    }

    public void confirmOverdueFee(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmOverdueFee_call method_call = new confirmOverdueFee_call(overdueFeeDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmOverdueFee_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OverdueFeeDTO overdueFeeDTO;
      public confirmOverdueFee_call(OverdueFeeDTO overdueFeeDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.overdueFeeDTO = overdueFeeDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmOverdueFee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmOverdueFee_args args = new confirmOverdueFee_args();
        args.setOverdueFeeDTO(overdueFeeDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmOverdueFee();
      }
    }

    public void queryRepaymentInfo(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRepaymentInfo_call method_call = new queryRepaymentInfo_call(repaymentIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRepaymentInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentIndexDTO repaymentIndexDTO;
      public queryRepaymentInfo_call(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentIndexDTO = repaymentIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRepaymentInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRepaymentInfo_args args = new queryRepaymentInfo_args();
        args.setRepaymentIndexDTO(repaymentIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RepaymentIndexDTO> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRepaymentInfo();
      }
    }

    public void getRepaymentInfoTotal(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRepaymentInfoTotal_call method_call = new getRepaymentInfoTotal_call(repaymentIndexDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRepaymentInfoTotal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RepaymentIndexDTO repaymentIndexDTO;
      public getRepaymentInfoTotal_call(RepaymentIndexDTO repaymentIndexDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.repaymentIndexDTO = repaymentIndexDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRepaymentInfoTotal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRepaymentInfoTotal_args args = new getRepaymentInfoTotal_args();
        args.setRepaymentIndexDTO(repaymentIndexDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRepaymentInfoTotal();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryRepaymentIndex", new queryRepaymentIndex());
      processMap.put("getRepaymentIndexTotal", new getRepaymentIndexTotal());
      processMap.put("queryRepayment", new queryRepayment());
      processMap.put("getRepaymentTotal", new getRepaymentTotal());
      processMap.put("addRepayment", new addRepayment());
      processMap.put("getRepaymentById", new getRepaymentById());
      processMap.put("getRepaymentByProjectId", new getRepaymentByProjectId());
      processMap.put("updateRepayment", new updateRepayment());
      processMap.put("queryRepaymentRecord", new queryRepaymentRecord());
      processMap.put("getRepaymentRecordTotal", new getRepaymentRecordTotal());
      processMap.put("addRepaymentRecord", new addRepaymentRecord());
      processMap.put("getRepaymentRecordById", new getRepaymentRecordById());
      processMap.put("queryOverdueFee", new queryOverdueFee());
      processMap.put("getOverdueFeeTotal", new getOverdueFeeTotal());
      processMap.put("addOverdueFee", new addOverdueFee());
      processMap.put("getOverdueFeeById", new getOverdueFeeById());
      processMap.put("getOverdueFeeByProjectId", new getOverdueFeeByProjectId());
      processMap.put("updateOverdueFee", new updateOverdueFee());
      processMap.put("confirmOverdueFee", new confirmOverdueFee());
      processMap.put("queryRepaymentInfo", new queryRepaymentInfo());
      processMap.put("getRepaymentInfoTotal", new getRepaymentInfoTotal());
      return processMap;
    }

    public static class queryRepaymentIndex<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRepaymentIndex_args> {
      public queryRepaymentIndex() {
        super("queryRepaymentIndex");
      }

      public queryRepaymentIndex_args getEmptyArgsInstance() {
        return new queryRepaymentIndex_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRepaymentIndex_result getResult(I iface, queryRepaymentIndex_args args) throws org.apache.thrift.TException {
        queryRepaymentIndex_result result = new queryRepaymentIndex_result();
        result.success = iface.queryRepaymentIndex(args.repaymentIndexDTO);
        return result;
      }
    }

    public static class getRepaymentIndexTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentIndexTotal_args> {
      public getRepaymentIndexTotal() {
        super("getRepaymentIndexTotal");
      }

      public getRepaymentIndexTotal_args getEmptyArgsInstance() {
        return new getRepaymentIndexTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentIndexTotal_result getResult(I iface, getRepaymentIndexTotal_args args) throws org.apache.thrift.TException {
        getRepaymentIndexTotal_result result = new getRepaymentIndexTotal_result();
        result.success = iface.getRepaymentIndexTotal(args.repaymentIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryRepayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRepayment_args> {
      public queryRepayment() {
        super("queryRepayment");
      }

      public queryRepayment_args getEmptyArgsInstance() {
        return new queryRepayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRepayment_result getResult(I iface, queryRepayment_args args) throws org.apache.thrift.TException {
        queryRepayment_result result = new queryRepayment_result();
        result.success = iface.queryRepayment(args.repaymentDTO);
        return result;
      }
    }

    public static class getRepaymentTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentTotal_args> {
      public getRepaymentTotal() {
        super("getRepaymentTotal");
      }

      public getRepaymentTotal_args getEmptyArgsInstance() {
        return new getRepaymentTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentTotal_result getResult(I iface, getRepaymentTotal_args args) throws org.apache.thrift.TException {
        getRepaymentTotal_result result = new getRepaymentTotal_result();
        result.success = iface.getRepaymentTotal(args.repaymentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addRepayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRepayment_args> {
      public addRepayment() {
        super("addRepayment");
      }

      public addRepayment_args getEmptyArgsInstance() {
        return new addRepayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRepayment_result getResult(I iface, addRepayment_args args) throws org.apache.thrift.TException {
        addRepayment_result result = new addRepayment_result();
        result.success = iface.addRepayment(args.repaymentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRepaymentById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentById_args> {
      public getRepaymentById() {
        super("getRepaymentById");
      }

      public getRepaymentById_args getEmptyArgsInstance() {
        return new getRepaymentById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentById_result getResult(I iface, getRepaymentById_args args) throws org.apache.thrift.TException {
        getRepaymentById_result result = new getRepaymentById_result();
        result.success = iface.getRepaymentById(args.pid);
        return result;
      }
    }

    public static class getRepaymentByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentByProjectId_args> {
      public getRepaymentByProjectId() {
        super("getRepaymentByProjectId");
      }

      public getRepaymentByProjectId_args getEmptyArgsInstance() {
        return new getRepaymentByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentByProjectId_result getResult(I iface, getRepaymentByProjectId_args args) throws org.apache.thrift.TException {
        getRepaymentByProjectId_result result = new getRepaymentByProjectId_result();
        result.success = iface.getRepaymentByProjectId(args.projectId);
        return result;
      }
    }

    public static class updateRepayment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateRepayment_args> {
      public updateRepayment() {
        super("updateRepayment");
      }

      public updateRepayment_args getEmptyArgsInstance() {
        return new updateRepayment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateRepayment_result getResult(I iface, updateRepayment_args args) throws org.apache.thrift.TException {
        updateRepayment_result result = new updateRepayment_result();
        result.success = iface.updateRepayment(args.repaymentDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryRepaymentRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRepaymentRecord_args> {
      public queryRepaymentRecord() {
        super("queryRepaymentRecord");
      }

      public queryRepaymentRecord_args getEmptyArgsInstance() {
        return new queryRepaymentRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRepaymentRecord_result getResult(I iface, queryRepaymentRecord_args args) throws org.apache.thrift.TException {
        queryRepaymentRecord_result result = new queryRepaymentRecord_result();
        result.success = iface.queryRepaymentRecord(args.repaymentRecordDTO);
        return result;
      }
    }

    public static class getRepaymentRecordTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentRecordTotal_args> {
      public getRepaymentRecordTotal() {
        super("getRepaymentRecordTotal");
      }

      public getRepaymentRecordTotal_args getEmptyArgsInstance() {
        return new getRepaymentRecordTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentRecordTotal_result getResult(I iface, getRepaymentRecordTotal_args args) throws org.apache.thrift.TException {
        getRepaymentRecordTotal_result result = new getRepaymentRecordTotal_result();
        result.success = iface.getRepaymentRecordTotal(args.repaymentRecordDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addRepaymentRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRepaymentRecord_args> {
      public addRepaymentRecord() {
        super("addRepaymentRecord");
      }

      public addRepaymentRecord_args getEmptyArgsInstance() {
        return new addRepaymentRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRepaymentRecord_result getResult(I iface, addRepaymentRecord_args args) throws org.apache.thrift.TException {
        addRepaymentRecord_result result = new addRepaymentRecord_result();
        result.success = iface.addRepaymentRecord(args.repaymentRecordDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRepaymentRecordById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentRecordById_args> {
      public getRepaymentRecordById() {
        super("getRepaymentRecordById");
      }

      public getRepaymentRecordById_args getEmptyArgsInstance() {
        return new getRepaymentRecordById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentRecordById_result getResult(I iface, getRepaymentRecordById_args args) throws org.apache.thrift.TException {
        getRepaymentRecordById_result result = new getRepaymentRecordById_result();
        result.success = iface.getRepaymentRecordById(args.pid);
        return result;
      }
    }

    public static class queryOverdueFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryOverdueFee_args> {
      public queryOverdueFee() {
        super("queryOverdueFee");
      }

      public queryOverdueFee_args getEmptyArgsInstance() {
        return new queryOverdueFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryOverdueFee_result getResult(I iface, queryOverdueFee_args args) throws org.apache.thrift.TException {
        queryOverdueFee_result result = new queryOverdueFee_result();
        result.success = iface.queryOverdueFee(args.overdueFeeDTO);
        return result;
      }
    }

    public static class getOverdueFeeTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverdueFeeTotal_args> {
      public getOverdueFeeTotal() {
        super("getOverdueFeeTotal");
      }

      public getOverdueFeeTotal_args getEmptyArgsInstance() {
        return new getOverdueFeeTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverdueFeeTotal_result getResult(I iface, getOverdueFeeTotal_args args) throws org.apache.thrift.TException {
        getOverdueFeeTotal_result result = new getOverdueFeeTotal_result();
        result.success = iface.getOverdueFeeTotal(args.overdueFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addOverdueFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addOverdueFee_args> {
      public addOverdueFee() {
        super("addOverdueFee");
      }

      public addOverdueFee_args getEmptyArgsInstance() {
        return new addOverdueFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addOverdueFee_result getResult(I iface, addOverdueFee_args args) throws org.apache.thrift.TException {
        addOverdueFee_result result = new addOverdueFee_result();
        result.success = iface.addOverdueFee(args.overdueFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getOverdueFeeById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverdueFeeById_args> {
      public getOverdueFeeById() {
        super("getOverdueFeeById");
      }

      public getOverdueFeeById_args getEmptyArgsInstance() {
        return new getOverdueFeeById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverdueFeeById_result getResult(I iface, getOverdueFeeById_args args) throws org.apache.thrift.TException {
        getOverdueFeeById_result result = new getOverdueFeeById_result();
        result.success = iface.getOverdueFeeById(args.pid);
        return result;
      }
    }

    public static class getOverdueFeeByProjectId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOverdueFeeByProjectId_args> {
      public getOverdueFeeByProjectId() {
        super("getOverdueFeeByProjectId");
      }

      public getOverdueFeeByProjectId_args getEmptyArgsInstance() {
        return new getOverdueFeeByProjectId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOverdueFeeByProjectId_result getResult(I iface, getOverdueFeeByProjectId_args args) throws org.apache.thrift.TException {
        getOverdueFeeByProjectId_result result = new getOverdueFeeByProjectId_result();
        result.success = iface.getOverdueFeeByProjectId(args.projectId);
        return result;
      }
    }

    public static class updateOverdueFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateOverdueFee_args> {
      public updateOverdueFee() {
        super("updateOverdueFee");
      }

      public updateOverdueFee_args getEmptyArgsInstance() {
        return new updateOverdueFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateOverdueFee_result getResult(I iface, updateOverdueFee_args args) throws org.apache.thrift.TException {
        updateOverdueFee_result result = new updateOverdueFee_result();
        result.success = iface.updateOverdueFee(args.overdueFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class confirmOverdueFee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmOverdueFee_args> {
      public confirmOverdueFee() {
        super("confirmOverdueFee");
      }

      public confirmOverdueFee_args getEmptyArgsInstance() {
        return new confirmOverdueFee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmOverdueFee_result getResult(I iface, confirmOverdueFee_args args) throws org.apache.thrift.TException {
        confirmOverdueFee_result result = new confirmOverdueFee_result();
        result.success = iface.confirmOverdueFee(args.overdueFeeDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryRepaymentInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRepaymentInfo_args> {
      public queryRepaymentInfo() {
        super("queryRepaymentInfo");
      }

      public queryRepaymentInfo_args getEmptyArgsInstance() {
        return new queryRepaymentInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRepaymentInfo_result getResult(I iface, queryRepaymentInfo_args args) throws org.apache.thrift.TException {
        queryRepaymentInfo_result result = new queryRepaymentInfo_result();
        result.success = iface.queryRepaymentInfo(args.repaymentIndexDTO);
        return result;
      }
    }

    public static class getRepaymentInfoTotal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRepaymentInfoTotal_args> {
      public getRepaymentInfoTotal() {
        super("getRepaymentInfoTotal");
      }

      public getRepaymentInfoTotal_args getEmptyArgsInstance() {
        return new getRepaymentInfoTotal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRepaymentInfoTotal_result getResult(I iface, getRepaymentInfoTotal_args args) throws org.apache.thrift.TException {
        getRepaymentInfoTotal_result result = new getRepaymentInfoTotal_result();
        result.success = iface.getRepaymentInfoTotal(args.repaymentIndexDTO);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryRepaymentIndex", new queryRepaymentIndex());
      processMap.put("getRepaymentIndexTotal", new getRepaymentIndexTotal());
      processMap.put("queryRepayment", new queryRepayment());
      processMap.put("getRepaymentTotal", new getRepaymentTotal());
      processMap.put("addRepayment", new addRepayment());
      processMap.put("getRepaymentById", new getRepaymentById());
      processMap.put("getRepaymentByProjectId", new getRepaymentByProjectId());
      processMap.put("updateRepayment", new updateRepayment());
      processMap.put("queryRepaymentRecord", new queryRepaymentRecord());
      processMap.put("getRepaymentRecordTotal", new getRepaymentRecordTotal());
      processMap.put("addRepaymentRecord", new addRepaymentRecord());
      processMap.put("getRepaymentRecordById", new getRepaymentRecordById());
      processMap.put("queryOverdueFee", new queryOverdueFee());
      processMap.put("getOverdueFeeTotal", new getOverdueFeeTotal());
      processMap.put("addOverdueFee", new addOverdueFee());
      processMap.put("getOverdueFeeById", new getOverdueFeeById());
      processMap.put("getOverdueFeeByProjectId", new getOverdueFeeByProjectId());
      processMap.put("updateOverdueFee", new updateOverdueFee());
      processMap.put("confirmOverdueFee", new confirmOverdueFee());
      processMap.put("queryRepaymentInfo", new queryRepaymentInfo());
      processMap.put("getRepaymentInfoTotal", new getRepaymentInfoTotal());
      return processMap;
    }

    public static class queryRepaymentIndex<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRepaymentIndex_args, List<RepaymentIndexDTO>> {
      public queryRepaymentIndex() {
        super("queryRepaymentIndex");
      }

      public queryRepaymentIndex_args getEmptyArgsInstance() {
        return new queryRepaymentIndex_args();
      }

      public AsyncMethodCallback<List<RepaymentIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepaymentIndexDTO>>() { 
          public void onComplete(List<RepaymentIndexDTO> o) {
            queryRepaymentIndex_result result = new queryRepaymentIndex_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRepaymentIndex_result result = new queryRepaymentIndex_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRepaymentIndex_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepaymentIndexDTO>> resultHandler) throws TException {
        iface.queryRepaymentIndex(args.repaymentIndexDTO,resultHandler);
      }
    }

    public static class getRepaymentIndexTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentIndexTotal_args, Integer> {
      public getRepaymentIndexTotal() {
        super("getRepaymentIndexTotal");
      }

      public getRepaymentIndexTotal_args getEmptyArgsInstance() {
        return new getRepaymentIndexTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRepaymentIndexTotal_result result = new getRepaymentIndexTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentIndexTotal_result result = new getRepaymentIndexTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentIndexTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRepaymentIndexTotal(args.repaymentIndexDTO,resultHandler);
      }
    }

    public static class queryRepayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRepayment_args, List<RepaymentDTO>> {
      public queryRepayment() {
        super("queryRepayment");
      }

      public queryRepayment_args getEmptyArgsInstance() {
        return new queryRepayment_args();
      }

      public AsyncMethodCallback<List<RepaymentDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepaymentDTO>>() { 
          public void onComplete(List<RepaymentDTO> o) {
            queryRepayment_result result = new queryRepayment_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRepayment_result result = new queryRepayment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRepayment_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepaymentDTO>> resultHandler) throws TException {
        iface.queryRepayment(args.repaymentDTO,resultHandler);
      }
    }

    public static class getRepaymentTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentTotal_args, Integer> {
      public getRepaymentTotal() {
        super("getRepaymentTotal");
      }

      public getRepaymentTotal_args getEmptyArgsInstance() {
        return new getRepaymentTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRepaymentTotal_result result = new getRepaymentTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentTotal_result result = new getRepaymentTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRepaymentTotal(args.repaymentDTO,resultHandler);
      }
    }

    public static class addRepayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRepayment_args, Boolean> {
      public addRepayment() {
        super("addRepayment");
      }

      public addRepayment_args getEmptyArgsInstance() {
        return new addRepayment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addRepayment_result result = new addRepayment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRepayment_result result = new addRepayment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRepayment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addRepayment(args.repaymentDTO,resultHandler);
      }
    }

    public static class getRepaymentById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentById_args, RepaymentDTO> {
      public getRepaymentById() {
        super("getRepaymentById");
      }

      public getRepaymentById_args getEmptyArgsInstance() {
        return new getRepaymentById_args();
      }

      public AsyncMethodCallback<RepaymentDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RepaymentDTO>() { 
          public void onComplete(RepaymentDTO o) {
            getRepaymentById_result result = new getRepaymentById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentById_result result = new getRepaymentById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentById_args args, org.apache.thrift.async.AsyncMethodCallback<RepaymentDTO> resultHandler) throws TException {
        iface.getRepaymentById(args.pid,resultHandler);
      }
    }

    public static class getRepaymentByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentByProjectId_args, RepaymentDTO> {
      public getRepaymentByProjectId() {
        super("getRepaymentByProjectId");
      }

      public getRepaymentByProjectId_args getEmptyArgsInstance() {
        return new getRepaymentByProjectId_args();
      }

      public AsyncMethodCallback<RepaymentDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RepaymentDTO>() { 
          public void onComplete(RepaymentDTO o) {
            getRepaymentByProjectId_result result = new getRepaymentByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentByProjectId_result result = new getRepaymentByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<RepaymentDTO> resultHandler) throws TException {
        iface.getRepaymentByProjectId(args.projectId,resultHandler);
      }
    }

    public static class updateRepayment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateRepayment_args, Boolean> {
      public updateRepayment() {
        super("updateRepayment");
      }

      public updateRepayment_args getEmptyArgsInstance() {
        return new updateRepayment_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateRepayment_result result = new updateRepayment_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateRepayment_result result = new updateRepayment_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateRepayment_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateRepayment(args.repaymentDTO,resultHandler);
      }
    }

    public static class queryRepaymentRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRepaymentRecord_args, List<RepaymentRecordDTO>> {
      public queryRepaymentRecord() {
        super("queryRepaymentRecord");
      }

      public queryRepaymentRecord_args getEmptyArgsInstance() {
        return new queryRepaymentRecord_args();
      }

      public AsyncMethodCallback<List<RepaymentRecordDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepaymentRecordDTO>>() { 
          public void onComplete(List<RepaymentRecordDTO> o) {
            queryRepaymentRecord_result result = new queryRepaymentRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRepaymentRecord_result result = new queryRepaymentRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRepaymentRecord_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepaymentRecordDTO>> resultHandler) throws TException {
        iface.queryRepaymentRecord(args.repaymentRecordDTO,resultHandler);
      }
    }

    public static class getRepaymentRecordTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentRecordTotal_args, Integer> {
      public getRepaymentRecordTotal() {
        super("getRepaymentRecordTotal");
      }

      public getRepaymentRecordTotal_args getEmptyArgsInstance() {
        return new getRepaymentRecordTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRepaymentRecordTotal_result result = new getRepaymentRecordTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentRecordTotal_result result = new getRepaymentRecordTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentRecordTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRepaymentRecordTotal(args.repaymentRecordDTO,resultHandler);
      }
    }

    public static class addRepaymentRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRepaymentRecord_args, Boolean> {
      public addRepaymentRecord() {
        super("addRepaymentRecord");
      }

      public addRepaymentRecord_args getEmptyArgsInstance() {
        return new addRepaymentRecord_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addRepaymentRecord_result result = new addRepaymentRecord_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRepaymentRecord_result result = new addRepaymentRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRepaymentRecord_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addRepaymentRecord(args.repaymentRecordDTO,resultHandler);
      }
    }

    public static class getRepaymentRecordById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentRecordById_args, RepaymentRecordDTO> {
      public getRepaymentRecordById() {
        super("getRepaymentRecordById");
      }

      public getRepaymentRecordById_args getEmptyArgsInstance() {
        return new getRepaymentRecordById_args();
      }

      public AsyncMethodCallback<RepaymentRecordDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RepaymentRecordDTO>() { 
          public void onComplete(RepaymentRecordDTO o) {
            getRepaymentRecordById_result result = new getRepaymentRecordById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentRecordById_result result = new getRepaymentRecordById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentRecordById_args args, org.apache.thrift.async.AsyncMethodCallback<RepaymentRecordDTO> resultHandler) throws TException {
        iface.getRepaymentRecordById(args.pid,resultHandler);
      }
    }

    public static class queryOverdueFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryOverdueFee_args, List<OverdueFeeDTO>> {
      public queryOverdueFee() {
        super("queryOverdueFee");
      }

      public queryOverdueFee_args getEmptyArgsInstance() {
        return new queryOverdueFee_args();
      }

      public AsyncMethodCallback<List<OverdueFeeDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<OverdueFeeDTO>>() { 
          public void onComplete(List<OverdueFeeDTO> o) {
            queryOverdueFee_result result = new queryOverdueFee_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryOverdueFee_result result = new queryOverdueFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryOverdueFee_args args, org.apache.thrift.async.AsyncMethodCallback<List<OverdueFeeDTO>> resultHandler) throws TException {
        iface.queryOverdueFee(args.overdueFeeDTO,resultHandler);
      }
    }

    public static class getOverdueFeeTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverdueFeeTotal_args, Integer> {
      public getOverdueFeeTotal() {
        super("getOverdueFeeTotal");
      }

      public getOverdueFeeTotal_args getEmptyArgsInstance() {
        return new getOverdueFeeTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getOverdueFeeTotal_result result = new getOverdueFeeTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverdueFeeTotal_result result = new getOverdueFeeTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverdueFeeTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getOverdueFeeTotal(args.overdueFeeDTO,resultHandler);
      }
    }

    public static class addOverdueFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addOverdueFee_args, Boolean> {
      public addOverdueFee() {
        super("addOverdueFee");
      }

      public addOverdueFee_args getEmptyArgsInstance() {
        return new addOverdueFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addOverdueFee_result result = new addOverdueFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addOverdueFee_result result = new addOverdueFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addOverdueFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addOverdueFee(args.overdueFeeDTO,resultHandler);
      }
    }

    public static class getOverdueFeeById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverdueFeeById_args, OverdueFeeDTO> {
      public getOverdueFeeById() {
        super("getOverdueFeeById");
      }

      public getOverdueFeeById_args getEmptyArgsInstance() {
        return new getOverdueFeeById_args();
      }

      public AsyncMethodCallback<OverdueFeeDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OverdueFeeDTO>() { 
          public void onComplete(OverdueFeeDTO o) {
            getOverdueFeeById_result result = new getOverdueFeeById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverdueFeeById_result result = new getOverdueFeeById_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverdueFeeById_args args, org.apache.thrift.async.AsyncMethodCallback<OverdueFeeDTO> resultHandler) throws TException {
        iface.getOverdueFeeById(args.pid,resultHandler);
      }
    }

    public static class getOverdueFeeByProjectId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOverdueFeeByProjectId_args, OverdueFeeDTO> {
      public getOverdueFeeByProjectId() {
        super("getOverdueFeeByProjectId");
      }

      public getOverdueFeeByProjectId_args getEmptyArgsInstance() {
        return new getOverdueFeeByProjectId_args();
      }

      public AsyncMethodCallback<OverdueFeeDTO> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OverdueFeeDTO>() { 
          public void onComplete(OverdueFeeDTO o) {
            getOverdueFeeByProjectId_result result = new getOverdueFeeByProjectId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOverdueFeeByProjectId_result result = new getOverdueFeeByProjectId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOverdueFeeByProjectId_args args, org.apache.thrift.async.AsyncMethodCallback<OverdueFeeDTO> resultHandler) throws TException {
        iface.getOverdueFeeByProjectId(args.projectId,resultHandler);
      }
    }

    public static class updateOverdueFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateOverdueFee_args, Boolean> {
      public updateOverdueFee() {
        super("updateOverdueFee");
      }

      public updateOverdueFee_args getEmptyArgsInstance() {
        return new updateOverdueFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateOverdueFee_result result = new updateOverdueFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateOverdueFee_result result = new updateOverdueFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateOverdueFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateOverdueFee(args.overdueFeeDTO,resultHandler);
      }
    }

    public static class confirmOverdueFee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmOverdueFee_args, Boolean> {
      public confirmOverdueFee() {
        super("confirmOverdueFee");
      }

      public confirmOverdueFee_args getEmptyArgsInstance() {
        return new confirmOverdueFee_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            confirmOverdueFee_result result = new confirmOverdueFee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmOverdueFee_result result = new confirmOverdueFee_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmOverdueFee_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.confirmOverdueFee(args.overdueFeeDTO,resultHandler);
      }
    }

    public static class queryRepaymentInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRepaymentInfo_args, List<RepaymentIndexDTO>> {
      public queryRepaymentInfo() {
        super("queryRepaymentInfo");
      }

      public queryRepaymentInfo_args getEmptyArgsInstance() {
        return new queryRepaymentInfo_args();
      }

      public AsyncMethodCallback<List<RepaymentIndexDTO>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RepaymentIndexDTO>>() { 
          public void onComplete(List<RepaymentIndexDTO> o) {
            queryRepaymentInfo_result result = new queryRepaymentInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRepaymentInfo_result result = new queryRepaymentInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRepaymentInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<RepaymentIndexDTO>> resultHandler) throws TException {
        iface.queryRepaymentInfo(args.repaymentIndexDTO,resultHandler);
      }
    }

    public static class getRepaymentInfoTotal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRepaymentInfoTotal_args, Integer> {
      public getRepaymentInfoTotal() {
        super("getRepaymentInfoTotal");
      }

      public getRepaymentInfoTotal_args getEmptyArgsInstance() {
        return new getRepaymentInfoTotal_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRepaymentInfoTotal_result result = new getRepaymentInfoTotal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRepaymentInfoTotal_result result = new getRepaymentInfoTotal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRepaymentInfoTotal_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRepaymentInfoTotal(args.repaymentIndexDTO,resultHandler);
      }
    }

  }

  public static class queryRepaymentIndex_args implements org.apache.thrift.TBase<queryRepaymentIndex_args, queryRepaymentIndex_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepaymentIndex_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepaymentIndex_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepaymentIndex_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepaymentIndex_argsTupleSchemeFactory());
    }

    public RepaymentIndexDTO repaymentIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_INDEX_DTO((short)1, "repaymentIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_INDEX_DTO
            return REPAYMENT_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepaymentIndex_args.class, metaDataMap);
    }

    public queryRepaymentIndex_args() {
    }

    public queryRepaymentIndex_args(
      RepaymentIndexDTO repaymentIndexDTO)
    {
      this();
      this.repaymentIndexDTO = repaymentIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepaymentIndex_args(queryRepaymentIndex_args other) {
      if (other.isSetRepaymentIndexDTO()) {
        this.repaymentIndexDTO = new RepaymentIndexDTO(other.repaymentIndexDTO);
      }
    }

    public queryRepaymentIndex_args deepCopy() {
      return new queryRepaymentIndex_args(this);
    }

    @Override
    public void clear() {
      this.repaymentIndexDTO = null;
    }

    public RepaymentIndexDTO getRepaymentIndexDTO() {
      return this.repaymentIndexDTO;
    }

    public queryRepaymentIndex_args setRepaymentIndexDTO(RepaymentIndexDTO repaymentIndexDTO) {
      this.repaymentIndexDTO = repaymentIndexDTO;
      return this;
    }

    public void unsetRepaymentIndexDTO() {
      this.repaymentIndexDTO = null;
    }

    /** Returns true if field repaymentIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentIndexDTO() {
      return this.repaymentIndexDTO != null;
    }

    public void setRepaymentIndexDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        if (value == null) {
          unsetRepaymentIndexDTO();
        } else {
          setRepaymentIndexDTO((RepaymentIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return getRepaymentIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return isSetRepaymentIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepaymentIndex_args)
        return this.equals((queryRepaymentIndex_args)that);
      return false;
    }

    public boolean equals(queryRepaymentIndex_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentIndexDTO = true && this.isSetRepaymentIndexDTO();
      boolean that_present_repaymentIndexDTO = true && that.isSetRepaymentIndexDTO();
      if (this_present_repaymentIndexDTO || that_present_repaymentIndexDTO) {
        if (!(this_present_repaymentIndexDTO && that_present_repaymentIndexDTO))
          return false;
        if (!this.repaymentIndexDTO.equals(that.repaymentIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentIndexDTO = true && (isSetRepaymentIndexDTO());
      list.add(present_repaymentIndexDTO);
      if (present_repaymentIndexDTO)
        list.add(repaymentIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepaymentIndex_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentIndexDTO()).compareTo(other.isSetRepaymentIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentIndexDTO, other.repaymentIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepaymentIndex_args(");
      boolean first = true;

      sb.append("repaymentIndexDTO:");
      if (this.repaymentIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentIndexDTO != null) {
        repaymentIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepaymentIndex_argsStandardSchemeFactory implements SchemeFactory {
      public queryRepaymentIndex_argsStandardScheme getScheme() {
        return new queryRepaymentIndex_argsStandardScheme();
      }
    }

    private static class queryRepaymentIndex_argsStandardScheme extends StandardScheme<queryRepaymentIndex_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepaymentIndex_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentIndexDTO = new RepaymentIndexDTO();
                struct.repaymentIndexDTO.read(iprot);
                struct.setRepaymentIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepaymentIndex_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentIndexDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_INDEX_DTO_FIELD_DESC);
          struct.repaymentIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepaymentIndex_argsTupleSchemeFactory implements SchemeFactory {
      public queryRepaymentIndex_argsTupleScheme getScheme() {
        return new queryRepaymentIndex_argsTupleScheme();
      }
    }

    private static class queryRepaymentIndex_argsTupleScheme extends TupleScheme<queryRepaymentIndex_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepaymentIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentIndexDTO()) {
          struct.repaymentIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepaymentIndex_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentIndexDTO = new RepaymentIndexDTO();
          struct.repaymentIndexDTO.read(iprot);
          struct.setRepaymentIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryRepaymentIndex_result implements org.apache.thrift.TBase<queryRepaymentIndex_result, queryRepaymentIndex_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepaymentIndex_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepaymentIndex_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepaymentIndex_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepaymentIndex_resultTupleSchemeFactory());
    }

    public List<RepaymentIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepaymentIndex_result.class, metaDataMap);
    }

    public queryRepaymentIndex_result() {
    }

    public queryRepaymentIndex_result(
      List<RepaymentIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepaymentIndex_result(queryRepaymentIndex_result other) {
      if (other.isSetSuccess()) {
        List<RepaymentIndexDTO> __this__success = new ArrayList<RepaymentIndexDTO>(other.success.size());
        for (RepaymentIndexDTO other_element : other.success) {
          __this__success.add(new RepaymentIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRepaymentIndex_result deepCopy() {
      return new queryRepaymentIndex_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepaymentIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepaymentIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepaymentIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<RepaymentIndexDTO> getSuccess() {
      return this.success;
    }

    public queryRepaymentIndex_result setSuccess(List<RepaymentIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepaymentIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepaymentIndex_result)
        return this.equals((queryRepaymentIndex_result)that);
      return false;
    }

    public boolean equals(queryRepaymentIndex_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepaymentIndex_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepaymentIndex_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepaymentIndex_resultStandardSchemeFactory implements SchemeFactory {
      public queryRepaymentIndex_resultStandardScheme getScheme() {
        return new queryRepaymentIndex_resultStandardScheme();
      }
    }

    private static class queryRepaymentIndex_resultStandardScheme extends StandardScheme<queryRepaymentIndex_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepaymentIndex_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list660 = iprot.readListBegin();
                  struct.success = new ArrayList<RepaymentIndexDTO>(_list660.size);
                  RepaymentIndexDTO _elem661;
                  for (int _i662 = 0; _i662 < _list660.size; ++_i662)
                  {
                    _elem661 = new RepaymentIndexDTO();
                    _elem661.read(iprot);
                    struct.success.add(_elem661);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepaymentIndex_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepaymentIndexDTO _iter663 : struct.success)
            {
              _iter663.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepaymentIndex_resultTupleSchemeFactory implements SchemeFactory {
      public queryRepaymentIndex_resultTupleScheme getScheme() {
        return new queryRepaymentIndex_resultTupleScheme();
      }
    }

    private static class queryRepaymentIndex_resultTupleScheme extends TupleScheme<queryRepaymentIndex_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepaymentIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepaymentIndexDTO _iter664 : struct.success)
            {
              _iter664.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepaymentIndex_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list665 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepaymentIndexDTO>(_list665.size);
            RepaymentIndexDTO _elem666;
            for (int _i667 = 0; _i667 < _list665.size; ++_i667)
            {
              _elem666 = new RepaymentIndexDTO();
              _elem666.read(iprot);
              struct.success.add(_elem666);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentIndexTotal_args implements org.apache.thrift.TBase<getRepaymentIndexTotal_args, getRepaymentIndexTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentIndexTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentIndexTotal_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentIndexTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentIndexTotal_argsTupleSchemeFactory());
    }

    public RepaymentIndexDTO repaymentIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_INDEX_DTO((short)1, "repaymentIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_INDEX_DTO
            return REPAYMENT_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentIndexTotal_args.class, metaDataMap);
    }

    public getRepaymentIndexTotal_args() {
    }

    public getRepaymentIndexTotal_args(
      RepaymentIndexDTO repaymentIndexDTO)
    {
      this();
      this.repaymentIndexDTO = repaymentIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentIndexTotal_args(getRepaymentIndexTotal_args other) {
      if (other.isSetRepaymentIndexDTO()) {
        this.repaymentIndexDTO = new RepaymentIndexDTO(other.repaymentIndexDTO);
      }
    }

    public getRepaymentIndexTotal_args deepCopy() {
      return new getRepaymentIndexTotal_args(this);
    }

    @Override
    public void clear() {
      this.repaymentIndexDTO = null;
    }

    public RepaymentIndexDTO getRepaymentIndexDTO() {
      return this.repaymentIndexDTO;
    }

    public getRepaymentIndexTotal_args setRepaymentIndexDTO(RepaymentIndexDTO repaymentIndexDTO) {
      this.repaymentIndexDTO = repaymentIndexDTO;
      return this;
    }

    public void unsetRepaymentIndexDTO() {
      this.repaymentIndexDTO = null;
    }

    /** Returns true if field repaymentIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentIndexDTO() {
      return this.repaymentIndexDTO != null;
    }

    public void setRepaymentIndexDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        if (value == null) {
          unsetRepaymentIndexDTO();
        } else {
          setRepaymentIndexDTO((RepaymentIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return getRepaymentIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return isSetRepaymentIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentIndexTotal_args)
        return this.equals((getRepaymentIndexTotal_args)that);
      return false;
    }

    public boolean equals(getRepaymentIndexTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentIndexDTO = true && this.isSetRepaymentIndexDTO();
      boolean that_present_repaymentIndexDTO = true && that.isSetRepaymentIndexDTO();
      if (this_present_repaymentIndexDTO || that_present_repaymentIndexDTO) {
        if (!(this_present_repaymentIndexDTO && that_present_repaymentIndexDTO))
          return false;
        if (!this.repaymentIndexDTO.equals(that.repaymentIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentIndexDTO = true && (isSetRepaymentIndexDTO());
      list.add(present_repaymentIndexDTO);
      if (present_repaymentIndexDTO)
        list.add(repaymentIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentIndexTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentIndexDTO()).compareTo(other.isSetRepaymentIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentIndexDTO, other.repaymentIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentIndexTotal_args(");
      boolean first = true;

      sb.append("repaymentIndexDTO:");
      if (this.repaymentIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentIndexDTO != null) {
        repaymentIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentIndexTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentIndexTotal_argsStandardScheme getScheme() {
        return new getRepaymentIndexTotal_argsStandardScheme();
      }
    }

    private static class getRepaymentIndexTotal_argsStandardScheme extends StandardScheme<getRepaymentIndexTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentIndexTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentIndexDTO = new RepaymentIndexDTO();
                struct.repaymentIndexDTO.read(iprot);
                struct.setRepaymentIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentIndexTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentIndexDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_INDEX_DTO_FIELD_DESC);
          struct.repaymentIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentIndexTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentIndexTotal_argsTupleScheme getScheme() {
        return new getRepaymentIndexTotal_argsTupleScheme();
      }
    }

    private static class getRepaymentIndexTotal_argsTupleScheme extends TupleScheme<getRepaymentIndexTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentIndexDTO()) {
          struct.repaymentIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentIndexTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentIndexDTO = new RepaymentIndexDTO();
          struct.repaymentIndexDTO.read(iprot);
          struct.setRepaymentIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentIndexTotal_result implements org.apache.thrift.TBase<getRepaymentIndexTotal_result, getRepaymentIndexTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentIndexTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentIndexTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentIndexTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentIndexTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentIndexTotal_result.class, metaDataMap);
    }

    public getRepaymentIndexTotal_result() {
    }

    public getRepaymentIndexTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentIndexTotal_result(getRepaymentIndexTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRepaymentIndexTotal_result deepCopy() {
      return new getRepaymentIndexTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRepaymentIndexTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentIndexTotal_result)
        return this.equals((getRepaymentIndexTotal_result)that);
      return false;
    }

    public boolean equals(getRepaymentIndexTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentIndexTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentIndexTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentIndexTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentIndexTotal_resultStandardScheme getScheme() {
        return new getRepaymentIndexTotal_resultStandardScheme();
      }
    }

    private static class getRepaymentIndexTotal_resultStandardScheme extends StandardScheme<getRepaymentIndexTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentIndexTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentIndexTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentIndexTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentIndexTotal_resultTupleScheme getScheme() {
        return new getRepaymentIndexTotal_resultTupleScheme();
      }
    }

    private static class getRepaymentIndexTotal_resultTupleScheme extends TupleScheme<getRepaymentIndexTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentIndexTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRepayment_args implements org.apache.thrift.TBase<queryRepayment_args, queryRepayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepayment_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepayment_argsTupleSchemeFactory());
    }

    public RepaymentDTO repaymentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_DTO((short)1, "repaymentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_DTO
            return REPAYMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepayment_args.class, metaDataMap);
    }

    public queryRepayment_args() {
    }

    public queryRepayment_args(
      RepaymentDTO repaymentDTO)
    {
      this();
      this.repaymentDTO = repaymentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepayment_args(queryRepayment_args other) {
      if (other.isSetRepaymentDTO()) {
        this.repaymentDTO = new RepaymentDTO(other.repaymentDTO);
      }
    }

    public queryRepayment_args deepCopy() {
      return new queryRepayment_args(this);
    }

    @Override
    public void clear() {
      this.repaymentDTO = null;
    }

    public RepaymentDTO getRepaymentDTO() {
      return this.repaymentDTO;
    }

    public queryRepayment_args setRepaymentDTO(RepaymentDTO repaymentDTO) {
      this.repaymentDTO = repaymentDTO;
      return this;
    }

    public void unsetRepaymentDTO() {
      this.repaymentDTO = null;
    }

    /** Returns true if field repaymentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentDTO() {
      return this.repaymentDTO != null;
    }

    public void setRepaymentDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_DTO:
        if (value == null) {
          unsetRepaymentDTO();
        } else {
          setRepaymentDTO((RepaymentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_DTO:
        return getRepaymentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_DTO:
        return isSetRepaymentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepayment_args)
        return this.equals((queryRepayment_args)that);
      return false;
    }

    public boolean equals(queryRepayment_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentDTO = true && this.isSetRepaymentDTO();
      boolean that_present_repaymentDTO = true && that.isSetRepaymentDTO();
      if (this_present_repaymentDTO || that_present_repaymentDTO) {
        if (!(this_present_repaymentDTO && that_present_repaymentDTO))
          return false;
        if (!this.repaymentDTO.equals(that.repaymentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentDTO = true && (isSetRepaymentDTO());
      list.add(present_repaymentDTO);
      if (present_repaymentDTO)
        list.add(repaymentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentDTO()).compareTo(other.isSetRepaymentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDTO, other.repaymentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepayment_args(");
      boolean first = true;

      sb.append("repaymentDTO:");
      if (this.repaymentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentDTO != null) {
        repaymentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepayment_argsStandardSchemeFactory implements SchemeFactory {
      public queryRepayment_argsStandardScheme getScheme() {
        return new queryRepayment_argsStandardScheme();
      }
    }

    private static class queryRepayment_argsStandardScheme extends StandardScheme<queryRepayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentDTO = new RepaymentDTO();
                struct.repaymentDTO.read(iprot);
                struct.setRepaymentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_DTO_FIELD_DESC);
          struct.repaymentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepayment_argsTupleSchemeFactory implements SchemeFactory {
      public queryRepayment_argsTupleScheme getScheme() {
        return new queryRepayment_argsTupleScheme();
      }
    }

    private static class queryRepayment_argsTupleScheme extends TupleScheme<queryRepayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentDTO()) {
          struct.repaymentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentDTO = new RepaymentDTO();
          struct.repaymentDTO.read(iprot);
          struct.setRepaymentDTOIsSet(true);
        }
      }
    }

  }

  public static class queryRepayment_result implements org.apache.thrift.TBase<queryRepayment_result, queryRepayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepayment_resultTupleSchemeFactory());
    }

    public List<RepaymentDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepayment_result.class, metaDataMap);
    }

    public queryRepayment_result() {
    }

    public queryRepayment_result(
      List<RepaymentDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepayment_result(queryRepayment_result other) {
      if (other.isSetSuccess()) {
        List<RepaymentDTO> __this__success = new ArrayList<RepaymentDTO>(other.success.size());
        for (RepaymentDTO other_element : other.success) {
          __this__success.add(new RepaymentDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRepayment_result deepCopy() {
      return new queryRepayment_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepaymentDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepaymentDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepaymentDTO>();
      }
      this.success.add(elem);
    }

    public List<RepaymentDTO> getSuccess() {
      return this.success;
    }

    public queryRepayment_result setSuccess(List<RepaymentDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepaymentDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepayment_result)
        return this.equals((queryRepayment_result)that);
      return false;
    }

    public boolean equals(queryRepayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepayment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepayment_resultStandardSchemeFactory implements SchemeFactory {
      public queryRepayment_resultStandardScheme getScheme() {
        return new queryRepayment_resultStandardScheme();
      }
    }

    private static class queryRepayment_resultStandardScheme extends StandardScheme<queryRepayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list668 = iprot.readListBegin();
                  struct.success = new ArrayList<RepaymentDTO>(_list668.size);
                  RepaymentDTO _elem669;
                  for (int _i670 = 0; _i670 < _list668.size; ++_i670)
                  {
                    _elem669 = new RepaymentDTO();
                    _elem669.read(iprot);
                    struct.success.add(_elem669);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepaymentDTO _iter671 : struct.success)
            {
              _iter671.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepayment_resultTupleSchemeFactory implements SchemeFactory {
      public queryRepayment_resultTupleScheme getScheme() {
        return new queryRepayment_resultTupleScheme();
      }
    }

    private static class queryRepayment_resultTupleScheme extends TupleScheme<queryRepayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepaymentDTO _iter672 : struct.success)
            {
              _iter672.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list673 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepaymentDTO>(_list673.size);
            RepaymentDTO _elem674;
            for (int _i675 = 0; _i675 < _list673.size; ++_i675)
            {
              _elem674 = new RepaymentDTO();
              _elem674.read(iprot);
              struct.success.add(_elem674);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentTotal_args implements org.apache.thrift.TBase<getRepaymentTotal_args, getRepaymentTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentTotal_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentTotal_argsTupleSchemeFactory());
    }

    public RepaymentDTO repaymentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_DTO((short)1, "repaymentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_DTO
            return REPAYMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentTotal_args.class, metaDataMap);
    }

    public getRepaymentTotal_args() {
    }

    public getRepaymentTotal_args(
      RepaymentDTO repaymentDTO)
    {
      this();
      this.repaymentDTO = repaymentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentTotal_args(getRepaymentTotal_args other) {
      if (other.isSetRepaymentDTO()) {
        this.repaymentDTO = new RepaymentDTO(other.repaymentDTO);
      }
    }

    public getRepaymentTotal_args deepCopy() {
      return new getRepaymentTotal_args(this);
    }

    @Override
    public void clear() {
      this.repaymentDTO = null;
    }

    public RepaymentDTO getRepaymentDTO() {
      return this.repaymentDTO;
    }

    public getRepaymentTotal_args setRepaymentDTO(RepaymentDTO repaymentDTO) {
      this.repaymentDTO = repaymentDTO;
      return this;
    }

    public void unsetRepaymentDTO() {
      this.repaymentDTO = null;
    }

    /** Returns true if field repaymentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentDTO() {
      return this.repaymentDTO != null;
    }

    public void setRepaymentDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_DTO:
        if (value == null) {
          unsetRepaymentDTO();
        } else {
          setRepaymentDTO((RepaymentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_DTO:
        return getRepaymentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_DTO:
        return isSetRepaymentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentTotal_args)
        return this.equals((getRepaymentTotal_args)that);
      return false;
    }

    public boolean equals(getRepaymentTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentDTO = true && this.isSetRepaymentDTO();
      boolean that_present_repaymentDTO = true && that.isSetRepaymentDTO();
      if (this_present_repaymentDTO || that_present_repaymentDTO) {
        if (!(this_present_repaymentDTO && that_present_repaymentDTO))
          return false;
        if (!this.repaymentDTO.equals(that.repaymentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentDTO = true && (isSetRepaymentDTO());
      list.add(present_repaymentDTO);
      if (present_repaymentDTO)
        list.add(repaymentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentDTO()).compareTo(other.isSetRepaymentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDTO, other.repaymentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentTotal_args(");
      boolean first = true;

      sb.append("repaymentDTO:");
      if (this.repaymentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentDTO != null) {
        repaymentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentTotal_argsStandardScheme getScheme() {
        return new getRepaymentTotal_argsStandardScheme();
      }
    }

    private static class getRepaymentTotal_argsStandardScheme extends StandardScheme<getRepaymentTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentDTO = new RepaymentDTO();
                struct.repaymentDTO.read(iprot);
                struct.setRepaymentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_DTO_FIELD_DESC);
          struct.repaymentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentTotal_argsTupleScheme getScheme() {
        return new getRepaymentTotal_argsTupleScheme();
      }
    }

    private static class getRepaymentTotal_argsTupleScheme extends TupleScheme<getRepaymentTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentDTO()) {
          struct.repaymentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentDTO = new RepaymentDTO();
          struct.repaymentDTO.read(iprot);
          struct.setRepaymentDTOIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentTotal_result implements org.apache.thrift.TBase<getRepaymentTotal_result, getRepaymentTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentTotal_result.class, metaDataMap);
    }

    public getRepaymentTotal_result() {
    }

    public getRepaymentTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentTotal_result(getRepaymentTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRepaymentTotal_result deepCopy() {
      return new getRepaymentTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRepaymentTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentTotal_result)
        return this.equals((getRepaymentTotal_result)that);
      return false;
    }

    public boolean equals(getRepaymentTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentTotal_resultStandardScheme getScheme() {
        return new getRepaymentTotal_resultStandardScheme();
      }
    }

    private static class getRepaymentTotal_resultStandardScheme extends StandardScheme<getRepaymentTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentTotal_resultTupleScheme getScheme() {
        return new getRepaymentTotal_resultTupleScheme();
      }
    }

    private static class getRepaymentTotal_resultTupleScheme extends TupleScheme<getRepaymentTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRepayment_args implements org.apache.thrift.TBase<addRepayment_args, addRepayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRepayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRepayment_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRepayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRepayment_argsTupleSchemeFactory());
    }

    public RepaymentDTO repaymentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_DTO((short)1, "repaymentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_DTO
            return REPAYMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRepayment_args.class, metaDataMap);
    }

    public addRepayment_args() {
    }

    public addRepayment_args(
      RepaymentDTO repaymentDTO)
    {
      this();
      this.repaymentDTO = repaymentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRepayment_args(addRepayment_args other) {
      if (other.isSetRepaymentDTO()) {
        this.repaymentDTO = new RepaymentDTO(other.repaymentDTO);
      }
    }

    public addRepayment_args deepCopy() {
      return new addRepayment_args(this);
    }

    @Override
    public void clear() {
      this.repaymentDTO = null;
    }

    public RepaymentDTO getRepaymentDTO() {
      return this.repaymentDTO;
    }

    public addRepayment_args setRepaymentDTO(RepaymentDTO repaymentDTO) {
      this.repaymentDTO = repaymentDTO;
      return this;
    }

    public void unsetRepaymentDTO() {
      this.repaymentDTO = null;
    }

    /** Returns true if field repaymentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentDTO() {
      return this.repaymentDTO != null;
    }

    public void setRepaymentDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_DTO:
        if (value == null) {
          unsetRepaymentDTO();
        } else {
          setRepaymentDTO((RepaymentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_DTO:
        return getRepaymentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_DTO:
        return isSetRepaymentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRepayment_args)
        return this.equals((addRepayment_args)that);
      return false;
    }

    public boolean equals(addRepayment_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentDTO = true && this.isSetRepaymentDTO();
      boolean that_present_repaymentDTO = true && that.isSetRepaymentDTO();
      if (this_present_repaymentDTO || that_present_repaymentDTO) {
        if (!(this_present_repaymentDTO && that_present_repaymentDTO))
          return false;
        if (!this.repaymentDTO.equals(that.repaymentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentDTO = true && (isSetRepaymentDTO());
      list.add(present_repaymentDTO);
      if (present_repaymentDTO)
        list.add(repaymentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRepayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentDTO()).compareTo(other.isSetRepaymentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDTO, other.repaymentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRepayment_args(");
      boolean first = true;

      sb.append("repaymentDTO:");
      if (this.repaymentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentDTO != null) {
        repaymentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRepayment_argsStandardSchemeFactory implements SchemeFactory {
      public addRepayment_argsStandardScheme getScheme() {
        return new addRepayment_argsStandardScheme();
      }
    }

    private static class addRepayment_argsStandardScheme extends StandardScheme<addRepayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRepayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentDTO = new RepaymentDTO();
                struct.repaymentDTO.read(iprot);
                struct.setRepaymentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRepayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_DTO_FIELD_DESC);
          struct.repaymentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRepayment_argsTupleSchemeFactory implements SchemeFactory {
      public addRepayment_argsTupleScheme getScheme() {
        return new addRepayment_argsTupleScheme();
      }
    }

    private static class addRepayment_argsTupleScheme extends TupleScheme<addRepayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentDTO()) {
          struct.repaymentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentDTO = new RepaymentDTO();
          struct.repaymentDTO.read(iprot);
          struct.setRepaymentDTOIsSet(true);
        }
      }
    }

  }

  public static class addRepayment_result implements org.apache.thrift.TBase<addRepayment_result, addRepayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRepayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRepayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRepayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRepayment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRepayment_result.class, metaDataMap);
    }

    public addRepayment_result() {
    }

    public addRepayment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRepayment_result(addRepayment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRepayment_result deepCopy() {
      return new addRepayment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addRepayment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRepayment_result)
        return this.equals((addRepayment_result)that);
      return false;
    }

    public boolean equals(addRepayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRepayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRepayment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRepayment_resultStandardSchemeFactory implements SchemeFactory {
      public addRepayment_resultStandardScheme getScheme() {
        return new addRepayment_resultStandardScheme();
      }
    }

    private static class addRepayment_resultStandardScheme extends StandardScheme<addRepayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRepayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRepayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRepayment_resultTupleSchemeFactory implements SchemeFactory {
      public addRepayment_resultTupleScheme getScheme() {
        return new addRepayment_resultTupleScheme();
      }
    }

    private static class addRepayment_resultTupleScheme extends TupleScheme<addRepayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentById_args implements org.apache.thrift.TBase<getRepaymentById_args, getRepaymentById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentById_args.class, metaDataMap);
    }

    public getRepaymentById_args() {
    }

    public getRepaymentById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentById_args(getRepaymentById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getRepaymentById_args deepCopy() {
      return new getRepaymentById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getRepaymentById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentById_args)
        return this.equals((getRepaymentById_args)that);
      return false;
    }

    public boolean equals(getRepaymentById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentById_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentById_argsStandardScheme getScheme() {
        return new getRepaymentById_argsStandardScheme();
      }
    }

    private static class getRepaymentById_argsStandardScheme extends StandardScheme<getRepaymentById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentById_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentById_argsTupleScheme getScheme() {
        return new getRepaymentById_argsTupleScheme();
      }
    }

    private static class getRepaymentById_argsTupleScheme extends TupleScheme<getRepaymentById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentById_result implements org.apache.thrift.TBase<getRepaymentById_result, getRepaymentById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentById_resultTupleSchemeFactory());
    }

    public RepaymentDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentById_result.class, metaDataMap);
    }

    public getRepaymentById_result() {
    }

    public getRepaymentById_result(
      RepaymentDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentById_result(getRepaymentById_result other) {
      if (other.isSetSuccess()) {
        this.success = new RepaymentDTO(other.success);
      }
    }

    public getRepaymentById_result deepCopy() {
      return new getRepaymentById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RepaymentDTO getSuccess() {
      return this.success;
    }

    public getRepaymentById_result setSuccess(RepaymentDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RepaymentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentById_result)
        return this.equals((getRepaymentById_result)that);
      return false;
    }

    public boolean equals(getRepaymentById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentById_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentById_resultStandardScheme getScheme() {
        return new getRepaymentById_resultStandardScheme();
      }
    }

    private static class getRepaymentById_resultStandardScheme extends StandardScheme<getRepaymentById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RepaymentDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentById_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentById_resultTupleScheme getScheme() {
        return new getRepaymentById_resultTupleScheme();
      }
    }

    private static class getRepaymentById_resultTupleScheme extends TupleScheme<getRepaymentById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RepaymentDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentByProjectId_args implements org.apache.thrift.TBase<getRepaymentByProjectId_args, getRepaymentByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentByProjectId_args.class, metaDataMap);
    }

    public getRepaymentByProjectId_args() {
    }

    public getRepaymentByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentByProjectId_args(getRepaymentByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getRepaymentByProjectId_args deepCopy() {
      return new getRepaymentByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getRepaymentByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentByProjectId_args)
        return this.equals((getRepaymentByProjectId_args)that);
      return false;
    }

    public boolean equals(getRepaymentByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentByProjectId_argsStandardScheme getScheme() {
        return new getRepaymentByProjectId_argsStandardScheme();
      }
    }

    private static class getRepaymentByProjectId_argsStandardScheme extends StandardScheme<getRepaymentByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentByProjectId_argsTupleScheme getScheme() {
        return new getRepaymentByProjectId_argsTupleScheme();
      }
    }

    private static class getRepaymentByProjectId_argsTupleScheme extends TupleScheme<getRepaymentByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentByProjectId_result implements org.apache.thrift.TBase<getRepaymentByProjectId_result, getRepaymentByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentByProjectId_resultTupleSchemeFactory());
    }

    public RepaymentDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentByProjectId_result.class, metaDataMap);
    }

    public getRepaymentByProjectId_result() {
    }

    public getRepaymentByProjectId_result(
      RepaymentDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentByProjectId_result(getRepaymentByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new RepaymentDTO(other.success);
      }
    }

    public getRepaymentByProjectId_result deepCopy() {
      return new getRepaymentByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RepaymentDTO getSuccess() {
      return this.success;
    }

    public getRepaymentByProjectId_result setSuccess(RepaymentDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RepaymentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentByProjectId_result)
        return this.equals((getRepaymentByProjectId_result)that);
      return false;
    }

    public boolean equals(getRepaymentByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentByProjectId_resultStandardScheme getScheme() {
        return new getRepaymentByProjectId_resultStandardScheme();
      }
    }

    private static class getRepaymentByProjectId_resultStandardScheme extends StandardScheme<getRepaymentByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RepaymentDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentByProjectId_resultTupleScheme getScheme() {
        return new getRepaymentByProjectId_resultTupleScheme();
      }
    }

    private static class getRepaymentByProjectId_resultTupleScheme extends TupleScheme<getRepaymentByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RepaymentDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateRepayment_args implements org.apache.thrift.TBase<updateRepayment_args, updateRepayment_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepayment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepayment_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepayment_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepayment_argsTupleSchemeFactory());
    }

    public RepaymentDTO repaymentDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_DTO((short)1, "repaymentDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_DTO
            return REPAYMENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepayment_args.class, metaDataMap);
    }

    public updateRepayment_args() {
    }

    public updateRepayment_args(
      RepaymentDTO repaymentDTO)
    {
      this();
      this.repaymentDTO = repaymentDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepayment_args(updateRepayment_args other) {
      if (other.isSetRepaymentDTO()) {
        this.repaymentDTO = new RepaymentDTO(other.repaymentDTO);
      }
    }

    public updateRepayment_args deepCopy() {
      return new updateRepayment_args(this);
    }

    @Override
    public void clear() {
      this.repaymentDTO = null;
    }

    public RepaymentDTO getRepaymentDTO() {
      return this.repaymentDTO;
    }

    public updateRepayment_args setRepaymentDTO(RepaymentDTO repaymentDTO) {
      this.repaymentDTO = repaymentDTO;
      return this;
    }

    public void unsetRepaymentDTO() {
      this.repaymentDTO = null;
    }

    /** Returns true if field repaymentDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentDTO() {
      return this.repaymentDTO != null;
    }

    public void setRepaymentDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_DTO:
        if (value == null) {
          unsetRepaymentDTO();
        } else {
          setRepaymentDTO((RepaymentDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_DTO:
        return getRepaymentDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_DTO:
        return isSetRepaymentDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepayment_args)
        return this.equals((updateRepayment_args)that);
      return false;
    }

    public boolean equals(updateRepayment_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentDTO = true && this.isSetRepaymentDTO();
      boolean that_present_repaymentDTO = true && that.isSetRepaymentDTO();
      if (this_present_repaymentDTO || that_present_repaymentDTO) {
        if (!(this_present_repaymentDTO && that_present_repaymentDTO))
          return false;
        if (!this.repaymentDTO.equals(that.repaymentDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentDTO = true && (isSetRepaymentDTO());
      list.add(present_repaymentDTO);
      if (present_repaymentDTO)
        list.add(repaymentDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepayment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentDTO()).compareTo(other.isSetRepaymentDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDTO, other.repaymentDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepayment_args(");
      boolean first = true;

      sb.append("repaymentDTO:");
      if (this.repaymentDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentDTO != null) {
        repaymentDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepayment_argsStandardSchemeFactory implements SchemeFactory {
      public updateRepayment_argsStandardScheme getScheme() {
        return new updateRepayment_argsStandardScheme();
      }
    }

    private static class updateRepayment_argsStandardScheme extends StandardScheme<updateRepayment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepayment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentDTO = new RepaymentDTO();
                struct.repaymentDTO.read(iprot);
                struct.setRepaymentDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepayment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_DTO_FIELD_DESC);
          struct.repaymentDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepayment_argsTupleSchemeFactory implements SchemeFactory {
      public updateRepayment_argsTupleScheme getScheme() {
        return new updateRepayment_argsTupleScheme();
      }
    }

    private static class updateRepayment_argsTupleScheme extends TupleScheme<updateRepayment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentDTO()) {
          struct.repaymentDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepayment_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentDTO = new RepaymentDTO();
          struct.repaymentDTO.read(iprot);
          struct.setRepaymentDTOIsSet(true);
        }
      }
    }

  }

  public static class updateRepayment_result implements org.apache.thrift.TBase<updateRepayment_result, updateRepayment_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateRepayment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateRepayment_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateRepayment_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateRepayment_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateRepayment_result.class, metaDataMap);
    }

    public updateRepayment_result() {
    }

    public updateRepayment_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRepayment_result(updateRepayment_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateRepayment_result deepCopy() {
      return new updateRepayment_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateRepayment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRepayment_result)
        return this.equals((updateRepayment_result)that);
      return false;
    }

    public boolean equals(updateRepayment_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateRepayment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateRepayment_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateRepayment_resultStandardSchemeFactory implements SchemeFactory {
      public updateRepayment_resultStandardScheme getScheme() {
        return new updateRepayment_resultStandardScheme();
      }
    }

    private static class updateRepayment_resultStandardScheme extends StandardScheme<updateRepayment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateRepayment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateRepayment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateRepayment_resultTupleSchemeFactory implements SchemeFactory {
      public updateRepayment_resultTupleScheme getScheme() {
        return new updateRepayment_resultTupleScheme();
      }
    }

    private static class updateRepayment_resultTupleScheme extends TupleScheme<updateRepayment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateRepayment_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRepaymentRecord_args implements org.apache.thrift.TBase<queryRepaymentRecord_args, queryRepaymentRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepaymentRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepaymentRecord_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_RECORD_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRecordDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepaymentRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepaymentRecord_argsTupleSchemeFactory());
    }

    public RepaymentRecordDTO repaymentRecordDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_RECORD_DTO((short)1, "repaymentRecordDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_RECORD_DTO
            return REPAYMENT_RECORD_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_RECORD_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentRecordDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentRecordDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepaymentRecord_args.class, metaDataMap);
    }

    public queryRepaymentRecord_args() {
    }

    public queryRepaymentRecord_args(
      RepaymentRecordDTO repaymentRecordDTO)
    {
      this();
      this.repaymentRecordDTO = repaymentRecordDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepaymentRecord_args(queryRepaymentRecord_args other) {
      if (other.isSetRepaymentRecordDTO()) {
        this.repaymentRecordDTO = new RepaymentRecordDTO(other.repaymentRecordDTO);
      }
    }

    public queryRepaymentRecord_args deepCopy() {
      return new queryRepaymentRecord_args(this);
    }

    @Override
    public void clear() {
      this.repaymentRecordDTO = null;
    }

    public RepaymentRecordDTO getRepaymentRecordDTO() {
      return this.repaymentRecordDTO;
    }

    public queryRepaymentRecord_args setRepaymentRecordDTO(RepaymentRecordDTO repaymentRecordDTO) {
      this.repaymentRecordDTO = repaymentRecordDTO;
      return this;
    }

    public void unsetRepaymentRecordDTO() {
      this.repaymentRecordDTO = null;
    }

    /** Returns true if field repaymentRecordDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentRecordDTO() {
      return this.repaymentRecordDTO != null;
    }

    public void setRepaymentRecordDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentRecordDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_RECORD_DTO:
        if (value == null) {
          unsetRepaymentRecordDTO();
        } else {
          setRepaymentRecordDTO((RepaymentRecordDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_RECORD_DTO:
        return getRepaymentRecordDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_RECORD_DTO:
        return isSetRepaymentRecordDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepaymentRecord_args)
        return this.equals((queryRepaymentRecord_args)that);
      return false;
    }

    public boolean equals(queryRepaymentRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentRecordDTO = true && this.isSetRepaymentRecordDTO();
      boolean that_present_repaymentRecordDTO = true && that.isSetRepaymentRecordDTO();
      if (this_present_repaymentRecordDTO || that_present_repaymentRecordDTO) {
        if (!(this_present_repaymentRecordDTO && that_present_repaymentRecordDTO))
          return false;
        if (!this.repaymentRecordDTO.equals(that.repaymentRecordDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentRecordDTO = true && (isSetRepaymentRecordDTO());
      list.add(present_repaymentRecordDTO);
      if (present_repaymentRecordDTO)
        list.add(repaymentRecordDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepaymentRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentRecordDTO()).compareTo(other.isSetRepaymentRecordDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentRecordDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRecordDTO, other.repaymentRecordDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepaymentRecord_args(");
      boolean first = true;

      sb.append("repaymentRecordDTO:");
      if (this.repaymentRecordDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentRecordDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentRecordDTO != null) {
        repaymentRecordDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepaymentRecord_argsStandardSchemeFactory implements SchemeFactory {
      public queryRepaymentRecord_argsStandardScheme getScheme() {
        return new queryRepaymentRecord_argsStandardScheme();
      }
    }

    private static class queryRepaymentRecord_argsStandardScheme extends StandardScheme<queryRepaymentRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepaymentRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_RECORD_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentRecordDTO = new RepaymentRecordDTO();
                struct.repaymentRecordDTO.read(iprot);
                struct.setRepaymentRecordDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepaymentRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentRecordDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_RECORD_DTO_FIELD_DESC);
          struct.repaymentRecordDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepaymentRecord_argsTupleSchemeFactory implements SchemeFactory {
      public queryRepaymentRecord_argsTupleScheme getScheme() {
        return new queryRepaymentRecord_argsTupleScheme();
      }
    }

    private static class queryRepaymentRecord_argsTupleScheme extends TupleScheme<queryRepaymentRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepaymentRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentRecordDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentRecordDTO()) {
          struct.repaymentRecordDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepaymentRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentRecordDTO = new RepaymentRecordDTO();
          struct.repaymentRecordDTO.read(iprot);
          struct.setRepaymentRecordDTOIsSet(true);
        }
      }
    }

  }

  public static class queryRepaymentRecord_result implements org.apache.thrift.TBase<queryRepaymentRecord_result, queryRepaymentRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepaymentRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepaymentRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepaymentRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepaymentRecord_resultTupleSchemeFactory());
    }

    public List<RepaymentRecordDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentRecordDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepaymentRecord_result.class, metaDataMap);
    }

    public queryRepaymentRecord_result() {
    }

    public queryRepaymentRecord_result(
      List<RepaymentRecordDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepaymentRecord_result(queryRepaymentRecord_result other) {
      if (other.isSetSuccess()) {
        List<RepaymentRecordDTO> __this__success = new ArrayList<RepaymentRecordDTO>(other.success.size());
        for (RepaymentRecordDTO other_element : other.success) {
          __this__success.add(new RepaymentRecordDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRepaymentRecord_result deepCopy() {
      return new queryRepaymentRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepaymentRecordDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepaymentRecordDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepaymentRecordDTO>();
      }
      this.success.add(elem);
    }

    public List<RepaymentRecordDTO> getSuccess() {
      return this.success;
    }

    public queryRepaymentRecord_result setSuccess(List<RepaymentRecordDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepaymentRecordDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepaymentRecord_result)
        return this.equals((queryRepaymentRecord_result)that);
      return false;
    }

    public boolean equals(queryRepaymentRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepaymentRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepaymentRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepaymentRecord_resultStandardSchemeFactory implements SchemeFactory {
      public queryRepaymentRecord_resultStandardScheme getScheme() {
        return new queryRepaymentRecord_resultStandardScheme();
      }
    }

    private static class queryRepaymentRecord_resultStandardScheme extends StandardScheme<queryRepaymentRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepaymentRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list676 = iprot.readListBegin();
                  struct.success = new ArrayList<RepaymentRecordDTO>(_list676.size);
                  RepaymentRecordDTO _elem677;
                  for (int _i678 = 0; _i678 < _list676.size; ++_i678)
                  {
                    _elem677 = new RepaymentRecordDTO();
                    _elem677.read(iprot);
                    struct.success.add(_elem677);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepaymentRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepaymentRecordDTO _iter679 : struct.success)
            {
              _iter679.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepaymentRecord_resultTupleSchemeFactory implements SchemeFactory {
      public queryRepaymentRecord_resultTupleScheme getScheme() {
        return new queryRepaymentRecord_resultTupleScheme();
      }
    }

    private static class queryRepaymentRecord_resultTupleScheme extends TupleScheme<queryRepaymentRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepaymentRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepaymentRecordDTO _iter680 : struct.success)
            {
              _iter680.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepaymentRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list681 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepaymentRecordDTO>(_list681.size);
            RepaymentRecordDTO _elem682;
            for (int _i683 = 0; _i683 < _list681.size; ++_i683)
            {
              _elem682 = new RepaymentRecordDTO();
              _elem682.read(iprot);
              struct.success.add(_elem682);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentRecordTotal_args implements org.apache.thrift.TBase<getRepaymentRecordTotal_args, getRepaymentRecordTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentRecordTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentRecordTotal_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_RECORD_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRecordDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentRecordTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentRecordTotal_argsTupleSchemeFactory());
    }

    public RepaymentRecordDTO repaymentRecordDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_RECORD_DTO((short)1, "repaymentRecordDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_RECORD_DTO
            return REPAYMENT_RECORD_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_RECORD_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentRecordDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentRecordDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentRecordTotal_args.class, metaDataMap);
    }

    public getRepaymentRecordTotal_args() {
    }

    public getRepaymentRecordTotal_args(
      RepaymentRecordDTO repaymentRecordDTO)
    {
      this();
      this.repaymentRecordDTO = repaymentRecordDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentRecordTotal_args(getRepaymentRecordTotal_args other) {
      if (other.isSetRepaymentRecordDTO()) {
        this.repaymentRecordDTO = new RepaymentRecordDTO(other.repaymentRecordDTO);
      }
    }

    public getRepaymentRecordTotal_args deepCopy() {
      return new getRepaymentRecordTotal_args(this);
    }

    @Override
    public void clear() {
      this.repaymentRecordDTO = null;
    }

    public RepaymentRecordDTO getRepaymentRecordDTO() {
      return this.repaymentRecordDTO;
    }

    public getRepaymentRecordTotal_args setRepaymentRecordDTO(RepaymentRecordDTO repaymentRecordDTO) {
      this.repaymentRecordDTO = repaymentRecordDTO;
      return this;
    }

    public void unsetRepaymentRecordDTO() {
      this.repaymentRecordDTO = null;
    }

    /** Returns true if field repaymentRecordDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentRecordDTO() {
      return this.repaymentRecordDTO != null;
    }

    public void setRepaymentRecordDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentRecordDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_RECORD_DTO:
        if (value == null) {
          unsetRepaymentRecordDTO();
        } else {
          setRepaymentRecordDTO((RepaymentRecordDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_RECORD_DTO:
        return getRepaymentRecordDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_RECORD_DTO:
        return isSetRepaymentRecordDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentRecordTotal_args)
        return this.equals((getRepaymentRecordTotal_args)that);
      return false;
    }

    public boolean equals(getRepaymentRecordTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentRecordDTO = true && this.isSetRepaymentRecordDTO();
      boolean that_present_repaymentRecordDTO = true && that.isSetRepaymentRecordDTO();
      if (this_present_repaymentRecordDTO || that_present_repaymentRecordDTO) {
        if (!(this_present_repaymentRecordDTO && that_present_repaymentRecordDTO))
          return false;
        if (!this.repaymentRecordDTO.equals(that.repaymentRecordDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentRecordDTO = true && (isSetRepaymentRecordDTO());
      list.add(present_repaymentRecordDTO);
      if (present_repaymentRecordDTO)
        list.add(repaymentRecordDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentRecordTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentRecordDTO()).compareTo(other.isSetRepaymentRecordDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentRecordDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRecordDTO, other.repaymentRecordDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentRecordTotal_args(");
      boolean first = true;

      sb.append("repaymentRecordDTO:");
      if (this.repaymentRecordDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentRecordDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentRecordDTO != null) {
        repaymentRecordDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentRecordTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentRecordTotal_argsStandardScheme getScheme() {
        return new getRepaymentRecordTotal_argsStandardScheme();
      }
    }

    private static class getRepaymentRecordTotal_argsStandardScheme extends StandardScheme<getRepaymentRecordTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentRecordTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_RECORD_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentRecordDTO = new RepaymentRecordDTO();
                struct.repaymentRecordDTO.read(iprot);
                struct.setRepaymentRecordDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentRecordTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentRecordDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_RECORD_DTO_FIELD_DESC);
          struct.repaymentRecordDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentRecordTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentRecordTotal_argsTupleScheme getScheme() {
        return new getRepaymentRecordTotal_argsTupleScheme();
      }
    }

    private static class getRepaymentRecordTotal_argsTupleScheme extends TupleScheme<getRepaymentRecordTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentRecordDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentRecordDTO()) {
          struct.repaymentRecordDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentRecordDTO = new RepaymentRecordDTO();
          struct.repaymentRecordDTO.read(iprot);
          struct.setRepaymentRecordDTOIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentRecordTotal_result implements org.apache.thrift.TBase<getRepaymentRecordTotal_result, getRepaymentRecordTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentRecordTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentRecordTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentRecordTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentRecordTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentRecordTotal_result.class, metaDataMap);
    }

    public getRepaymentRecordTotal_result() {
    }

    public getRepaymentRecordTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentRecordTotal_result(getRepaymentRecordTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRepaymentRecordTotal_result deepCopy() {
      return new getRepaymentRecordTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRepaymentRecordTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentRecordTotal_result)
        return this.equals((getRepaymentRecordTotal_result)that);
      return false;
    }

    public boolean equals(getRepaymentRecordTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentRecordTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentRecordTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentRecordTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentRecordTotal_resultStandardScheme getScheme() {
        return new getRepaymentRecordTotal_resultStandardScheme();
      }
    }

    private static class getRepaymentRecordTotal_resultStandardScheme extends StandardScheme<getRepaymentRecordTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentRecordTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentRecordTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentRecordTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentRecordTotal_resultTupleScheme getScheme() {
        return new getRepaymentRecordTotal_resultTupleScheme();
      }
    }

    private static class getRepaymentRecordTotal_resultTupleScheme extends TupleScheme<getRepaymentRecordTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRepaymentRecord_args implements org.apache.thrift.TBase<addRepaymentRecord_args, addRepaymentRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRepaymentRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRepaymentRecord_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_RECORD_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRecordDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRepaymentRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRepaymentRecord_argsTupleSchemeFactory());
    }

    public RepaymentRecordDTO repaymentRecordDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_RECORD_DTO((short)1, "repaymentRecordDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_RECORD_DTO
            return REPAYMENT_RECORD_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_RECORD_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentRecordDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentRecordDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRepaymentRecord_args.class, metaDataMap);
    }

    public addRepaymentRecord_args() {
    }

    public addRepaymentRecord_args(
      RepaymentRecordDTO repaymentRecordDTO)
    {
      this();
      this.repaymentRecordDTO = repaymentRecordDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRepaymentRecord_args(addRepaymentRecord_args other) {
      if (other.isSetRepaymentRecordDTO()) {
        this.repaymentRecordDTO = new RepaymentRecordDTO(other.repaymentRecordDTO);
      }
    }

    public addRepaymentRecord_args deepCopy() {
      return new addRepaymentRecord_args(this);
    }

    @Override
    public void clear() {
      this.repaymentRecordDTO = null;
    }

    public RepaymentRecordDTO getRepaymentRecordDTO() {
      return this.repaymentRecordDTO;
    }

    public addRepaymentRecord_args setRepaymentRecordDTO(RepaymentRecordDTO repaymentRecordDTO) {
      this.repaymentRecordDTO = repaymentRecordDTO;
      return this;
    }

    public void unsetRepaymentRecordDTO() {
      this.repaymentRecordDTO = null;
    }

    /** Returns true if field repaymentRecordDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentRecordDTO() {
      return this.repaymentRecordDTO != null;
    }

    public void setRepaymentRecordDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentRecordDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_RECORD_DTO:
        if (value == null) {
          unsetRepaymentRecordDTO();
        } else {
          setRepaymentRecordDTO((RepaymentRecordDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_RECORD_DTO:
        return getRepaymentRecordDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_RECORD_DTO:
        return isSetRepaymentRecordDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRepaymentRecord_args)
        return this.equals((addRepaymentRecord_args)that);
      return false;
    }

    public boolean equals(addRepaymentRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentRecordDTO = true && this.isSetRepaymentRecordDTO();
      boolean that_present_repaymentRecordDTO = true && that.isSetRepaymentRecordDTO();
      if (this_present_repaymentRecordDTO || that_present_repaymentRecordDTO) {
        if (!(this_present_repaymentRecordDTO && that_present_repaymentRecordDTO))
          return false;
        if (!this.repaymentRecordDTO.equals(that.repaymentRecordDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentRecordDTO = true && (isSetRepaymentRecordDTO());
      list.add(present_repaymentRecordDTO);
      if (present_repaymentRecordDTO)
        list.add(repaymentRecordDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRepaymentRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentRecordDTO()).compareTo(other.isSetRepaymentRecordDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentRecordDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRecordDTO, other.repaymentRecordDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRepaymentRecord_args(");
      boolean first = true;

      sb.append("repaymentRecordDTO:");
      if (this.repaymentRecordDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentRecordDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentRecordDTO != null) {
        repaymentRecordDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRepaymentRecord_argsStandardSchemeFactory implements SchemeFactory {
      public addRepaymentRecord_argsStandardScheme getScheme() {
        return new addRepaymentRecord_argsStandardScheme();
      }
    }

    private static class addRepaymentRecord_argsStandardScheme extends StandardScheme<addRepaymentRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRepaymentRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_RECORD_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentRecordDTO = new RepaymentRecordDTO();
                struct.repaymentRecordDTO.read(iprot);
                struct.setRepaymentRecordDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRepaymentRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentRecordDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_RECORD_DTO_FIELD_DESC);
          struct.repaymentRecordDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRepaymentRecord_argsTupleSchemeFactory implements SchemeFactory {
      public addRepaymentRecord_argsTupleScheme getScheme() {
        return new addRepaymentRecord_argsTupleScheme();
      }
    }

    private static class addRepaymentRecord_argsTupleScheme extends TupleScheme<addRepaymentRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRepaymentRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentRecordDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentRecordDTO()) {
          struct.repaymentRecordDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRepaymentRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentRecordDTO = new RepaymentRecordDTO();
          struct.repaymentRecordDTO.read(iprot);
          struct.setRepaymentRecordDTOIsSet(true);
        }
      }
    }

  }

  public static class addRepaymentRecord_result implements org.apache.thrift.TBase<addRepaymentRecord_result, addRepaymentRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRepaymentRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRepaymentRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRepaymentRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRepaymentRecord_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRepaymentRecord_result.class, metaDataMap);
    }

    public addRepaymentRecord_result() {
    }

    public addRepaymentRecord_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRepaymentRecord_result(addRepaymentRecord_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addRepaymentRecord_result deepCopy() {
      return new addRepaymentRecord_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addRepaymentRecord_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRepaymentRecord_result)
        return this.equals((addRepaymentRecord_result)that);
      return false;
    }

    public boolean equals(addRepaymentRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRepaymentRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRepaymentRecord_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRepaymentRecord_resultStandardSchemeFactory implements SchemeFactory {
      public addRepaymentRecord_resultStandardScheme getScheme() {
        return new addRepaymentRecord_resultStandardScheme();
      }
    }

    private static class addRepaymentRecord_resultStandardScheme extends StandardScheme<addRepaymentRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRepaymentRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRepaymentRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRepaymentRecord_resultTupleSchemeFactory implements SchemeFactory {
      public addRepaymentRecord_resultTupleScheme getScheme() {
        return new addRepaymentRecord_resultTupleScheme();
      }
    }

    private static class addRepaymentRecord_resultTupleScheme extends TupleScheme<addRepaymentRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRepaymentRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRepaymentRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentRecordById_args implements org.apache.thrift.TBase<getRepaymentRecordById_args, getRepaymentRecordById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentRecordById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentRecordById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentRecordById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentRecordById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentRecordById_args.class, metaDataMap);
    }

    public getRepaymentRecordById_args() {
    }

    public getRepaymentRecordById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentRecordById_args(getRepaymentRecordById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getRepaymentRecordById_args deepCopy() {
      return new getRepaymentRecordById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getRepaymentRecordById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentRecordById_args)
        return this.equals((getRepaymentRecordById_args)that);
      return false;
    }

    public boolean equals(getRepaymentRecordById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentRecordById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentRecordById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentRecordById_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentRecordById_argsStandardScheme getScheme() {
        return new getRepaymentRecordById_argsStandardScheme();
      }
    }

    private static class getRepaymentRecordById_argsStandardScheme extends StandardScheme<getRepaymentRecordById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentRecordById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentRecordById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentRecordById_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentRecordById_argsTupleScheme getScheme() {
        return new getRepaymentRecordById_argsTupleScheme();
      }
    }

    private static class getRepaymentRecordById_argsTupleScheme extends TupleScheme<getRepaymentRecordById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentRecordById_result implements org.apache.thrift.TBase<getRepaymentRecordById_result, getRepaymentRecordById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentRecordById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentRecordById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentRecordById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentRecordById_resultTupleSchemeFactory());
    }

    public RepaymentRecordDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentRecordDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentRecordById_result.class, metaDataMap);
    }

    public getRepaymentRecordById_result() {
    }

    public getRepaymentRecordById_result(
      RepaymentRecordDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentRecordById_result(getRepaymentRecordById_result other) {
      if (other.isSetSuccess()) {
        this.success = new RepaymentRecordDTO(other.success);
      }
    }

    public getRepaymentRecordById_result deepCopy() {
      return new getRepaymentRecordById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RepaymentRecordDTO getSuccess() {
      return this.success;
    }

    public getRepaymentRecordById_result setSuccess(RepaymentRecordDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RepaymentRecordDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentRecordById_result)
        return this.equals((getRepaymentRecordById_result)that);
      return false;
    }

    public boolean equals(getRepaymentRecordById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentRecordById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentRecordById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentRecordById_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentRecordById_resultStandardScheme getScheme() {
        return new getRepaymentRecordById_resultStandardScheme();
      }
    }

    private static class getRepaymentRecordById_resultStandardScheme extends StandardScheme<getRepaymentRecordById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentRecordById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RepaymentRecordDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentRecordById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentRecordById_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentRecordById_resultTupleScheme getScheme() {
        return new getRepaymentRecordById_resultTupleScheme();
      }
    }

    private static class getRepaymentRecordById_resultTupleScheme extends TupleScheme<getRepaymentRecordById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentRecordById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RepaymentRecordDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryOverdueFee_args implements org.apache.thrift.TBase<queryOverdueFee_args, queryOverdueFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryOverdueFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOverdueFee_args");

    private static final org.apache.thrift.protocol.TField OVERDUE_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOverdueFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOverdueFee_argsTupleSchemeFactory());
    }

    public OverdueFeeDTO overdueFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OVERDUE_FEE_DTO((short)1, "overdueFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OVERDUE_FEE_DTO
            return OVERDUE_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OVERDUE_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOverdueFee_args.class, metaDataMap);
    }

    public queryOverdueFee_args() {
    }

    public queryOverdueFee_args(
      OverdueFeeDTO overdueFeeDTO)
    {
      this();
      this.overdueFeeDTO = overdueFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOverdueFee_args(queryOverdueFee_args other) {
      if (other.isSetOverdueFeeDTO()) {
        this.overdueFeeDTO = new OverdueFeeDTO(other.overdueFeeDTO);
      }
    }

    public queryOverdueFee_args deepCopy() {
      return new queryOverdueFee_args(this);
    }

    @Override
    public void clear() {
      this.overdueFeeDTO = null;
    }

    public OverdueFeeDTO getOverdueFeeDTO() {
      return this.overdueFeeDTO;
    }

    public queryOverdueFee_args setOverdueFeeDTO(OverdueFeeDTO overdueFeeDTO) {
      this.overdueFeeDTO = overdueFeeDTO;
      return this;
    }

    public void unsetOverdueFeeDTO() {
      this.overdueFeeDTO = null;
    }

    /** Returns true if field overdueFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetOverdueFeeDTO() {
      return this.overdueFeeDTO != null;
    }

    public void setOverdueFeeDTOIsSet(boolean value) {
      if (!value) {
        this.overdueFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        if (value == null) {
          unsetOverdueFeeDTO();
        } else {
          setOverdueFeeDTO((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        return getOverdueFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OVERDUE_FEE_DTO:
        return isSetOverdueFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOverdueFee_args)
        return this.equals((queryOverdueFee_args)that);
      return false;
    }

    public boolean equals(queryOverdueFee_args that) {
      if (that == null)
        return false;

      boolean this_present_overdueFeeDTO = true && this.isSetOverdueFeeDTO();
      boolean that_present_overdueFeeDTO = true && that.isSetOverdueFeeDTO();
      if (this_present_overdueFeeDTO || that_present_overdueFeeDTO) {
        if (!(this_present_overdueFeeDTO && that_present_overdueFeeDTO))
          return false;
        if (!this.overdueFeeDTO.equals(that.overdueFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_overdueFeeDTO = true && (isSetOverdueFeeDTO());
      list.add(present_overdueFeeDTO);
      if (present_overdueFeeDTO)
        list.add(overdueFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOverdueFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOverdueFeeDTO()).compareTo(other.isSetOverdueFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverdueFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeDTO, other.overdueFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOverdueFee_args(");
      boolean first = true;

      sb.append("overdueFeeDTO:");
      if (this.overdueFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.overdueFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (overdueFeeDTO != null) {
        overdueFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOverdueFee_argsStandardSchemeFactory implements SchemeFactory {
      public queryOverdueFee_argsStandardScheme getScheme() {
        return new queryOverdueFee_argsStandardScheme();
      }
    }

    private static class queryOverdueFee_argsStandardScheme extends StandardScheme<queryOverdueFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOverdueFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OVERDUE_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.overdueFeeDTO = new OverdueFeeDTO();
                struct.overdueFeeDTO.read(iprot);
                struct.setOverdueFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOverdueFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.overdueFeeDTO != null) {
          oprot.writeFieldBegin(OVERDUE_FEE_DTO_FIELD_DESC);
          struct.overdueFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOverdueFee_argsTupleSchemeFactory implements SchemeFactory {
      public queryOverdueFee_argsTupleScheme getScheme() {
        return new queryOverdueFee_argsTupleScheme();
      }
    }

    private static class queryOverdueFee_argsTupleScheme extends TupleScheme<queryOverdueFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOverdueFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOverdueFeeDTO()) {
          struct.overdueFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.overdueFeeDTO = new OverdueFeeDTO();
          struct.overdueFeeDTO.read(iprot);
          struct.setOverdueFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class queryOverdueFee_result implements org.apache.thrift.TBase<queryOverdueFee_result, queryOverdueFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryOverdueFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryOverdueFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryOverdueFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryOverdueFee_resultTupleSchemeFactory());
    }

    public List<OverdueFeeDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryOverdueFee_result.class, metaDataMap);
    }

    public queryOverdueFee_result() {
    }

    public queryOverdueFee_result(
      List<OverdueFeeDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryOverdueFee_result(queryOverdueFee_result other) {
      if (other.isSetSuccess()) {
        List<OverdueFeeDTO> __this__success = new ArrayList<OverdueFeeDTO>(other.success.size());
        for (OverdueFeeDTO other_element : other.success) {
          __this__success.add(new OverdueFeeDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryOverdueFee_result deepCopy() {
      return new queryOverdueFee_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<OverdueFeeDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(OverdueFeeDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<OverdueFeeDTO>();
      }
      this.success.add(elem);
    }

    public List<OverdueFeeDTO> getSuccess() {
      return this.success;
    }

    public queryOverdueFee_result setSuccess(List<OverdueFeeDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<OverdueFeeDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryOverdueFee_result)
        return this.equals((queryOverdueFee_result)that);
      return false;
    }

    public boolean equals(queryOverdueFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryOverdueFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryOverdueFee_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryOverdueFee_resultStandardSchemeFactory implements SchemeFactory {
      public queryOverdueFee_resultStandardScheme getScheme() {
        return new queryOverdueFee_resultStandardScheme();
      }
    }

    private static class queryOverdueFee_resultStandardScheme extends StandardScheme<queryOverdueFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryOverdueFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list684 = iprot.readListBegin();
                  struct.success = new ArrayList<OverdueFeeDTO>(_list684.size);
                  OverdueFeeDTO _elem685;
                  for (int _i686 = 0; _i686 < _list684.size; ++_i686)
                  {
                    _elem685 = new OverdueFeeDTO();
                    _elem685.read(iprot);
                    struct.success.add(_elem685);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryOverdueFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (OverdueFeeDTO _iter687 : struct.success)
            {
              _iter687.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryOverdueFee_resultTupleSchemeFactory implements SchemeFactory {
      public queryOverdueFee_resultTupleScheme getScheme() {
        return new queryOverdueFee_resultTupleScheme();
      }
    }

    private static class queryOverdueFee_resultTupleScheme extends TupleScheme<queryOverdueFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (OverdueFeeDTO _iter688 : struct.success)
            {
              _iter688.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list689 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<OverdueFeeDTO>(_list689.size);
            OverdueFeeDTO _elem690;
            for (int _i691 = 0; _i691 < _list689.size; ++_i691)
            {
              _elem690 = new OverdueFeeDTO();
              _elem690.read(iprot);
              struct.success.add(_elem690);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverdueFeeTotal_args implements org.apache.thrift.TBase<getOverdueFeeTotal_args, getOverdueFeeTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueFeeTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueFeeTotal_args");

    private static final org.apache.thrift.protocol.TField OVERDUE_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueFeeTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueFeeTotal_argsTupleSchemeFactory());
    }

    public OverdueFeeDTO overdueFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OVERDUE_FEE_DTO((short)1, "overdueFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OVERDUE_FEE_DTO
            return OVERDUE_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OVERDUE_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueFeeTotal_args.class, metaDataMap);
    }

    public getOverdueFeeTotal_args() {
    }

    public getOverdueFeeTotal_args(
      OverdueFeeDTO overdueFeeDTO)
    {
      this();
      this.overdueFeeDTO = overdueFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueFeeTotal_args(getOverdueFeeTotal_args other) {
      if (other.isSetOverdueFeeDTO()) {
        this.overdueFeeDTO = new OverdueFeeDTO(other.overdueFeeDTO);
      }
    }

    public getOverdueFeeTotal_args deepCopy() {
      return new getOverdueFeeTotal_args(this);
    }

    @Override
    public void clear() {
      this.overdueFeeDTO = null;
    }

    public OverdueFeeDTO getOverdueFeeDTO() {
      return this.overdueFeeDTO;
    }

    public getOverdueFeeTotal_args setOverdueFeeDTO(OverdueFeeDTO overdueFeeDTO) {
      this.overdueFeeDTO = overdueFeeDTO;
      return this;
    }

    public void unsetOverdueFeeDTO() {
      this.overdueFeeDTO = null;
    }

    /** Returns true if field overdueFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetOverdueFeeDTO() {
      return this.overdueFeeDTO != null;
    }

    public void setOverdueFeeDTOIsSet(boolean value) {
      if (!value) {
        this.overdueFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        if (value == null) {
          unsetOverdueFeeDTO();
        } else {
          setOverdueFeeDTO((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        return getOverdueFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OVERDUE_FEE_DTO:
        return isSetOverdueFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueFeeTotal_args)
        return this.equals((getOverdueFeeTotal_args)that);
      return false;
    }

    public boolean equals(getOverdueFeeTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_overdueFeeDTO = true && this.isSetOverdueFeeDTO();
      boolean that_present_overdueFeeDTO = true && that.isSetOverdueFeeDTO();
      if (this_present_overdueFeeDTO || that_present_overdueFeeDTO) {
        if (!(this_present_overdueFeeDTO && that_present_overdueFeeDTO))
          return false;
        if (!this.overdueFeeDTO.equals(that.overdueFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_overdueFeeDTO = true && (isSetOverdueFeeDTO());
      list.add(present_overdueFeeDTO);
      if (present_overdueFeeDTO)
        list.add(overdueFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueFeeTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOverdueFeeDTO()).compareTo(other.isSetOverdueFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverdueFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeDTO, other.overdueFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueFeeTotal_args(");
      boolean first = true;

      sb.append("overdueFeeDTO:");
      if (this.overdueFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.overdueFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (overdueFeeDTO != null) {
        overdueFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueFeeTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getOverdueFeeTotal_argsStandardScheme getScheme() {
        return new getOverdueFeeTotal_argsStandardScheme();
      }
    }

    private static class getOverdueFeeTotal_argsStandardScheme extends StandardScheme<getOverdueFeeTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueFeeTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OVERDUE_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.overdueFeeDTO = new OverdueFeeDTO();
                struct.overdueFeeDTO.read(iprot);
                struct.setOverdueFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueFeeTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.overdueFeeDTO != null) {
          oprot.writeFieldBegin(OVERDUE_FEE_DTO_FIELD_DESC);
          struct.overdueFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueFeeTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getOverdueFeeTotal_argsTupleScheme getScheme() {
        return new getOverdueFeeTotal_argsTupleScheme();
      }
    }

    private static class getOverdueFeeTotal_argsTupleScheme extends TupleScheme<getOverdueFeeTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOverdueFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOverdueFeeDTO()) {
          struct.overdueFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.overdueFeeDTO = new OverdueFeeDTO();
          struct.overdueFeeDTO.read(iprot);
          struct.setOverdueFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class getOverdueFeeTotal_result implements org.apache.thrift.TBase<getOverdueFeeTotal_result, getOverdueFeeTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueFeeTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueFeeTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueFeeTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueFeeTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueFeeTotal_result.class, metaDataMap);
    }

    public getOverdueFeeTotal_result() {
    }

    public getOverdueFeeTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueFeeTotal_result(getOverdueFeeTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getOverdueFeeTotal_result deepCopy() {
      return new getOverdueFeeTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getOverdueFeeTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueFeeTotal_result)
        return this.equals((getOverdueFeeTotal_result)that);
      return false;
    }

    public boolean equals(getOverdueFeeTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueFeeTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueFeeTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueFeeTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getOverdueFeeTotal_resultStandardScheme getScheme() {
        return new getOverdueFeeTotal_resultStandardScheme();
      }
    }

    private static class getOverdueFeeTotal_resultStandardScheme extends StandardScheme<getOverdueFeeTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueFeeTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueFeeTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueFeeTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getOverdueFeeTotal_resultTupleScheme getScheme() {
        return new getOverdueFeeTotal_resultTupleScheme();
      }
    }

    private static class getOverdueFeeTotal_resultTupleScheme extends TupleScheme<getOverdueFeeTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addOverdueFee_args implements org.apache.thrift.TBase<addOverdueFee_args, addOverdueFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<addOverdueFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOverdueFee_args");

    private static final org.apache.thrift.protocol.TField OVERDUE_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOverdueFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOverdueFee_argsTupleSchemeFactory());
    }

    public OverdueFeeDTO overdueFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OVERDUE_FEE_DTO((short)1, "overdueFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OVERDUE_FEE_DTO
            return OVERDUE_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OVERDUE_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOverdueFee_args.class, metaDataMap);
    }

    public addOverdueFee_args() {
    }

    public addOverdueFee_args(
      OverdueFeeDTO overdueFeeDTO)
    {
      this();
      this.overdueFeeDTO = overdueFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOverdueFee_args(addOverdueFee_args other) {
      if (other.isSetOverdueFeeDTO()) {
        this.overdueFeeDTO = new OverdueFeeDTO(other.overdueFeeDTO);
      }
    }

    public addOverdueFee_args deepCopy() {
      return new addOverdueFee_args(this);
    }

    @Override
    public void clear() {
      this.overdueFeeDTO = null;
    }

    public OverdueFeeDTO getOverdueFeeDTO() {
      return this.overdueFeeDTO;
    }

    public addOverdueFee_args setOverdueFeeDTO(OverdueFeeDTO overdueFeeDTO) {
      this.overdueFeeDTO = overdueFeeDTO;
      return this;
    }

    public void unsetOverdueFeeDTO() {
      this.overdueFeeDTO = null;
    }

    /** Returns true if field overdueFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetOverdueFeeDTO() {
      return this.overdueFeeDTO != null;
    }

    public void setOverdueFeeDTOIsSet(boolean value) {
      if (!value) {
        this.overdueFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        if (value == null) {
          unsetOverdueFeeDTO();
        } else {
          setOverdueFeeDTO((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        return getOverdueFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OVERDUE_FEE_DTO:
        return isSetOverdueFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOverdueFee_args)
        return this.equals((addOverdueFee_args)that);
      return false;
    }

    public boolean equals(addOverdueFee_args that) {
      if (that == null)
        return false;

      boolean this_present_overdueFeeDTO = true && this.isSetOverdueFeeDTO();
      boolean that_present_overdueFeeDTO = true && that.isSetOverdueFeeDTO();
      if (this_present_overdueFeeDTO || that_present_overdueFeeDTO) {
        if (!(this_present_overdueFeeDTO && that_present_overdueFeeDTO))
          return false;
        if (!this.overdueFeeDTO.equals(that.overdueFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_overdueFeeDTO = true && (isSetOverdueFeeDTO());
      list.add(present_overdueFeeDTO);
      if (present_overdueFeeDTO)
        list.add(overdueFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOverdueFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOverdueFeeDTO()).compareTo(other.isSetOverdueFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverdueFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeDTO, other.overdueFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOverdueFee_args(");
      boolean first = true;

      sb.append("overdueFeeDTO:");
      if (this.overdueFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.overdueFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (overdueFeeDTO != null) {
        overdueFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOverdueFee_argsStandardSchemeFactory implements SchemeFactory {
      public addOverdueFee_argsStandardScheme getScheme() {
        return new addOverdueFee_argsStandardScheme();
      }
    }

    private static class addOverdueFee_argsStandardScheme extends StandardScheme<addOverdueFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOverdueFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OVERDUE_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.overdueFeeDTO = new OverdueFeeDTO();
                struct.overdueFeeDTO.read(iprot);
                struct.setOverdueFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOverdueFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.overdueFeeDTO != null) {
          oprot.writeFieldBegin(OVERDUE_FEE_DTO_FIELD_DESC);
          struct.overdueFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOverdueFee_argsTupleSchemeFactory implements SchemeFactory {
      public addOverdueFee_argsTupleScheme getScheme() {
        return new addOverdueFee_argsTupleScheme();
      }
    }

    private static class addOverdueFee_argsTupleScheme extends TupleScheme<addOverdueFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOverdueFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOverdueFeeDTO()) {
          struct.overdueFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.overdueFeeDTO = new OverdueFeeDTO();
          struct.overdueFeeDTO.read(iprot);
          struct.setOverdueFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class addOverdueFee_result implements org.apache.thrift.TBase<addOverdueFee_result, addOverdueFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<addOverdueFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addOverdueFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addOverdueFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addOverdueFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addOverdueFee_result.class, metaDataMap);
    }

    public addOverdueFee_result() {
    }

    public addOverdueFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOverdueFee_result(addOverdueFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addOverdueFee_result deepCopy() {
      return new addOverdueFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addOverdueFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOverdueFee_result)
        return this.equals((addOverdueFee_result)that);
      return false;
    }

    public boolean equals(addOverdueFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addOverdueFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addOverdueFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addOverdueFee_resultStandardSchemeFactory implements SchemeFactory {
      public addOverdueFee_resultStandardScheme getScheme() {
        return new addOverdueFee_resultStandardScheme();
      }
    }

    private static class addOverdueFee_resultStandardScheme extends StandardScheme<addOverdueFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addOverdueFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addOverdueFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addOverdueFee_resultTupleSchemeFactory implements SchemeFactory {
      public addOverdueFee_resultTupleScheme getScheme() {
        return new addOverdueFee_resultTupleScheme();
      }
    }

    private static class addOverdueFee_resultTupleScheme extends TupleScheme<addOverdueFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverdueFeeById_args implements org.apache.thrift.TBase<getOverdueFeeById_args, getOverdueFeeById_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueFeeById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueFeeById_args");

    private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueFeeById_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueFeeById_argsTupleSchemeFactory());
    }

    public int pid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PID((short)1, "pid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PID
            return PID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueFeeById_args.class, metaDataMap);
    }

    public getOverdueFeeById_args() {
    }

    public getOverdueFeeById_args(
      int pid)
    {
      this();
      this.pid = pid;
      setPidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueFeeById_args(getOverdueFeeById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.pid = other.pid;
    }

    public getOverdueFeeById_args deepCopy() {
      return new getOverdueFeeById_args(this);
    }

    @Override
    public void clear() {
      setPidIsSet(false);
      this.pid = 0;
    }

    public int getPid() {
      return this.pid;
    }

    public getOverdueFeeById_args setPid(int pid) {
      this.pid = pid;
      setPidIsSet(true);
      return this;
    }

    public void unsetPid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
    }

    /** Returns true if field pid is set (has been assigned a value) and false otherwise */
    public boolean isSetPid() {
      return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
    }

    public void setPidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PID:
        if (value == null) {
          unsetPid();
        } else {
          setPid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PID:
        return Integer.valueOf(getPid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PID:
        return isSetPid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueFeeById_args)
        return this.equals((getOverdueFeeById_args)that);
      return false;
    }

    public boolean equals(getOverdueFeeById_args that) {
      if (that == null)
        return false;

      boolean this_present_pid = true;
      boolean that_present_pid = true;
      if (this_present_pid || that_present_pid) {
        if (!(this_present_pid && that_present_pid))
          return false;
        if (this.pid != that.pid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pid = true;
      list.add(present_pid);
      if (present_pid)
        list.add(pid);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueFeeById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueFeeById_args(");
      boolean first = true;

      sb.append("pid:");
      sb.append(this.pid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueFeeById_argsStandardSchemeFactory implements SchemeFactory {
      public getOverdueFeeById_argsStandardScheme getScheme() {
        return new getOverdueFeeById_argsStandardScheme();
      }
    }

    private static class getOverdueFeeById_argsStandardScheme extends StandardScheme<getOverdueFeeById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueFeeById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pid = iprot.readI32();
                struct.setPidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueFeeById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeI32(struct.pid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueFeeById_argsTupleSchemeFactory implements SchemeFactory {
      public getOverdueFeeById_argsTupleScheme getScheme() {
        return new getOverdueFeeById_argsTupleScheme();
      }
    }

    private static class getOverdueFeeById_argsTupleScheme extends TupleScheme<getOverdueFeeById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPid()) {
          oprot.writeI32(struct.pid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeById_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pid = iprot.readI32();
          struct.setPidIsSet(true);
        }
      }
    }

  }

  public static class getOverdueFeeById_result implements org.apache.thrift.TBase<getOverdueFeeById_result, getOverdueFeeById_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueFeeById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueFeeById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueFeeById_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueFeeById_resultTupleSchemeFactory());
    }

    public OverdueFeeDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueFeeById_result.class, metaDataMap);
    }

    public getOverdueFeeById_result() {
    }

    public getOverdueFeeById_result(
      OverdueFeeDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueFeeById_result(getOverdueFeeById_result other) {
      if (other.isSetSuccess()) {
        this.success = new OverdueFeeDTO(other.success);
      }
    }

    public getOverdueFeeById_result deepCopy() {
      return new getOverdueFeeById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OverdueFeeDTO getSuccess() {
      return this.success;
    }

    public getOverdueFeeById_result setSuccess(OverdueFeeDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueFeeById_result)
        return this.equals((getOverdueFeeById_result)that);
      return false;
    }

    public boolean equals(getOverdueFeeById_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueFeeById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueFeeById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueFeeById_resultStandardSchemeFactory implements SchemeFactory {
      public getOverdueFeeById_resultStandardScheme getScheme() {
        return new getOverdueFeeById_resultStandardScheme();
      }
    }

    private static class getOverdueFeeById_resultStandardScheme extends StandardScheme<getOverdueFeeById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueFeeById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OverdueFeeDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueFeeById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueFeeById_resultTupleSchemeFactory implements SchemeFactory {
      public getOverdueFeeById_resultTupleScheme getScheme() {
        return new getOverdueFeeById_resultTupleScheme();
      }
    }

    private static class getOverdueFeeById_resultTupleScheme extends TupleScheme<getOverdueFeeById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeById_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OverdueFeeDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOverdueFeeByProjectId_args implements org.apache.thrift.TBase<getOverdueFeeByProjectId_args, getOverdueFeeByProjectId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueFeeByProjectId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueFeeByProjectId_args");

    private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueFeeByProjectId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueFeeByProjectId_argsTupleSchemeFactory());
    }

    public int projectId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROJECT_ID((short)1, "projectId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROJECT_ID
            return PROJECT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PROJECTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueFeeByProjectId_args.class, metaDataMap);
    }

    public getOverdueFeeByProjectId_args() {
    }

    public getOverdueFeeByProjectId_args(
      int projectId)
    {
      this();
      this.projectId = projectId;
      setProjectIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueFeeByProjectId_args(getOverdueFeeByProjectId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.projectId = other.projectId;
    }

    public getOverdueFeeByProjectId_args deepCopy() {
      return new getOverdueFeeByProjectId_args(this);
    }

    @Override
    public void clear() {
      setProjectIdIsSet(false);
      this.projectId = 0;
    }

    public int getProjectId() {
      return this.projectId;
    }

    public getOverdueFeeByProjectId_args setProjectId(int projectId) {
      this.projectId = projectId;
      setProjectIdIsSet(true);
      return this;
    }

    public void unsetProjectId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
    public boolean isSetProjectId() {
      return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
    }

    public void setProjectIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PROJECT_ID:
        if (value == null) {
          unsetProjectId();
        } else {
          setProjectId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PROJECT_ID:
        return Integer.valueOf(getProjectId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PROJECT_ID:
        return isSetProjectId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueFeeByProjectId_args)
        return this.equals((getOverdueFeeByProjectId_args)that);
      return false;
    }

    public boolean equals(getOverdueFeeByProjectId_args that) {
      if (that == null)
        return false;

      boolean this_present_projectId = true;
      boolean that_present_projectId = true;
      if (this_present_projectId || that_present_projectId) {
        if (!(this_present_projectId && that_present_projectId))
          return false;
        if (this.projectId != that.projectId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_projectId = true;
      list.add(present_projectId);
      if (present_projectId)
        list.add(projectId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueFeeByProjectId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueFeeByProjectId_args(");
      boolean first = true;

      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueFeeByProjectId_argsStandardSchemeFactory implements SchemeFactory {
      public getOverdueFeeByProjectId_argsStandardScheme getScheme() {
        return new getOverdueFeeByProjectId_argsStandardScheme();
      }
    }

    private static class getOverdueFeeByProjectId_argsStandardScheme extends StandardScheme<getOverdueFeeByProjectId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueFeeByProjectId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.projectId = iprot.readI32();
                struct.setProjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueFeeByProjectId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI32(struct.projectId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueFeeByProjectId_argsTupleSchemeFactory implements SchemeFactory {
      public getOverdueFeeByProjectId_argsTupleScheme getScheme() {
        return new getOverdueFeeByProjectId_argsTupleScheme();
      }
    }

    private static class getOverdueFeeByProjectId_argsTupleScheme extends TupleScheme<getOverdueFeeByProjectId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetProjectId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProjectId()) {
          oprot.writeI32(struct.projectId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeByProjectId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.projectId = iprot.readI32();
          struct.setProjectIdIsSet(true);
        }
      }
    }

  }

  public static class getOverdueFeeByProjectId_result implements org.apache.thrift.TBase<getOverdueFeeByProjectId_result, getOverdueFeeByProjectId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOverdueFeeByProjectId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOverdueFeeByProjectId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOverdueFeeByProjectId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOverdueFeeByProjectId_resultTupleSchemeFactory());
    }

    public OverdueFeeDTO success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOverdueFeeByProjectId_result.class, metaDataMap);
    }

    public getOverdueFeeByProjectId_result() {
    }

    public getOverdueFeeByProjectId_result(
      OverdueFeeDTO success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOverdueFeeByProjectId_result(getOverdueFeeByProjectId_result other) {
      if (other.isSetSuccess()) {
        this.success = new OverdueFeeDTO(other.success);
      }
    }

    public getOverdueFeeByProjectId_result deepCopy() {
      return new getOverdueFeeByProjectId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OverdueFeeDTO getSuccess() {
      return this.success;
    }

    public getOverdueFeeByProjectId_result setSuccess(OverdueFeeDTO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOverdueFeeByProjectId_result)
        return this.equals((getOverdueFeeByProjectId_result)that);
      return false;
    }

    public boolean equals(getOverdueFeeByProjectId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOverdueFeeByProjectId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOverdueFeeByProjectId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOverdueFeeByProjectId_resultStandardSchemeFactory implements SchemeFactory {
      public getOverdueFeeByProjectId_resultStandardScheme getScheme() {
        return new getOverdueFeeByProjectId_resultStandardScheme();
      }
    }

    private static class getOverdueFeeByProjectId_resultStandardScheme extends StandardScheme<getOverdueFeeByProjectId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOverdueFeeByProjectId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OverdueFeeDTO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOverdueFeeByProjectId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOverdueFeeByProjectId_resultTupleSchemeFactory implements SchemeFactory {
      public getOverdueFeeByProjectId_resultTupleScheme getScheme() {
        return new getOverdueFeeByProjectId_resultTupleScheme();
      }
    }

    private static class getOverdueFeeByProjectId_resultTupleScheme extends TupleScheme<getOverdueFeeByProjectId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOverdueFeeByProjectId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OverdueFeeDTO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateOverdueFee_args implements org.apache.thrift.TBase<updateOverdueFee_args, updateOverdueFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateOverdueFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOverdueFee_args");

    private static final org.apache.thrift.protocol.TField OVERDUE_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOverdueFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOverdueFee_argsTupleSchemeFactory());
    }

    public OverdueFeeDTO overdueFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OVERDUE_FEE_DTO((short)1, "overdueFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OVERDUE_FEE_DTO
            return OVERDUE_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OVERDUE_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOverdueFee_args.class, metaDataMap);
    }

    public updateOverdueFee_args() {
    }

    public updateOverdueFee_args(
      OverdueFeeDTO overdueFeeDTO)
    {
      this();
      this.overdueFeeDTO = overdueFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOverdueFee_args(updateOverdueFee_args other) {
      if (other.isSetOverdueFeeDTO()) {
        this.overdueFeeDTO = new OverdueFeeDTO(other.overdueFeeDTO);
      }
    }

    public updateOverdueFee_args deepCopy() {
      return new updateOverdueFee_args(this);
    }

    @Override
    public void clear() {
      this.overdueFeeDTO = null;
    }

    public OverdueFeeDTO getOverdueFeeDTO() {
      return this.overdueFeeDTO;
    }

    public updateOverdueFee_args setOverdueFeeDTO(OverdueFeeDTO overdueFeeDTO) {
      this.overdueFeeDTO = overdueFeeDTO;
      return this;
    }

    public void unsetOverdueFeeDTO() {
      this.overdueFeeDTO = null;
    }

    /** Returns true if field overdueFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetOverdueFeeDTO() {
      return this.overdueFeeDTO != null;
    }

    public void setOverdueFeeDTOIsSet(boolean value) {
      if (!value) {
        this.overdueFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        if (value == null) {
          unsetOverdueFeeDTO();
        } else {
          setOverdueFeeDTO((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        return getOverdueFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OVERDUE_FEE_DTO:
        return isSetOverdueFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOverdueFee_args)
        return this.equals((updateOverdueFee_args)that);
      return false;
    }

    public boolean equals(updateOverdueFee_args that) {
      if (that == null)
        return false;

      boolean this_present_overdueFeeDTO = true && this.isSetOverdueFeeDTO();
      boolean that_present_overdueFeeDTO = true && that.isSetOverdueFeeDTO();
      if (this_present_overdueFeeDTO || that_present_overdueFeeDTO) {
        if (!(this_present_overdueFeeDTO && that_present_overdueFeeDTO))
          return false;
        if (!this.overdueFeeDTO.equals(that.overdueFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_overdueFeeDTO = true && (isSetOverdueFeeDTO());
      list.add(present_overdueFeeDTO);
      if (present_overdueFeeDTO)
        list.add(overdueFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOverdueFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOverdueFeeDTO()).compareTo(other.isSetOverdueFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverdueFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeDTO, other.overdueFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOverdueFee_args(");
      boolean first = true;

      sb.append("overdueFeeDTO:");
      if (this.overdueFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.overdueFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (overdueFeeDTO != null) {
        overdueFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOverdueFee_argsStandardSchemeFactory implements SchemeFactory {
      public updateOverdueFee_argsStandardScheme getScheme() {
        return new updateOverdueFee_argsStandardScheme();
      }
    }

    private static class updateOverdueFee_argsStandardScheme extends StandardScheme<updateOverdueFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOverdueFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OVERDUE_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.overdueFeeDTO = new OverdueFeeDTO();
                struct.overdueFeeDTO.read(iprot);
                struct.setOverdueFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOverdueFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.overdueFeeDTO != null) {
          oprot.writeFieldBegin(OVERDUE_FEE_DTO_FIELD_DESC);
          struct.overdueFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOverdueFee_argsTupleSchemeFactory implements SchemeFactory {
      public updateOverdueFee_argsTupleScheme getScheme() {
        return new updateOverdueFee_argsTupleScheme();
      }
    }

    private static class updateOverdueFee_argsTupleScheme extends TupleScheme<updateOverdueFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOverdueFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOverdueFeeDTO()) {
          struct.overdueFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.overdueFeeDTO = new OverdueFeeDTO();
          struct.overdueFeeDTO.read(iprot);
          struct.setOverdueFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class updateOverdueFee_result implements org.apache.thrift.TBase<updateOverdueFee_result, updateOverdueFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateOverdueFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateOverdueFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateOverdueFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateOverdueFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateOverdueFee_result.class, metaDataMap);
    }

    public updateOverdueFee_result() {
    }

    public updateOverdueFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateOverdueFee_result(updateOverdueFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateOverdueFee_result deepCopy() {
      return new updateOverdueFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateOverdueFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateOverdueFee_result)
        return this.equals((updateOverdueFee_result)that);
      return false;
    }

    public boolean equals(updateOverdueFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateOverdueFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateOverdueFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateOverdueFee_resultStandardSchemeFactory implements SchemeFactory {
      public updateOverdueFee_resultStandardScheme getScheme() {
        return new updateOverdueFee_resultStandardScheme();
      }
    }

    private static class updateOverdueFee_resultStandardScheme extends StandardScheme<updateOverdueFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateOverdueFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateOverdueFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateOverdueFee_resultTupleSchemeFactory implements SchemeFactory {
      public updateOverdueFee_resultTupleScheme getScheme() {
        return new updateOverdueFee_resultTupleScheme();
      }
    }

    private static class updateOverdueFee_resultTupleScheme extends TupleScheme<updateOverdueFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class confirmOverdueFee_args implements org.apache.thrift.TBase<confirmOverdueFee_args, confirmOverdueFee_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmOverdueFee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmOverdueFee_args");

    private static final org.apache.thrift.protocol.TField OVERDUE_FEE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFeeDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmOverdueFee_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmOverdueFee_argsTupleSchemeFactory());
    }

    public OverdueFeeDTO overdueFeeDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OVERDUE_FEE_DTO((short)1, "overdueFeeDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OVERDUE_FEE_DTO
            return OVERDUE_FEE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OVERDUE_FEE_DTO, new org.apache.thrift.meta_data.FieldMetaData("overdueFeeDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OverdueFeeDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmOverdueFee_args.class, metaDataMap);
    }

    public confirmOverdueFee_args() {
    }

    public confirmOverdueFee_args(
      OverdueFeeDTO overdueFeeDTO)
    {
      this();
      this.overdueFeeDTO = overdueFeeDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmOverdueFee_args(confirmOverdueFee_args other) {
      if (other.isSetOverdueFeeDTO()) {
        this.overdueFeeDTO = new OverdueFeeDTO(other.overdueFeeDTO);
      }
    }

    public confirmOverdueFee_args deepCopy() {
      return new confirmOverdueFee_args(this);
    }

    @Override
    public void clear() {
      this.overdueFeeDTO = null;
    }

    public OverdueFeeDTO getOverdueFeeDTO() {
      return this.overdueFeeDTO;
    }

    public confirmOverdueFee_args setOverdueFeeDTO(OverdueFeeDTO overdueFeeDTO) {
      this.overdueFeeDTO = overdueFeeDTO;
      return this;
    }

    public void unsetOverdueFeeDTO() {
      this.overdueFeeDTO = null;
    }

    /** Returns true if field overdueFeeDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetOverdueFeeDTO() {
      return this.overdueFeeDTO != null;
    }

    public void setOverdueFeeDTOIsSet(boolean value) {
      if (!value) {
        this.overdueFeeDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        if (value == null) {
          unsetOverdueFeeDTO();
        } else {
          setOverdueFeeDTO((OverdueFeeDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OVERDUE_FEE_DTO:
        return getOverdueFeeDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OVERDUE_FEE_DTO:
        return isSetOverdueFeeDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmOverdueFee_args)
        return this.equals((confirmOverdueFee_args)that);
      return false;
    }

    public boolean equals(confirmOverdueFee_args that) {
      if (that == null)
        return false;

      boolean this_present_overdueFeeDTO = true && this.isSetOverdueFeeDTO();
      boolean that_present_overdueFeeDTO = true && that.isSetOverdueFeeDTO();
      if (this_present_overdueFeeDTO || that_present_overdueFeeDTO) {
        if (!(this_present_overdueFeeDTO && that_present_overdueFeeDTO))
          return false;
        if (!this.overdueFeeDTO.equals(that.overdueFeeDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_overdueFeeDTO = true && (isSetOverdueFeeDTO());
      list.add(present_overdueFeeDTO);
      if (present_overdueFeeDTO)
        list.add(overdueFeeDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmOverdueFee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOverdueFeeDTO()).compareTo(other.isSetOverdueFeeDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOverdueFeeDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFeeDTO, other.overdueFeeDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmOverdueFee_args(");
      boolean first = true;

      sb.append("overdueFeeDTO:");
      if (this.overdueFeeDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.overdueFeeDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (overdueFeeDTO != null) {
        overdueFeeDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmOverdueFee_argsStandardSchemeFactory implements SchemeFactory {
      public confirmOverdueFee_argsStandardScheme getScheme() {
        return new confirmOverdueFee_argsStandardScheme();
      }
    }

    private static class confirmOverdueFee_argsStandardScheme extends StandardScheme<confirmOverdueFee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmOverdueFee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OVERDUE_FEE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.overdueFeeDTO = new OverdueFeeDTO();
                struct.overdueFeeDTO.read(iprot);
                struct.setOverdueFeeDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmOverdueFee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.overdueFeeDTO != null) {
          oprot.writeFieldBegin(OVERDUE_FEE_DTO_FIELD_DESC);
          struct.overdueFeeDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmOverdueFee_argsTupleSchemeFactory implements SchemeFactory {
      public confirmOverdueFee_argsTupleScheme getScheme() {
        return new confirmOverdueFee_argsTupleScheme();
      }
    }

    private static class confirmOverdueFee_argsTupleScheme extends TupleScheme<confirmOverdueFee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOverdueFeeDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOverdueFeeDTO()) {
          struct.overdueFeeDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmOverdueFee_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.overdueFeeDTO = new OverdueFeeDTO();
          struct.overdueFeeDTO.read(iprot);
          struct.setOverdueFeeDTOIsSet(true);
        }
      }
    }

  }

  public static class confirmOverdueFee_result implements org.apache.thrift.TBase<confirmOverdueFee_result, confirmOverdueFee_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmOverdueFee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmOverdueFee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmOverdueFee_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmOverdueFee_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmOverdueFee_result.class, metaDataMap);
    }

    public confirmOverdueFee_result() {
    }

    public confirmOverdueFee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmOverdueFee_result(confirmOverdueFee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public confirmOverdueFee_result deepCopy() {
      return new confirmOverdueFee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public confirmOverdueFee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmOverdueFee_result)
        return this.equals((confirmOverdueFee_result)that);
      return false;
    }

    public boolean equals(confirmOverdueFee_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmOverdueFee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmOverdueFee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmOverdueFee_resultStandardSchemeFactory implements SchemeFactory {
      public confirmOverdueFee_resultStandardScheme getScheme() {
        return new confirmOverdueFee_resultStandardScheme();
      }
    }

    private static class confirmOverdueFee_resultStandardScheme extends StandardScheme<confirmOverdueFee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmOverdueFee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmOverdueFee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmOverdueFee_resultTupleSchemeFactory implements SchemeFactory {
      public confirmOverdueFee_resultTupleScheme getScheme() {
        return new confirmOverdueFee_resultTupleScheme();
      }
    }

    private static class confirmOverdueFee_resultTupleScheme extends TupleScheme<confirmOverdueFee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmOverdueFee_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRepaymentInfo_args implements org.apache.thrift.TBase<queryRepaymentInfo_args, queryRepaymentInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepaymentInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepaymentInfo_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepaymentInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepaymentInfo_argsTupleSchemeFactory());
    }

    public RepaymentIndexDTO repaymentIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_INDEX_DTO((short)1, "repaymentIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_INDEX_DTO
            return REPAYMENT_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepaymentInfo_args.class, metaDataMap);
    }

    public queryRepaymentInfo_args() {
    }

    public queryRepaymentInfo_args(
      RepaymentIndexDTO repaymentIndexDTO)
    {
      this();
      this.repaymentIndexDTO = repaymentIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepaymentInfo_args(queryRepaymentInfo_args other) {
      if (other.isSetRepaymentIndexDTO()) {
        this.repaymentIndexDTO = new RepaymentIndexDTO(other.repaymentIndexDTO);
      }
    }

    public queryRepaymentInfo_args deepCopy() {
      return new queryRepaymentInfo_args(this);
    }

    @Override
    public void clear() {
      this.repaymentIndexDTO = null;
    }

    public RepaymentIndexDTO getRepaymentIndexDTO() {
      return this.repaymentIndexDTO;
    }

    public queryRepaymentInfo_args setRepaymentIndexDTO(RepaymentIndexDTO repaymentIndexDTO) {
      this.repaymentIndexDTO = repaymentIndexDTO;
      return this;
    }

    public void unsetRepaymentIndexDTO() {
      this.repaymentIndexDTO = null;
    }

    /** Returns true if field repaymentIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentIndexDTO() {
      return this.repaymentIndexDTO != null;
    }

    public void setRepaymentIndexDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        if (value == null) {
          unsetRepaymentIndexDTO();
        } else {
          setRepaymentIndexDTO((RepaymentIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return getRepaymentIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return isSetRepaymentIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepaymentInfo_args)
        return this.equals((queryRepaymentInfo_args)that);
      return false;
    }

    public boolean equals(queryRepaymentInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentIndexDTO = true && this.isSetRepaymentIndexDTO();
      boolean that_present_repaymentIndexDTO = true && that.isSetRepaymentIndexDTO();
      if (this_present_repaymentIndexDTO || that_present_repaymentIndexDTO) {
        if (!(this_present_repaymentIndexDTO && that_present_repaymentIndexDTO))
          return false;
        if (!this.repaymentIndexDTO.equals(that.repaymentIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentIndexDTO = true && (isSetRepaymentIndexDTO());
      list.add(present_repaymentIndexDTO);
      if (present_repaymentIndexDTO)
        list.add(repaymentIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepaymentInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentIndexDTO()).compareTo(other.isSetRepaymentIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentIndexDTO, other.repaymentIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepaymentInfo_args(");
      boolean first = true;

      sb.append("repaymentIndexDTO:");
      if (this.repaymentIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentIndexDTO != null) {
        repaymentIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepaymentInfo_argsStandardSchemeFactory implements SchemeFactory {
      public queryRepaymentInfo_argsStandardScheme getScheme() {
        return new queryRepaymentInfo_argsStandardScheme();
      }
    }

    private static class queryRepaymentInfo_argsStandardScheme extends StandardScheme<queryRepaymentInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepaymentInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentIndexDTO = new RepaymentIndexDTO();
                struct.repaymentIndexDTO.read(iprot);
                struct.setRepaymentIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepaymentInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentIndexDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_INDEX_DTO_FIELD_DESC);
          struct.repaymentIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepaymentInfo_argsTupleSchemeFactory implements SchemeFactory {
      public queryRepaymentInfo_argsTupleScheme getScheme() {
        return new queryRepaymentInfo_argsTupleScheme();
      }
    }

    private static class queryRepaymentInfo_argsTupleScheme extends TupleScheme<queryRepaymentInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepaymentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentIndexDTO()) {
          struct.repaymentIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepaymentInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentIndexDTO = new RepaymentIndexDTO();
          struct.repaymentIndexDTO.read(iprot);
          struct.setRepaymentIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class queryRepaymentInfo_result implements org.apache.thrift.TBase<queryRepaymentInfo_result, queryRepaymentInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRepaymentInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRepaymentInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRepaymentInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRepaymentInfo_resultTupleSchemeFactory());
    }

    public List<RepaymentIndexDTO> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentIndexDTO.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRepaymentInfo_result.class, metaDataMap);
    }

    public queryRepaymentInfo_result() {
    }

    public queryRepaymentInfo_result(
      List<RepaymentIndexDTO> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRepaymentInfo_result(queryRepaymentInfo_result other) {
      if (other.isSetSuccess()) {
        List<RepaymentIndexDTO> __this__success = new ArrayList<RepaymentIndexDTO>(other.success.size());
        for (RepaymentIndexDTO other_element : other.success) {
          __this__success.add(new RepaymentIndexDTO(other_element));
        }
        this.success = __this__success;
      }
    }

    public queryRepaymentInfo_result deepCopy() {
      return new queryRepaymentInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RepaymentIndexDTO> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RepaymentIndexDTO elem) {
      if (this.success == null) {
        this.success = new ArrayList<RepaymentIndexDTO>();
      }
      this.success.add(elem);
    }

    public List<RepaymentIndexDTO> getSuccess() {
      return this.success;
    }

    public queryRepaymentInfo_result setSuccess(List<RepaymentIndexDTO> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RepaymentIndexDTO>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRepaymentInfo_result)
        return this.equals((queryRepaymentInfo_result)that);
      return false;
    }

    public boolean equals(queryRepaymentInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRepaymentInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRepaymentInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRepaymentInfo_resultStandardSchemeFactory implements SchemeFactory {
      public queryRepaymentInfo_resultStandardScheme getScheme() {
        return new queryRepaymentInfo_resultStandardScheme();
      }
    }

    private static class queryRepaymentInfo_resultStandardScheme extends StandardScheme<queryRepaymentInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRepaymentInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list692 = iprot.readListBegin();
                  struct.success = new ArrayList<RepaymentIndexDTO>(_list692.size);
                  RepaymentIndexDTO _elem693;
                  for (int _i694 = 0; _i694 < _list692.size; ++_i694)
                  {
                    _elem693 = new RepaymentIndexDTO();
                    _elem693.read(iprot);
                    struct.success.add(_elem693);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRepaymentInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RepaymentIndexDTO _iter695 : struct.success)
            {
              _iter695.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRepaymentInfo_resultTupleSchemeFactory implements SchemeFactory {
      public queryRepaymentInfo_resultTupleScheme getScheme() {
        return new queryRepaymentInfo_resultTupleScheme();
      }
    }

    private static class queryRepaymentInfo_resultTupleScheme extends TupleScheme<queryRepaymentInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRepaymentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RepaymentIndexDTO _iter696 : struct.success)
            {
              _iter696.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRepaymentInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list697 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RepaymentIndexDTO>(_list697.size);
            RepaymentIndexDTO _elem698;
            for (int _i699 = 0; _i699 < _list697.size; ++_i699)
            {
              _elem698 = new RepaymentIndexDTO();
              _elem698.read(iprot);
              struct.success.add(_elem698);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentInfoTotal_args implements org.apache.thrift.TBase<getRepaymentInfoTotal_args, getRepaymentInfoTotal_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentInfoTotal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentInfoTotal_args");

    private static final org.apache.thrift.protocol.TField REPAYMENT_INDEX_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentIndexDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentInfoTotal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentInfoTotal_argsTupleSchemeFactory());
    }

    public RepaymentIndexDTO repaymentIndexDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPAYMENT_INDEX_DTO((short)1, "repaymentIndexDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPAYMENT_INDEX_DTO
            return REPAYMENT_INDEX_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPAYMENT_INDEX_DTO, new org.apache.thrift.meta_data.FieldMetaData("repaymentIndexDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentIndexDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentInfoTotal_args.class, metaDataMap);
    }

    public getRepaymentInfoTotal_args() {
    }

    public getRepaymentInfoTotal_args(
      RepaymentIndexDTO repaymentIndexDTO)
    {
      this();
      this.repaymentIndexDTO = repaymentIndexDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentInfoTotal_args(getRepaymentInfoTotal_args other) {
      if (other.isSetRepaymentIndexDTO()) {
        this.repaymentIndexDTO = new RepaymentIndexDTO(other.repaymentIndexDTO);
      }
    }

    public getRepaymentInfoTotal_args deepCopy() {
      return new getRepaymentInfoTotal_args(this);
    }

    @Override
    public void clear() {
      this.repaymentIndexDTO = null;
    }

    public RepaymentIndexDTO getRepaymentIndexDTO() {
      return this.repaymentIndexDTO;
    }

    public getRepaymentInfoTotal_args setRepaymentIndexDTO(RepaymentIndexDTO repaymentIndexDTO) {
      this.repaymentIndexDTO = repaymentIndexDTO;
      return this;
    }

    public void unsetRepaymentIndexDTO() {
      this.repaymentIndexDTO = null;
    }

    /** Returns true if field repaymentIndexDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetRepaymentIndexDTO() {
      return this.repaymentIndexDTO != null;
    }

    public void setRepaymentIndexDTOIsSet(boolean value) {
      if (!value) {
        this.repaymentIndexDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        if (value == null) {
          unsetRepaymentIndexDTO();
        } else {
          setRepaymentIndexDTO((RepaymentIndexDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return getRepaymentIndexDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPAYMENT_INDEX_DTO:
        return isSetRepaymentIndexDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentInfoTotal_args)
        return this.equals((getRepaymentInfoTotal_args)that);
      return false;
    }

    public boolean equals(getRepaymentInfoTotal_args that) {
      if (that == null)
        return false;

      boolean this_present_repaymentIndexDTO = true && this.isSetRepaymentIndexDTO();
      boolean that_present_repaymentIndexDTO = true && that.isSetRepaymentIndexDTO();
      if (this_present_repaymentIndexDTO || that_present_repaymentIndexDTO) {
        if (!(this_present_repaymentIndexDTO && that_present_repaymentIndexDTO))
          return false;
        if (!this.repaymentIndexDTO.equals(that.repaymentIndexDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_repaymentIndexDTO = true && (isSetRepaymentIndexDTO());
      list.add(present_repaymentIndexDTO);
      if (present_repaymentIndexDTO)
        list.add(repaymentIndexDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentInfoTotal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRepaymentIndexDTO()).compareTo(other.isSetRepaymentIndexDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRepaymentIndexDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentIndexDTO, other.repaymentIndexDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentInfoTotal_args(");
      boolean first = true;

      sb.append("repaymentIndexDTO:");
      if (this.repaymentIndexDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.repaymentIndexDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (repaymentIndexDTO != null) {
        repaymentIndexDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentInfoTotal_argsStandardSchemeFactory implements SchemeFactory {
      public getRepaymentInfoTotal_argsStandardScheme getScheme() {
        return new getRepaymentInfoTotal_argsStandardScheme();
      }
    }

    private static class getRepaymentInfoTotal_argsStandardScheme extends StandardScheme<getRepaymentInfoTotal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentInfoTotal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPAYMENT_INDEX_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.repaymentIndexDTO = new RepaymentIndexDTO();
                struct.repaymentIndexDTO.read(iprot);
                struct.setRepaymentIndexDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentInfoTotal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.repaymentIndexDTO != null) {
          oprot.writeFieldBegin(REPAYMENT_INDEX_DTO_FIELD_DESC);
          struct.repaymentIndexDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentInfoTotal_argsTupleSchemeFactory implements SchemeFactory {
      public getRepaymentInfoTotal_argsTupleScheme getScheme() {
        return new getRepaymentInfoTotal_argsTupleScheme();
      }
    }

    private static class getRepaymentInfoTotal_argsTupleScheme extends TupleScheme<getRepaymentInfoTotal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentInfoTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRepaymentIndexDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRepaymentIndexDTO()) {
          struct.repaymentIndexDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentInfoTotal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.repaymentIndexDTO = new RepaymentIndexDTO();
          struct.repaymentIndexDTO.read(iprot);
          struct.setRepaymentIndexDTOIsSet(true);
        }
      }
    }

  }

  public static class getRepaymentInfoTotal_result implements org.apache.thrift.TBase<getRepaymentInfoTotal_result, getRepaymentInfoTotal_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRepaymentInfoTotal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRepaymentInfoTotal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRepaymentInfoTotal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRepaymentInfoTotal_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRepaymentInfoTotal_result.class, metaDataMap);
    }

    public getRepaymentInfoTotal_result() {
    }

    public getRepaymentInfoTotal_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRepaymentInfoTotal_result(getRepaymentInfoTotal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getRepaymentInfoTotal_result deepCopy() {
      return new getRepaymentInfoTotal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRepaymentInfoTotal_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRepaymentInfoTotal_result)
        return this.equals((getRepaymentInfoTotal_result)that);
      return false;
    }

    public boolean equals(getRepaymentInfoTotal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRepaymentInfoTotal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRepaymentInfoTotal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRepaymentInfoTotal_resultStandardSchemeFactory implements SchemeFactory {
      public getRepaymentInfoTotal_resultStandardScheme getScheme() {
        return new getRepaymentInfoTotal_resultStandardScheme();
      }
    }

    private static class getRepaymentInfoTotal_resultStandardScheme extends StandardScheme<getRepaymentInfoTotal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRepaymentInfoTotal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRepaymentInfoTotal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRepaymentInfoTotal_resultTupleSchemeFactory implements SchemeFactory {
      public getRepaymentInfoTotal_resultTupleScheme getScheme() {
        return new getRepaymentInfoTotal_resultTupleScheme();
      }
    }

    private static class getRepaymentInfoTotal_resultTupleScheme extends TupleScheme<getRepaymentInfoTotal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRepaymentInfoTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRepaymentInfoTotal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

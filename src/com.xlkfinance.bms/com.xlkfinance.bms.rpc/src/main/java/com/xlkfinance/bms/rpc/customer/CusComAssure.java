/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComAssure implements org.apache.thrift.TBase<CusComAssure, CusComAssure._Fields>, java.io.Serializable, Cloneable, Comparable<CusComAssure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComAssure");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ASS_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("assObj", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ASS_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("assWay", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ASS_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("assContent", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ASS_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ASS_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("assStartDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ASS_DEADLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("assDeadline", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ASS_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("assEndDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DUTY_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("dutyRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField ASS_REL_CON_FIELD_DESC = new org.apache.thrift.protocol.TField("assRelCon", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DUTY_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dutyBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField ASS_PAY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assPayMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ASS_OPTN_FIELD_DESC = new org.apache.thrift.protocol.TField("assOptn", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ASS_WAY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("assWayVal", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComAssureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComAssureTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public String assObj; // required
  public int assWay; // required
  public String assContent; // required
  public double assMoney; // required
  public String assStartDate; // required
  public int assDeadline; // required
  public String assEndDate; // required
  public double dutyRatio; // required
  public String assRelCon; // required
  public double dutyBalance; // required
  public double assPayMoney; // required
  public String assOptn; // required
  public String remark; // required
  public int status; // required
  public String assWayVal; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    ASS_OBJ((short)4, "assObj"),
    ASS_WAY((short)5, "assWay"),
    ASS_CONTENT((short)6, "assContent"),
    ASS_MONEY((short)7, "assMoney"),
    ASS_START_DATE((short)8, "assStartDate"),
    ASS_DEADLINE((short)9, "assDeadline"),
    ASS_END_DATE((short)10, "assEndDate"),
    DUTY_RATIO((short)11, "dutyRatio"),
    ASS_REL_CON((short)12, "assRelCon"),
    DUTY_BALANCE((short)13, "dutyBalance"),
    ASS_PAY_MONEY((short)14, "assPayMoney"),
    ASS_OPTN((short)15, "assOptn"),
    REMARK((short)3, "remark"),
    STATUS((short)16, "status"),
    ASS_WAY_VAL((short)17, "assWayVal"),
    PAGE((short)18, "page"),
    ROWS((short)19, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 4: // ASS_OBJ
          return ASS_OBJ;
        case 5: // ASS_WAY
          return ASS_WAY;
        case 6: // ASS_CONTENT
          return ASS_CONTENT;
        case 7: // ASS_MONEY
          return ASS_MONEY;
        case 8: // ASS_START_DATE
          return ASS_START_DATE;
        case 9: // ASS_DEADLINE
          return ASS_DEADLINE;
        case 10: // ASS_END_DATE
          return ASS_END_DATE;
        case 11: // DUTY_RATIO
          return DUTY_RATIO;
        case 12: // ASS_REL_CON
          return ASS_REL_CON;
        case 13: // DUTY_BALANCE
          return DUTY_BALANCE;
        case 14: // ASS_PAY_MONEY
          return ASS_PAY_MONEY;
        case 15: // ASS_OPTN
          return ASS_OPTN;
        case 3: // REMARK
          return REMARK;
        case 16: // STATUS
          return STATUS;
        case 17: // ASS_WAY_VAL
          return ASS_WAY_VAL;
        case 18: // PAGE
          return PAGE;
        case 19: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ASSWAY_ISSET_ID = 1;
  private static final int __ASSMONEY_ISSET_ID = 2;
  private static final int __ASSDEADLINE_ISSET_ID = 3;
  private static final int __DUTYRATIO_ISSET_ID = 4;
  private static final int __DUTYBALANCE_ISSET_ID = 5;
  private static final int __ASSPAYMONEY_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.ASS_OBJ, new org.apache.thrift.meta_data.FieldMetaData("assObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASS_WAY, new org.apache.thrift.meta_data.FieldMetaData("assWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASS_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("assContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASS_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASS_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("assStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASS_DEADLINE, new org.apache.thrift.meta_data.FieldMetaData("assDeadline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASS_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("assEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUTY_RATIO, new org.apache.thrift.meta_data.FieldMetaData("dutyRatio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASS_REL_CON, new org.apache.thrift.meta_data.FieldMetaData("assRelCon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUTY_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("dutyBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASS_PAY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assPayMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ASS_OPTN, new org.apache.thrift.meta_data.FieldMetaData("assOptn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASS_WAY_VAL, new org.apache.thrift.meta_data.FieldMetaData("assWayVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComAssure.class, metaDataMap);
  }

  public CusComAssure() {
  }

  public CusComAssure(
    int pid,
    CusComBase cusComBase,
    String assObj,
    int assWay,
    String assContent,
    double assMoney,
    String assStartDate,
    int assDeadline,
    String assEndDate,
    double dutyRatio,
    String assRelCon,
    double dutyBalance,
    double assPayMoney,
    String assOptn,
    String remark,
    int status,
    String assWayVal,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.assObj = assObj;
    this.assWay = assWay;
    setAssWayIsSet(true);
    this.assContent = assContent;
    this.assMoney = assMoney;
    setAssMoneyIsSet(true);
    this.assStartDate = assStartDate;
    this.assDeadline = assDeadline;
    setAssDeadlineIsSet(true);
    this.assEndDate = assEndDate;
    this.dutyRatio = dutyRatio;
    setDutyRatioIsSet(true);
    this.assRelCon = assRelCon;
    this.dutyBalance = dutyBalance;
    setDutyBalanceIsSet(true);
    this.assPayMoney = assPayMoney;
    setAssPayMoneyIsSet(true);
    this.assOptn = assOptn;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.assWayVal = assWayVal;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComAssure(CusComAssure other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetAssObj()) {
      this.assObj = other.assObj;
    }
    this.assWay = other.assWay;
    if (other.isSetAssContent()) {
      this.assContent = other.assContent;
    }
    this.assMoney = other.assMoney;
    if (other.isSetAssStartDate()) {
      this.assStartDate = other.assStartDate;
    }
    this.assDeadline = other.assDeadline;
    if (other.isSetAssEndDate()) {
      this.assEndDate = other.assEndDate;
    }
    this.dutyRatio = other.dutyRatio;
    if (other.isSetAssRelCon()) {
      this.assRelCon = other.assRelCon;
    }
    this.dutyBalance = other.dutyBalance;
    this.assPayMoney = other.assPayMoney;
    if (other.isSetAssOptn()) {
      this.assOptn = other.assOptn;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetAssWayVal()) {
      this.assWayVal = other.assWayVal;
    }
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusComAssure deepCopy() {
    return new CusComAssure(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    this.assObj = null;
    setAssWayIsSet(false);
    this.assWay = 0;
    this.assContent = null;
    setAssMoneyIsSet(false);
    this.assMoney = 0.0;
    this.assStartDate = null;
    setAssDeadlineIsSet(false);
    this.assDeadline = 0;
    this.assEndDate = null;
    setDutyRatioIsSet(false);
    this.dutyRatio = 0.0;
    this.assRelCon = null;
    setDutyBalanceIsSet(false);
    this.dutyBalance = 0.0;
    setAssPayMoneyIsSet(false);
    this.assPayMoney = 0.0;
    this.assOptn = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.assWayVal = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComAssure setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComAssure setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public String getAssObj() {
    return this.assObj;
  }

  public CusComAssure setAssObj(String assObj) {
    this.assObj = assObj;
    return this;
  }

  public void unsetAssObj() {
    this.assObj = null;
  }

  /** Returns true if field assObj is set (has been assigned a value) and false otherwise */
  public boolean isSetAssObj() {
    return this.assObj != null;
  }

  public void setAssObjIsSet(boolean value) {
    if (!value) {
      this.assObj = null;
    }
  }

  public int getAssWay() {
    return this.assWay;
  }

  public CusComAssure setAssWay(int assWay) {
    this.assWay = assWay;
    setAssWayIsSet(true);
    return this;
  }

  public void unsetAssWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSWAY_ISSET_ID);
  }

  /** Returns true if field assWay is set (has been assigned a value) and false otherwise */
  public boolean isSetAssWay() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSWAY_ISSET_ID);
  }

  public void setAssWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSWAY_ISSET_ID, value);
  }

  public String getAssContent() {
    return this.assContent;
  }

  public CusComAssure setAssContent(String assContent) {
    this.assContent = assContent;
    return this;
  }

  public void unsetAssContent() {
    this.assContent = null;
  }

  /** Returns true if field assContent is set (has been assigned a value) and false otherwise */
  public boolean isSetAssContent() {
    return this.assContent != null;
  }

  public void setAssContentIsSet(boolean value) {
    if (!value) {
      this.assContent = null;
    }
  }

  public double getAssMoney() {
    return this.assMoney;
  }

  public CusComAssure setAssMoney(double assMoney) {
    this.assMoney = assMoney;
    setAssMoneyIsSet(true);
    return this;
  }

  public void unsetAssMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSMONEY_ISSET_ID);
  }

  /** Returns true if field assMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSMONEY_ISSET_ID);
  }

  public void setAssMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSMONEY_ISSET_ID, value);
  }

  public String getAssStartDate() {
    return this.assStartDate;
  }

  public CusComAssure setAssStartDate(String assStartDate) {
    this.assStartDate = assStartDate;
    return this;
  }

  public void unsetAssStartDate() {
    this.assStartDate = null;
  }

  /** Returns true if field assStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAssStartDate() {
    return this.assStartDate != null;
  }

  public void setAssStartDateIsSet(boolean value) {
    if (!value) {
      this.assStartDate = null;
    }
  }

  public int getAssDeadline() {
    return this.assDeadline;
  }

  public CusComAssure setAssDeadline(int assDeadline) {
    this.assDeadline = assDeadline;
    setAssDeadlineIsSet(true);
    return this;
  }

  public void unsetAssDeadline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSDEADLINE_ISSET_ID);
  }

  /** Returns true if field assDeadline is set (has been assigned a value) and false otherwise */
  public boolean isSetAssDeadline() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSDEADLINE_ISSET_ID);
  }

  public void setAssDeadlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSDEADLINE_ISSET_ID, value);
  }

  public String getAssEndDate() {
    return this.assEndDate;
  }

  public CusComAssure setAssEndDate(String assEndDate) {
    this.assEndDate = assEndDate;
    return this;
  }

  public void unsetAssEndDate() {
    this.assEndDate = null;
  }

  /** Returns true if field assEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetAssEndDate() {
    return this.assEndDate != null;
  }

  public void setAssEndDateIsSet(boolean value) {
    if (!value) {
      this.assEndDate = null;
    }
  }

  public double getDutyRatio() {
    return this.dutyRatio;
  }

  public CusComAssure setDutyRatio(double dutyRatio) {
    this.dutyRatio = dutyRatio;
    setDutyRatioIsSet(true);
    return this;
  }

  public void unsetDutyRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUTYRATIO_ISSET_ID);
  }

  /** Returns true if field dutyRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetDutyRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __DUTYRATIO_ISSET_ID);
  }

  public void setDutyRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUTYRATIO_ISSET_ID, value);
  }

  public String getAssRelCon() {
    return this.assRelCon;
  }

  public CusComAssure setAssRelCon(String assRelCon) {
    this.assRelCon = assRelCon;
    return this;
  }

  public void unsetAssRelCon() {
    this.assRelCon = null;
  }

  /** Returns true if field assRelCon is set (has been assigned a value) and false otherwise */
  public boolean isSetAssRelCon() {
    return this.assRelCon != null;
  }

  public void setAssRelConIsSet(boolean value) {
    if (!value) {
      this.assRelCon = null;
    }
  }

  public double getDutyBalance() {
    return this.dutyBalance;
  }

  public CusComAssure setDutyBalance(double dutyBalance) {
    this.dutyBalance = dutyBalance;
    setDutyBalanceIsSet(true);
    return this;
  }

  public void unsetDutyBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUTYBALANCE_ISSET_ID);
  }

  /** Returns true if field dutyBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetDutyBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __DUTYBALANCE_ISSET_ID);
  }

  public void setDutyBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUTYBALANCE_ISSET_ID, value);
  }

  public double getAssPayMoney() {
    return this.assPayMoney;
  }

  public CusComAssure setAssPayMoney(double assPayMoney) {
    this.assPayMoney = assPayMoney;
    setAssPayMoneyIsSet(true);
    return this;
  }

  public void unsetAssPayMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSPAYMONEY_ISSET_ID);
  }

  /** Returns true if field assPayMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssPayMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSPAYMONEY_ISSET_ID);
  }

  public void setAssPayMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSPAYMONEY_ISSET_ID, value);
  }

  public String getAssOptn() {
    return this.assOptn;
  }

  public CusComAssure setAssOptn(String assOptn) {
    this.assOptn = assOptn;
    return this;
  }

  public void unsetAssOptn() {
    this.assOptn = null;
  }

  /** Returns true if field assOptn is set (has been assigned a value) and false otherwise */
  public boolean isSetAssOptn() {
    return this.assOptn != null;
  }

  public void setAssOptnIsSet(boolean value) {
    if (!value) {
      this.assOptn = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComAssure setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComAssure setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getAssWayVal() {
    return this.assWayVal;
  }

  public CusComAssure setAssWayVal(String assWayVal) {
    this.assWayVal = assWayVal;
    return this;
  }

  public void unsetAssWayVal() {
    this.assWayVal = null;
  }

  /** Returns true if field assWayVal is set (has been assigned a value) and false otherwise */
  public boolean isSetAssWayVal() {
    return this.assWayVal != null;
  }

  public void setAssWayValIsSet(boolean value) {
    if (!value) {
      this.assWayVal = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CusComAssure setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusComAssure setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case ASS_OBJ:
      if (value == null) {
        unsetAssObj();
      } else {
        setAssObj((String)value);
      }
      break;

    case ASS_WAY:
      if (value == null) {
        unsetAssWay();
      } else {
        setAssWay((Integer)value);
      }
      break;

    case ASS_CONTENT:
      if (value == null) {
        unsetAssContent();
      } else {
        setAssContent((String)value);
      }
      break;

    case ASS_MONEY:
      if (value == null) {
        unsetAssMoney();
      } else {
        setAssMoney((Double)value);
      }
      break;

    case ASS_START_DATE:
      if (value == null) {
        unsetAssStartDate();
      } else {
        setAssStartDate((String)value);
      }
      break;

    case ASS_DEADLINE:
      if (value == null) {
        unsetAssDeadline();
      } else {
        setAssDeadline((Integer)value);
      }
      break;

    case ASS_END_DATE:
      if (value == null) {
        unsetAssEndDate();
      } else {
        setAssEndDate((String)value);
      }
      break;

    case DUTY_RATIO:
      if (value == null) {
        unsetDutyRatio();
      } else {
        setDutyRatio((Double)value);
      }
      break;

    case ASS_REL_CON:
      if (value == null) {
        unsetAssRelCon();
      } else {
        setAssRelCon((String)value);
      }
      break;

    case DUTY_BALANCE:
      if (value == null) {
        unsetDutyBalance();
      } else {
        setDutyBalance((Double)value);
      }
      break;

    case ASS_PAY_MONEY:
      if (value == null) {
        unsetAssPayMoney();
      } else {
        setAssPayMoney((Double)value);
      }
      break;

    case ASS_OPTN:
      if (value == null) {
        unsetAssOptn();
      } else {
        setAssOptn((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case ASS_WAY_VAL:
      if (value == null) {
        unsetAssWayVal();
      } else {
        setAssWayVal((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case ASS_OBJ:
      return getAssObj();

    case ASS_WAY:
      return Integer.valueOf(getAssWay());

    case ASS_CONTENT:
      return getAssContent();

    case ASS_MONEY:
      return Double.valueOf(getAssMoney());

    case ASS_START_DATE:
      return getAssStartDate();

    case ASS_DEADLINE:
      return Integer.valueOf(getAssDeadline());

    case ASS_END_DATE:
      return getAssEndDate();

    case DUTY_RATIO:
      return Double.valueOf(getDutyRatio());

    case ASS_REL_CON:
      return getAssRelCon();

    case DUTY_BALANCE:
      return Double.valueOf(getDutyBalance());

    case ASS_PAY_MONEY:
      return Double.valueOf(getAssPayMoney());

    case ASS_OPTN:
      return getAssOptn();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case ASS_WAY_VAL:
      return getAssWayVal();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case ASS_OBJ:
      return isSetAssObj();
    case ASS_WAY:
      return isSetAssWay();
    case ASS_CONTENT:
      return isSetAssContent();
    case ASS_MONEY:
      return isSetAssMoney();
    case ASS_START_DATE:
      return isSetAssStartDate();
    case ASS_DEADLINE:
      return isSetAssDeadline();
    case ASS_END_DATE:
      return isSetAssEndDate();
    case DUTY_RATIO:
      return isSetDutyRatio();
    case ASS_REL_CON:
      return isSetAssRelCon();
    case DUTY_BALANCE:
      return isSetDutyBalance();
    case ASS_PAY_MONEY:
      return isSetAssPayMoney();
    case ASS_OPTN:
      return isSetAssOptn();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case ASS_WAY_VAL:
      return isSetAssWayVal();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComAssure)
      return this.equals((CusComAssure)that);
    return false;
  }

  public boolean equals(CusComAssure that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_assObj = true && this.isSetAssObj();
    boolean that_present_assObj = true && that.isSetAssObj();
    if (this_present_assObj || that_present_assObj) {
      if (!(this_present_assObj && that_present_assObj))
        return false;
      if (!this.assObj.equals(that.assObj))
        return false;
    }

    boolean this_present_assWay = true;
    boolean that_present_assWay = true;
    if (this_present_assWay || that_present_assWay) {
      if (!(this_present_assWay && that_present_assWay))
        return false;
      if (this.assWay != that.assWay)
        return false;
    }

    boolean this_present_assContent = true && this.isSetAssContent();
    boolean that_present_assContent = true && that.isSetAssContent();
    if (this_present_assContent || that_present_assContent) {
      if (!(this_present_assContent && that_present_assContent))
        return false;
      if (!this.assContent.equals(that.assContent))
        return false;
    }

    boolean this_present_assMoney = true;
    boolean that_present_assMoney = true;
    if (this_present_assMoney || that_present_assMoney) {
      if (!(this_present_assMoney && that_present_assMoney))
        return false;
      if (this.assMoney != that.assMoney)
        return false;
    }

    boolean this_present_assStartDate = true && this.isSetAssStartDate();
    boolean that_present_assStartDate = true && that.isSetAssStartDate();
    if (this_present_assStartDate || that_present_assStartDate) {
      if (!(this_present_assStartDate && that_present_assStartDate))
        return false;
      if (!this.assStartDate.equals(that.assStartDate))
        return false;
    }

    boolean this_present_assDeadline = true;
    boolean that_present_assDeadline = true;
    if (this_present_assDeadline || that_present_assDeadline) {
      if (!(this_present_assDeadline && that_present_assDeadline))
        return false;
      if (this.assDeadline != that.assDeadline)
        return false;
    }

    boolean this_present_assEndDate = true && this.isSetAssEndDate();
    boolean that_present_assEndDate = true && that.isSetAssEndDate();
    if (this_present_assEndDate || that_present_assEndDate) {
      if (!(this_present_assEndDate && that_present_assEndDate))
        return false;
      if (!this.assEndDate.equals(that.assEndDate))
        return false;
    }

    boolean this_present_dutyRatio = true;
    boolean that_present_dutyRatio = true;
    if (this_present_dutyRatio || that_present_dutyRatio) {
      if (!(this_present_dutyRatio && that_present_dutyRatio))
        return false;
      if (this.dutyRatio != that.dutyRatio)
        return false;
    }

    boolean this_present_assRelCon = true && this.isSetAssRelCon();
    boolean that_present_assRelCon = true && that.isSetAssRelCon();
    if (this_present_assRelCon || that_present_assRelCon) {
      if (!(this_present_assRelCon && that_present_assRelCon))
        return false;
      if (!this.assRelCon.equals(that.assRelCon))
        return false;
    }

    boolean this_present_dutyBalance = true;
    boolean that_present_dutyBalance = true;
    if (this_present_dutyBalance || that_present_dutyBalance) {
      if (!(this_present_dutyBalance && that_present_dutyBalance))
        return false;
      if (this.dutyBalance != that.dutyBalance)
        return false;
    }

    boolean this_present_assPayMoney = true;
    boolean that_present_assPayMoney = true;
    if (this_present_assPayMoney || that_present_assPayMoney) {
      if (!(this_present_assPayMoney && that_present_assPayMoney))
        return false;
      if (this.assPayMoney != that.assPayMoney)
        return false;
    }

    boolean this_present_assOptn = true && this.isSetAssOptn();
    boolean that_present_assOptn = true && that.isSetAssOptn();
    if (this_present_assOptn || that_present_assOptn) {
      if (!(this_present_assOptn && that_present_assOptn))
        return false;
      if (!this.assOptn.equals(that.assOptn))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_assWayVal = true && this.isSetAssWayVal();
    boolean that_present_assWayVal = true && that.isSetAssWayVal();
    if (this_present_assWayVal || that_present_assWayVal) {
      if (!(this_present_assWayVal && that_present_assWayVal))
        return false;
      if (!this.assWayVal.equals(that.assWayVal))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_assObj = true && (isSetAssObj());
    list.add(present_assObj);
    if (present_assObj)
      list.add(assObj);

    boolean present_assWay = true;
    list.add(present_assWay);
    if (present_assWay)
      list.add(assWay);

    boolean present_assContent = true && (isSetAssContent());
    list.add(present_assContent);
    if (present_assContent)
      list.add(assContent);

    boolean present_assMoney = true;
    list.add(present_assMoney);
    if (present_assMoney)
      list.add(assMoney);

    boolean present_assStartDate = true && (isSetAssStartDate());
    list.add(present_assStartDate);
    if (present_assStartDate)
      list.add(assStartDate);

    boolean present_assDeadline = true;
    list.add(present_assDeadline);
    if (present_assDeadline)
      list.add(assDeadline);

    boolean present_assEndDate = true && (isSetAssEndDate());
    list.add(present_assEndDate);
    if (present_assEndDate)
      list.add(assEndDate);

    boolean present_dutyRatio = true;
    list.add(present_dutyRatio);
    if (present_dutyRatio)
      list.add(dutyRatio);

    boolean present_assRelCon = true && (isSetAssRelCon());
    list.add(present_assRelCon);
    if (present_assRelCon)
      list.add(assRelCon);

    boolean present_dutyBalance = true;
    list.add(present_dutyBalance);
    if (present_dutyBalance)
      list.add(dutyBalance);

    boolean present_assPayMoney = true;
    list.add(present_assPayMoney);
    if (present_assPayMoney)
      list.add(assPayMoney);

    boolean present_assOptn = true && (isSetAssOptn());
    list.add(present_assOptn);
    if (present_assOptn)
      list.add(assOptn);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_assWayVal = true && (isSetAssWayVal());
    list.add(present_assWayVal);
    if (present_assWayVal)
      list.add(assWayVal);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComAssure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssObj()).compareTo(other.isSetAssObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assObj, other.assObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssWay()).compareTo(other.isSetAssWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assWay, other.assWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssContent()).compareTo(other.isSetAssContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assContent, other.assContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssMoney()).compareTo(other.isSetAssMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assMoney, other.assMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssStartDate()).compareTo(other.isSetAssStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assStartDate, other.assStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssDeadline()).compareTo(other.isSetAssDeadline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssDeadline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assDeadline, other.assDeadline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssEndDate()).compareTo(other.isSetAssEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assEndDate, other.assEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDutyRatio()).compareTo(other.isSetDutyRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDutyRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dutyRatio, other.dutyRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssRelCon()).compareTo(other.isSetAssRelCon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssRelCon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assRelCon, other.assRelCon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDutyBalance()).compareTo(other.isSetDutyBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDutyBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dutyBalance, other.dutyBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssPayMoney()).compareTo(other.isSetAssPayMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssPayMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assPayMoney, other.assPayMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssOptn()).compareTo(other.isSetAssOptn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssOptn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assOptn, other.assOptn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssWayVal()).compareTo(other.isSetAssWayVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssWayVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assWayVal, other.assWayVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComAssure(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assObj:");
    if (this.assObj == null) {
      sb.append("null");
    } else {
      sb.append(this.assObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assWay:");
    sb.append(this.assWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assContent:");
    if (this.assContent == null) {
      sb.append("null");
    } else {
      sb.append(this.assContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assMoney:");
    sb.append(this.assMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assStartDate:");
    if (this.assStartDate == null) {
      sb.append("null");
    } else {
      sb.append(this.assStartDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assDeadline:");
    sb.append(this.assDeadline);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assEndDate:");
    if (this.assEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.assEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dutyRatio:");
    sb.append(this.dutyRatio);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assRelCon:");
    if (this.assRelCon == null) {
      sb.append("null");
    } else {
      sb.append(this.assRelCon);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dutyBalance:");
    sb.append(this.dutyBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assPayMoney:");
    sb.append(this.assPayMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assOptn:");
    if (this.assOptn == null) {
      sb.append("null");
    } else {
      sb.append(this.assOptn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assWayVal:");
    if (this.assWayVal == null) {
      sb.append("null");
    } else {
      sb.append(this.assWayVal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComAssureStandardSchemeFactory implements SchemeFactory {
    public CusComAssureStandardScheme getScheme() {
      return new CusComAssureStandardScheme();
    }
  }

  private static class CusComAssureStandardScheme extends StandardScheme<CusComAssure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComAssure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ASS_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assObj = iprot.readString();
              struct.setAssObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ASS_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assWay = iprot.readI32();
              struct.setAssWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASS_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assContent = iprot.readString();
              struct.setAssContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ASS_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assMoney = iprot.readDouble();
              struct.setAssMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ASS_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assStartDate = iprot.readString();
              struct.setAssStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASS_DEADLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assDeadline = iprot.readI32();
              struct.setAssDeadlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ASS_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assEndDate = iprot.readString();
              struct.setAssEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DUTY_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dutyRatio = iprot.readDouble();
              struct.setDutyRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ASS_REL_CON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assRelCon = iprot.readString();
              struct.setAssRelConIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DUTY_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dutyBalance = iprot.readDouble();
              struct.setDutyBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ASS_PAY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assPayMoney = iprot.readDouble();
              struct.setAssPayMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ASS_OPTN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assOptn = iprot.readString();
              struct.setAssOptnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ASS_WAY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assWayVal = iprot.readString();
              struct.setAssWayValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComAssure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.assObj != null) {
        oprot.writeFieldBegin(ASS_OBJ_FIELD_DESC);
        oprot.writeString(struct.assObj);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASS_WAY_FIELD_DESC);
      oprot.writeI32(struct.assWay);
      oprot.writeFieldEnd();
      if (struct.assContent != null) {
        oprot.writeFieldBegin(ASS_CONTENT_FIELD_DESC);
        oprot.writeString(struct.assContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASS_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assMoney);
      oprot.writeFieldEnd();
      if (struct.assStartDate != null) {
        oprot.writeFieldBegin(ASS_START_DATE_FIELD_DESC);
        oprot.writeString(struct.assStartDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASS_DEADLINE_FIELD_DESC);
      oprot.writeI32(struct.assDeadline);
      oprot.writeFieldEnd();
      if (struct.assEndDate != null) {
        oprot.writeFieldBegin(ASS_END_DATE_FIELD_DESC);
        oprot.writeString(struct.assEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DUTY_RATIO_FIELD_DESC);
      oprot.writeDouble(struct.dutyRatio);
      oprot.writeFieldEnd();
      if (struct.assRelCon != null) {
        oprot.writeFieldBegin(ASS_REL_CON_FIELD_DESC);
        oprot.writeString(struct.assRelCon);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DUTY_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.dutyBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASS_PAY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assPayMoney);
      oprot.writeFieldEnd();
      if (struct.assOptn != null) {
        oprot.writeFieldBegin(ASS_OPTN_FIELD_DESC);
        oprot.writeString(struct.assOptn);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.assWayVal != null) {
        oprot.writeFieldBegin(ASS_WAY_VAL_FIELD_DESC);
        oprot.writeString(struct.assWayVal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComAssureTupleSchemeFactory implements SchemeFactory {
    public CusComAssureTupleScheme getScheme() {
      return new CusComAssureTupleScheme();
    }
  }

  private static class CusComAssureTupleScheme extends TupleScheme<CusComAssure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComAssure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetAssObj()) {
        optionals.set(2);
      }
      if (struct.isSetAssWay()) {
        optionals.set(3);
      }
      if (struct.isSetAssContent()) {
        optionals.set(4);
      }
      if (struct.isSetAssMoney()) {
        optionals.set(5);
      }
      if (struct.isSetAssStartDate()) {
        optionals.set(6);
      }
      if (struct.isSetAssDeadline()) {
        optionals.set(7);
      }
      if (struct.isSetAssEndDate()) {
        optionals.set(8);
      }
      if (struct.isSetDutyRatio()) {
        optionals.set(9);
      }
      if (struct.isSetAssRelCon()) {
        optionals.set(10);
      }
      if (struct.isSetDutyBalance()) {
        optionals.set(11);
      }
      if (struct.isSetAssPayMoney()) {
        optionals.set(12);
      }
      if (struct.isSetAssOptn()) {
        optionals.set(13);
      }
      if (struct.isSetRemark()) {
        optionals.set(14);
      }
      if (struct.isSetStatus()) {
        optionals.set(15);
      }
      if (struct.isSetAssWayVal()) {
        optionals.set(16);
      }
      if (struct.isSetPage()) {
        optionals.set(17);
      }
      if (struct.isSetRows()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetAssObj()) {
        oprot.writeString(struct.assObj);
      }
      if (struct.isSetAssWay()) {
        oprot.writeI32(struct.assWay);
      }
      if (struct.isSetAssContent()) {
        oprot.writeString(struct.assContent);
      }
      if (struct.isSetAssMoney()) {
        oprot.writeDouble(struct.assMoney);
      }
      if (struct.isSetAssStartDate()) {
        oprot.writeString(struct.assStartDate);
      }
      if (struct.isSetAssDeadline()) {
        oprot.writeI32(struct.assDeadline);
      }
      if (struct.isSetAssEndDate()) {
        oprot.writeString(struct.assEndDate);
      }
      if (struct.isSetDutyRatio()) {
        oprot.writeDouble(struct.dutyRatio);
      }
      if (struct.isSetAssRelCon()) {
        oprot.writeString(struct.assRelCon);
      }
      if (struct.isSetDutyBalance()) {
        oprot.writeDouble(struct.dutyBalance);
      }
      if (struct.isSetAssPayMoney()) {
        oprot.writeDouble(struct.assPayMoney);
      }
      if (struct.isSetAssOptn()) {
        oprot.writeString(struct.assOptn);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetAssWayVal()) {
        oprot.writeString(struct.assWayVal);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComAssure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.assObj = iprot.readString();
        struct.setAssObjIsSet(true);
      }
      if (incoming.get(3)) {
        struct.assWay = iprot.readI32();
        struct.setAssWayIsSet(true);
      }
      if (incoming.get(4)) {
        struct.assContent = iprot.readString();
        struct.setAssContentIsSet(true);
      }
      if (incoming.get(5)) {
        struct.assMoney = iprot.readDouble();
        struct.setAssMoneyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.assStartDate = iprot.readString();
        struct.setAssStartDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.assDeadline = iprot.readI32();
        struct.setAssDeadlineIsSet(true);
      }
      if (incoming.get(8)) {
        struct.assEndDate = iprot.readString();
        struct.setAssEndDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dutyRatio = iprot.readDouble();
        struct.setDutyRatioIsSet(true);
      }
      if (incoming.get(10)) {
        struct.assRelCon = iprot.readString();
        struct.setAssRelConIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dutyBalance = iprot.readDouble();
        struct.setDutyBalanceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.assPayMoney = iprot.readDouble();
        struct.setAssPayMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.assOptn = iprot.readString();
        struct.setAssOptnIsSet(true);
      }
      if (incoming.get(14)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(15)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.assWayVal = iprot.readString();
        struct.setAssWayValIsSet(true);
      }
      if (incoming.get(17)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(18)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


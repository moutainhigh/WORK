/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComDebt implements org.apache.thrift.TBase<CusComDebt, CusComDebt._Fields>, java.io.Serializable, Cloneable, Comparable<CusComDebt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComDebt");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DEBT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("debtType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEBT_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("debtPerson", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DEBT_EXPL_FIELD_DESC = new org.apache.thrift.protocol.TField("debtExpl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField LOAN_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanStartDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LOAD_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loadEndDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("repay", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField LOAN_SURPLU_FIELD_DESC = new org.apache.thrift.protocol.TField("loanSurplu", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField LAST_REPAY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRepayDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REPAY_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("repayWay", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ASS_PAY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("assPayMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField MONTH_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("monthPay", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField WAR_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("warWay", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField VOUCHERC_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("vouchercWay", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField GUARANTEE_PID_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteePid", org.apache.thrift.protocol.TType.I32, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComDebtStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComDebtTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public String debtType; // required
  public String debtPerson; // required
  public double loanMoney; // required
  public String debtExpl; // required
  public String loanStartDate; // required
  public String loadEndDate; // required
  public double repay; // required
  public double loanSurplu; // required
  public String lastRepayDate; // required
  public int repayWay; // required
  public double assPayMoney; // required
  public double monthPay; // required
  public String warWay; // required
  public String remark; // required
  public int status; // required
  public int vouchercWay; // required
  public int page; // required
  public int rows; // required
  public int guaranteePid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    DEBT_TYPE((short)4, "debtType"),
    DEBT_PERSON((short)5, "debtPerson"),
    LOAN_MONEY((short)6, "loanMoney"),
    DEBT_EXPL((short)7, "debtExpl"),
    LOAN_START_DATE((short)8, "loanStartDate"),
    LOAD_END_DATE((short)9, "loadEndDate"),
    REPAY((short)10, "repay"),
    LOAN_SURPLU((short)11, "loanSurplu"),
    LAST_REPAY_DATE((short)12, "lastRepayDate"),
    REPAY_WAY((short)13, "repayWay"),
    ASS_PAY_MONEY((short)14, "assPayMoney"),
    MONTH_PAY((short)15, "monthPay"),
    WAR_WAY((short)16, "warWay"),
    REMARK((short)3, "remark"),
    STATUS((short)17, "status"),
    VOUCHERC_WAY((short)18, "vouchercWay"),
    PAGE((short)19, "page"),
    ROWS((short)20, "rows"),
    GUARANTEE_PID((short)21, "guaranteePid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 4: // DEBT_TYPE
          return DEBT_TYPE;
        case 5: // DEBT_PERSON
          return DEBT_PERSON;
        case 6: // LOAN_MONEY
          return LOAN_MONEY;
        case 7: // DEBT_EXPL
          return DEBT_EXPL;
        case 8: // LOAN_START_DATE
          return LOAN_START_DATE;
        case 9: // LOAD_END_DATE
          return LOAD_END_DATE;
        case 10: // REPAY
          return REPAY;
        case 11: // LOAN_SURPLU
          return LOAN_SURPLU;
        case 12: // LAST_REPAY_DATE
          return LAST_REPAY_DATE;
        case 13: // REPAY_WAY
          return REPAY_WAY;
        case 14: // ASS_PAY_MONEY
          return ASS_PAY_MONEY;
        case 15: // MONTH_PAY
          return MONTH_PAY;
        case 16: // WAR_WAY
          return WAR_WAY;
        case 3: // REMARK
          return REMARK;
        case 17: // STATUS
          return STATUS;
        case 18: // VOUCHERC_WAY
          return VOUCHERC_WAY;
        case 19: // PAGE
          return PAGE;
        case 20: // ROWS
          return ROWS;
        case 21: // GUARANTEE_PID
          return GUARANTEE_PID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANMONEY_ISSET_ID = 1;
  private static final int __REPAY_ISSET_ID = 2;
  private static final int __LOANSURPLU_ISSET_ID = 3;
  private static final int __REPAYWAY_ISSET_ID = 4;
  private static final int __ASSPAYMONEY_ISSET_ID = 5;
  private static final int __MONTHPAY_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __VOUCHERCWAY_ISSET_ID = 8;
  private static final int __PAGE_ISSET_ID = 9;
  private static final int __ROWS_ISSET_ID = 10;
  private static final int __GUARANTEEPID_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.DEBT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("debtType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEBT_PERSON, new org.apache.thrift.meta_data.FieldMetaData("debtPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEBT_EXPL, new org.apache.thrift.meta_data.FieldMetaData("debtExpl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAD_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("loadEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY, new org.apache.thrift.meta_data.FieldMetaData("repay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOAN_SURPLU, new org.apache.thrift.meta_data.FieldMetaData("loanSurplu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_REPAY_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastRepayDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_WAY, new org.apache.thrift.meta_data.FieldMetaData("repayWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASS_PAY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("assPayMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_PAY, new org.apache.thrift.meta_data.FieldMetaData("monthPay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WAR_WAY, new org.apache.thrift.meta_data.FieldMetaData("warWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOUCHERC_WAY, new org.apache.thrift.meta_data.FieldMetaData("vouchercWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GUARANTEE_PID, new org.apache.thrift.meta_data.FieldMetaData("guaranteePid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComDebt.class, metaDataMap);
  }

  public CusComDebt() {
  }

  public CusComDebt(
    int pid,
    CusComBase cusComBase,
    String debtType,
    String debtPerson,
    double loanMoney,
    String debtExpl,
    String loanStartDate,
    String loadEndDate,
    double repay,
    double loanSurplu,
    String lastRepayDate,
    int repayWay,
    double assPayMoney,
    double monthPay,
    String warWay,
    String remark,
    int status,
    int vouchercWay,
    int page,
    int rows,
    int guaranteePid)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.debtType = debtType;
    this.debtPerson = debtPerson;
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.debtExpl = debtExpl;
    this.loanStartDate = loanStartDate;
    this.loadEndDate = loadEndDate;
    this.repay = repay;
    setRepayIsSet(true);
    this.loanSurplu = loanSurplu;
    setLoanSurpluIsSet(true);
    this.lastRepayDate = lastRepayDate;
    this.repayWay = repayWay;
    setRepayWayIsSet(true);
    this.assPayMoney = assPayMoney;
    setAssPayMoneyIsSet(true);
    this.monthPay = monthPay;
    setMonthPayIsSet(true);
    this.warWay = warWay;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.vouchercWay = vouchercWay;
    setVouchercWayIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.guaranteePid = guaranteePid;
    setGuaranteePidIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComDebt(CusComDebt other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetDebtType()) {
      this.debtType = other.debtType;
    }
    if (other.isSetDebtPerson()) {
      this.debtPerson = other.debtPerson;
    }
    this.loanMoney = other.loanMoney;
    if (other.isSetDebtExpl()) {
      this.debtExpl = other.debtExpl;
    }
    if (other.isSetLoanStartDate()) {
      this.loanStartDate = other.loanStartDate;
    }
    if (other.isSetLoadEndDate()) {
      this.loadEndDate = other.loadEndDate;
    }
    this.repay = other.repay;
    this.loanSurplu = other.loanSurplu;
    if (other.isSetLastRepayDate()) {
      this.lastRepayDate = other.lastRepayDate;
    }
    this.repayWay = other.repayWay;
    this.assPayMoney = other.assPayMoney;
    this.monthPay = other.monthPay;
    if (other.isSetWarWay()) {
      this.warWay = other.warWay;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    this.vouchercWay = other.vouchercWay;
    this.page = other.page;
    this.rows = other.rows;
    this.guaranteePid = other.guaranteePid;
  }

  public CusComDebt deepCopy() {
    return new CusComDebt(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    this.debtType = null;
    this.debtPerson = null;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    this.debtExpl = null;
    this.loanStartDate = null;
    this.loadEndDate = null;
    setRepayIsSet(false);
    this.repay = 0.0;
    setLoanSurpluIsSet(false);
    this.loanSurplu = 0.0;
    this.lastRepayDate = null;
    setRepayWayIsSet(false);
    this.repayWay = 0;
    setAssPayMoneyIsSet(false);
    this.assPayMoney = 0.0;
    setMonthPayIsSet(false);
    this.monthPay = 0.0;
    this.warWay = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    setVouchercWayIsSet(false);
    this.vouchercWay = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setGuaranteePidIsSet(false);
    this.guaranteePid = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComDebt setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComDebt setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public String getDebtType() {
    return this.debtType;
  }

  public CusComDebt setDebtType(String debtType) {
    this.debtType = debtType;
    return this;
  }

  public void unsetDebtType() {
    this.debtType = null;
  }

  /** Returns true if field debtType is set (has been assigned a value) and false otherwise */
  public boolean isSetDebtType() {
    return this.debtType != null;
  }

  public void setDebtTypeIsSet(boolean value) {
    if (!value) {
      this.debtType = null;
    }
  }

  public String getDebtPerson() {
    return this.debtPerson;
  }

  public CusComDebt setDebtPerson(String debtPerson) {
    this.debtPerson = debtPerson;
    return this;
  }

  public void unsetDebtPerson() {
    this.debtPerson = null;
  }

  /** Returns true if field debtPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetDebtPerson() {
    return this.debtPerson != null;
  }

  public void setDebtPersonIsSet(boolean value) {
    if (!value) {
      this.debtPerson = null;
    }
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public CusComDebt setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public String getDebtExpl() {
    return this.debtExpl;
  }

  public CusComDebt setDebtExpl(String debtExpl) {
    this.debtExpl = debtExpl;
    return this;
  }

  public void unsetDebtExpl() {
    this.debtExpl = null;
  }

  /** Returns true if field debtExpl is set (has been assigned a value) and false otherwise */
  public boolean isSetDebtExpl() {
    return this.debtExpl != null;
  }

  public void setDebtExplIsSet(boolean value) {
    if (!value) {
      this.debtExpl = null;
    }
  }

  public String getLoanStartDate() {
    return this.loanStartDate;
  }

  public CusComDebt setLoanStartDate(String loanStartDate) {
    this.loanStartDate = loanStartDate;
    return this;
  }

  public void unsetLoanStartDate() {
    this.loanStartDate = null;
  }

  /** Returns true if field loanStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanStartDate() {
    return this.loanStartDate != null;
  }

  public void setLoanStartDateIsSet(boolean value) {
    if (!value) {
      this.loanStartDate = null;
    }
  }

  public String getLoadEndDate() {
    return this.loadEndDate;
  }

  public CusComDebt setLoadEndDate(String loadEndDate) {
    this.loadEndDate = loadEndDate;
    return this;
  }

  public void unsetLoadEndDate() {
    this.loadEndDate = null;
  }

  /** Returns true if field loadEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoadEndDate() {
    return this.loadEndDate != null;
  }

  public void setLoadEndDateIsSet(boolean value) {
    if (!value) {
      this.loadEndDate = null;
    }
  }

  public double getRepay() {
    return this.repay;
  }

  public CusComDebt setRepay(double repay) {
    this.repay = repay;
    setRepayIsSet(true);
    return this;
  }

  public void unsetRepay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAY_ISSET_ID);
  }

  /** Returns true if field repay is set (has been assigned a value) and false otherwise */
  public boolean isSetRepay() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAY_ISSET_ID);
  }

  public void setRepayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAY_ISSET_ID, value);
  }

  public double getLoanSurplu() {
    return this.loanSurplu;
  }

  public CusComDebt setLoanSurplu(double loanSurplu) {
    this.loanSurplu = loanSurplu;
    setLoanSurpluIsSet(true);
    return this;
  }

  public void unsetLoanSurplu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANSURPLU_ISSET_ID);
  }

  /** Returns true if field loanSurplu is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanSurplu() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANSURPLU_ISSET_ID);
  }

  public void setLoanSurpluIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANSURPLU_ISSET_ID, value);
  }

  public String getLastRepayDate() {
    return this.lastRepayDate;
  }

  public CusComDebt setLastRepayDate(String lastRepayDate) {
    this.lastRepayDate = lastRepayDate;
    return this;
  }

  public void unsetLastRepayDate() {
    this.lastRepayDate = null;
  }

  /** Returns true if field lastRepayDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRepayDate() {
    return this.lastRepayDate != null;
  }

  public void setLastRepayDateIsSet(boolean value) {
    if (!value) {
      this.lastRepayDate = null;
    }
  }

  public int getRepayWay() {
    return this.repayWay;
  }

  public CusComDebt setRepayWay(int repayWay) {
    this.repayWay = repayWay;
    setRepayWayIsSet(true);
    return this;
  }

  public void unsetRepayWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYWAY_ISSET_ID);
  }

  /** Returns true if field repayWay is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayWay() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYWAY_ISSET_ID);
  }

  public void setRepayWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYWAY_ISSET_ID, value);
  }

  public double getAssPayMoney() {
    return this.assPayMoney;
  }

  public CusComDebt setAssPayMoney(double assPayMoney) {
    this.assPayMoney = assPayMoney;
    setAssPayMoneyIsSet(true);
    return this;
  }

  public void unsetAssPayMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSPAYMONEY_ISSET_ID);
  }

  /** Returns true if field assPayMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAssPayMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSPAYMONEY_ISSET_ID);
  }

  public void setAssPayMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSPAYMONEY_ISSET_ID, value);
  }

  public double getMonthPay() {
    return this.monthPay;
  }

  public CusComDebt setMonthPay(double monthPay) {
    this.monthPay = monthPay;
    setMonthPayIsSet(true);
    return this;
  }

  public void unsetMonthPay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHPAY_ISSET_ID);
  }

  /** Returns true if field monthPay is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthPay() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHPAY_ISSET_ID);
  }

  public void setMonthPayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHPAY_ISSET_ID, value);
  }

  public String getWarWay() {
    return this.warWay;
  }

  public CusComDebt setWarWay(String warWay) {
    this.warWay = warWay;
    return this;
  }

  public void unsetWarWay() {
    this.warWay = null;
  }

  /** Returns true if field warWay is set (has been assigned a value) and false otherwise */
  public boolean isSetWarWay() {
    return this.warWay != null;
  }

  public void setWarWayIsSet(boolean value) {
    if (!value) {
      this.warWay = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComDebt setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusComDebt setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getVouchercWay() {
    return this.vouchercWay;
  }

  public CusComDebt setVouchercWay(int vouchercWay) {
    this.vouchercWay = vouchercWay;
    setVouchercWayIsSet(true);
    return this;
  }

  public void unsetVouchercWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOUCHERCWAY_ISSET_ID);
  }

  /** Returns true if field vouchercWay is set (has been assigned a value) and false otherwise */
  public boolean isSetVouchercWay() {
    return EncodingUtils.testBit(__isset_bitfield, __VOUCHERCWAY_ISSET_ID);
  }

  public void setVouchercWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOUCHERCWAY_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusComDebt setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusComDebt setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getGuaranteePid() {
    return this.guaranteePid;
  }

  public CusComDebt setGuaranteePid(int guaranteePid) {
    this.guaranteePid = guaranteePid;
    setGuaranteePidIsSet(true);
    return this;
  }

  public void unsetGuaranteePid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEPID_ISSET_ID);
  }

  /** Returns true if field guaranteePid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteePid() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEPID_ISSET_ID);
  }

  public void setGuaranteePidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case DEBT_TYPE:
      if (value == null) {
        unsetDebtType();
      } else {
        setDebtType((String)value);
      }
      break;

    case DEBT_PERSON:
      if (value == null) {
        unsetDebtPerson();
      } else {
        setDebtPerson((String)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case DEBT_EXPL:
      if (value == null) {
        unsetDebtExpl();
      } else {
        setDebtExpl((String)value);
      }
      break;

    case LOAN_START_DATE:
      if (value == null) {
        unsetLoanStartDate();
      } else {
        setLoanStartDate((String)value);
      }
      break;

    case LOAD_END_DATE:
      if (value == null) {
        unsetLoadEndDate();
      } else {
        setLoadEndDate((String)value);
      }
      break;

    case REPAY:
      if (value == null) {
        unsetRepay();
      } else {
        setRepay((Double)value);
      }
      break;

    case LOAN_SURPLU:
      if (value == null) {
        unsetLoanSurplu();
      } else {
        setLoanSurplu((Double)value);
      }
      break;

    case LAST_REPAY_DATE:
      if (value == null) {
        unsetLastRepayDate();
      } else {
        setLastRepayDate((String)value);
      }
      break;

    case REPAY_WAY:
      if (value == null) {
        unsetRepayWay();
      } else {
        setRepayWay((Integer)value);
      }
      break;

    case ASS_PAY_MONEY:
      if (value == null) {
        unsetAssPayMoney();
      } else {
        setAssPayMoney((Double)value);
      }
      break;

    case MONTH_PAY:
      if (value == null) {
        unsetMonthPay();
      } else {
        setMonthPay((Double)value);
      }
      break;

    case WAR_WAY:
      if (value == null) {
        unsetWarWay();
      } else {
        setWarWay((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case VOUCHERC_WAY:
      if (value == null) {
        unsetVouchercWay();
      } else {
        setVouchercWay((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case GUARANTEE_PID:
      if (value == null) {
        unsetGuaranteePid();
      } else {
        setGuaranteePid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case DEBT_TYPE:
      return getDebtType();

    case DEBT_PERSON:
      return getDebtPerson();

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case DEBT_EXPL:
      return getDebtExpl();

    case LOAN_START_DATE:
      return getLoanStartDate();

    case LOAD_END_DATE:
      return getLoadEndDate();

    case REPAY:
      return Double.valueOf(getRepay());

    case LOAN_SURPLU:
      return Double.valueOf(getLoanSurplu());

    case LAST_REPAY_DATE:
      return getLastRepayDate();

    case REPAY_WAY:
      return Integer.valueOf(getRepayWay());

    case ASS_PAY_MONEY:
      return Double.valueOf(getAssPayMoney());

    case MONTH_PAY:
      return Double.valueOf(getMonthPay());

    case WAR_WAY:
      return getWarWay();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case VOUCHERC_WAY:
      return Integer.valueOf(getVouchercWay());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case GUARANTEE_PID:
      return Integer.valueOf(getGuaranteePid());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case DEBT_TYPE:
      return isSetDebtType();
    case DEBT_PERSON:
      return isSetDebtPerson();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case DEBT_EXPL:
      return isSetDebtExpl();
    case LOAN_START_DATE:
      return isSetLoanStartDate();
    case LOAD_END_DATE:
      return isSetLoadEndDate();
    case REPAY:
      return isSetRepay();
    case LOAN_SURPLU:
      return isSetLoanSurplu();
    case LAST_REPAY_DATE:
      return isSetLastRepayDate();
    case REPAY_WAY:
      return isSetRepayWay();
    case ASS_PAY_MONEY:
      return isSetAssPayMoney();
    case MONTH_PAY:
      return isSetMonthPay();
    case WAR_WAY:
      return isSetWarWay();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case VOUCHERC_WAY:
      return isSetVouchercWay();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case GUARANTEE_PID:
      return isSetGuaranteePid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComDebt)
      return this.equals((CusComDebt)that);
    return false;
  }

  public boolean equals(CusComDebt that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_debtType = true && this.isSetDebtType();
    boolean that_present_debtType = true && that.isSetDebtType();
    if (this_present_debtType || that_present_debtType) {
      if (!(this_present_debtType && that_present_debtType))
        return false;
      if (!this.debtType.equals(that.debtType))
        return false;
    }

    boolean this_present_debtPerson = true && this.isSetDebtPerson();
    boolean that_present_debtPerson = true && that.isSetDebtPerson();
    if (this_present_debtPerson || that_present_debtPerson) {
      if (!(this_present_debtPerson && that_present_debtPerson))
        return false;
      if (!this.debtPerson.equals(that.debtPerson))
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_debtExpl = true && this.isSetDebtExpl();
    boolean that_present_debtExpl = true && that.isSetDebtExpl();
    if (this_present_debtExpl || that_present_debtExpl) {
      if (!(this_present_debtExpl && that_present_debtExpl))
        return false;
      if (!this.debtExpl.equals(that.debtExpl))
        return false;
    }

    boolean this_present_loanStartDate = true && this.isSetLoanStartDate();
    boolean that_present_loanStartDate = true && that.isSetLoanStartDate();
    if (this_present_loanStartDate || that_present_loanStartDate) {
      if (!(this_present_loanStartDate && that_present_loanStartDate))
        return false;
      if (!this.loanStartDate.equals(that.loanStartDate))
        return false;
    }

    boolean this_present_loadEndDate = true && this.isSetLoadEndDate();
    boolean that_present_loadEndDate = true && that.isSetLoadEndDate();
    if (this_present_loadEndDate || that_present_loadEndDate) {
      if (!(this_present_loadEndDate && that_present_loadEndDate))
        return false;
      if (!this.loadEndDate.equals(that.loadEndDate))
        return false;
    }

    boolean this_present_repay = true;
    boolean that_present_repay = true;
    if (this_present_repay || that_present_repay) {
      if (!(this_present_repay && that_present_repay))
        return false;
      if (this.repay != that.repay)
        return false;
    }

    boolean this_present_loanSurplu = true;
    boolean that_present_loanSurplu = true;
    if (this_present_loanSurplu || that_present_loanSurplu) {
      if (!(this_present_loanSurplu && that_present_loanSurplu))
        return false;
      if (this.loanSurplu != that.loanSurplu)
        return false;
    }

    boolean this_present_lastRepayDate = true && this.isSetLastRepayDate();
    boolean that_present_lastRepayDate = true && that.isSetLastRepayDate();
    if (this_present_lastRepayDate || that_present_lastRepayDate) {
      if (!(this_present_lastRepayDate && that_present_lastRepayDate))
        return false;
      if (!this.lastRepayDate.equals(that.lastRepayDate))
        return false;
    }

    boolean this_present_repayWay = true;
    boolean that_present_repayWay = true;
    if (this_present_repayWay || that_present_repayWay) {
      if (!(this_present_repayWay && that_present_repayWay))
        return false;
      if (this.repayWay != that.repayWay)
        return false;
    }

    boolean this_present_assPayMoney = true;
    boolean that_present_assPayMoney = true;
    if (this_present_assPayMoney || that_present_assPayMoney) {
      if (!(this_present_assPayMoney && that_present_assPayMoney))
        return false;
      if (this.assPayMoney != that.assPayMoney)
        return false;
    }

    boolean this_present_monthPay = true;
    boolean that_present_monthPay = true;
    if (this_present_monthPay || that_present_monthPay) {
      if (!(this_present_monthPay && that_present_monthPay))
        return false;
      if (this.monthPay != that.monthPay)
        return false;
    }

    boolean this_present_warWay = true && this.isSetWarWay();
    boolean that_present_warWay = true && that.isSetWarWay();
    if (this_present_warWay || that_present_warWay) {
      if (!(this_present_warWay && that_present_warWay))
        return false;
      if (!this.warWay.equals(that.warWay))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_vouchercWay = true;
    boolean that_present_vouchercWay = true;
    if (this_present_vouchercWay || that_present_vouchercWay) {
      if (!(this_present_vouchercWay && that_present_vouchercWay))
        return false;
      if (this.vouchercWay != that.vouchercWay)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_guaranteePid = true;
    boolean that_present_guaranteePid = true;
    if (this_present_guaranteePid || that_present_guaranteePid) {
      if (!(this_present_guaranteePid && that_present_guaranteePid))
        return false;
      if (this.guaranteePid != that.guaranteePid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_debtType = true && (isSetDebtType());
    list.add(present_debtType);
    if (present_debtType)
      list.add(debtType);

    boolean present_debtPerson = true && (isSetDebtPerson());
    list.add(present_debtPerson);
    if (present_debtPerson)
      list.add(debtPerson);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_debtExpl = true && (isSetDebtExpl());
    list.add(present_debtExpl);
    if (present_debtExpl)
      list.add(debtExpl);

    boolean present_loanStartDate = true && (isSetLoanStartDate());
    list.add(present_loanStartDate);
    if (present_loanStartDate)
      list.add(loanStartDate);

    boolean present_loadEndDate = true && (isSetLoadEndDate());
    list.add(present_loadEndDate);
    if (present_loadEndDate)
      list.add(loadEndDate);

    boolean present_repay = true;
    list.add(present_repay);
    if (present_repay)
      list.add(repay);

    boolean present_loanSurplu = true;
    list.add(present_loanSurplu);
    if (present_loanSurplu)
      list.add(loanSurplu);

    boolean present_lastRepayDate = true && (isSetLastRepayDate());
    list.add(present_lastRepayDate);
    if (present_lastRepayDate)
      list.add(lastRepayDate);

    boolean present_repayWay = true;
    list.add(present_repayWay);
    if (present_repayWay)
      list.add(repayWay);

    boolean present_assPayMoney = true;
    list.add(present_assPayMoney);
    if (present_assPayMoney)
      list.add(assPayMoney);

    boolean present_monthPay = true;
    list.add(present_monthPay);
    if (present_monthPay)
      list.add(monthPay);

    boolean present_warWay = true && (isSetWarWay());
    list.add(present_warWay);
    if (present_warWay)
      list.add(warWay);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_vouchercWay = true;
    list.add(present_vouchercWay);
    if (present_vouchercWay)
      list.add(vouchercWay);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_guaranteePid = true;
    list.add(present_guaranteePid);
    if (present_guaranteePid)
      list.add(guaranteePid);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComDebt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebtType()).compareTo(other.isSetDebtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debtType, other.debtType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebtPerson()).compareTo(other.isSetDebtPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebtPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debtPerson, other.debtPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDebtExpl()).compareTo(other.isSetDebtExpl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebtExpl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debtExpl, other.debtExpl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanStartDate()).compareTo(other.isSetLoanStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanStartDate, other.loanStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoadEndDate()).compareTo(other.isSetLoadEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoadEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loadEndDate, other.loadEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepay()).compareTo(other.isSetRepay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repay, other.repay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanSurplu()).compareTo(other.isSetLoanSurplu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanSurplu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanSurplu, other.loanSurplu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastRepayDate()).compareTo(other.isSetLastRepayDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRepayDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRepayDate, other.lastRepayDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayWay()).compareTo(other.isSetRepayWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayWay, other.repayWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssPayMoney()).compareTo(other.isSetAssPayMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssPayMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assPayMoney, other.assPayMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthPay()).compareTo(other.isSetMonthPay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthPay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthPay, other.monthPay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarWay()).compareTo(other.isSetWarWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warWay, other.warWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVouchercWay()).compareTo(other.isSetVouchercWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVouchercWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vouchercWay, other.vouchercWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteePid()).compareTo(other.isSetGuaranteePid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteePid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteePid, other.guaranteePid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComDebt(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debtType:");
    if (this.debtType == null) {
      sb.append("null");
    } else {
      sb.append(this.debtType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("debtPerson:");
    if (this.debtPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.debtPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("debtExpl:");
    if (this.debtExpl == null) {
      sb.append("null");
    } else {
      sb.append(this.debtExpl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanStartDate:");
    if (this.loanStartDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanStartDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loadEndDate:");
    if (this.loadEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loadEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repay:");
    sb.append(this.repay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanSurplu:");
    sb.append(this.loanSurplu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastRepayDate:");
    if (this.lastRepayDate == null) {
      sb.append("null");
    } else {
      sb.append(this.lastRepayDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayWay:");
    sb.append(this.repayWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("assPayMoney:");
    sb.append(this.assPayMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthPay:");
    sb.append(this.monthPay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warWay:");
    if (this.warWay == null) {
      sb.append("null");
    } else {
      sb.append(this.warWay);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vouchercWay:");
    sb.append(this.vouchercWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteePid:");
    sb.append(this.guaranteePid);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComDebtStandardSchemeFactory implements SchemeFactory {
    public CusComDebtStandardScheme getScheme() {
      return new CusComDebtStandardScheme();
    }
  }

  private static class CusComDebtStandardScheme extends StandardScheme<CusComDebt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComDebt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEBT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debtType = iprot.readString();
              struct.setDebtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEBT_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debtPerson = iprot.readString();
              struct.setDebtPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEBT_EXPL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debtExpl = iprot.readString();
              struct.setDebtExplIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LOAN_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanStartDate = iprot.readString();
              struct.setLoanStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LOAD_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loadEndDate = iprot.readString();
              struct.setLoadEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repay = iprot.readDouble();
              struct.setRepayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOAN_SURPLU
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanSurplu = iprot.readDouble();
              struct.setLoanSurpluIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LAST_REPAY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastRepayDate = iprot.readString();
              struct.setLastRepayDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REPAY_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayWay = iprot.readI32();
              struct.setRepayWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ASS_PAY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.assPayMoney = iprot.readDouble();
              struct.setAssPayMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MONTH_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthPay = iprot.readDouble();
              struct.setMonthPayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // WAR_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warWay = iprot.readString();
              struct.setWarWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VOUCHERC_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vouchercWay = iprot.readI32();
              struct.setVouchercWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // GUARANTEE_PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.guaranteePid = iprot.readI32();
              struct.setGuaranteePidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComDebt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.debtType != null) {
        oprot.writeFieldBegin(DEBT_TYPE_FIELD_DESC);
        oprot.writeString(struct.debtType);
        oprot.writeFieldEnd();
      }
      if (struct.debtPerson != null) {
        oprot.writeFieldBegin(DEBT_PERSON_FIELD_DESC);
        oprot.writeString(struct.debtPerson);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      if (struct.debtExpl != null) {
        oprot.writeFieldBegin(DEBT_EXPL_FIELD_DESC);
        oprot.writeString(struct.debtExpl);
        oprot.writeFieldEnd();
      }
      if (struct.loanStartDate != null) {
        oprot.writeFieldBegin(LOAN_START_DATE_FIELD_DESC);
        oprot.writeString(struct.loanStartDate);
        oprot.writeFieldEnd();
      }
      if (struct.loadEndDate != null) {
        oprot.writeFieldBegin(LOAD_END_DATE_FIELD_DESC);
        oprot.writeString(struct.loadEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_FIELD_DESC);
      oprot.writeDouble(struct.repay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_SURPLU_FIELD_DESC);
      oprot.writeDouble(struct.loanSurplu);
      oprot.writeFieldEnd();
      if (struct.lastRepayDate != null) {
        oprot.writeFieldBegin(LAST_REPAY_DATE_FIELD_DESC);
        oprot.writeString(struct.lastRepayDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_WAY_FIELD_DESC);
      oprot.writeI32(struct.repayWay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ASS_PAY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.assPayMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_PAY_FIELD_DESC);
      oprot.writeDouble(struct.monthPay);
      oprot.writeFieldEnd();
      if (struct.warWay != null) {
        oprot.writeFieldBegin(WAR_WAY_FIELD_DESC);
        oprot.writeString(struct.warWay);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOUCHERC_WAY_FIELD_DESC);
      oprot.writeI32(struct.vouchercWay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GUARANTEE_PID_FIELD_DESC);
      oprot.writeI32(struct.guaranteePid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComDebtTupleSchemeFactory implements SchemeFactory {
    public CusComDebtTupleScheme getScheme() {
      return new CusComDebtTupleScheme();
    }
  }

  private static class CusComDebtTupleScheme extends TupleScheme<CusComDebt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComDebt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetDebtType()) {
        optionals.set(2);
      }
      if (struct.isSetDebtPerson()) {
        optionals.set(3);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(4);
      }
      if (struct.isSetDebtExpl()) {
        optionals.set(5);
      }
      if (struct.isSetLoanStartDate()) {
        optionals.set(6);
      }
      if (struct.isSetLoadEndDate()) {
        optionals.set(7);
      }
      if (struct.isSetRepay()) {
        optionals.set(8);
      }
      if (struct.isSetLoanSurplu()) {
        optionals.set(9);
      }
      if (struct.isSetLastRepayDate()) {
        optionals.set(10);
      }
      if (struct.isSetRepayWay()) {
        optionals.set(11);
      }
      if (struct.isSetAssPayMoney()) {
        optionals.set(12);
      }
      if (struct.isSetMonthPay()) {
        optionals.set(13);
      }
      if (struct.isSetWarWay()) {
        optionals.set(14);
      }
      if (struct.isSetRemark()) {
        optionals.set(15);
      }
      if (struct.isSetStatus()) {
        optionals.set(16);
      }
      if (struct.isSetVouchercWay()) {
        optionals.set(17);
      }
      if (struct.isSetPage()) {
        optionals.set(18);
      }
      if (struct.isSetRows()) {
        optionals.set(19);
      }
      if (struct.isSetGuaranteePid()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetDebtType()) {
        oprot.writeString(struct.debtType);
      }
      if (struct.isSetDebtPerson()) {
        oprot.writeString(struct.debtPerson);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetDebtExpl()) {
        oprot.writeString(struct.debtExpl);
      }
      if (struct.isSetLoanStartDate()) {
        oprot.writeString(struct.loanStartDate);
      }
      if (struct.isSetLoadEndDate()) {
        oprot.writeString(struct.loadEndDate);
      }
      if (struct.isSetRepay()) {
        oprot.writeDouble(struct.repay);
      }
      if (struct.isSetLoanSurplu()) {
        oprot.writeDouble(struct.loanSurplu);
      }
      if (struct.isSetLastRepayDate()) {
        oprot.writeString(struct.lastRepayDate);
      }
      if (struct.isSetRepayWay()) {
        oprot.writeI32(struct.repayWay);
      }
      if (struct.isSetAssPayMoney()) {
        oprot.writeDouble(struct.assPayMoney);
      }
      if (struct.isSetMonthPay()) {
        oprot.writeDouble(struct.monthPay);
      }
      if (struct.isSetWarWay()) {
        oprot.writeString(struct.warWay);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetVouchercWay()) {
        oprot.writeI32(struct.vouchercWay);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetGuaranteePid()) {
        oprot.writeI32(struct.guaranteePid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComDebt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.debtType = iprot.readString();
        struct.setDebtTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.debtPerson = iprot.readString();
        struct.setDebtPersonIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.debtExpl = iprot.readString();
        struct.setDebtExplIsSet(true);
      }
      if (incoming.get(6)) {
        struct.loanStartDate = iprot.readString();
        struct.setLoanStartDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.loadEndDate = iprot.readString();
        struct.setLoadEndDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.repay = iprot.readDouble();
        struct.setRepayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.loanSurplu = iprot.readDouble();
        struct.setLoanSurpluIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastRepayDate = iprot.readString();
        struct.setLastRepayDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.repayWay = iprot.readI32();
        struct.setRepayWayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.assPayMoney = iprot.readDouble();
        struct.setAssPayMoneyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.monthPay = iprot.readDouble();
        struct.setMonthPayIsSet(true);
      }
      if (incoming.get(14)) {
        struct.warWay = iprot.readString();
        struct.setWarWayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(16)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(17)) {
        struct.vouchercWay = iprot.readI32();
        struct.setVouchercWayIsSet(true);
      }
      if (incoming.get(18)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(19)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.guaranteePid = iprot.readI32();
        struct.setGuaranteePidIsSet(true);
      }
    }
  }

}


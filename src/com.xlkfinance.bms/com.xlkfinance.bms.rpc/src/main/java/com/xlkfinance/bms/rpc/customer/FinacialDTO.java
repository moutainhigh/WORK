/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class FinacialDTO implements org.apache.thrift.TBase<FinacialDTO, FinacialDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinacialDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinacialDTO");

  private static final org.apache.thrift.protocol.TField CASH_FLOW_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("cashFlowReport", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField CASH_FLOW_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("cashFlowItem", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LINE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CUS_COM_CASH_FLOW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComCashFlowId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("isMain", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinacialDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinacialDTOTupleSchemeFactory());
  }

  public List<CashFlowReport> cashFlowReport; // required
  public List<CashFlowItem> cashFlowItem; // required
  public int comId; // required
  public int lineNum; // required
  public int pid; // required
  public String itemName; // required
  public int cusComCashFlowId; // required
  public int isMain; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CASH_FLOW_REPORT((short)1, "cashFlowReport"),
    CASH_FLOW_ITEM((short)2, "cashFlowItem"),
    COM_ID((short)3, "comId"),
    LINE_NUM((short)4, "lineNum"),
    PID((short)5, "pid"),
    ITEM_NAME((short)6, "itemName"),
    CUS_COM_CASH_FLOW_ID((short)7, "cusComCashFlowId"),
    IS_MAIN((short)8, "isMain");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CASH_FLOW_REPORT
          return CASH_FLOW_REPORT;
        case 2: // CASH_FLOW_ITEM
          return CASH_FLOW_ITEM;
        case 3: // COM_ID
          return COM_ID;
        case 4: // LINE_NUM
          return LINE_NUM;
        case 5: // PID
          return PID;
        case 6: // ITEM_NAME
          return ITEM_NAME;
        case 7: // CUS_COM_CASH_FLOW_ID
          return CUS_COM_CASH_FLOW_ID;
        case 8: // IS_MAIN
          return IS_MAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMID_ISSET_ID = 0;
  private static final int __LINENUM_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __CUSCOMCASHFLOWID_ISSET_ID = 3;
  private static final int __ISMAIN_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CASH_FLOW_REPORT, new org.apache.thrift.meta_data.FieldMetaData("cashFlowReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CashFlowReport.class))));
    tmpMap.put(_Fields.CASH_FLOW_ITEM, new org.apache.thrift.meta_data.FieldMetaData("cashFlowItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CashFlowItem.class))));
    tmpMap.put(_Fields.COM_ID, new org.apache.thrift.meta_data.FieldMetaData("comId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LINE_NUM, new org.apache.thrift.meta_data.FieldMetaData("lineNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_COM_CASH_FLOW_ID, new org.apache.thrift.meta_data.FieldMetaData("cusComCashFlowId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_MAIN, new org.apache.thrift.meta_data.FieldMetaData("isMain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinacialDTO.class, metaDataMap);
  }

  public FinacialDTO() {
  }

  public FinacialDTO(
    List<CashFlowReport> cashFlowReport,
    List<CashFlowItem> cashFlowItem,
    int comId,
    int lineNum,
    int pid,
    String itemName,
    int cusComCashFlowId,
    int isMain)
  {
    this();
    this.cashFlowReport = cashFlowReport;
    this.cashFlowItem = cashFlowItem;
    this.comId = comId;
    setComIdIsSet(true);
    this.lineNum = lineNum;
    setLineNumIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.itemName = itemName;
    this.cusComCashFlowId = cusComCashFlowId;
    setCusComCashFlowIdIsSet(true);
    this.isMain = isMain;
    setIsMainIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinacialDTO(FinacialDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCashFlowReport()) {
      List<CashFlowReport> __this__cashFlowReport = new ArrayList<CashFlowReport>(other.cashFlowReport.size());
      for (CashFlowReport other_element : other.cashFlowReport) {
        __this__cashFlowReport.add(new CashFlowReport(other_element));
      }
      this.cashFlowReport = __this__cashFlowReport;
    }
    if (other.isSetCashFlowItem()) {
      List<CashFlowItem> __this__cashFlowItem = new ArrayList<CashFlowItem>(other.cashFlowItem.size());
      for (CashFlowItem other_element : other.cashFlowItem) {
        __this__cashFlowItem.add(new CashFlowItem(other_element));
      }
      this.cashFlowItem = __this__cashFlowItem;
    }
    this.comId = other.comId;
    this.lineNum = other.lineNum;
    this.pid = other.pid;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    this.cusComCashFlowId = other.cusComCashFlowId;
    this.isMain = other.isMain;
  }

  public FinacialDTO deepCopy() {
    return new FinacialDTO(this);
  }

  @Override
  public void clear() {
    this.cashFlowReport = null;
    this.cashFlowItem = null;
    setComIdIsSet(false);
    this.comId = 0;
    setLineNumIsSet(false);
    this.lineNum = 0;
    setPidIsSet(false);
    this.pid = 0;
    this.itemName = null;
    setCusComCashFlowIdIsSet(false);
    this.cusComCashFlowId = 0;
    setIsMainIsSet(false);
    this.isMain = 0;
  }

  public int getCashFlowReportSize() {
    return (this.cashFlowReport == null) ? 0 : this.cashFlowReport.size();
  }

  public java.util.Iterator<CashFlowReport> getCashFlowReportIterator() {
    return (this.cashFlowReport == null) ? null : this.cashFlowReport.iterator();
  }

  public void addToCashFlowReport(CashFlowReport elem) {
    if (this.cashFlowReport == null) {
      this.cashFlowReport = new ArrayList<CashFlowReport>();
    }
    this.cashFlowReport.add(elem);
  }

  public List<CashFlowReport> getCashFlowReport() {
    return this.cashFlowReport;
  }

  public FinacialDTO setCashFlowReport(List<CashFlowReport> cashFlowReport) {
    this.cashFlowReport = cashFlowReport;
    return this;
  }

  public void unsetCashFlowReport() {
    this.cashFlowReport = null;
  }

  /** Returns true if field cashFlowReport is set (has been assigned a value) and false otherwise */
  public boolean isSetCashFlowReport() {
    return this.cashFlowReport != null;
  }

  public void setCashFlowReportIsSet(boolean value) {
    if (!value) {
      this.cashFlowReport = null;
    }
  }

  public int getCashFlowItemSize() {
    return (this.cashFlowItem == null) ? 0 : this.cashFlowItem.size();
  }

  public java.util.Iterator<CashFlowItem> getCashFlowItemIterator() {
    return (this.cashFlowItem == null) ? null : this.cashFlowItem.iterator();
  }

  public void addToCashFlowItem(CashFlowItem elem) {
    if (this.cashFlowItem == null) {
      this.cashFlowItem = new ArrayList<CashFlowItem>();
    }
    this.cashFlowItem.add(elem);
  }

  public List<CashFlowItem> getCashFlowItem() {
    return this.cashFlowItem;
  }

  public FinacialDTO setCashFlowItem(List<CashFlowItem> cashFlowItem) {
    this.cashFlowItem = cashFlowItem;
    return this;
  }

  public void unsetCashFlowItem() {
    this.cashFlowItem = null;
  }

  /** Returns true if field cashFlowItem is set (has been assigned a value) and false otherwise */
  public boolean isSetCashFlowItem() {
    return this.cashFlowItem != null;
  }

  public void setCashFlowItemIsSet(boolean value) {
    if (!value) {
      this.cashFlowItem = null;
    }
  }

  public int getComId() {
    return this.comId;
  }

  public FinacialDTO setComId(int comId) {
    this.comId = comId;
    setComIdIsSet(true);
    return this;
  }

  public void unsetComId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMID_ISSET_ID);
  }

  /** Returns true if field comId is set (has been assigned a value) and false otherwise */
  public boolean isSetComId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMID_ISSET_ID);
  }

  public void setComIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMID_ISSET_ID, value);
  }

  public int getLineNum() {
    return this.lineNum;
  }

  public FinacialDTO setLineNum(int lineNum) {
    this.lineNum = lineNum;
    setLineNumIsSet(true);
    return this;
  }

  public void unsetLineNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINENUM_ISSET_ID);
  }

  /** Returns true if field lineNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLineNum() {
    return EncodingUtils.testBit(__isset_bitfield, __LINENUM_ISSET_ID);
  }

  public void setLineNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINENUM_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public FinacialDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public FinacialDTO setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public int getCusComCashFlowId() {
    return this.cusComCashFlowId;
  }

  public FinacialDTO setCusComCashFlowId(int cusComCashFlowId) {
    this.cusComCashFlowId = cusComCashFlowId;
    setCusComCashFlowIdIsSet(true);
    return this;
  }

  public void unsetCusComCashFlowId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSCOMCASHFLOWID_ISSET_ID);
  }

  /** Returns true if field cusComCashFlowId is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComCashFlowId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSCOMCASHFLOWID_ISSET_ID);
  }

  public void setCusComCashFlowIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSCOMCASHFLOWID_ISSET_ID, value);
  }

  public int getIsMain() {
    return this.isMain;
  }

  public FinacialDTO setIsMain(int isMain) {
    this.isMain = isMain;
    setIsMainIsSet(true);
    return this;
  }

  public void unsetIsMain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMAIN_ISSET_ID);
  }

  /** Returns true if field isMain is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMain() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMAIN_ISSET_ID);
  }

  public void setIsMainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMAIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CASH_FLOW_REPORT:
      if (value == null) {
        unsetCashFlowReport();
      } else {
        setCashFlowReport((List<CashFlowReport>)value);
      }
      break;

    case CASH_FLOW_ITEM:
      if (value == null) {
        unsetCashFlowItem();
      } else {
        setCashFlowItem((List<CashFlowItem>)value);
      }
      break;

    case COM_ID:
      if (value == null) {
        unsetComId();
      } else {
        setComId((Integer)value);
      }
      break;

    case LINE_NUM:
      if (value == null) {
        unsetLineNum();
      } else {
        setLineNum((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    case CUS_COM_CASH_FLOW_ID:
      if (value == null) {
        unsetCusComCashFlowId();
      } else {
        setCusComCashFlowId((Integer)value);
      }
      break;

    case IS_MAIN:
      if (value == null) {
        unsetIsMain();
      } else {
        setIsMain((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CASH_FLOW_REPORT:
      return getCashFlowReport();

    case CASH_FLOW_ITEM:
      return getCashFlowItem();

    case COM_ID:
      return Integer.valueOf(getComId());

    case LINE_NUM:
      return Integer.valueOf(getLineNum());

    case PID:
      return Integer.valueOf(getPid());

    case ITEM_NAME:
      return getItemName();

    case CUS_COM_CASH_FLOW_ID:
      return Integer.valueOf(getCusComCashFlowId());

    case IS_MAIN:
      return Integer.valueOf(getIsMain());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CASH_FLOW_REPORT:
      return isSetCashFlowReport();
    case CASH_FLOW_ITEM:
      return isSetCashFlowItem();
    case COM_ID:
      return isSetComId();
    case LINE_NUM:
      return isSetLineNum();
    case PID:
      return isSetPid();
    case ITEM_NAME:
      return isSetItemName();
    case CUS_COM_CASH_FLOW_ID:
      return isSetCusComCashFlowId();
    case IS_MAIN:
      return isSetIsMain();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinacialDTO)
      return this.equals((FinacialDTO)that);
    return false;
  }

  public boolean equals(FinacialDTO that) {
    if (that == null)
      return false;

    boolean this_present_cashFlowReport = true && this.isSetCashFlowReport();
    boolean that_present_cashFlowReport = true && that.isSetCashFlowReport();
    if (this_present_cashFlowReport || that_present_cashFlowReport) {
      if (!(this_present_cashFlowReport && that_present_cashFlowReport))
        return false;
      if (!this.cashFlowReport.equals(that.cashFlowReport))
        return false;
    }

    boolean this_present_cashFlowItem = true && this.isSetCashFlowItem();
    boolean that_present_cashFlowItem = true && that.isSetCashFlowItem();
    if (this_present_cashFlowItem || that_present_cashFlowItem) {
      if (!(this_present_cashFlowItem && that_present_cashFlowItem))
        return false;
      if (!this.cashFlowItem.equals(that.cashFlowItem))
        return false;
    }

    boolean this_present_comId = true;
    boolean that_present_comId = true;
    if (this_present_comId || that_present_comId) {
      if (!(this_present_comId && that_present_comId))
        return false;
      if (this.comId != that.comId)
        return false;
    }

    boolean this_present_lineNum = true;
    boolean that_present_lineNum = true;
    if (this_present_lineNum || that_present_lineNum) {
      if (!(this_present_lineNum && that_present_lineNum))
        return false;
      if (this.lineNum != that.lineNum)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_cusComCashFlowId = true;
    boolean that_present_cusComCashFlowId = true;
    if (this_present_cusComCashFlowId || that_present_cusComCashFlowId) {
      if (!(this_present_cusComCashFlowId && that_present_cusComCashFlowId))
        return false;
      if (this.cusComCashFlowId != that.cusComCashFlowId)
        return false;
    }

    boolean this_present_isMain = true;
    boolean that_present_isMain = true;
    if (this_present_isMain || that_present_isMain) {
      if (!(this_present_isMain && that_present_isMain))
        return false;
      if (this.isMain != that.isMain)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cashFlowReport = true && (isSetCashFlowReport());
    list.add(present_cashFlowReport);
    if (present_cashFlowReport)
      list.add(cashFlowReport);

    boolean present_cashFlowItem = true && (isSetCashFlowItem());
    list.add(present_cashFlowItem);
    if (present_cashFlowItem)
      list.add(cashFlowItem);

    boolean present_comId = true;
    list.add(present_comId);
    if (present_comId)
      list.add(comId);

    boolean present_lineNum = true;
    list.add(present_lineNum);
    if (present_lineNum)
      list.add(lineNum);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    boolean present_cusComCashFlowId = true;
    list.add(present_cusComCashFlowId);
    if (present_cusComCashFlowId)
      list.add(cusComCashFlowId);

    boolean present_isMain = true;
    list.add(present_isMain);
    if (present_isMain)
      list.add(isMain);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinacialDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCashFlowReport()).compareTo(other.isSetCashFlowReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashFlowReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashFlowReport, other.cashFlowReport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashFlowItem()).compareTo(other.isSetCashFlowItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashFlowItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashFlowItem, other.cashFlowItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComId()).compareTo(other.isSetComId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comId, other.comId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLineNum()).compareTo(other.isSetLineNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLineNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNum, other.lineNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComCashFlowId()).compareTo(other.isSetCusComCashFlowId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComCashFlowId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComCashFlowId, other.cusComCashFlowId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMain()).compareTo(other.isSetIsMain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMain, other.isMain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinacialDTO(");
    boolean first = true;

    sb.append("cashFlowReport:");
    if (this.cashFlowReport == null) {
      sb.append("null");
    } else {
      sb.append(this.cashFlowReport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashFlowItem:");
    if (this.cashFlowItem == null) {
      sb.append("null");
    } else {
      sb.append(this.cashFlowItem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comId:");
    sb.append(this.comId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineNum:");
    sb.append(this.lineNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComCashFlowId:");
    sb.append(this.cusComCashFlowId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMain:");
    sb.append(this.isMain);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinacialDTOStandardSchemeFactory implements SchemeFactory {
    public FinacialDTOStandardScheme getScheme() {
      return new FinacialDTOStandardScheme();
    }
  }

  private static class FinacialDTOStandardScheme extends StandardScheme<FinacialDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinacialDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CASH_FLOW_REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.cashFlowReport = new ArrayList<CashFlowReport>(_list104.size);
                CashFlowReport _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new CashFlowReport();
                  _elem105.read(iprot);
                  struct.cashFlowReport.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setCashFlowReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CASH_FLOW_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                struct.cashFlowItem = new ArrayList<CashFlowItem>(_list107.size);
                CashFlowItem _elem108;
                for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                {
                  _elem108 = new CashFlowItem();
                  _elem108.read(iprot);
                  struct.cashFlowItem.add(_elem108);
                }
                iprot.readListEnd();
              }
              struct.setCashFlowItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comId = iprot.readI32();
              struct.setComIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LINE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lineNum = iprot.readI32();
              struct.setLineNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CUS_COM_CASH_FLOW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusComCashFlowId = iprot.readI32();
              struct.setCusComCashFlowIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isMain = iprot.readI32();
              struct.setIsMainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinacialDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cashFlowReport != null) {
        oprot.writeFieldBegin(CASH_FLOW_REPORT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cashFlowReport.size()));
          for (CashFlowReport _iter110 : struct.cashFlowReport)
          {
            _iter110.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cashFlowItem != null) {
        oprot.writeFieldBegin(CASH_FLOW_ITEM_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.cashFlowItem.size()));
          for (CashFlowItem _iter111 : struct.cashFlowItem)
          {
            _iter111.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COM_ID_FIELD_DESC);
      oprot.writeI32(struct.comId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LINE_NUM_FIELD_DESC);
      oprot.writeI32(struct.lineNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_COM_CASH_FLOW_ID_FIELD_DESC);
      oprot.writeI32(struct.cusComCashFlowId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MAIN_FIELD_DESC);
      oprot.writeI32(struct.isMain);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinacialDTOTupleSchemeFactory implements SchemeFactory {
    public FinacialDTOTupleScheme getScheme() {
      return new FinacialDTOTupleScheme();
    }
  }

  private static class FinacialDTOTupleScheme extends TupleScheme<FinacialDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinacialDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCashFlowReport()) {
        optionals.set(0);
      }
      if (struct.isSetCashFlowItem()) {
        optionals.set(1);
      }
      if (struct.isSetComId()) {
        optionals.set(2);
      }
      if (struct.isSetLineNum()) {
        optionals.set(3);
      }
      if (struct.isSetPid()) {
        optionals.set(4);
      }
      if (struct.isSetItemName()) {
        optionals.set(5);
      }
      if (struct.isSetCusComCashFlowId()) {
        optionals.set(6);
      }
      if (struct.isSetIsMain()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCashFlowReport()) {
        {
          oprot.writeI32(struct.cashFlowReport.size());
          for (CashFlowReport _iter112 : struct.cashFlowReport)
          {
            _iter112.write(oprot);
          }
        }
      }
      if (struct.isSetCashFlowItem()) {
        {
          oprot.writeI32(struct.cashFlowItem.size());
          for (CashFlowItem _iter113 : struct.cashFlowItem)
          {
            _iter113.write(oprot);
          }
        }
      }
      if (struct.isSetComId()) {
        oprot.writeI32(struct.comId);
      }
      if (struct.isSetLineNum()) {
        oprot.writeI32(struct.lineNum);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
      if (struct.isSetCusComCashFlowId()) {
        oprot.writeI32(struct.cusComCashFlowId);
      }
      if (struct.isSetIsMain()) {
        oprot.writeI32(struct.isMain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinacialDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list114 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cashFlowReport = new ArrayList<CashFlowReport>(_list114.size);
          CashFlowReport _elem115;
          for (int _i116 = 0; _i116 < _list114.size; ++_i116)
          {
            _elem115 = new CashFlowReport();
            _elem115.read(iprot);
            struct.cashFlowReport.add(_elem115);
          }
        }
        struct.setCashFlowReportIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.cashFlowItem = new ArrayList<CashFlowItem>(_list117.size);
          CashFlowItem _elem118;
          for (int _i119 = 0; _i119 < _list117.size; ++_i119)
          {
            _elem118 = new CashFlowItem();
            _elem118.read(iprot);
            struct.cashFlowItem.add(_elem118);
          }
        }
        struct.setCashFlowItemIsSet(true);
      }
      if (incoming.get(2)) {
        struct.comId = iprot.readI32();
        struct.setComIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lineNum = iprot.readI32();
        struct.setLineNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.cusComCashFlowId = iprot.readI32();
        struct.setCusComCashFlowIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isMain = iprot.readI32();
        struct.setIsMainIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceBusinessView implements org.apache.thrift.TBase<FinanceBusinessView, FinanceBusinessView._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceBusinessView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceBusinessView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField DUE_UNRECEIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("dueUnreceived", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField UN_DUE_FIELD_DESC = new org.apache.thrift.protocol.TField("unDue", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField UN_RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("unReconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDttm", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EXTENSION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceBusinessViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceBusinessViewTupleSchemeFactory());
  }

  public int pid; // required
  public int loanId; // required
  public String projectName; // required
  public String projectId; // required
  public String cusType; // required
  public String projectNumber; // required
  public double creditAmt; // required
  public double dueUnreceived; // required
  public double unDue; // required
  public double reconciliationAmt; // required
  public double unReconciliationAmt; // required
  public String cusName; // required
  public String requestDttm; // required
  public double extensionAmt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    LOAN_ID((short)2, "loanId"),
    PROJECT_NAME((short)3, "projectName"),
    PROJECT_ID((short)4, "projectId"),
    CUS_TYPE((short)5, "cusType"),
    PROJECT_NUMBER((short)6, "projectNumber"),
    CREDIT_AMT((short)7, "creditAmt"),
    DUE_UNRECEIVED((short)8, "dueUnreceived"),
    UN_DUE((short)9, "unDue"),
    RECONCILIATION_AMT((short)10, "reconciliationAmt"),
    UN_RECONCILIATION_AMT((short)11, "unReconciliationAmt"),
    CUS_NAME((short)12, "cusName"),
    REQUEST_DTTM((short)13, "requestDttm"),
    EXTENSION_AMT((short)14, "extensionAmt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // LOAN_ID
          return LOAN_ID;
        case 3: // PROJECT_NAME
          return PROJECT_NAME;
        case 4: // PROJECT_ID
          return PROJECT_ID;
        case 5: // CUS_TYPE
          return CUS_TYPE;
        case 6: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 7: // CREDIT_AMT
          return CREDIT_AMT;
        case 8: // DUE_UNRECEIVED
          return DUE_UNRECEIVED;
        case 9: // UN_DUE
          return UN_DUE;
        case 10: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 11: // UN_RECONCILIATION_AMT
          return UN_RECONCILIATION_AMT;
        case 12: // CUS_NAME
          return CUS_NAME;
        case 13: // REQUEST_DTTM
          return REQUEST_DTTM;
        case 14: // EXTENSION_AMT
          return EXTENSION_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __LOANID_ISSET_ID = 1;
  private static final int __CREDITAMT_ISSET_ID = 2;
  private static final int __DUEUNRECEIVED_ISSET_ID = 3;
  private static final int __UNDUE_ISSET_ID = 4;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 5;
  private static final int __UNRECONCILIATIONAMT_ISSET_ID = 6;
  private static final int __EXTENSIONAMT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DUE_UNRECEIVED, new org.apache.thrift.meta_data.FieldMetaData("dueUnreceived", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_DUE, new org.apache.thrift.meta_data.FieldMetaData("unDue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UN_RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("unReconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("requestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTENSION_AMT, new org.apache.thrift.meta_data.FieldMetaData("extensionAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceBusinessView.class, metaDataMap);
  }

  public FinanceBusinessView() {
  }

  public FinanceBusinessView(
    int pid,
    int loanId,
    String projectName,
    String projectId,
    String cusType,
    String projectNumber,
    double creditAmt,
    double dueUnreceived,
    double unDue,
    double reconciliationAmt,
    double unReconciliationAmt,
    String cusName,
    String requestDttm,
    double extensionAmt)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.projectName = projectName;
    this.projectId = projectId;
    this.cusType = cusType;
    this.projectNumber = projectNumber;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.dueUnreceived = dueUnreceived;
    setDueUnreceivedIsSet(true);
    this.unDue = unDue;
    setUnDueIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.unReconciliationAmt = unReconciliationAmt;
    setUnReconciliationAmtIsSet(true);
    this.cusName = cusName;
    this.requestDttm = requestDttm;
    this.extensionAmt = extensionAmt;
    setExtensionAmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceBusinessView(FinanceBusinessView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.loanId = other.loanId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectId()) {
      this.projectId = other.projectId;
    }
    if (other.isSetCusType()) {
      this.cusType = other.cusType;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    this.creditAmt = other.creditAmt;
    this.dueUnreceived = other.dueUnreceived;
    this.unDue = other.unDue;
    this.reconciliationAmt = other.reconciliationAmt;
    this.unReconciliationAmt = other.unReconciliationAmt;
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    if (other.isSetRequestDttm()) {
      this.requestDttm = other.requestDttm;
    }
    this.extensionAmt = other.extensionAmt;
  }

  public FinanceBusinessView deepCopy() {
    return new FinanceBusinessView(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.projectName = null;
    this.projectId = null;
    this.cusType = null;
    this.projectNumber = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    setDueUnreceivedIsSet(false);
    this.dueUnreceived = 0.0;
    setUnDueIsSet(false);
    this.unDue = 0.0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    setUnReconciliationAmtIsSet(false);
    this.unReconciliationAmt = 0.0;
    this.cusName = null;
    this.requestDttm = null;
    setExtensionAmtIsSet(false);
    this.extensionAmt = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public FinanceBusinessView setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getLoanId() {
    return this.loanId;
  }

  public FinanceBusinessView setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public FinanceBusinessView setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectId() {
    return this.projectId;
  }

  public FinanceBusinessView setProjectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  public void unsetProjectId() {
    this.projectId = null;
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return this.projectId != null;
  }

  public void setProjectIdIsSet(boolean value) {
    if (!value) {
      this.projectId = null;
    }
  }

  public String getCusType() {
    return this.cusType;
  }

  public FinanceBusinessView setCusType(String cusType) {
    this.cusType = cusType;
    return this;
  }

  public void unsetCusType() {
    this.cusType = null;
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return this.cusType != null;
  }

  public void setCusTypeIsSet(boolean value) {
    if (!value) {
      this.cusType = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public FinanceBusinessView setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public FinanceBusinessView setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public double getDueUnreceived() {
    return this.dueUnreceived;
  }

  public FinanceBusinessView setDueUnreceived(double dueUnreceived) {
    this.dueUnreceived = dueUnreceived;
    setDueUnreceivedIsSet(true);
    return this;
  }

  public void unsetDueUnreceived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DUEUNRECEIVED_ISSET_ID);
  }

  /** Returns true if field dueUnreceived is set (has been assigned a value) and false otherwise */
  public boolean isSetDueUnreceived() {
    return EncodingUtils.testBit(__isset_bitfield, __DUEUNRECEIVED_ISSET_ID);
  }

  public void setDueUnreceivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DUEUNRECEIVED_ISSET_ID, value);
  }

  public double getUnDue() {
    return this.unDue;
  }

  public FinanceBusinessView setUnDue(double unDue) {
    this.unDue = unDue;
    setUnDueIsSet(true);
    return this;
  }

  public void unsetUnDue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNDUE_ISSET_ID);
  }

  /** Returns true if field unDue is set (has been assigned a value) and false otherwise */
  public boolean isSetUnDue() {
    return EncodingUtils.testBit(__isset_bitfield, __UNDUE_ISSET_ID);
  }

  public void setUnDueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNDUE_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public FinanceBusinessView setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public double getUnReconciliationAmt() {
    return this.unReconciliationAmt;
  }

  public FinanceBusinessView setUnReconciliationAmt(double unReconciliationAmt) {
    this.unReconciliationAmt = unReconciliationAmt;
    setUnReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetUnReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNRECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field unReconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetUnReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __UNRECONCILIATIONAMT_ISSET_ID);
  }

  public void setUnReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNRECONCILIATIONAMT_ISSET_ID, value);
  }

  public String getCusName() {
    return this.cusName;
  }

  public FinanceBusinessView setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public String getRequestDttm() {
    return this.requestDttm;
  }

  public FinanceBusinessView setRequestDttm(String requestDttm) {
    this.requestDttm = requestDttm;
    return this;
  }

  public void unsetRequestDttm() {
    this.requestDttm = null;
  }

  /** Returns true if field requestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDttm() {
    return this.requestDttm != null;
  }

  public void setRequestDttmIsSet(boolean value) {
    if (!value) {
      this.requestDttm = null;
    }
  }

  public double getExtensionAmt() {
    return this.extensionAmt;
  }

  public FinanceBusinessView setExtensionAmt(double extensionAmt) {
    this.extensionAmt = extensionAmt;
    setExtensionAmtIsSet(true);
    return this;
  }

  public void unsetExtensionAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONAMT_ISSET_ID);
  }

  /** Returns true if field extensionAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONAMT_ISSET_ID);
  }

  public void setExtensionAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONAMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case DUE_UNRECEIVED:
      if (value == null) {
        unsetDueUnreceived();
      } else {
        setDueUnreceived((Double)value);
      }
      break;

    case UN_DUE:
      if (value == null) {
        unsetUnDue();
      } else {
        setUnDue((Double)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case UN_RECONCILIATION_AMT:
      if (value == null) {
        unsetUnReconciliationAmt();
      } else {
        setUnReconciliationAmt((Double)value);
      }
      break;

    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case REQUEST_DTTM:
      if (value == null) {
        unsetRequestDttm();
      } else {
        setRequestDttm((String)value);
      }
      break;

    case EXTENSION_AMT:
      if (value == null) {
        unsetExtensionAmt();
      } else {
        setExtensionAmt((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_ID:
      return getProjectId();

    case CUS_TYPE:
      return getCusType();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case DUE_UNRECEIVED:
      return Double.valueOf(getDueUnreceived());

    case UN_DUE:
      return Double.valueOf(getUnDue());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case UN_RECONCILIATION_AMT:
      return Double.valueOf(getUnReconciliationAmt());

    case CUS_NAME:
      return getCusName();

    case REQUEST_DTTM:
      return getRequestDttm();

    case EXTENSION_AMT:
      return Double.valueOf(getExtensionAmt());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_ID:
      return isSetProjectId();
    case CUS_TYPE:
      return isSetCusType();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case DUE_UNRECEIVED:
      return isSetDueUnreceived();
    case UN_DUE:
      return isSetUnDue();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case UN_RECONCILIATION_AMT:
      return isSetUnReconciliationAmt();
    case CUS_NAME:
      return isSetCusName();
    case REQUEST_DTTM:
      return isSetRequestDttm();
    case EXTENSION_AMT:
      return isSetExtensionAmt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceBusinessView)
      return this.equals((FinanceBusinessView)that);
    return false;
  }

  public boolean equals(FinanceBusinessView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (!this.projectId.equals(that.projectId))
        return false;
    }

    boolean this_present_cusType = true && this.isSetCusType();
    boolean that_present_cusType = true && that.isSetCusType();
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (!this.cusType.equals(that.cusType))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_dueUnreceived = true;
    boolean that_present_dueUnreceived = true;
    if (this_present_dueUnreceived || that_present_dueUnreceived) {
      if (!(this_present_dueUnreceived && that_present_dueUnreceived))
        return false;
      if (this.dueUnreceived != that.dueUnreceived)
        return false;
    }

    boolean this_present_unDue = true;
    boolean that_present_unDue = true;
    if (this_present_unDue || that_present_unDue) {
      if (!(this_present_unDue && that_present_unDue))
        return false;
      if (this.unDue != that.unDue)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_unReconciliationAmt = true;
    boolean that_present_unReconciliationAmt = true;
    if (this_present_unReconciliationAmt || that_present_unReconciliationAmt) {
      if (!(this_present_unReconciliationAmt && that_present_unReconciliationAmt))
        return false;
      if (this.unReconciliationAmt != that.unReconciliationAmt)
        return false;
    }

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_requestDttm = true && this.isSetRequestDttm();
    boolean that_present_requestDttm = true && that.isSetRequestDttm();
    if (this_present_requestDttm || that_present_requestDttm) {
      if (!(this_present_requestDttm && that_present_requestDttm))
        return false;
      if (!this.requestDttm.equals(that.requestDttm))
        return false;
    }

    boolean this_present_extensionAmt = true;
    boolean that_present_extensionAmt = true;
    if (this_present_extensionAmt || that_present_extensionAmt) {
      if (!(this_present_extensionAmt && that_present_extensionAmt))
        return false;
      if (this.extensionAmt != that.extensionAmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectId = true && (isSetProjectId());
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_cusType = true && (isSetCusType());
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_dueUnreceived = true;
    list.add(present_dueUnreceived);
    if (present_dueUnreceived)
      list.add(dueUnreceived);

    boolean present_unDue = true;
    list.add(present_unDue);
    if (present_unDue)
      list.add(unDue);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_unReconciliationAmt = true;
    list.add(present_unReconciliationAmt);
    if (present_unReconciliationAmt)
      list.add(unReconciliationAmt);

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_requestDttm = true && (isSetRequestDttm());
    list.add(present_requestDttm);
    if (present_requestDttm)
      list.add(requestDttm);

    boolean present_extensionAmt = true;
    list.add(present_extensionAmt);
    if (present_extensionAmt)
      list.add(extensionAmt);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceBusinessView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDueUnreceived()).compareTo(other.isSetDueUnreceived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueUnreceived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueUnreceived, other.dueUnreceived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnDue()).compareTo(other.isSetUnDue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnDue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unDue, other.unDue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnReconciliationAmt()).compareTo(other.isSetUnReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unReconciliationAmt, other.unReconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDttm()).compareTo(other.isSetRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDttm, other.requestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionAmt()).compareTo(other.isSetExtensionAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionAmt, other.extensionAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceBusinessView(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    if (this.projectId == null) {
      sb.append("null");
    } else {
      sb.append(this.projectId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    if (this.cusType == null) {
      sb.append("null");
    } else {
      sb.append(this.cusType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueUnreceived:");
    sb.append(this.dueUnreceived);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unDue:");
    sb.append(this.unDue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unReconciliationAmt:");
    sb.append(this.unReconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDttm:");
    if (this.requestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionAmt:");
    sb.append(this.extensionAmt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceBusinessViewStandardSchemeFactory implements SchemeFactory {
    public FinanceBusinessViewStandardScheme getScheme() {
      return new FinanceBusinessViewStandardScheme();
    }
  }

  private static class FinanceBusinessViewStandardScheme extends StandardScheme<FinanceBusinessView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceBusinessView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectId = iprot.readString();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusType = iprot.readString();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DUE_UNRECEIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dueUnreceived = iprot.readDouble();
              struct.setDueUnreceivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UN_DUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unDue = iprot.readDouble();
              struct.setUnDueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UN_RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unReconciliationAmt = iprot.readDouble();
              struct.setUnReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDttm = iprot.readString();
              struct.setRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXTENSION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionAmt = iprot.readDouble();
              struct.setExtensionAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceBusinessView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectId != null) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeString(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.cusType != null) {
        oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
        oprot.writeString(struct.cusType);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUE_UNRECEIVED_FIELD_DESC);
      oprot.writeDouble(struct.dueUnreceived);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_DUE_FIELD_DESC);
      oprot.writeDouble(struct.unDue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UN_RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.unReconciliationAmt);
      oprot.writeFieldEnd();
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      if (struct.requestDttm != null) {
        oprot.writeFieldBegin(REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.requestDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTENSION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.extensionAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceBusinessViewTupleSchemeFactory implements SchemeFactory {
    public FinanceBusinessViewTupleScheme getScheme() {
      return new FinanceBusinessViewTupleScheme();
    }
  }

  private static class FinanceBusinessViewTupleScheme extends TupleScheme<FinanceBusinessView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceBusinessView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetLoanId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectName()) {
        optionals.set(2);
      }
      if (struct.isSetProjectId()) {
        optionals.set(3);
      }
      if (struct.isSetCusType()) {
        optionals.set(4);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(5);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(6);
      }
      if (struct.isSetDueUnreceived()) {
        optionals.set(7);
      }
      if (struct.isSetUnDue()) {
        optionals.set(8);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(9);
      }
      if (struct.isSetUnReconciliationAmt()) {
        optionals.set(10);
      }
      if (struct.isSetCusName()) {
        optionals.set(11);
      }
      if (struct.isSetRequestDttm()) {
        optionals.set(12);
      }
      if (struct.isSetExtensionAmt()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectId()) {
        oprot.writeString(struct.projectId);
      }
      if (struct.isSetCusType()) {
        oprot.writeString(struct.cusType);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetDueUnreceived()) {
        oprot.writeDouble(struct.dueUnreceived);
      }
      if (struct.isSetUnDue()) {
        oprot.writeDouble(struct.unDue);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetUnReconciliationAmt()) {
        oprot.writeDouble(struct.unReconciliationAmt);
      }
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetRequestDttm()) {
        oprot.writeString(struct.requestDttm);
      }
      if (struct.isSetExtensionAmt()) {
        oprot.writeDouble(struct.extensionAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceBusinessView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectId = iprot.readString();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusType = iprot.readString();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dueUnreceived = iprot.readDouble();
        struct.setDueUnreceivedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.unDue = iprot.readDouble();
        struct.setUnDueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.unReconciliationAmt = iprot.readDouble();
        struct.setUnReconciliationAmtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.requestDttm = iprot.readString();
        struct.setRequestDttmIsSet(true);
      }
      if (incoming.get(13)) {
        struct.extensionAmt = iprot.readDouble();
        struct.setExtensionAmtIsSet(true);
      }
    }
  }

}


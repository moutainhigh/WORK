/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.workflow;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-18")
public class TaskHistoryDto implements org.apache.thrift.TBase<TaskHistoryDto, TaskHistoryDto._Fields>, java.io.Serializable, Cloneable, Comparable<TaskHistoryDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskHistoryDto");

  private static final org.apache.thrift.protocol.TField WORKFLOW_TASK_DEF_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowTaskDefKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField WORKFLOW_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowInstanceId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WORKFLOW_PROCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowProcessName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WORKFLOW_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowTaskId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("taskName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXECUTE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("executeUserName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField EXECUTE_USER_REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("executeUserRealName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXECUTE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("executeDttm", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalStatus", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField WORKFLOW_PROCESS_DEFKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("workflowProcessDefkey", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskHistoryDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskHistoryDtoTupleSchemeFactory());
  }

  public String workflowTaskDefKey; // required
  public String workflowInstanceId; // required
  public String workflowProcessName; // required
  public String workflowTaskId; // required
  public String taskName; // required
  public String executeUserName; // required
  public String executeUserRealName; // required
  public String executeDttm; // required
  public String approvalStatus; // required
  public String message; // required
  public String workflowProcessDefkey; // required
  public int refId; // required
  public int projectId; // required
  public String projectName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WORKFLOW_TASK_DEF_KEY((short)1, "workflowTaskDefKey"),
    WORKFLOW_INSTANCE_ID((short)2, "workflowInstanceId"),
    WORKFLOW_PROCESS_NAME((short)3, "workflowProcessName"),
    WORKFLOW_TASK_ID((short)4, "workflowTaskId"),
    TASK_NAME((short)5, "taskName"),
    EXECUTE_USER_NAME((short)6, "executeUserName"),
    EXECUTE_USER_REAL_NAME((short)7, "executeUserRealName"),
    EXECUTE_DTTM((short)8, "executeDttm"),
    APPROVAL_STATUS((short)9, "approvalStatus"),
    MESSAGE((short)10, "message"),
    WORKFLOW_PROCESS_DEFKEY((short)11, "workflowProcessDefkey"),
    REF_ID((short)12, "refId"),
    PROJECT_ID((short)13, "projectId"),
    PROJECT_NAME((short)14, "projectName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WORKFLOW_TASK_DEF_KEY
          return WORKFLOW_TASK_DEF_KEY;
        case 2: // WORKFLOW_INSTANCE_ID
          return WORKFLOW_INSTANCE_ID;
        case 3: // WORKFLOW_PROCESS_NAME
          return WORKFLOW_PROCESS_NAME;
        case 4: // WORKFLOW_TASK_ID
          return WORKFLOW_TASK_ID;
        case 5: // TASK_NAME
          return TASK_NAME;
        case 6: // EXECUTE_USER_NAME
          return EXECUTE_USER_NAME;
        case 7: // EXECUTE_USER_REAL_NAME
          return EXECUTE_USER_REAL_NAME;
        case 8: // EXECUTE_DTTM
          return EXECUTE_DTTM;
        case 9: // APPROVAL_STATUS
          return APPROVAL_STATUS;
        case 10: // MESSAGE
          return MESSAGE;
        case 11: // WORKFLOW_PROCESS_DEFKEY
          return WORKFLOW_PROCESS_DEFKEY;
        case 12: // REF_ID
          return REF_ID;
        case 13: // PROJECT_ID
          return PROJECT_ID;
        case 14: // PROJECT_NAME
          return PROJECT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REFID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WORKFLOW_TASK_DEF_KEY, new org.apache.thrift.meta_data.FieldMetaData("workflowTaskDefKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_PROCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("workflowProcessName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("workflowTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_NAME, new org.apache.thrift.meta_data.FieldMetaData("taskName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("executeUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_USER_REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("executeUserRealName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("executeDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("approvalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKFLOW_PROCESS_DEFKEY, new org.apache.thrift.meta_data.FieldMetaData("workflowProcessDefkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskHistoryDto.class, metaDataMap);
  }

  public TaskHistoryDto() {
  }

  public TaskHistoryDto(
    String workflowTaskDefKey,
    String workflowInstanceId,
    String workflowProcessName,
    String workflowTaskId,
    String taskName,
    String executeUserName,
    String executeUserRealName,
    String executeDttm,
    String approvalStatus,
    String message,
    String workflowProcessDefkey,
    int refId,
    int projectId,
    String projectName)
  {
    this();
    this.workflowTaskDefKey = workflowTaskDefKey;
    this.workflowInstanceId = workflowInstanceId;
    this.workflowProcessName = workflowProcessName;
    this.workflowTaskId = workflowTaskId;
    this.taskName = taskName;
    this.executeUserName = executeUserName;
    this.executeUserRealName = executeUserRealName;
    this.executeDttm = executeDttm;
    this.approvalStatus = approvalStatus;
    this.message = message;
    this.workflowProcessDefkey = workflowProcessDefkey;
    this.refId = refId;
    setRefIdIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectName = projectName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskHistoryDto(TaskHistoryDto other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWorkflowTaskDefKey()) {
      this.workflowTaskDefKey = other.workflowTaskDefKey;
    }
    if (other.isSetWorkflowInstanceId()) {
      this.workflowInstanceId = other.workflowInstanceId;
    }
    if (other.isSetWorkflowProcessName()) {
      this.workflowProcessName = other.workflowProcessName;
    }
    if (other.isSetWorkflowTaskId()) {
      this.workflowTaskId = other.workflowTaskId;
    }
    if (other.isSetTaskName()) {
      this.taskName = other.taskName;
    }
    if (other.isSetExecuteUserName()) {
      this.executeUserName = other.executeUserName;
    }
    if (other.isSetExecuteUserRealName()) {
      this.executeUserRealName = other.executeUserRealName;
    }
    if (other.isSetExecuteDttm()) {
      this.executeDttm = other.executeDttm;
    }
    if (other.isSetApprovalStatus()) {
      this.approvalStatus = other.approvalStatus;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetWorkflowProcessDefkey()) {
      this.workflowProcessDefkey = other.workflowProcessDefkey;
    }
    this.refId = other.refId;
    this.projectId = other.projectId;
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
  }

  public TaskHistoryDto deepCopy() {
    return new TaskHistoryDto(this);
  }

  @Override
  public void clear() {
    this.workflowTaskDefKey = null;
    this.workflowInstanceId = null;
    this.workflowProcessName = null;
    this.workflowTaskId = null;
    this.taskName = null;
    this.executeUserName = null;
    this.executeUserRealName = null;
    this.executeDttm = null;
    this.approvalStatus = null;
    this.message = null;
    this.workflowProcessDefkey = null;
    setRefIdIsSet(false);
    this.refId = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectName = null;
  }

  public String getWorkflowTaskDefKey() {
    return this.workflowTaskDefKey;
  }

  public TaskHistoryDto setWorkflowTaskDefKey(String workflowTaskDefKey) {
    this.workflowTaskDefKey = workflowTaskDefKey;
    return this;
  }

  public void unsetWorkflowTaskDefKey() {
    this.workflowTaskDefKey = null;
  }

  /** Returns true if field workflowTaskDefKey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowTaskDefKey() {
    return this.workflowTaskDefKey != null;
  }

  public void setWorkflowTaskDefKeyIsSet(boolean value) {
    if (!value) {
      this.workflowTaskDefKey = null;
    }
  }

  public String getWorkflowInstanceId() {
    return this.workflowInstanceId;
  }

  public TaskHistoryDto setWorkflowInstanceId(String workflowInstanceId) {
    this.workflowInstanceId = workflowInstanceId;
    return this;
  }

  public void unsetWorkflowInstanceId() {
    this.workflowInstanceId = null;
  }

  /** Returns true if field workflowInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowInstanceId() {
    return this.workflowInstanceId != null;
  }

  public void setWorkflowInstanceIdIsSet(boolean value) {
    if (!value) {
      this.workflowInstanceId = null;
    }
  }

  public String getWorkflowProcessName() {
    return this.workflowProcessName;
  }

  public TaskHistoryDto setWorkflowProcessName(String workflowProcessName) {
    this.workflowProcessName = workflowProcessName;
    return this;
  }

  public void unsetWorkflowProcessName() {
    this.workflowProcessName = null;
  }

  /** Returns true if field workflowProcessName is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowProcessName() {
    return this.workflowProcessName != null;
  }

  public void setWorkflowProcessNameIsSet(boolean value) {
    if (!value) {
      this.workflowProcessName = null;
    }
  }

  public String getWorkflowTaskId() {
    return this.workflowTaskId;
  }

  public TaskHistoryDto setWorkflowTaskId(String workflowTaskId) {
    this.workflowTaskId = workflowTaskId;
    return this;
  }

  public void unsetWorkflowTaskId() {
    this.workflowTaskId = null;
  }

  /** Returns true if field workflowTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowTaskId() {
    return this.workflowTaskId != null;
  }

  public void setWorkflowTaskIdIsSet(boolean value) {
    if (!value) {
      this.workflowTaskId = null;
    }
  }

  public String getTaskName() {
    return this.taskName;
  }

  public TaskHistoryDto setTaskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

  public void unsetTaskName() {
    this.taskName = null;
  }

  /** Returns true if field taskName is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskName() {
    return this.taskName != null;
  }

  public void setTaskNameIsSet(boolean value) {
    if (!value) {
      this.taskName = null;
    }
  }

  public String getExecuteUserName() {
    return this.executeUserName;
  }

  public TaskHistoryDto setExecuteUserName(String executeUserName) {
    this.executeUserName = executeUserName;
    return this;
  }

  public void unsetExecuteUserName() {
    this.executeUserName = null;
  }

  /** Returns true if field executeUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteUserName() {
    return this.executeUserName != null;
  }

  public void setExecuteUserNameIsSet(boolean value) {
    if (!value) {
      this.executeUserName = null;
    }
  }

  public String getExecuteUserRealName() {
    return this.executeUserRealName;
  }

  public TaskHistoryDto setExecuteUserRealName(String executeUserRealName) {
    this.executeUserRealName = executeUserRealName;
    return this;
  }

  public void unsetExecuteUserRealName() {
    this.executeUserRealName = null;
  }

  /** Returns true if field executeUserRealName is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteUserRealName() {
    return this.executeUserRealName != null;
  }

  public void setExecuteUserRealNameIsSet(boolean value) {
    if (!value) {
      this.executeUserRealName = null;
    }
  }

  public String getExecuteDttm() {
    return this.executeDttm;
  }

  public TaskHistoryDto setExecuteDttm(String executeDttm) {
    this.executeDttm = executeDttm;
    return this;
  }

  public void unsetExecuteDttm() {
    this.executeDttm = null;
  }

  /** Returns true if field executeDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetExecuteDttm() {
    return this.executeDttm != null;
  }

  public void setExecuteDttmIsSet(boolean value) {
    if (!value) {
      this.executeDttm = null;
    }
  }

  public String getApprovalStatus() {
    return this.approvalStatus;
  }

  public TaskHistoryDto setApprovalStatus(String approvalStatus) {
    this.approvalStatus = approvalStatus;
    return this;
  }

  public void unsetApprovalStatus() {
    this.approvalStatus = null;
  }

  /** Returns true if field approvalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalStatus() {
    return this.approvalStatus != null;
  }

  public void setApprovalStatusIsSet(boolean value) {
    if (!value) {
      this.approvalStatus = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public TaskHistoryDto setMessage(String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public String getWorkflowProcessDefkey() {
    return this.workflowProcessDefkey;
  }

  public TaskHistoryDto setWorkflowProcessDefkey(String workflowProcessDefkey) {
    this.workflowProcessDefkey = workflowProcessDefkey;
    return this;
  }

  public void unsetWorkflowProcessDefkey() {
    this.workflowProcessDefkey = null;
  }

  /** Returns true if field workflowProcessDefkey is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkflowProcessDefkey() {
    return this.workflowProcessDefkey != null;
  }

  public void setWorkflowProcessDefkeyIsSet(boolean value) {
    if (!value) {
      this.workflowProcessDefkey = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public TaskHistoryDto setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public TaskHistoryDto setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectName() {
    return this.projectName;
  }

  public TaskHistoryDto setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WORKFLOW_TASK_DEF_KEY:
      if (value == null) {
        unsetWorkflowTaskDefKey();
      } else {
        setWorkflowTaskDefKey((String)value);
      }
      break;

    case WORKFLOW_INSTANCE_ID:
      if (value == null) {
        unsetWorkflowInstanceId();
      } else {
        setWorkflowInstanceId((String)value);
      }
      break;

    case WORKFLOW_PROCESS_NAME:
      if (value == null) {
        unsetWorkflowProcessName();
      } else {
        setWorkflowProcessName((String)value);
      }
      break;

    case WORKFLOW_TASK_ID:
      if (value == null) {
        unsetWorkflowTaskId();
      } else {
        setWorkflowTaskId((String)value);
      }
      break;

    case TASK_NAME:
      if (value == null) {
        unsetTaskName();
      } else {
        setTaskName((String)value);
      }
      break;

    case EXECUTE_USER_NAME:
      if (value == null) {
        unsetExecuteUserName();
      } else {
        setExecuteUserName((String)value);
      }
      break;

    case EXECUTE_USER_REAL_NAME:
      if (value == null) {
        unsetExecuteUserRealName();
      } else {
        setExecuteUserRealName((String)value);
      }
      break;

    case EXECUTE_DTTM:
      if (value == null) {
        unsetExecuteDttm();
      } else {
        setExecuteDttm((String)value);
      }
      break;

    case APPROVAL_STATUS:
      if (value == null) {
        unsetApprovalStatus();
      } else {
        setApprovalStatus((String)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case WORKFLOW_PROCESS_DEFKEY:
      if (value == null) {
        unsetWorkflowProcessDefkey();
      } else {
        setWorkflowProcessDefkey((String)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WORKFLOW_TASK_DEF_KEY:
      return getWorkflowTaskDefKey();

    case WORKFLOW_INSTANCE_ID:
      return getWorkflowInstanceId();

    case WORKFLOW_PROCESS_NAME:
      return getWorkflowProcessName();

    case WORKFLOW_TASK_ID:
      return getWorkflowTaskId();

    case TASK_NAME:
      return getTaskName();

    case EXECUTE_USER_NAME:
      return getExecuteUserName();

    case EXECUTE_USER_REAL_NAME:
      return getExecuteUserRealName();

    case EXECUTE_DTTM:
      return getExecuteDttm();

    case APPROVAL_STATUS:
      return getApprovalStatus();

    case MESSAGE:
      return getMessage();

    case WORKFLOW_PROCESS_DEFKEY:
      return getWorkflowProcessDefkey();

    case REF_ID:
      return Integer.valueOf(getRefId());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NAME:
      return getProjectName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WORKFLOW_TASK_DEF_KEY:
      return isSetWorkflowTaskDefKey();
    case WORKFLOW_INSTANCE_ID:
      return isSetWorkflowInstanceId();
    case WORKFLOW_PROCESS_NAME:
      return isSetWorkflowProcessName();
    case WORKFLOW_TASK_ID:
      return isSetWorkflowTaskId();
    case TASK_NAME:
      return isSetTaskName();
    case EXECUTE_USER_NAME:
      return isSetExecuteUserName();
    case EXECUTE_USER_REAL_NAME:
      return isSetExecuteUserRealName();
    case EXECUTE_DTTM:
      return isSetExecuteDttm();
    case APPROVAL_STATUS:
      return isSetApprovalStatus();
    case MESSAGE:
      return isSetMessage();
    case WORKFLOW_PROCESS_DEFKEY:
      return isSetWorkflowProcessDefkey();
    case REF_ID:
      return isSetRefId();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NAME:
      return isSetProjectName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskHistoryDto)
      return this.equals((TaskHistoryDto)that);
    return false;
  }

  public boolean equals(TaskHistoryDto that) {
    if (that == null)
      return false;

    boolean this_present_workflowTaskDefKey = true && this.isSetWorkflowTaskDefKey();
    boolean that_present_workflowTaskDefKey = true && that.isSetWorkflowTaskDefKey();
    if (this_present_workflowTaskDefKey || that_present_workflowTaskDefKey) {
      if (!(this_present_workflowTaskDefKey && that_present_workflowTaskDefKey))
        return false;
      if (!this.workflowTaskDefKey.equals(that.workflowTaskDefKey))
        return false;
    }

    boolean this_present_workflowInstanceId = true && this.isSetWorkflowInstanceId();
    boolean that_present_workflowInstanceId = true && that.isSetWorkflowInstanceId();
    if (this_present_workflowInstanceId || that_present_workflowInstanceId) {
      if (!(this_present_workflowInstanceId && that_present_workflowInstanceId))
        return false;
      if (!this.workflowInstanceId.equals(that.workflowInstanceId))
        return false;
    }

    boolean this_present_workflowProcessName = true && this.isSetWorkflowProcessName();
    boolean that_present_workflowProcessName = true && that.isSetWorkflowProcessName();
    if (this_present_workflowProcessName || that_present_workflowProcessName) {
      if (!(this_present_workflowProcessName && that_present_workflowProcessName))
        return false;
      if (!this.workflowProcessName.equals(that.workflowProcessName))
        return false;
    }

    boolean this_present_workflowTaskId = true && this.isSetWorkflowTaskId();
    boolean that_present_workflowTaskId = true && that.isSetWorkflowTaskId();
    if (this_present_workflowTaskId || that_present_workflowTaskId) {
      if (!(this_present_workflowTaskId && that_present_workflowTaskId))
        return false;
      if (!this.workflowTaskId.equals(that.workflowTaskId))
        return false;
    }

    boolean this_present_taskName = true && this.isSetTaskName();
    boolean that_present_taskName = true && that.isSetTaskName();
    if (this_present_taskName || that_present_taskName) {
      if (!(this_present_taskName && that_present_taskName))
        return false;
      if (!this.taskName.equals(that.taskName))
        return false;
    }

    boolean this_present_executeUserName = true && this.isSetExecuteUserName();
    boolean that_present_executeUserName = true && that.isSetExecuteUserName();
    if (this_present_executeUserName || that_present_executeUserName) {
      if (!(this_present_executeUserName && that_present_executeUserName))
        return false;
      if (!this.executeUserName.equals(that.executeUserName))
        return false;
    }

    boolean this_present_executeUserRealName = true && this.isSetExecuteUserRealName();
    boolean that_present_executeUserRealName = true && that.isSetExecuteUserRealName();
    if (this_present_executeUserRealName || that_present_executeUserRealName) {
      if (!(this_present_executeUserRealName && that_present_executeUserRealName))
        return false;
      if (!this.executeUserRealName.equals(that.executeUserRealName))
        return false;
    }

    boolean this_present_executeDttm = true && this.isSetExecuteDttm();
    boolean that_present_executeDttm = true && that.isSetExecuteDttm();
    if (this_present_executeDttm || that_present_executeDttm) {
      if (!(this_present_executeDttm && that_present_executeDttm))
        return false;
      if (!this.executeDttm.equals(that.executeDttm))
        return false;
    }

    boolean this_present_approvalStatus = true && this.isSetApprovalStatus();
    boolean that_present_approvalStatus = true && that.isSetApprovalStatus();
    if (this_present_approvalStatus || that_present_approvalStatus) {
      if (!(this_present_approvalStatus && that_present_approvalStatus))
        return false;
      if (!this.approvalStatus.equals(that.approvalStatus))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_workflowProcessDefkey = true && this.isSetWorkflowProcessDefkey();
    boolean that_present_workflowProcessDefkey = true && that.isSetWorkflowProcessDefkey();
    if (this_present_workflowProcessDefkey || that_present_workflowProcessDefkey) {
      if (!(this_present_workflowProcessDefkey && that_present_workflowProcessDefkey))
        return false;
      if (!this.workflowProcessDefkey.equals(that.workflowProcessDefkey))
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_workflowTaskDefKey = true && (isSetWorkflowTaskDefKey());
    list.add(present_workflowTaskDefKey);
    if (present_workflowTaskDefKey)
      list.add(workflowTaskDefKey);

    boolean present_workflowInstanceId = true && (isSetWorkflowInstanceId());
    list.add(present_workflowInstanceId);
    if (present_workflowInstanceId)
      list.add(workflowInstanceId);

    boolean present_workflowProcessName = true && (isSetWorkflowProcessName());
    list.add(present_workflowProcessName);
    if (present_workflowProcessName)
      list.add(workflowProcessName);

    boolean present_workflowTaskId = true && (isSetWorkflowTaskId());
    list.add(present_workflowTaskId);
    if (present_workflowTaskId)
      list.add(workflowTaskId);

    boolean present_taskName = true && (isSetTaskName());
    list.add(present_taskName);
    if (present_taskName)
      list.add(taskName);

    boolean present_executeUserName = true && (isSetExecuteUserName());
    list.add(present_executeUserName);
    if (present_executeUserName)
      list.add(executeUserName);

    boolean present_executeUserRealName = true && (isSetExecuteUserRealName());
    list.add(present_executeUserRealName);
    if (present_executeUserRealName)
      list.add(executeUserRealName);

    boolean present_executeDttm = true && (isSetExecuteDttm());
    list.add(present_executeDttm);
    if (present_executeDttm)
      list.add(executeDttm);

    boolean present_approvalStatus = true && (isSetApprovalStatus());
    list.add(present_approvalStatus);
    if (present_approvalStatus)
      list.add(approvalStatus);

    boolean present_message = true && (isSetMessage());
    list.add(present_message);
    if (present_message)
      list.add(message);

    boolean present_workflowProcessDefkey = true && (isSetWorkflowProcessDefkey());
    list.add(present_workflowProcessDefkey);
    if (present_workflowProcessDefkey)
      list.add(workflowProcessDefkey);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskHistoryDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWorkflowTaskDefKey()).compareTo(other.isSetWorkflowTaskDefKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowTaskDefKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowTaskDefKey, other.workflowTaskDefKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowInstanceId()).compareTo(other.isSetWorkflowInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowInstanceId, other.workflowInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowProcessName()).compareTo(other.isSetWorkflowProcessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowProcessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowProcessName, other.workflowProcessName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowTaskId()).compareTo(other.isSetWorkflowTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowTaskId, other.workflowTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskName()).compareTo(other.isSetTaskName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskName, other.taskName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteUserName()).compareTo(other.isSetExecuteUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeUserName, other.executeUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteUserRealName()).compareTo(other.isSetExecuteUserRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteUserRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeUserRealName, other.executeUserRealName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecuteDttm()).compareTo(other.isSetExecuteDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecuteDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executeDttm, other.executeDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalStatus()).compareTo(other.isSetApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalStatus, other.approvalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWorkflowProcessDefkey()).compareTo(other.isSetWorkflowProcessDefkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkflowProcessDefkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workflowProcessDefkey, other.workflowProcessDefkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskHistoryDto(");
    boolean first = true;

    sb.append("workflowTaskDefKey:");
    if (this.workflowTaskDefKey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowTaskDefKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowInstanceId:");
    if (this.workflowInstanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowInstanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowProcessName:");
    if (this.workflowProcessName == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowProcessName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowTaskId:");
    if (this.workflowTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskName:");
    if (this.taskName == null) {
      sb.append("null");
    } else {
      sb.append(this.taskName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executeUserName:");
    if (this.executeUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.executeUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executeUserRealName:");
    if (this.executeUserRealName == null) {
      sb.append("null");
    } else {
      sb.append(this.executeUserRealName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executeDttm:");
    if (this.executeDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.executeDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalStatus:");
    if (this.approvalStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workflowProcessDefkey:");
    if (this.workflowProcessDefkey == null) {
      sb.append("null");
    } else {
      sb.append(this.workflowProcessDefkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskHistoryDtoStandardSchemeFactory implements SchemeFactory {
    public TaskHistoryDtoStandardScheme getScheme() {
      return new TaskHistoryDtoStandardScheme();
    }
  }

  private static class TaskHistoryDtoStandardScheme extends StandardScheme<TaskHistoryDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskHistoryDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WORKFLOW_TASK_DEF_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowTaskDefKey = iprot.readString();
              struct.setWorkflowTaskDefKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WORKFLOW_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowInstanceId = iprot.readString();
              struct.setWorkflowInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WORKFLOW_PROCESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowProcessName = iprot.readString();
              struct.setWorkflowProcessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WORKFLOW_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowTaskId = iprot.readString();
              struct.setWorkflowTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskName = iprot.readString();
              struct.setTaskNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXECUTE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executeUserName = iprot.readString();
              struct.setExecuteUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXECUTE_USER_REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executeUserRealName = iprot.readString();
              struct.setExecuteUserRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXECUTE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executeDttm = iprot.readString();
              struct.setExecuteDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalStatus = iprot.readString();
              struct.setApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // WORKFLOW_PROCESS_DEFKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workflowProcessDefkey = iprot.readString();
              struct.setWorkflowProcessDefkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskHistoryDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.workflowTaskDefKey != null) {
        oprot.writeFieldBegin(WORKFLOW_TASK_DEF_KEY_FIELD_DESC);
        oprot.writeString(struct.workflowTaskDefKey);
        oprot.writeFieldEnd();
      }
      if (struct.workflowInstanceId != null) {
        oprot.writeFieldBegin(WORKFLOW_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.workflowInstanceId);
        oprot.writeFieldEnd();
      }
      if (struct.workflowProcessName != null) {
        oprot.writeFieldBegin(WORKFLOW_PROCESS_NAME_FIELD_DESC);
        oprot.writeString(struct.workflowProcessName);
        oprot.writeFieldEnd();
      }
      if (struct.workflowTaskId != null) {
        oprot.writeFieldBegin(WORKFLOW_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.workflowTaskId);
        oprot.writeFieldEnd();
      }
      if (struct.taskName != null) {
        oprot.writeFieldBegin(TASK_NAME_FIELD_DESC);
        oprot.writeString(struct.taskName);
        oprot.writeFieldEnd();
      }
      if (struct.executeUserName != null) {
        oprot.writeFieldBegin(EXECUTE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.executeUserName);
        oprot.writeFieldEnd();
      }
      if (struct.executeUserRealName != null) {
        oprot.writeFieldBegin(EXECUTE_USER_REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.executeUserRealName);
        oprot.writeFieldEnd();
      }
      if (struct.executeDttm != null) {
        oprot.writeFieldBegin(EXECUTE_DTTM_FIELD_DESC);
        oprot.writeString(struct.executeDttm);
        oprot.writeFieldEnd();
      }
      if (struct.approvalStatus != null) {
        oprot.writeFieldBegin(APPROVAL_STATUS_FIELD_DESC);
        oprot.writeString(struct.approvalStatus);
        oprot.writeFieldEnd();
      }
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.message);
        oprot.writeFieldEnd();
      }
      if (struct.workflowProcessDefkey != null) {
        oprot.writeFieldBegin(WORKFLOW_PROCESS_DEFKEY_FIELD_DESC);
        oprot.writeString(struct.workflowProcessDefkey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskHistoryDtoTupleSchemeFactory implements SchemeFactory {
    public TaskHistoryDtoTupleScheme getScheme() {
      return new TaskHistoryDtoTupleScheme();
    }
  }

  private static class TaskHistoryDtoTupleScheme extends TupleScheme<TaskHistoryDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskHistoryDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWorkflowTaskDefKey()) {
        optionals.set(0);
      }
      if (struct.isSetWorkflowInstanceId()) {
        optionals.set(1);
      }
      if (struct.isSetWorkflowProcessName()) {
        optionals.set(2);
      }
      if (struct.isSetWorkflowTaskId()) {
        optionals.set(3);
      }
      if (struct.isSetTaskName()) {
        optionals.set(4);
      }
      if (struct.isSetExecuteUserName()) {
        optionals.set(5);
      }
      if (struct.isSetExecuteUserRealName()) {
        optionals.set(6);
      }
      if (struct.isSetExecuteDttm()) {
        optionals.set(7);
      }
      if (struct.isSetApprovalStatus()) {
        optionals.set(8);
      }
      if (struct.isSetMessage()) {
        optionals.set(9);
      }
      if (struct.isSetWorkflowProcessDefkey()) {
        optionals.set(10);
      }
      if (struct.isSetRefId()) {
        optionals.set(11);
      }
      if (struct.isSetProjectId()) {
        optionals.set(12);
      }
      if (struct.isSetProjectName()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetWorkflowTaskDefKey()) {
        oprot.writeString(struct.workflowTaskDefKey);
      }
      if (struct.isSetWorkflowInstanceId()) {
        oprot.writeString(struct.workflowInstanceId);
      }
      if (struct.isSetWorkflowProcessName()) {
        oprot.writeString(struct.workflowProcessName);
      }
      if (struct.isSetWorkflowTaskId()) {
        oprot.writeString(struct.workflowTaskId);
      }
      if (struct.isSetTaskName()) {
        oprot.writeString(struct.taskName);
      }
      if (struct.isSetExecuteUserName()) {
        oprot.writeString(struct.executeUserName);
      }
      if (struct.isSetExecuteUserRealName()) {
        oprot.writeString(struct.executeUserRealName);
      }
      if (struct.isSetExecuteDttm()) {
        oprot.writeString(struct.executeDttm);
      }
      if (struct.isSetApprovalStatus()) {
        oprot.writeString(struct.approvalStatus);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetWorkflowProcessDefkey()) {
        oprot.writeString(struct.workflowProcessDefkey);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskHistoryDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.workflowTaskDefKey = iprot.readString();
        struct.setWorkflowTaskDefKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.workflowInstanceId = iprot.readString();
        struct.setWorkflowInstanceIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.workflowProcessName = iprot.readString();
        struct.setWorkflowProcessNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.workflowTaskId = iprot.readString();
        struct.setWorkflowTaskIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.taskName = iprot.readString();
        struct.setTaskNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.executeUserName = iprot.readString();
        struct.setExecuteUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.executeUserRealName = iprot.readString();
        struct.setExecuteUserRealNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.executeDttm = iprot.readString();
        struct.setExecuteDttmIsSet(true);
      }
      if (incoming.get(8)) {
        struct.approvalStatus = iprot.readString();
        struct.setApprovalStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.workflowProcessDefkey = iprot.readString();
        struct.setWorkflowProcessDefkeyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
    }
  }

}


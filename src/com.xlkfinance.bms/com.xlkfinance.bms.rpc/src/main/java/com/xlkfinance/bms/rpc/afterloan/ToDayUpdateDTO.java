/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class ToDayUpdateDTO implements org.apache.thrift.TBase<ToDayUpdateDTO, ToDayUpdateDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ToDayUpdateDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ToDayUpdateDTO");

  private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DTL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dtlType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("outputAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OUTPUT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("outputDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("acctName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("acctType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField IS_MORTGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("isMortgage", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ROW_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("rowNum", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ToDayUpdateDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ToDayUpdateDTOTupleSchemeFactory());
  }

  public String toDate; // required
  public int type; // required
  public int businessType; // required
  public int dtlType; // required
  public double outputAmt; // required
  public String outputDate; // required
  public String acctName; // required
  public int acctType; // required
  public String pmUserName; // required
  public String isMortgage; // required
  public int rowNum; // required
  public List<ToDayUpdateDTO> results; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TO_DATE((short)1, "toDate"),
    TYPE((short)2, "type"),
    BUSINESS_TYPE((short)3, "businessType"),
    DTL_TYPE((short)4, "dtlType"),
    OUTPUT_AMT((short)5, "outputAmt"),
    OUTPUT_DATE((short)6, "outputDate"),
    ACCT_NAME((short)7, "acctName"),
    ACCT_TYPE((short)8, "acctType"),
    PM_USER_NAME((short)9, "pmUserName"),
    IS_MORTGAGE((short)10, "isMortgage"),
    ROW_NUM((short)11, "rowNum"),
    RESULTS((short)12, "results");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TO_DATE
          return TO_DATE;
        case 2: // TYPE
          return TYPE;
        case 3: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 4: // DTL_TYPE
          return DTL_TYPE;
        case 5: // OUTPUT_AMT
          return OUTPUT_AMT;
        case 6: // OUTPUT_DATE
          return OUTPUT_DATE;
        case 7: // ACCT_NAME
          return ACCT_NAME;
        case 8: // ACCT_TYPE
          return ACCT_TYPE;
        case 9: // PM_USER_NAME
          return PM_USER_NAME;
        case 10: // IS_MORTGAGE
          return IS_MORTGAGE;
        case 11: // ROW_NUM
          return ROW_NUM;
        case 12: // RESULTS
          return RESULTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __BUSINESSTYPE_ISSET_ID = 1;
  private static final int __DTLTYPE_ISSET_ID = 2;
  private static final int __OUTPUTAMT_ISSET_ID = 3;
  private static final int __ACCTTYPE_ISSET_ID = 4;
  private static final int __ROWNUM_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DTL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dtlType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT_AMT, new org.apache.thrift.meta_data.FieldMetaData("outputAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OUTPUT_DATE, new org.apache.thrift.meta_data.FieldMetaData("outputDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("acctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("acctType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MORTGAGE, new org.apache.thrift.meta_data.FieldMetaData("isMortgage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROW_NUM, new org.apache.thrift.meta_data.FieldMetaData("rowNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ToDayUpdateDTO"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ToDayUpdateDTO.class, metaDataMap);
  }

  public ToDayUpdateDTO() {
  }

  public ToDayUpdateDTO(
    String toDate,
    int type,
    int businessType,
    int dtlType,
    double outputAmt,
    String outputDate,
    String acctName,
    int acctType,
    String pmUserName,
    String isMortgage,
    int rowNum,
    List<ToDayUpdateDTO> results)
  {
    this();
    this.toDate = toDate;
    this.type = type;
    setTypeIsSet(true);
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    this.dtlType = dtlType;
    setDtlTypeIsSet(true);
    this.outputAmt = outputAmt;
    setOutputAmtIsSet(true);
    this.outputDate = outputDate;
    this.acctName = acctName;
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    this.pmUserName = pmUserName;
    this.isMortgage = isMortgage;
    this.rowNum = rowNum;
    setRowNumIsSet(true);
    this.results = results;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ToDayUpdateDTO(ToDayUpdateDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToDate()) {
      this.toDate = other.toDate;
    }
    this.type = other.type;
    this.businessType = other.businessType;
    this.dtlType = other.dtlType;
    this.outputAmt = other.outputAmt;
    if (other.isSetOutputDate()) {
      this.outputDate = other.outputDate;
    }
    if (other.isSetAcctName()) {
      this.acctName = other.acctName;
    }
    this.acctType = other.acctType;
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    if (other.isSetIsMortgage()) {
      this.isMortgage = other.isMortgage;
    }
    this.rowNum = other.rowNum;
    if (other.isSetResults()) {
      List<ToDayUpdateDTO> __this__results = new ArrayList<ToDayUpdateDTO>(other.results.size());
      for (ToDayUpdateDTO other_element : other.results) {
        __this__results.add(other_element);
      }
      this.results = __this__results;
    }
  }

  public ToDayUpdateDTO deepCopy() {
    return new ToDayUpdateDTO(this);
  }

  @Override
  public void clear() {
    this.toDate = null;
    setTypeIsSet(false);
    this.type = 0;
    setBusinessTypeIsSet(false);
    this.businessType = 0;
    setDtlTypeIsSet(false);
    this.dtlType = 0;
    setOutputAmtIsSet(false);
    this.outputAmt = 0.0;
    this.outputDate = null;
    this.acctName = null;
    setAcctTypeIsSet(false);
    this.acctType = 0;
    this.pmUserName = null;
    this.isMortgage = null;
    setRowNumIsSet(false);
    this.rowNum = 0;
    this.results = null;
  }

  public String getToDate() {
    return this.toDate;
  }

  public ToDayUpdateDTO setToDate(String toDate) {
    this.toDate = toDate;
    return this;
  }

  public void unsetToDate() {
    this.toDate = null;
  }

  /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToDate() {
    return this.toDate != null;
  }

  public void setToDateIsSet(boolean value) {
    if (!value) {
      this.toDate = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public ToDayUpdateDTO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public int getBusinessType() {
    return this.businessType;
  }

  public ToDayUpdateDTO setBusinessType(int businessType) {
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    return this;
  }

  public void unsetBusinessType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID);
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID);
  }

  public void setBusinessTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID, value);
  }

  public int getDtlType() {
    return this.dtlType;
  }

  public ToDayUpdateDTO setDtlType(int dtlType) {
    this.dtlType = dtlType;
    setDtlTypeIsSet(true);
    return this;
  }

  public void unsetDtlType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DTLTYPE_ISSET_ID);
  }

  /** Returns true if field dtlType is set (has been assigned a value) and false otherwise */
  public boolean isSetDtlType() {
    return EncodingUtils.testBit(__isset_bitfield, __DTLTYPE_ISSET_ID);
  }

  public void setDtlTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DTLTYPE_ISSET_ID, value);
  }

  public double getOutputAmt() {
    return this.outputAmt;
  }

  public ToDayUpdateDTO setOutputAmt(double outputAmt) {
    this.outputAmt = outputAmt;
    setOutputAmtIsSet(true);
    return this;
  }

  public void unsetOutputAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUTAMT_ISSET_ID);
  }

  /** Returns true if field outputAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUTAMT_ISSET_ID);
  }

  public void setOutputAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUTAMT_ISSET_ID, value);
  }

  public String getOutputDate() {
    return this.outputDate;
  }

  public ToDayUpdateDTO setOutputDate(String outputDate) {
    this.outputDate = outputDate;
    return this;
  }

  public void unsetOutputDate() {
    this.outputDate = null;
  }

  /** Returns true if field outputDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputDate() {
    return this.outputDate != null;
  }

  public void setOutputDateIsSet(boolean value) {
    if (!value) {
      this.outputDate = null;
    }
  }

  public String getAcctName() {
    return this.acctName;
  }

  public ToDayUpdateDTO setAcctName(String acctName) {
    this.acctName = acctName;
    return this;
  }

  public void unsetAcctName() {
    this.acctName = null;
  }

  /** Returns true if field acctName is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctName() {
    return this.acctName != null;
  }

  public void setAcctNameIsSet(boolean value) {
    if (!value) {
      this.acctName = null;
    }
  }

  public int getAcctType() {
    return this.acctType;
  }

  public ToDayUpdateDTO setAcctType(int acctType) {
    this.acctType = acctType;
    setAcctTypeIsSet(true);
    return this;
  }

  public void unsetAcctType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  /** Returns true if field acctType is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctType() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTTYPE_ISSET_ID);
  }

  public void setAcctTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTTYPE_ISSET_ID, value);
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public ToDayUpdateDTO setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public String getIsMortgage() {
    return this.isMortgage;
  }

  public ToDayUpdateDTO setIsMortgage(String isMortgage) {
    this.isMortgage = isMortgage;
    return this;
  }

  public void unsetIsMortgage() {
    this.isMortgage = null;
  }

  /** Returns true if field isMortgage is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMortgage() {
    return this.isMortgage != null;
  }

  public void setIsMortgageIsSet(boolean value) {
    if (!value) {
      this.isMortgage = null;
    }
  }

  public int getRowNum() {
    return this.rowNum;
  }

  public ToDayUpdateDTO setRowNum(int rowNum) {
    this.rowNum = rowNum;
    setRowNumIsSet(true);
    return this;
  }

  public void unsetRowNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWNUM_ISSET_ID);
  }

  /** Returns true if field rowNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRowNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWNUM_ISSET_ID);
  }

  public void setRowNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWNUM_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<ToDayUpdateDTO> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(ToDayUpdateDTO elem) {
    if (this.results == null) {
      this.results = new ArrayList<ToDayUpdateDTO>();
    }
    this.results.add(elem);
  }

  public List<ToDayUpdateDTO> getResults() {
    return this.results;
  }

  public ToDayUpdateDTO setResults(List<ToDayUpdateDTO> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TO_DATE:
      if (value == null) {
        unsetToDate();
      } else {
        setToDate((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((Integer)value);
      }
      break;

    case DTL_TYPE:
      if (value == null) {
        unsetDtlType();
      } else {
        setDtlType((Integer)value);
      }
      break;

    case OUTPUT_AMT:
      if (value == null) {
        unsetOutputAmt();
      } else {
        setOutputAmt((Double)value);
      }
      break;

    case OUTPUT_DATE:
      if (value == null) {
        unsetOutputDate();
      } else {
        setOutputDate((String)value);
      }
      break;

    case ACCT_NAME:
      if (value == null) {
        unsetAcctName();
      } else {
        setAcctName((String)value);
      }
      break;

    case ACCT_TYPE:
      if (value == null) {
        unsetAcctType();
      } else {
        setAcctType((Integer)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case IS_MORTGAGE:
      if (value == null) {
        unsetIsMortgage();
      } else {
        setIsMortgage((String)value);
      }
      break;

    case ROW_NUM:
      if (value == null) {
        unsetRowNum();
      } else {
        setRowNum((Integer)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<ToDayUpdateDTO>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TO_DATE:
      return getToDate();

    case TYPE:
      return Integer.valueOf(getType());

    case BUSINESS_TYPE:
      return Integer.valueOf(getBusinessType());

    case DTL_TYPE:
      return Integer.valueOf(getDtlType());

    case OUTPUT_AMT:
      return Double.valueOf(getOutputAmt());

    case OUTPUT_DATE:
      return getOutputDate();

    case ACCT_NAME:
      return getAcctName();

    case ACCT_TYPE:
      return Integer.valueOf(getAcctType());

    case PM_USER_NAME:
      return getPmUserName();

    case IS_MORTGAGE:
      return getIsMortgage();

    case ROW_NUM:
      return Integer.valueOf(getRowNum());

    case RESULTS:
      return getResults();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TO_DATE:
      return isSetToDate();
    case TYPE:
      return isSetType();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case DTL_TYPE:
      return isSetDtlType();
    case OUTPUT_AMT:
      return isSetOutputAmt();
    case OUTPUT_DATE:
      return isSetOutputDate();
    case ACCT_NAME:
      return isSetAcctName();
    case ACCT_TYPE:
      return isSetAcctType();
    case PM_USER_NAME:
      return isSetPmUserName();
    case IS_MORTGAGE:
      return isSetIsMortgage();
    case ROW_NUM:
      return isSetRowNum();
    case RESULTS:
      return isSetResults();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ToDayUpdateDTO)
      return this.equals((ToDayUpdateDTO)that);
    return false;
  }

  public boolean equals(ToDayUpdateDTO that) {
    if (that == null)
      return false;

    boolean this_present_toDate = true && this.isSetToDate();
    boolean that_present_toDate = true && that.isSetToDate();
    if (this_present_toDate || that_present_toDate) {
      if (!(this_present_toDate && that_present_toDate))
        return false;
      if (!this.toDate.equals(that.toDate))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_businessType = true;
    boolean that_present_businessType = true;
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (this.businessType != that.businessType)
        return false;
    }

    boolean this_present_dtlType = true;
    boolean that_present_dtlType = true;
    if (this_present_dtlType || that_present_dtlType) {
      if (!(this_present_dtlType && that_present_dtlType))
        return false;
      if (this.dtlType != that.dtlType)
        return false;
    }

    boolean this_present_outputAmt = true;
    boolean that_present_outputAmt = true;
    if (this_present_outputAmt || that_present_outputAmt) {
      if (!(this_present_outputAmt && that_present_outputAmt))
        return false;
      if (this.outputAmt != that.outputAmt)
        return false;
    }

    boolean this_present_outputDate = true && this.isSetOutputDate();
    boolean that_present_outputDate = true && that.isSetOutputDate();
    if (this_present_outputDate || that_present_outputDate) {
      if (!(this_present_outputDate && that_present_outputDate))
        return false;
      if (!this.outputDate.equals(that.outputDate))
        return false;
    }

    boolean this_present_acctName = true && this.isSetAcctName();
    boolean that_present_acctName = true && that.isSetAcctName();
    if (this_present_acctName || that_present_acctName) {
      if (!(this_present_acctName && that_present_acctName))
        return false;
      if (!this.acctName.equals(that.acctName))
        return false;
    }

    boolean this_present_acctType = true;
    boolean that_present_acctType = true;
    if (this_present_acctType || that_present_acctType) {
      if (!(this_present_acctType && that_present_acctType))
        return false;
      if (this.acctType != that.acctType)
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_isMortgage = true && this.isSetIsMortgage();
    boolean that_present_isMortgage = true && that.isSetIsMortgage();
    if (this_present_isMortgage || that_present_isMortgage) {
      if (!(this_present_isMortgage && that_present_isMortgage))
        return false;
      if (!this.isMortgage.equals(that.isMortgage))
        return false;
    }

    boolean this_present_rowNum = true;
    boolean that_present_rowNum = true;
    if (this_present_rowNum || that_present_rowNum) {
      if (!(this_present_rowNum && that_present_rowNum))
        return false;
      if (this.rowNum != that.rowNum)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_toDate = true && (isSetToDate());
    list.add(present_toDate);
    if (present_toDate)
      list.add(toDate);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_businessType = true;
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_dtlType = true;
    list.add(present_dtlType);
    if (present_dtlType)
      list.add(dtlType);

    boolean present_outputAmt = true;
    list.add(present_outputAmt);
    if (present_outputAmt)
      list.add(outputAmt);

    boolean present_outputDate = true && (isSetOutputDate());
    list.add(present_outputDate);
    if (present_outputDate)
      list.add(outputDate);

    boolean present_acctName = true && (isSetAcctName());
    list.add(present_acctName);
    if (present_acctName)
      list.add(acctName);

    boolean present_acctType = true;
    list.add(present_acctType);
    if (present_acctType)
      list.add(acctType);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_isMortgage = true && (isSetIsMortgage());
    list.add(present_isMortgage);
    if (present_isMortgage)
      list.add(isMortgage);

    boolean present_rowNum = true;
    list.add(present_rowNum);
    if (present_rowNum)
      list.add(rowNum);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    return list.hashCode();
  }

  @Override
  public int compareTo(ToDayUpdateDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToDate()).compareTo(other.isSetToDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, other.toDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDtlType()).compareTo(other.isSetDtlType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDtlType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtlType, other.dtlType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputAmt()).compareTo(other.isSetOutputAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputAmt, other.outputAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputDate()).compareTo(other.isSetOutputDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputDate, other.outputDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctName()).compareTo(other.isSetAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctName, other.acctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctType()).compareTo(other.isSetAcctType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctType, other.acctType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMortgage()).compareTo(other.isSetIsMortgage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMortgage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMortgage, other.isMortgage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRowNum()).compareTo(other.isSetRowNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRowNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rowNum, other.rowNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ToDayUpdateDTO(");
    boolean first = true;

    sb.append("toDate:");
    if (this.toDate == null) {
      sb.append("null");
    } else {
      sb.append(this.toDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    sb.append(this.businessType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dtlType:");
    sb.append(this.dtlType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputAmt:");
    sb.append(this.outputAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputDate:");
    if (this.outputDate == null) {
      sb.append("null");
    } else {
      sb.append(this.outputDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctName:");
    if (this.acctName == null) {
      sb.append("null");
    } else {
      sb.append(this.acctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctType:");
    sb.append(this.acctType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMortgage:");
    if (this.isMortgage == null) {
      sb.append("null");
    } else {
      sb.append(this.isMortgage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rowNum:");
    sb.append(this.rowNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ToDayUpdateDTOStandardSchemeFactory implements SchemeFactory {
    public ToDayUpdateDTOStandardScheme getScheme() {
      return new ToDayUpdateDTOStandardScheme();
    }
  }

  private static class ToDayUpdateDTOStandardScheme extends StandardScheme<ToDayUpdateDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ToDayUpdateDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TO_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toDate = iprot.readString();
              struct.setToDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessType = iprot.readI32();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DTL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dtlType = iprot.readI32();
              struct.setDtlTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outputAmt = iprot.readDouble();
              struct.setOutputAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTPUT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputDate = iprot.readString();
              struct.setOutputDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acctName = iprot.readString();
              struct.setAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctType = iprot.readI32();
              struct.setAcctTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IS_MORTGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isMortgage = iprot.readString();
              struct.setIsMortgageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROW_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rowNum = iprot.readI32();
              struct.setRowNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.results = new ArrayList<ToDayUpdateDTO>(_list16.size);
                ToDayUpdateDTO _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new ToDayUpdateDTO();
                  _elem17.read(iprot);
                  struct.results.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ToDayUpdateDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.toDate != null) {
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        oprot.writeString(struct.toDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.businessType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DTL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.dtlType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.outputAmt);
      oprot.writeFieldEnd();
      if (struct.outputDate != null) {
        oprot.writeFieldBegin(OUTPUT_DATE_FIELD_DESC);
        oprot.writeString(struct.outputDate);
        oprot.writeFieldEnd();
      }
      if (struct.acctName != null) {
        oprot.writeFieldBegin(ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.acctName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.acctType);
      oprot.writeFieldEnd();
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      if (struct.isMortgage != null) {
        oprot.writeFieldBegin(IS_MORTGAGE_FIELD_DESC);
        oprot.writeString(struct.isMortgage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ROW_NUM_FIELD_DESC);
      oprot.writeI32(struct.rowNum);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (ToDayUpdateDTO _iter19 : struct.results)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ToDayUpdateDTOTupleSchemeFactory implements SchemeFactory {
    public ToDayUpdateDTOTupleScheme getScheme() {
      return new ToDayUpdateDTOTupleScheme();
    }
  }

  private static class ToDayUpdateDTOTupleScheme extends TupleScheme<ToDayUpdateDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ToDayUpdateDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetToDate()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(2);
      }
      if (struct.isSetDtlType()) {
        optionals.set(3);
      }
      if (struct.isSetOutputAmt()) {
        optionals.set(4);
      }
      if (struct.isSetOutputDate()) {
        optionals.set(5);
      }
      if (struct.isSetAcctName()) {
        optionals.set(6);
      }
      if (struct.isSetAcctType()) {
        optionals.set(7);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(8);
      }
      if (struct.isSetIsMortgage()) {
        optionals.set(9);
      }
      if (struct.isSetRowNum()) {
        optionals.set(10);
      }
      if (struct.isSetResults()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetToDate()) {
        oprot.writeString(struct.toDate);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeI32(struct.businessType);
      }
      if (struct.isSetDtlType()) {
        oprot.writeI32(struct.dtlType);
      }
      if (struct.isSetOutputAmt()) {
        oprot.writeDouble(struct.outputAmt);
      }
      if (struct.isSetOutputDate()) {
        oprot.writeString(struct.outputDate);
      }
      if (struct.isSetAcctName()) {
        oprot.writeString(struct.acctName);
      }
      if (struct.isSetAcctType()) {
        oprot.writeI32(struct.acctType);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetIsMortgage()) {
        oprot.writeString(struct.isMortgage);
      }
      if (struct.isSetRowNum()) {
        oprot.writeI32(struct.rowNum);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (ToDayUpdateDTO _iter20 : struct.results)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ToDayUpdateDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.toDate = iprot.readString();
        struct.setToDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.businessType = iprot.readI32();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dtlType = iprot.readI32();
        struct.setDtlTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outputAmt = iprot.readDouble();
        struct.setOutputAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.outputDate = iprot.readString();
        struct.setOutputDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.acctName = iprot.readString();
        struct.setAcctNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.acctType = iprot.readI32();
        struct.setAcctTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isMortgage = iprot.readString();
        struct.setIsMortgageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rowNum = iprot.readI32();
        struct.setRowNumIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<ToDayUpdateDTO>(_list21.size);
          ToDayUpdateDTO _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new ToDayUpdateDTO();
            _elem22.read(iprot);
            struct.results.add(_elem22);
          }
        }
        struct.setResultsIsSet(true);
      }
    }
  }

}


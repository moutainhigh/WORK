/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class FinanceAcctTotalView implements org.apache.thrift.TBase<FinanceAcctTotalView, FinanceAcctTotalView._Fields>, java.io.Serializable, Cloneable, Comparable<FinanceAcctTotalView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinanceAcctTotalView");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHARGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BANK_CARD_TYPE_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("bankCardTypeText", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BANK_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("bankNum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INITIAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("initialAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField INCOME_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("incomeAccount", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("accountOut", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PERIOD_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("periodBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField BANK_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankUserName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinanceAcctTotalViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinanceAcctTotalViewTupleSchemeFactory());
  }

  public String pid; // required
  public String chargeName; // required
  public String bankCardTypeText; // required
  public String bankNum; // required
  public double initialAmt; // required
  public double incomeAccount; // required
  public double accountOut; // required
  public double periodBalance; // required
  public String bankUserName; // required
  public String ftType; // required
  public String remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CHARGE_NAME((short)2, "chargeName"),
    BANK_CARD_TYPE_TEXT((short)3, "bankCardTypeText"),
    BANK_NUM((short)4, "bankNum"),
    INITIAL_AMT((short)5, "initialAmt"),
    INCOME_ACCOUNT((short)6, "incomeAccount"),
    ACCOUNT_OUT((short)7, "accountOut"),
    PERIOD_BALANCE((short)8, "periodBalance"),
    BANK_USER_NAME((short)9, "bankUserName"),
    FT_TYPE((short)10, "ftType"),
    REMARK((short)11, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CHARGE_NAME
          return CHARGE_NAME;
        case 3: // BANK_CARD_TYPE_TEXT
          return BANK_CARD_TYPE_TEXT;
        case 4: // BANK_NUM
          return BANK_NUM;
        case 5: // INITIAL_AMT
          return INITIAL_AMT;
        case 6: // INCOME_ACCOUNT
          return INCOME_ACCOUNT;
        case 7: // ACCOUNT_OUT
          return ACCOUNT_OUT;
        case 8: // PERIOD_BALANCE
          return PERIOD_BALANCE;
        case 9: // BANK_USER_NAME
          return BANK_USER_NAME;
        case 10: // FT_TYPE
          return FT_TYPE;
        case 11: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INITIALAMT_ISSET_ID = 0;
  private static final int __INCOMEACCOUNT_ISSET_ID = 1;
  private static final int __ACCOUNTOUT_ISSET_ID = 2;
  private static final int __PERIODBALANCE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("chargeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_CARD_TYPE_TEXT, new org.apache.thrift.meta_data.FieldMetaData("bankCardTypeText", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_NUM, new org.apache.thrift.meta_data.FieldMetaData("bankNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INITIAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("initialAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INCOME_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("incomeAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCOUNT_OUT, new org.apache.thrift.meta_data.FieldMetaData("accountOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PERIOD_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("periodBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinanceAcctTotalView.class, metaDataMap);
  }

  public FinanceAcctTotalView() {
  }

  public FinanceAcctTotalView(
    String pid,
    String chargeName,
    String bankCardTypeText,
    String bankNum,
    double initialAmt,
    double incomeAccount,
    double accountOut,
    double periodBalance,
    String bankUserName,
    String ftType,
    String remark)
  {
    this();
    this.pid = pid;
    this.chargeName = chargeName;
    this.bankCardTypeText = bankCardTypeText;
    this.bankNum = bankNum;
    this.initialAmt = initialAmt;
    setInitialAmtIsSet(true);
    this.incomeAccount = incomeAccount;
    setIncomeAccountIsSet(true);
    this.accountOut = accountOut;
    setAccountOutIsSet(true);
    this.periodBalance = periodBalance;
    setPeriodBalanceIsSet(true);
    this.bankUserName = bankUserName;
    this.ftType = ftType;
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinanceAcctTotalView(FinanceAcctTotalView other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPid()) {
      this.pid = other.pid;
    }
    if (other.isSetChargeName()) {
      this.chargeName = other.chargeName;
    }
    if (other.isSetBankCardTypeText()) {
      this.bankCardTypeText = other.bankCardTypeText;
    }
    if (other.isSetBankNum()) {
      this.bankNum = other.bankNum;
    }
    this.initialAmt = other.initialAmt;
    this.incomeAccount = other.incomeAccount;
    this.accountOut = other.accountOut;
    this.periodBalance = other.periodBalance;
    if (other.isSetBankUserName()) {
      this.bankUserName = other.bankUserName;
    }
    if (other.isSetFtType()) {
      this.ftType = other.ftType;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public FinanceAcctTotalView deepCopy() {
    return new FinanceAcctTotalView(this);
  }

  @Override
  public void clear() {
    this.pid = null;
    this.chargeName = null;
    this.bankCardTypeText = null;
    this.bankNum = null;
    setInitialAmtIsSet(false);
    this.initialAmt = 0.0;
    setIncomeAccountIsSet(false);
    this.incomeAccount = 0.0;
    setAccountOutIsSet(false);
    this.accountOut = 0.0;
    setPeriodBalanceIsSet(false);
    this.periodBalance = 0.0;
    this.bankUserName = null;
    this.ftType = null;
    this.remark = null;
  }

  public String getPid() {
    return this.pid;
  }

  public FinanceAcctTotalView setPid(String pid) {
    this.pid = pid;
    return this;
  }

  public void unsetPid() {
    this.pid = null;
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return this.pid != null;
  }

  public void setPidIsSet(boolean value) {
    if (!value) {
      this.pid = null;
    }
  }

  public String getChargeName() {
    return this.chargeName;
  }

  public FinanceAcctTotalView setChargeName(String chargeName) {
    this.chargeName = chargeName;
    return this;
  }

  public void unsetChargeName() {
    this.chargeName = null;
  }

  /** Returns true if field chargeName is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeName() {
    return this.chargeName != null;
  }

  public void setChargeNameIsSet(boolean value) {
    if (!value) {
      this.chargeName = null;
    }
  }

  public String getBankCardTypeText() {
    return this.bankCardTypeText;
  }

  public FinanceAcctTotalView setBankCardTypeText(String bankCardTypeText) {
    this.bankCardTypeText = bankCardTypeText;
    return this;
  }

  public void unsetBankCardTypeText() {
    this.bankCardTypeText = null;
  }

  /** Returns true if field bankCardTypeText is set (has been assigned a value) and false otherwise */
  public boolean isSetBankCardTypeText() {
    return this.bankCardTypeText != null;
  }

  public void setBankCardTypeTextIsSet(boolean value) {
    if (!value) {
      this.bankCardTypeText = null;
    }
  }

  public String getBankNum() {
    return this.bankNum;
  }

  public FinanceAcctTotalView setBankNum(String bankNum) {
    this.bankNum = bankNum;
    return this;
  }

  public void unsetBankNum() {
    this.bankNum = null;
  }

  /** Returns true if field bankNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBankNum() {
    return this.bankNum != null;
  }

  public void setBankNumIsSet(boolean value) {
    if (!value) {
      this.bankNum = null;
    }
  }

  public double getInitialAmt() {
    return this.initialAmt;
  }

  public FinanceAcctTotalView setInitialAmt(double initialAmt) {
    this.initialAmt = initialAmt;
    setInitialAmtIsSet(true);
    return this;
  }

  public void unsetInitialAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALAMT_ISSET_ID);
  }

  /** Returns true if field initialAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALAMT_ISSET_ID);
  }

  public void setInitialAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALAMT_ISSET_ID, value);
  }

  public double getIncomeAccount() {
    return this.incomeAccount;
  }

  public FinanceAcctTotalView setIncomeAccount(double incomeAccount) {
    this.incomeAccount = incomeAccount;
    setIncomeAccountIsSet(true);
    return this;
  }

  public void unsetIncomeAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INCOMEACCOUNT_ISSET_ID);
  }

  /** Returns true if field incomeAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetIncomeAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __INCOMEACCOUNT_ISSET_ID);
  }

  public void setIncomeAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INCOMEACCOUNT_ISSET_ID, value);
  }

  public double getAccountOut() {
    return this.accountOut;
  }

  public FinanceAcctTotalView setAccountOut(double accountOut) {
    this.accountOut = accountOut;
    setAccountOutIsSet(true);
    return this;
  }

  public void unsetAccountOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTOUT_ISSET_ID);
  }

  /** Returns true if field accountOut is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountOut() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTOUT_ISSET_ID);
  }

  public void setAccountOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTOUT_ISSET_ID, value);
  }

  public double getPeriodBalance() {
    return this.periodBalance;
  }

  public FinanceAcctTotalView setPeriodBalance(double periodBalance) {
    this.periodBalance = periodBalance;
    setPeriodBalanceIsSet(true);
    return this;
  }

  public void unsetPeriodBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERIODBALANCE_ISSET_ID);
  }

  /** Returns true if field periodBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPeriodBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PERIODBALANCE_ISSET_ID);
  }

  public void setPeriodBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERIODBALANCE_ISSET_ID, value);
  }

  public String getBankUserName() {
    return this.bankUserName;
  }

  public FinanceAcctTotalView setBankUserName(String bankUserName) {
    this.bankUserName = bankUserName;
    return this;
  }

  public void unsetBankUserName() {
    this.bankUserName = null;
  }

  /** Returns true if field bankUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankUserName() {
    return this.bankUserName != null;
  }

  public void setBankUserNameIsSet(boolean value) {
    if (!value) {
      this.bankUserName = null;
    }
  }

  public String getFtType() {
    return this.ftType;
  }

  public FinanceAcctTotalView setFtType(String ftType) {
    this.ftType = ftType;
    return this;
  }

  public void unsetFtType() {
    this.ftType = null;
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return this.ftType != null;
  }

  public void setFtTypeIsSet(boolean value) {
    if (!value) {
      this.ftType = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public FinanceAcctTotalView setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((String)value);
      }
      break;

    case CHARGE_NAME:
      if (value == null) {
        unsetChargeName();
      } else {
        setChargeName((String)value);
      }
      break;

    case BANK_CARD_TYPE_TEXT:
      if (value == null) {
        unsetBankCardTypeText();
      } else {
        setBankCardTypeText((String)value);
      }
      break;

    case BANK_NUM:
      if (value == null) {
        unsetBankNum();
      } else {
        setBankNum((String)value);
      }
      break;

    case INITIAL_AMT:
      if (value == null) {
        unsetInitialAmt();
      } else {
        setInitialAmt((Double)value);
      }
      break;

    case INCOME_ACCOUNT:
      if (value == null) {
        unsetIncomeAccount();
      } else {
        setIncomeAccount((Double)value);
      }
      break;

    case ACCOUNT_OUT:
      if (value == null) {
        unsetAccountOut();
      } else {
        setAccountOut((Double)value);
      }
      break;

    case PERIOD_BALANCE:
      if (value == null) {
        unsetPeriodBalance();
      } else {
        setPeriodBalance((Double)value);
      }
      break;

    case BANK_USER_NAME:
      if (value == null) {
        unsetBankUserName();
      } else {
        setBankUserName((String)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return getPid();

    case CHARGE_NAME:
      return getChargeName();

    case BANK_CARD_TYPE_TEXT:
      return getBankCardTypeText();

    case BANK_NUM:
      return getBankNum();

    case INITIAL_AMT:
      return Double.valueOf(getInitialAmt());

    case INCOME_ACCOUNT:
      return Double.valueOf(getIncomeAccount());

    case ACCOUNT_OUT:
      return Double.valueOf(getAccountOut());

    case PERIOD_BALANCE:
      return Double.valueOf(getPeriodBalance());

    case BANK_USER_NAME:
      return getBankUserName();

    case FT_TYPE:
      return getFtType();

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CHARGE_NAME:
      return isSetChargeName();
    case BANK_CARD_TYPE_TEXT:
      return isSetBankCardTypeText();
    case BANK_NUM:
      return isSetBankNum();
    case INITIAL_AMT:
      return isSetInitialAmt();
    case INCOME_ACCOUNT:
      return isSetIncomeAccount();
    case ACCOUNT_OUT:
      return isSetAccountOut();
    case PERIOD_BALANCE:
      return isSetPeriodBalance();
    case BANK_USER_NAME:
      return isSetBankUserName();
    case FT_TYPE:
      return isSetFtType();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinanceAcctTotalView)
      return this.equals((FinanceAcctTotalView)that);
    return false;
  }

  public boolean equals(FinanceAcctTotalView that) {
    if (that == null)
      return false;

    boolean this_present_pid = true && this.isSetPid();
    boolean that_present_pid = true && that.isSetPid();
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (!this.pid.equals(that.pid))
        return false;
    }

    boolean this_present_chargeName = true && this.isSetChargeName();
    boolean that_present_chargeName = true && that.isSetChargeName();
    if (this_present_chargeName || that_present_chargeName) {
      if (!(this_present_chargeName && that_present_chargeName))
        return false;
      if (!this.chargeName.equals(that.chargeName))
        return false;
    }

    boolean this_present_bankCardTypeText = true && this.isSetBankCardTypeText();
    boolean that_present_bankCardTypeText = true && that.isSetBankCardTypeText();
    if (this_present_bankCardTypeText || that_present_bankCardTypeText) {
      if (!(this_present_bankCardTypeText && that_present_bankCardTypeText))
        return false;
      if (!this.bankCardTypeText.equals(that.bankCardTypeText))
        return false;
    }

    boolean this_present_bankNum = true && this.isSetBankNum();
    boolean that_present_bankNum = true && that.isSetBankNum();
    if (this_present_bankNum || that_present_bankNum) {
      if (!(this_present_bankNum && that_present_bankNum))
        return false;
      if (!this.bankNum.equals(that.bankNum))
        return false;
    }

    boolean this_present_initialAmt = true;
    boolean that_present_initialAmt = true;
    if (this_present_initialAmt || that_present_initialAmt) {
      if (!(this_present_initialAmt && that_present_initialAmt))
        return false;
      if (this.initialAmt != that.initialAmt)
        return false;
    }

    boolean this_present_incomeAccount = true;
    boolean that_present_incomeAccount = true;
    if (this_present_incomeAccount || that_present_incomeAccount) {
      if (!(this_present_incomeAccount && that_present_incomeAccount))
        return false;
      if (this.incomeAccount != that.incomeAccount)
        return false;
    }

    boolean this_present_accountOut = true;
    boolean that_present_accountOut = true;
    if (this_present_accountOut || that_present_accountOut) {
      if (!(this_present_accountOut && that_present_accountOut))
        return false;
      if (this.accountOut != that.accountOut)
        return false;
    }

    boolean this_present_periodBalance = true;
    boolean that_present_periodBalance = true;
    if (this_present_periodBalance || that_present_periodBalance) {
      if (!(this_present_periodBalance && that_present_periodBalance))
        return false;
      if (this.periodBalance != that.periodBalance)
        return false;
    }

    boolean this_present_bankUserName = true && this.isSetBankUserName();
    boolean that_present_bankUserName = true && that.isSetBankUserName();
    if (this_present_bankUserName || that_present_bankUserName) {
      if (!(this_present_bankUserName && that_present_bankUserName))
        return false;
      if (!this.bankUserName.equals(that.bankUserName))
        return false;
    }

    boolean this_present_ftType = true && this.isSetFtType();
    boolean that_present_ftType = true && that.isSetFtType();
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (!this.ftType.equals(that.ftType))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true && (isSetPid());
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_chargeName = true && (isSetChargeName());
    list.add(present_chargeName);
    if (present_chargeName)
      list.add(chargeName);

    boolean present_bankCardTypeText = true && (isSetBankCardTypeText());
    list.add(present_bankCardTypeText);
    if (present_bankCardTypeText)
      list.add(bankCardTypeText);

    boolean present_bankNum = true && (isSetBankNum());
    list.add(present_bankNum);
    if (present_bankNum)
      list.add(bankNum);

    boolean present_initialAmt = true;
    list.add(present_initialAmt);
    if (present_initialAmt)
      list.add(initialAmt);

    boolean present_incomeAccount = true;
    list.add(present_incomeAccount);
    if (present_incomeAccount)
      list.add(incomeAccount);

    boolean present_accountOut = true;
    list.add(present_accountOut);
    if (present_accountOut)
      list.add(accountOut);

    boolean present_periodBalance = true;
    list.add(present_periodBalance);
    if (present_periodBalance)
      list.add(periodBalance);

    boolean present_bankUserName = true && (isSetBankUserName());
    list.add(present_bankUserName);
    if (present_bankUserName)
      list.add(bankUserName);

    boolean present_ftType = true && (isSetFtType());
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinanceAcctTotalView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeName()).compareTo(other.isSetChargeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeName, other.chargeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankCardTypeText()).compareTo(other.isSetBankCardTypeText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankCardTypeText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankCardTypeText, other.bankCardTypeText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankNum()).compareTo(other.isSetBankNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankNum, other.bankNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialAmt()).compareTo(other.isSetInitialAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialAmt, other.initialAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIncomeAccount()).compareTo(other.isSetIncomeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncomeAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomeAccount, other.incomeAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountOut()).compareTo(other.isSetAccountOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountOut, other.accountOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPeriodBalance()).compareTo(other.isSetPeriodBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPeriodBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.periodBalance, other.periodBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankUserName()).compareTo(other.isSetBankUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankUserName, other.bankUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinanceAcctTotalView(");
    boolean first = true;

    sb.append("pid:");
    if (this.pid == null) {
      sb.append("null");
    } else {
      sb.append(this.pid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chargeName:");
    if (this.chargeName == null) {
      sb.append("null");
    } else {
      sb.append(this.chargeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankCardTypeText:");
    if (this.bankCardTypeText == null) {
      sb.append("null");
    } else {
      sb.append(this.bankCardTypeText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankNum:");
    if (this.bankNum == null) {
      sb.append("null");
    } else {
      sb.append(this.bankNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("initialAmt:");
    sb.append(this.initialAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomeAccount:");
    sb.append(this.incomeAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountOut:");
    sb.append(this.accountOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("periodBalance:");
    sb.append(this.periodBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankUserName:");
    if (this.bankUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    if (this.ftType == null) {
      sb.append("null");
    } else {
      sb.append(this.ftType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinanceAcctTotalViewStandardSchemeFactory implements SchemeFactory {
    public FinanceAcctTotalViewStandardScheme getScheme() {
      return new FinanceAcctTotalViewStandardScheme();
    }
  }

  private static class FinanceAcctTotalViewStandardScheme extends StandardScheme<FinanceAcctTotalView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinanceAcctTotalView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pid = iprot.readString();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHARGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chargeName = iprot.readString();
              struct.setChargeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BANK_CARD_TYPE_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankCardTypeText = iprot.readString();
              struct.setBankCardTypeTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANK_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankNum = iprot.readString();
              struct.setBankNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INITIAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialAmt = iprot.readDouble();
              struct.setInitialAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INCOME_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.incomeAccount = iprot.readDouble();
              struct.setIncomeAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accountOut = iprot.readDouble();
              struct.setAccountOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PERIOD_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.periodBalance = iprot.readDouble();
              struct.setPeriodBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BANK_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankUserName = iprot.readString();
              struct.setBankUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftType = iprot.readString();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinanceAcctTotalView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pid != null) {
        oprot.writeFieldBegin(PID_FIELD_DESC);
        oprot.writeString(struct.pid);
        oprot.writeFieldEnd();
      }
      if (struct.chargeName != null) {
        oprot.writeFieldBegin(CHARGE_NAME_FIELD_DESC);
        oprot.writeString(struct.chargeName);
        oprot.writeFieldEnd();
      }
      if (struct.bankCardTypeText != null) {
        oprot.writeFieldBegin(BANK_CARD_TYPE_TEXT_FIELD_DESC);
        oprot.writeString(struct.bankCardTypeText);
        oprot.writeFieldEnd();
      }
      if (struct.bankNum != null) {
        oprot.writeFieldBegin(BANK_NUM_FIELD_DESC);
        oprot.writeString(struct.bankNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INITIAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.initialAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INCOME_ACCOUNT_FIELD_DESC);
      oprot.writeDouble(struct.incomeAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNT_OUT_FIELD_DESC);
      oprot.writeDouble(struct.accountOut);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERIOD_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.periodBalance);
      oprot.writeFieldEnd();
      if (struct.bankUserName != null) {
        oprot.writeFieldBegin(BANK_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.bankUserName);
        oprot.writeFieldEnd();
      }
      if (struct.ftType != null) {
        oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
        oprot.writeString(struct.ftType);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinanceAcctTotalViewTupleSchemeFactory implements SchemeFactory {
    public FinanceAcctTotalViewTupleScheme getScheme() {
      return new FinanceAcctTotalViewTupleScheme();
    }
  }

  private static class FinanceAcctTotalViewTupleScheme extends TupleScheme<FinanceAcctTotalView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinanceAcctTotalView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetChargeName()) {
        optionals.set(1);
      }
      if (struct.isSetBankCardTypeText()) {
        optionals.set(2);
      }
      if (struct.isSetBankNum()) {
        optionals.set(3);
      }
      if (struct.isSetInitialAmt()) {
        optionals.set(4);
      }
      if (struct.isSetIncomeAccount()) {
        optionals.set(5);
      }
      if (struct.isSetAccountOut()) {
        optionals.set(6);
      }
      if (struct.isSetPeriodBalance()) {
        optionals.set(7);
      }
      if (struct.isSetBankUserName()) {
        optionals.set(8);
      }
      if (struct.isSetFtType()) {
        optionals.set(9);
      }
      if (struct.isSetRemark()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeString(struct.pid);
      }
      if (struct.isSetChargeName()) {
        oprot.writeString(struct.chargeName);
      }
      if (struct.isSetBankCardTypeText()) {
        oprot.writeString(struct.bankCardTypeText);
      }
      if (struct.isSetBankNum()) {
        oprot.writeString(struct.bankNum);
      }
      if (struct.isSetInitialAmt()) {
        oprot.writeDouble(struct.initialAmt);
      }
      if (struct.isSetIncomeAccount()) {
        oprot.writeDouble(struct.incomeAccount);
      }
      if (struct.isSetAccountOut()) {
        oprot.writeDouble(struct.accountOut);
      }
      if (struct.isSetPeriodBalance()) {
        oprot.writeDouble(struct.periodBalance);
      }
      if (struct.isSetBankUserName()) {
        oprot.writeString(struct.bankUserName);
      }
      if (struct.isSetFtType()) {
        oprot.writeString(struct.ftType);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinanceAcctTotalView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readString();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chargeName = iprot.readString();
        struct.setChargeNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bankCardTypeText = iprot.readString();
        struct.setBankCardTypeTextIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bankNum = iprot.readString();
        struct.setBankNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.initialAmt = iprot.readDouble();
        struct.setInitialAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.incomeAccount = iprot.readDouble();
        struct.setIncomeAccountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accountOut = iprot.readDouble();
        struct.setAccountOutIsSet(true);
      }
      if (incoming.get(7)) {
        struct.periodBalance = iprot.readDouble();
        struct.setPeriodBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.bankUserName = iprot.readString();
        struct.setBankUserNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ftType = iprot.readString();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class ProjectCompleteFile implements org.apache.thrift.TBase<ProjectCompleteFile, ProjectCompleteFile._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectCompleteFile> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectCompleteFile");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPLETE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("completeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDesc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LEGALCONFIRMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Legalconfirmation", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fileUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField UPLOAD_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadDttm", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectCompleteFileStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectCompleteFileTupleSchemeFactory());
  }

  public int pId; // required
  public int completeId; // required
  public String fileDesc; // required
  public int fileId; // required
  public int Legalconfirmation; // required
  public String fileType; // required
  public int fileSize; // required
  public String fileUrl; // required
  public String uploadDttm; // required
  public String fileName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    COMPLETE_ID((short)2, "completeId"),
    FILE_DESC((short)3, "fileDesc"),
    FILE_ID((short)4, "fileId"),
    LEGALCONFIRMATION((short)5, "Legalconfirmation"),
    FILE_TYPE((short)6, "fileType"),
    FILE_SIZE((short)7, "fileSize"),
    FILE_URL((short)8, "fileUrl"),
    UPLOAD_DTTM((short)9, "uploadDttm"),
    FILE_NAME((short)10, "fileName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // COMPLETE_ID
          return COMPLETE_ID;
        case 3: // FILE_DESC
          return FILE_DESC;
        case 4: // FILE_ID
          return FILE_ID;
        case 5: // LEGALCONFIRMATION
          return LEGALCONFIRMATION;
        case 6: // FILE_TYPE
          return FILE_TYPE;
        case 7: // FILE_SIZE
          return FILE_SIZE;
        case 8: // FILE_URL
          return FILE_URL;
        case 9: // UPLOAD_DTTM
          return UPLOAD_DTTM;
        case 10: // FILE_NAME
          return FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __COMPLETEID_ISSET_ID = 1;
  private static final int __FILEID_ISSET_ID = 2;
  private static final int __LEGALCONFIRMATION_ISSET_ID = 3;
  private static final int __FILESIZE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPLETE_ID, new org.apache.thrift.meta_data.FieldMetaData("completeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_DESC, new org.apache.thrift.meta_data.FieldMetaData("fileDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEGALCONFIRMATION, new org.apache.thrift.meta_data.FieldMetaData("Legalconfirmation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_URL, new org.apache.thrift.meta_data.FieldMetaData("fileUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPLOAD_DTTM, new org.apache.thrift.meta_data.FieldMetaData("uploadDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectCompleteFile.class, metaDataMap);
  }

  public ProjectCompleteFile() {
  }

  public ProjectCompleteFile(
    int pId,
    int completeId,
    String fileDesc,
    int fileId,
    int Legalconfirmation,
    String fileType,
    int fileSize,
    String fileUrl,
    String uploadDttm,
    String fileName)
  {
    this();
    this.pId = pId;
    setPIdIsSet(true);
    this.completeId = completeId;
    setCompleteIdIsSet(true);
    this.fileDesc = fileDesc;
    this.fileId = fileId;
    setFileIdIsSet(true);
    this.Legalconfirmation = Legalconfirmation;
    setLegalconfirmationIsSet(true);
    this.fileType = fileType;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.fileUrl = fileUrl;
    this.uploadDttm = uploadDttm;
    this.fileName = fileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectCompleteFile(ProjectCompleteFile other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    this.completeId = other.completeId;
    if (other.isSetFileDesc()) {
      this.fileDesc = other.fileDesc;
    }
    this.fileId = other.fileId;
    this.Legalconfirmation = other.Legalconfirmation;
    if (other.isSetFileType()) {
      this.fileType = other.fileType;
    }
    this.fileSize = other.fileSize;
    if (other.isSetFileUrl()) {
      this.fileUrl = other.fileUrl;
    }
    if (other.isSetUploadDttm()) {
      this.uploadDttm = other.uploadDttm;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
  }

  public ProjectCompleteFile deepCopy() {
    return new ProjectCompleteFile(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    setCompleteIdIsSet(false);
    this.completeId = 0;
    this.fileDesc = null;
    setFileIdIsSet(false);
    this.fileId = 0;
    setLegalconfirmationIsSet(false);
    this.Legalconfirmation = 0;
    this.fileType = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    this.fileUrl = null;
    this.uploadDttm = null;
    this.fileName = null;
  }

  public int getPId() {
    return this.pId;
  }

  public ProjectCompleteFile setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCompleteId() {
    return this.completeId;
  }

  public ProjectCompleteFile setCompleteId(int completeId) {
    this.completeId = completeId;
    setCompleteIdIsSet(true);
    return this;
  }

  public void unsetCompleteId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPLETEID_ISSET_ID);
  }

  /** Returns true if field completeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleteId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPLETEID_ISSET_ID);
  }

  public void setCompleteIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPLETEID_ISSET_ID, value);
  }

  public String getFileDesc() {
    return this.fileDesc;
  }

  public ProjectCompleteFile setFileDesc(String fileDesc) {
    this.fileDesc = fileDesc;
    return this;
  }

  public void unsetFileDesc() {
    this.fileDesc = null;
  }

  /** Returns true if field fileDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetFileDesc() {
    return this.fileDesc != null;
  }

  public void setFileDescIsSet(boolean value) {
    if (!value) {
      this.fileDesc = null;
    }
  }

  public int getFileId() {
    return this.fileId;
  }

  public ProjectCompleteFile setFileId(int fileId) {
    this.fileId = fileId;
    setFileIdIsSet(true);
    return this;
  }

  public void unsetFileId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEID_ISSET_ID);
  }

  public void setFileIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEID_ISSET_ID, value);
  }

  public int getLegalconfirmation() {
    return this.Legalconfirmation;
  }

  public ProjectCompleteFile setLegalconfirmation(int Legalconfirmation) {
    this.Legalconfirmation = Legalconfirmation;
    setLegalconfirmationIsSet(true);
    return this;
  }

  public void unsetLegalconfirmation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGALCONFIRMATION_ISSET_ID);
  }

  /** Returns true if field Legalconfirmation is set (has been assigned a value) and false otherwise */
  public boolean isSetLegalconfirmation() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGALCONFIRMATION_ISSET_ID);
  }

  public void setLegalconfirmationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGALCONFIRMATION_ISSET_ID, value);
  }

  public String getFileType() {
    return this.fileType;
  }

  public ProjectCompleteFile setFileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  public void unsetFileType() {
    this.fileType = null;
  }

  /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
  public boolean isSetFileType() {
    return this.fileType != null;
  }

  public void setFileTypeIsSet(boolean value) {
    if (!value) {
      this.fileType = null;
    }
  }

  public int getFileSize() {
    return this.fileSize;
  }

  public ProjectCompleteFile setFileSize(int fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public String getFileUrl() {
    return this.fileUrl;
  }

  public ProjectCompleteFile setFileUrl(String fileUrl) {
    this.fileUrl = fileUrl;
    return this;
  }

  public void unsetFileUrl() {
    this.fileUrl = null;
  }

  /** Returns true if field fileUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFileUrl() {
    return this.fileUrl != null;
  }

  public void setFileUrlIsSet(boolean value) {
    if (!value) {
      this.fileUrl = null;
    }
  }

  public String getUploadDttm() {
    return this.uploadDttm;
  }

  public ProjectCompleteFile setUploadDttm(String uploadDttm) {
    this.uploadDttm = uploadDttm;
    return this;
  }

  public void unsetUploadDttm() {
    this.uploadDttm = null;
  }

  /** Returns true if field uploadDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadDttm() {
    return this.uploadDttm != null;
  }

  public void setUploadDttmIsSet(boolean value) {
    if (!value) {
      this.uploadDttm = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public ProjectCompleteFile setFileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case COMPLETE_ID:
      if (value == null) {
        unsetCompleteId();
      } else {
        setCompleteId((Integer)value);
      }
      break;

    case FILE_DESC:
      if (value == null) {
        unsetFileDesc();
      } else {
        setFileDesc((String)value);
      }
      break;

    case FILE_ID:
      if (value == null) {
        unsetFileId();
      } else {
        setFileId((Integer)value);
      }
      break;

    case LEGALCONFIRMATION:
      if (value == null) {
        unsetLegalconfirmation();
      } else {
        setLegalconfirmation((Integer)value);
      }
      break;

    case FILE_TYPE:
      if (value == null) {
        unsetFileType();
      } else {
        setFileType((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Integer)value);
      }
      break;

    case FILE_URL:
      if (value == null) {
        unsetFileUrl();
      } else {
        setFileUrl((String)value);
      }
      break;

    case UPLOAD_DTTM:
      if (value == null) {
        unsetUploadDttm();
      } else {
        setUploadDttm((String)value);
      }
      break;

    case FILE_NAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return Integer.valueOf(getPId());

    case COMPLETE_ID:
      return Integer.valueOf(getCompleteId());

    case FILE_DESC:
      return getFileDesc();

    case FILE_ID:
      return Integer.valueOf(getFileId());

    case LEGALCONFIRMATION:
      return Integer.valueOf(getLegalconfirmation());

    case FILE_TYPE:
      return getFileType();

    case FILE_SIZE:
      return Integer.valueOf(getFileSize());

    case FILE_URL:
      return getFileUrl();

    case UPLOAD_DTTM:
      return getUploadDttm();

    case FILE_NAME:
      return getFileName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case COMPLETE_ID:
      return isSetCompleteId();
    case FILE_DESC:
      return isSetFileDesc();
    case FILE_ID:
      return isSetFileId();
    case LEGALCONFIRMATION:
      return isSetLegalconfirmation();
    case FILE_TYPE:
      return isSetFileType();
    case FILE_SIZE:
      return isSetFileSize();
    case FILE_URL:
      return isSetFileUrl();
    case UPLOAD_DTTM:
      return isSetUploadDttm();
    case FILE_NAME:
      return isSetFileName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectCompleteFile)
      return this.equals((ProjectCompleteFile)that);
    return false;
  }

  public boolean equals(ProjectCompleteFile that) {
    if (that == null)
      return false;

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_completeId = true;
    boolean that_present_completeId = true;
    if (this_present_completeId || that_present_completeId) {
      if (!(this_present_completeId && that_present_completeId))
        return false;
      if (this.completeId != that.completeId)
        return false;
    }

    boolean this_present_fileDesc = true && this.isSetFileDesc();
    boolean that_present_fileDesc = true && that.isSetFileDesc();
    if (this_present_fileDesc || that_present_fileDesc) {
      if (!(this_present_fileDesc && that_present_fileDesc))
        return false;
      if (!this.fileDesc.equals(that.fileDesc))
        return false;
    }

    boolean this_present_fileId = true;
    boolean that_present_fileId = true;
    if (this_present_fileId || that_present_fileId) {
      if (!(this_present_fileId && that_present_fileId))
        return false;
      if (this.fileId != that.fileId)
        return false;
    }

    boolean this_present_Legalconfirmation = true;
    boolean that_present_Legalconfirmation = true;
    if (this_present_Legalconfirmation || that_present_Legalconfirmation) {
      if (!(this_present_Legalconfirmation && that_present_Legalconfirmation))
        return false;
      if (this.Legalconfirmation != that.Legalconfirmation)
        return false;
    }

    boolean this_present_fileType = true && this.isSetFileType();
    boolean that_present_fileType = true && that.isSetFileType();
    if (this_present_fileType || that_present_fileType) {
      if (!(this_present_fileType && that_present_fileType))
        return false;
      if (!this.fileType.equals(that.fileType))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_fileUrl = true && this.isSetFileUrl();
    boolean that_present_fileUrl = true && that.isSetFileUrl();
    if (this_present_fileUrl || that_present_fileUrl) {
      if (!(this_present_fileUrl && that_present_fileUrl))
        return false;
      if (!this.fileUrl.equals(that.fileUrl))
        return false;
    }

    boolean this_present_uploadDttm = true && this.isSetUploadDttm();
    boolean that_present_uploadDttm = true && that.isSetUploadDttm();
    if (this_present_uploadDttm || that_present_uploadDttm) {
      if (!(this_present_uploadDttm && that_present_uploadDttm))
        return false;
      if (!this.uploadDttm.equals(that.uploadDttm))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_completeId = true;
    list.add(present_completeId);
    if (present_completeId)
      list.add(completeId);

    boolean present_fileDesc = true && (isSetFileDesc());
    list.add(present_fileDesc);
    if (present_fileDesc)
      list.add(fileDesc);

    boolean present_fileId = true;
    list.add(present_fileId);
    if (present_fileId)
      list.add(fileId);

    boolean present_Legalconfirmation = true;
    list.add(present_Legalconfirmation);
    if (present_Legalconfirmation)
      list.add(Legalconfirmation);

    boolean present_fileType = true && (isSetFileType());
    list.add(present_fileType);
    if (present_fileType)
      list.add(fileType);

    boolean present_fileSize = true;
    list.add(present_fileSize);
    if (present_fileSize)
      list.add(fileSize);

    boolean present_fileUrl = true && (isSetFileUrl());
    list.add(present_fileUrl);
    if (present_fileUrl)
      list.add(fileUrl);

    boolean present_uploadDttm = true && (isSetUploadDttm());
    list.add(present_uploadDttm);
    if (present_uploadDttm)
      list.add(uploadDttm);

    boolean present_fileName = true && (isSetFileName());
    list.add(present_fileName);
    if (present_fileName)
      list.add(fileName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectCompleteFile other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleteId()).compareTo(other.isSetCompleteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completeId, other.completeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileDesc()).compareTo(other.isSetFileDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDesc, other.fileDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegalconfirmation()).compareTo(other.isSetLegalconfirmation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegalconfirmation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Legalconfirmation, other.Legalconfirmation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileUrl()).compareTo(other.isSetFileUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileUrl, other.fileUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUploadDttm()).compareTo(other.isSetUploadDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadDttm, other.uploadDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectCompleteFile(");
    boolean first = true;

    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completeId:");
    sb.append(this.completeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileDesc:");
    if (this.fileDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.fileDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileId:");
    sb.append(this.fileId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Legalconfirmation:");
    sb.append(this.Legalconfirmation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileType:");
    if (this.fileType == null) {
      sb.append("null");
    } else {
      sb.append(this.fileType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileUrl:");
    if (this.fileUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.fileUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadDttm:");
    if (this.uploadDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.uploadDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectCompleteFileStandardSchemeFactory implements SchemeFactory {
    public ProjectCompleteFileStandardScheme getScheme() {
      return new ProjectCompleteFileStandardScheme();
    }
  }

  private static class ProjectCompleteFileStandardScheme extends StandardScheme<ProjectCompleteFile> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectCompleteFile struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPLETE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completeId = iprot.readI32();
              struct.setCompleteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileDesc = iprot.readString();
              struct.setFileDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileId = iprot.readI32();
              struct.setFileIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEGALCONFIRMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Legalconfirmation = iprot.readI32();
              struct.setLegalconfirmationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileType = iprot.readString();
              struct.setFileTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileSize = iprot.readI32();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileUrl = iprot.readString();
              struct.setFileUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // UPLOAD_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploadDttm = iprot.readString();
              struct.setUploadDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileName = iprot.readString();
              struct.setFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectCompleteFile struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETE_ID_FIELD_DESC);
      oprot.writeI32(struct.completeId);
      oprot.writeFieldEnd();
      if (struct.fileDesc != null) {
        oprot.writeFieldBegin(FILE_DESC_FIELD_DESC);
        oprot.writeString(struct.fileDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
      oprot.writeI32(struct.fileId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEGALCONFIRMATION_FIELD_DESC);
      oprot.writeI32(struct.Legalconfirmation);
      oprot.writeFieldEnd();
      if (struct.fileType != null) {
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeString(struct.fileType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.fileSize);
      oprot.writeFieldEnd();
      if (struct.fileUrl != null) {
        oprot.writeFieldBegin(FILE_URL_FIELD_DESC);
        oprot.writeString(struct.fileUrl);
        oprot.writeFieldEnd();
      }
      if (struct.uploadDttm != null) {
        oprot.writeFieldBegin(UPLOAD_DTTM_FIELD_DESC);
        oprot.writeString(struct.uploadDttm);
        oprot.writeFieldEnd();
      }
      if (struct.fileName != null) {
        oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.fileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectCompleteFileTupleSchemeFactory implements SchemeFactory {
    public ProjectCompleteFileTupleScheme getScheme() {
      return new ProjectCompleteFileTupleScheme();
    }
  }

  private static class ProjectCompleteFileTupleScheme extends TupleScheme<ProjectCompleteFile> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectCompleteFile struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetCompleteId()) {
        optionals.set(1);
      }
      if (struct.isSetFileDesc()) {
        optionals.set(2);
      }
      if (struct.isSetFileId()) {
        optionals.set(3);
      }
      if (struct.isSetLegalconfirmation()) {
        optionals.set(4);
      }
      if (struct.isSetFileType()) {
        optionals.set(5);
      }
      if (struct.isSetFileSize()) {
        optionals.set(6);
      }
      if (struct.isSetFileUrl()) {
        optionals.set(7);
      }
      if (struct.isSetUploadDttm()) {
        optionals.set(8);
      }
      if (struct.isSetFileName()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetCompleteId()) {
        oprot.writeI32(struct.completeId);
      }
      if (struct.isSetFileDesc()) {
        oprot.writeString(struct.fileDesc);
      }
      if (struct.isSetFileId()) {
        oprot.writeI32(struct.fileId);
      }
      if (struct.isSetLegalconfirmation()) {
        oprot.writeI32(struct.Legalconfirmation);
      }
      if (struct.isSetFileType()) {
        oprot.writeString(struct.fileType);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI32(struct.fileSize);
      }
      if (struct.isSetFileUrl()) {
        oprot.writeString(struct.fileUrl);
      }
      if (struct.isSetUploadDttm()) {
        oprot.writeString(struct.uploadDttm);
      }
      if (struct.isSetFileName()) {
        oprot.writeString(struct.fileName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectCompleteFile struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.completeId = iprot.readI32();
        struct.setCompleteIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fileDesc = iprot.readString();
        struct.setFileDescIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileId = iprot.readI32();
        struct.setFileIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Legalconfirmation = iprot.readI32();
        struct.setLegalconfirmationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.fileType = iprot.readString();
        struct.setFileTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.fileSize = iprot.readI32();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileUrl = iprot.readString();
        struct.setFileUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uploadDttm = iprot.readString();
        struct.setUploadDttmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.fileName = iprot.readString();
        struct.setFileNameIsSet(true);
      }
    }
  }

}


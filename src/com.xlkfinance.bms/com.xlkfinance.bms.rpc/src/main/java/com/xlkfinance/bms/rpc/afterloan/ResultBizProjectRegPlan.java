/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class ResultBizProjectRegPlan implements org.apache.thrift.TBase<ResultBizProjectRegPlan, ResultBizProjectRegPlan._Fields>, java.io.Serializable, Cloneable, Comparable<ResultBizProjectRegPlan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultBizProjectRegPlan");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REGULATORY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLAN_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planBeginDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ASSIGNE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assigneUserId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REGULATORY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("isMail", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_SMS_FIELD_DESC = new org.apache.thrift.protocol.TField("isSms", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PLAN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planDt", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("cusTypeStr", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField START_REQUEST_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("startRequestDttm", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REGULATORY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryUser", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField REGULATORY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryResult", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField ACTUAL_BEGIN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualBeginDt", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REGULATORY_STATUS_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryStatusStr", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField REGULATORY_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryUserName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField ASSIGNE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("assigneUserName", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField REGULATORY_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regulatoryPlanId", org.apache.thrift.protocol.TType.I32, (short)26);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResultBizProjectRegPlanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResultBizProjectRegPlanTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int regulatoryUserId; // required
  public String planBeginDt; // required
  public int assigneUserId; // required
  public int regulatoryStatus; // required
  public int isMail; // required
  public int isSms; // required
  public String planDt; // required
  public String remark; // required
  public int status; // required
  public String cusTypeStr; // required
  public String startRequestDttm; // required
  public String regulatoryUser; // required
  public String regulatoryResult; // required
  public String userName; // required
  public String actualBeginDt; // required
  public String regulatoryStatusStr; // required
  public String projectName; // required
  public String projectNumber; // required
  public String regulatoryUserName; // required
  public String assigneUserName; // required
  public int regulatoryPlanId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    REGULATORY_USER_ID((short)3, "regulatoryUserId"),
    PLAN_BEGIN_DT((short)4, "planBeginDt"),
    ASSIGNE_USER_ID((short)5, "assigneUserId"),
    REGULATORY_STATUS((short)6, "regulatoryStatus"),
    IS_MAIL((short)7, "isMail"),
    IS_SMS((short)8, "isSms"),
    PLAN_DT((short)9, "planDt"),
    REMARK((short)10, "remark"),
    STATUS((short)11, "status"),
    CUS_TYPE_STR((short)13, "cusTypeStr"),
    START_REQUEST_DTTM((short)14, "startRequestDttm"),
    REGULATORY_USER((short)16, "regulatoryUser"),
    REGULATORY_RESULT((short)17, "regulatoryResult"),
    USER_NAME((short)18, "userName"),
    ACTUAL_BEGIN_DT((short)19, "actualBeginDt"),
    REGULATORY_STATUS_STR((short)20, "regulatoryStatusStr"),
    PROJECT_NAME((short)22, "projectName"),
    PROJECT_NUMBER((short)23, "projectNumber"),
    REGULATORY_USER_NAME((short)24, "regulatoryUserName"),
    ASSIGNE_USER_NAME((short)25, "assigneUserName"),
    REGULATORY_PLAN_ID((short)26, "regulatoryPlanId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // REGULATORY_USER_ID
          return REGULATORY_USER_ID;
        case 4: // PLAN_BEGIN_DT
          return PLAN_BEGIN_DT;
        case 5: // ASSIGNE_USER_ID
          return ASSIGNE_USER_ID;
        case 6: // REGULATORY_STATUS
          return REGULATORY_STATUS;
        case 7: // IS_MAIL
          return IS_MAIL;
        case 8: // IS_SMS
          return IS_SMS;
        case 9: // PLAN_DT
          return PLAN_DT;
        case 10: // REMARK
          return REMARK;
        case 11: // STATUS
          return STATUS;
        case 13: // CUS_TYPE_STR
          return CUS_TYPE_STR;
        case 14: // START_REQUEST_DTTM
          return START_REQUEST_DTTM;
        case 16: // REGULATORY_USER
          return REGULATORY_USER;
        case 17: // REGULATORY_RESULT
          return REGULATORY_RESULT;
        case 18: // USER_NAME
          return USER_NAME;
        case 19: // ACTUAL_BEGIN_DT
          return ACTUAL_BEGIN_DT;
        case 20: // REGULATORY_STATUS_STR
          return REGULATORY_STATUS_STR;
        case 22: // PROJECT_NAME
          return PROJECT_NAME;
        case 23: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 24: // REGULATORY_USER_NAME
          return REGULATORY_USER_NAME;
        case 25: // ASSIGNE_USER_NAME
          return ASSIGNE_USER_NAME;
        case 26: // REGULATORY_PLAN_ID
          return REGULATORY_PLAN_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __REGULATORYUSERID_ISSET_ID = 2;
  private static final int __ASSIGNEUSERID_ISSET_ID = 3;
  private static final int __REGULATORYSTATUS_ISSET_ID = 4;
  private static final int __ISMAIL_ISSET_ID = 5;
  private static final int __ISSMS_ISSET_ID = 6;
  private static final int __STATUS_ISSET_ID = 7;
  private static final int __REGULATORYPLANID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGULATORY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("regulatoryUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("planBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("assigneUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REGULATORY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("regulatoryStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_MAIL, new org.apache.thrift.meta_data.FieldMetaData("isMail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SMS, new org.apache.thrift.meta_data.FieldMetaData("isSms", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_DT, new org.apache.thrift.meta_data.FieldMetaData("planDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_TYPE_STR, new org.apache.thrift.meta_data.FieldMetaData("cusTypeStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_REQUEST_DTTM, new org.apache.thrift.meta_data.FieldMetaData("startRequestDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_USER, new org.apache.thrift.meta_data.FieldMetaData("regulatoryUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("regulatoryResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_BEGIN_DT, new org.apache.thrift.meta_data.FieldMetaData("actualBeginDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_STATUS_STR, new org.apache.thrift.meta_data.FieldMetaData("regulatoryStatusStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("regulatoryUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("assigneUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGULATORY_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("regulatoryPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultBizProjectRegPlan.class, metaDataMap);
  }

  public ResultBizProjectRegPlan() {
  }

  public ResultBizProjectRegPlan(
    int pid,
    int projectId,
    int regulatoryUserId,
    String planBeginDt,
    int assigneUserId,
    int regulatoryStatus,
    int isMail,
    int isSms,
    String planDt,
    String remark,
    int status,
    String cusTypeStr,
    String startRequestDttm,
    String regulatoryUser,
    String regulatoryResult,
    String userName,
    String actualBeginDt,
    String regulatoryStatusStr,
    String projectName,
    String projectNumber,
    String regulatoryUserName,
    String assigneUserName,
    int regulatoryPlanId)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.regulatoryUserId = regulatoryUserId;
    setRegulatoryUserIdIsSet(true);
    this.planBeginDt = planBeginDt;
    this.assigneUserId = assigneUserId;
    setAssigneUserIdIsSet(true);
    this.regulatoryStatus = regulatoryStatus;
    setRegulatoryStatusIsSet(true);
    this.isMail = isMail;
    setIsMailIsSet(true);
    this.isSms = isSms;
    setIsSmsIsSet(true);
    this.planDt = planDt;
    this.remark = remark;
    this.status = status;
    setStatusIsSet(true);
    this.cusTypeStr = cusTypeStr;
    this.startRequestDttm = startRequestDttm;
    this.regulatoryUser = regulatoryUser;
    this.regulatoryResult = regulatoryResult;
    this.userName = userName;
    this.actualBeginDt = actualBeginDt;
    this.regulatoryStatusStr = regulatoryStatusStr;
    this.projectName = projectName;
    this.projectNumber = projectNumber;
    this.regulatoryUserName = regulatoryUserName;
    this.assigneUserName = assigneUserName;
    this.regulatoryPlanId = regulatoryPlanId;
    setRegulatoryPlanIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultBizProjectRegPlan(ResultBizProjectRegPlan other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.regulatoryUserId = other.regulatoryUserId;
    if (other.isSetPlanBeginDt()) {
      this.planBeginDt = other.planBeginDt;
    }
    this.assigneUserId = other.assigneUserId;
    this.regulatoryStatus = other.regulatoryStatus;
    this.isMail = other.isMail;
    this.isSms = other.isSms;
    if (other.isSetPlanDt()) {
      this.planDt = other.planDt;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.status = other.status;
    if (other.isSetCusTypeStr()) {
      this.cusTypeStr = other.cusTypeStr;
    }
    if (other.isSetStartRequestDttm()) {
      this.startRequestDttm = other.startRequestDttm;
    }
    if (other.isSetRegulatoryUser()) {
      this.regulatoryUser = other.regulatoryUser;
    }
    if (other.isSetRegulatoryResult()) {
      this.regulatoryResult = other.regulatoryResult;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetActualBeginDt()) {
      this.actualBeginDt = other.actualBeginDt;
    }
    if (other.isSetRegulatoryStatusStr()) {
      this.regulatoryStatusStr = other.regulatoryStatusStr;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetRegulatoryUserName()) {
      this.regulatoryUserName = other.regulatoryUserName;
    }
    if (other.isSetAssigneUserName()) {
      this.assigneUserName = other.assigneUserName;
    }
    this.regulatoryPlanId = other.regulatoryPlanId;
  }

  public ResultBizProjectRegPlan deepCopy() {
    return new ResultBizProjectRegPlan(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setRegulatoryUserIdIsSet(false);
    this.regulatoryUserId = 0;
    this.planBeginDt = null;
    setAssigneUserIdIsSet(false);
    this.assigneUserId = 0;
    setRegulatoryStatusIsSet(false);
    this.regulatoryStatus = 0;
    setIsMailIsSet(false);
    this.isMail = 0;
    setIsSmsIsSet(false);
    this.isSms = 0;
    this.planDt = null;
    this.remark = null;
    setStatusIsSet(false);
    this.status = 0;
    this.cusTypeStr = null;
    this.startRequestDttm = null;
    this.regulatoryUser = null;
    this.regulatoryResult = null;
    this.userName = null;
    this.actualBeginDt = null;
    this.regulatoryStatusStr = null;
    this.projectName = null;
    this.projectNumber = null;
    this.regulatoryUserName = null;
    this.assigneUserName = null;
    setRegulatoryPlanIdIsSet(false);
    this.regulatoryPlanId = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ResultBizProjectRegPlan setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ResultBizProjectRegPlan setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRegulatoryUserId() {
    return this.regulatoryUserId;
  }

  public ResultBizProjectRegPlan setRegulatoryUserId(int regulatoryUserId) {
    this.regulatoryUserId = regulatoryUserId;
    setRegulatoryUserIdIsSet(true);
    return this;
  }

  public void unsetRegulatoryUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID);
  }

  /** Returns true if field regulatoryUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID);
  }

  public void setRegulatoryUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYUSERID_ISSET_ID, value);
  }

  public String getPlanBeginDt() {
    return this.planBeginDt;
  }

  public ResultBizProjectRegPlan setPlanBeginDt(String planBeginDt) {
    this.planBeginDt = planBeginDt;
    return this;
  }

  public void unsetPlanBeginDt() {
    this.planBeginDt = null;
  }

  /** Returns true if field planBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanBeginDt() {
    return this.planBeginDt != null;
  }

  public void setPlanBeginDtIsSet(boolean value) {
    if (!value) {
      this.planBeginDt = null;
    }
  }

  public int getAssigneUserId() {
    return this.assigneUserId;
  }

  public ResultBizProjectRegPlan setAssigneUserId(int assigneUserId) {
    this.assigneUserId = assigneUserId;
    setAssigneUserIdIsSet(true);
    return this;
  }

  public void unsetAssigneUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSIGNEUSERID_ISSET_ID);
  }

  /** Returns true if field assigneUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigneUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSIGNEUSERID_ISSET_ID);
  }

  public void setAssigneUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSIGNEUSERID_ISSET_ID, value);
  }

  public int getRegulatoryStatus() {
    return this.regulatoryStatus;
  }

  public ResultBizProjectRegPlan setRegulatoryStatus(int regulatoryStatus) {
    this.regulatoryStatus = regulatoryStatus;
    setRegulatoryStatusIsSet(true);
    return this;
  }

  public void unsetRegulatoryStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYSTATUS_ISSET_ID);
  }

  /** Returns true if field regulatoryStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYSTATUS_ISSET_ID);
  }

  public void setRegulatoryStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYSTATUS_ISSET_ID, value);
  }

  public int getIsMail() {
    return this.isMail;
  }

  public ResultBizProjectRegPlan setIsMail(int isMail) {
    this.isMail = isMail;
    setIsMailIsSet(true);
    return this;
  }

  public void unsetIsMail() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMAIL_ISSET_ID);
  }

  /** Returns true if field isMail is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMail() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMAIL_ISSET_ID);
  }

  public void setIsMailIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMAIL_ISSET_ID, value);
  }

  public int getIsSms() {
    return this.isSms;
  }

  public ResultBizProjectRegPlan setIsSms(int isSms) {
    this.isSms = isSms;
    setIsSmsIsSet(true);
    return this;
  }

  public void unsetIsSms() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSMS_ISSET_ID);
  }

  /** Returns true if field isSms is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSms() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSMS_ISSET_ID);
  }

  public void setIsSmsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSMS_ISSET_ID, value);
  }

  public String getPlanDt() {
    return this.planDt;
  }

  public ResultBizProjectRegPlan setPlanDt(String planDt) {
    this.planDt = planDt;
    return this;
  }

  public void unsetPlanDt() {
    this.planDt = null;
  }

  /** Returns true if field planDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanDt() {
    return this.planDt != null;
  }

  public void setPlanDtIsSet(boolean value) {
    if (!value) {
      this.planDt = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ResultBizProjectRegPlan setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ResultBizProjectRegPlan setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCusTypeStr() {
    return this.cusTypeStr;
  }

  public ResultBizProjectRegPlan setCusTypeStr(String cusTypeStr) {
    this.cusTypeStr = cusTypeStr;
    return this;
  }

  public void unsetCusTypeStr() {
    this.cusTypeStr = null;
  }

  /** Returns true if field cusTypeStr is set (has been assigned a value) and false otherwise */
  public boolean isSetCusTypeStr() {
    return this.cusTypeStr != null;
  }

  public void setCusTypeStrIsSet(boolean value) {
    if (!value) {
      this.cusTypeStr = null;
    }
  }

  public String getStartRequestDttm() {
    return this.startRequestDttm;
  }

  public ResultBizProjectRegPlan setStartRequestDttm(String startRequestDttm) {
    this.startRequestDttm = startRequestDttm;
    return this;
  }

  public void unsetStartRequestDttm() {
    this.startRequestDttm = null;
  }

  /** Returns true if field startRequestDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetStartRequestDttm() {
    return this.startRequestDttm != null;
  }

  public void setStartRequestDttmIsSet(boolean value) {
    if (!value) {
      this.startRequestDttm = null;
    }
  }

  public String getRegulatoryUser() {
    return this.regulatoryUser;
  }

  public ResultBizProjectRegPlan setRegulatoryUser(String regulatoryUser) {
    this.regulatoryUser = regulatoryUser;
    return this;
  }

  public void unsetRegulatoryUser() {
    this.regulatoryUser = null;
  }

  /** Returns true if field regulatoryUser is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryUser() {
    return this.regulatoryUser != null;
  }

  public void setRegulatoryUserIsSet(boolean value) {
    if (!value) {
      this.regulatoryUser = null;
    }
  }

  public String getRegulatoryResult() {
    return this.regulatoryResult;
  }

  public ResultBizProjectRegPlan setRegulatoryResult(String regulatoryResult) {
    this.regulatoryResult = regulatoryResult;
    return this;
  }

  public void unsetRegulatoryResult() {
    this.regulatoryResult = null;
  }

  /** Returns true if field regulatoryResult is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryResult() {
    return this.regulatoryResult != null;
  }

  public void setRegulatoryResultIsSet(boolean value) {
    if (!value) {
      this.regulatoryResult = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public ResultBizProjectRegPlan setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getActualBeginDt() {
    return this.actualBeginDt;
  }

  public ResultBizProjectRegPlan setActualBeginDt(String actualBeginDt) {
    this.actualBeginDt = actualBeginDt;
    return this;
  }

  public void unsetActualBeginDt() {
    this.actualBeginDt = null;
  }

  /** Returns true if field actualBeginDt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualBeginDt() {
    return this.actualBeginDt != null;
  }

  public void setActualBeginDtIsSet(boolean value) {
    if (!value) {
      this.actualBeginDt = null;
    }
  }

  public String getRegulatoryStatusStr() {
    return this.regulatoryStatusStr;
  }

  public ResultBizProjectRegPlan setRegulatoryStatusStr(String regulatoryStatusStr) {
    this.regulatoryStatusStr = regulatoryStatusStr;
    return this;
  }

  public void unsetRegulatoryStatusStr() {
    this.regulatoryStatusStr = null;
  }

  /** Returns true if field regulatoryStatusStr is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryStatusStr() {
    return this.regulatoryStatusStr != null;
  }

  public void setRegulatoryStatusStrIsSet(boolean value) {
    if (!value) {
      this.regulatoryStatusStr = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ResultBizProjectRegPlan setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ResultBizProjectRegPlan setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getRegulatoryUserName() {
    return this.regulatoryUserName;
  }

  public ResultBizProjectRegPlan setRegulatoryUserName(String regulatoryUserName) {
    this.regulatoryUserName = regulatoryUserName;
    return this;
  }

  public void unsetRegulatoryUserName() {
    this.regulatoryUserName = null;
  }

  /** Returns true if field regulatoryUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryUserName() {
    return this.regulatoryUserName != null;
  }

  public void setRegulatoryUserNameIsSet(boolean value) {
    if (!value) {
      this.regulatoryUserName = null;
    }
  }

  public String getAssigneUserName() {
    return this.assigneUserName;
  }

  public ResultBizProjectRegPlan setAssigneUserName(String assigneUserName) {
    this.assigneUserName = assigneUserName;
    return this;
  }

  public void unsetAssigneUserName() {
    this.assigneUserName = null;
  }

  /** Returns true if field assigneUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetAssigneUserName() {
    return this.assigneUserName != null;
  }

  public void setAssigneUserNameIsSet(boolean value) {
    if (!value) {
      this.assigneUserName = null;
    }
  }

  public int getRegulatoryPlanId() {
    return this.regulatoryPlanId;
  }

  public ResultBizProjectRegPlan setRegulatoryPlanId(int regulatoryPlanId) {
    this.regulatoryPlanId = regulatoryPlanId;
    setRegulatoryPlanIdIsSet(true);
    return this;
  }

  public void unsetRegulatoryPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID);
  }

  /** Returns true if field regulatoryPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegulatoryPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID);
  }

  public void setRegulatoryPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGULATORYPLANID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REGULATORY_USER_ID:
      if (value == null) {
        unsetRegulatoryUserId();
      } else {
        setRegulatoryUserId((Integer)value);
      }
      break;

    case PLAN_BEGIN_DT:
      if (value == null) {
        unsetPlanBeginDt();
      } else {
        setPlanBeginDt((String)value);
      }
      break;

    case ASSIGNE_USER_ID:
      if (value == null) {
        unsetAssigneUserId();
      } else {
        setAssigneUserId((Integer)value);
      }
      break;

    case REGULATORY_STATUS:
      if (value == null) {
        unsetRegulatoryStatus();
      } else {
        setRegulatoryStatus((Integer)value);
      }
      break;

    case IS_MAIL:
      if (value == null) {
        unsetIsMail();
      } else {
        setIsMail((Integer)value);
      }
      break;

    case IS_SMS:
      if (value == null) {
        unsetIsSms();
      } else {
        setIsSms((Integer)value);
      }
      break;

    case PLAN_DT:
      if (value == null) {
        unsetPlanDt();
      } else {
        setPlanDt((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CUS_TYPE_STR:
      if (value == null) {
        unsetCusTypeStr();
      } else {
        setCusTypeStr((String)value);
      }
      break;

    case START_REQUEST_DTTM:
      if (value == null) {
        unsetStartRequestDttm();
      } else {
        setStartRequestDttm((String)value);
      }
      break;

    case REGULATORY_USER:
      if (value == null) {
        unsetRegulatoryUser();
      } else {
        setRegulatoryUser((String)value);
      }
      break;

    case REGULATORY_RESULT:
      if (value == null) {
        unsetRegulatoryResult();
      } else {
        setRegulatoryResult((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case ACTUAL_BEGIN_DT:
      if (value == null) {
        unsetActualBeginDt();
      } else {
        setActualBeginDt((String)value);
      }
      break;

    case REGULATORY_STATUS_STR:
      if (value == null) {
        unsetRegulatoryStatusStr();
      } else {
        setRegulatoryStatusStr((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case REGULATORY_USER_NAME:
      if (value == null) {
        unsetRegulatoryUserName();
      } else {
        setRegulatoryUserName((String)value);
      }
      break;

    case ASSIGNE_USER_NAME:
      if (value == null) {
        unsetAssigneUserName();
      } else {
        setAssigneUserName((String)value);
      }
      break;

    case REGULATORY_PLAN_ID:
      if (value == null) {
        unsetRegulatoryPlanId();
      } else {
        setRegulatoryPlanId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REGULATORY_USER_ID:
      return Integer.valueOf(getRegulatoryUserId());

    case PLAN_BEGIN_DT:
      return getPlanBeginDt();

    case ASSIGNE_USER_ID:
      return Integer.valueOf(getAssigneUserId());

    case REGULATORY_STATUS:
      return Integer.valueOf(getRegulatoryStatus());

    case IS_MAIL:
      return Integer.valueOf(getIsMail());

    case IS_SMS:
      return Integer.valueOf(getIsSms());

    case PLAN_DT:
      return getPlanDt();

    case REMARK:
      return getRemark();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CUS_TYPE_STR:
      return getCusTypeStr();

    case START_REQUEST_DTTM:
      return getStartRequestDttm();

    case REGULATORY_USER:
      return getRegulatoryUser();

    case REGULATORY_RESULT:
      return getRegulatoryResult();

    case USER_NAME:
      return getUserName();

    case ACTUAL_BEGIN_DT:
      return getActualBeginDt();

    case REGULATORY_STATUS_STR:
      return getRegulatoryStatusStr();

    case PROJECT_NAME:
      return getProjectName();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case REGULATORY_USER_NAME:
      return getRegulatoryUserName();

    case ASSIGNE_USER_NAME:
      return getAssigneUserName();

    case REGULATORY_PLAN_ID:
      return Integer.valueOf(getRegulatoryPlanId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case REGULATORY_USER_ID:
      return isSetRegulatoryUserId();
    case PLAN_BEGIN_DT:
      return isSetPlanBeginDt();
    case ASSIGNE_USER_ID:
      return isSetAssigneUserId();
    case REGULATORY_STATUS:
      return isSetRegulatoryStatus();
    case IS_MAIL:
      return isSetIsMail();
    case IS_SMS:
      return isSetIsSms();
    case PLAN_DT:
      return isSetPlanDt();
    case REMARK:
      return isSetRemark();
    case STATUS:
      return isSetStatus();
    case CUS_TYPE_STR:
      return isSetCusTypeStr();
    case START_REQUEST_DTTM:
      return isSetStartRequestDttm();
    case REGULATORY_USER:
      return isSetRegulatoryUser();
    case REGULATORY_RESULT:
      return isSetRegulatoryResult();
    case USER_NAME:
      return isSetUserName();
    case ACTUAL_BEGIN_DT:
      return isSetActualBeginDt();
    case REGULATORY_STATUS_STR:
      return isSetRegulatoryStatusStr();
    case PROJECT_NAME:
      return isSetProjectName();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case REGULATORY_USER_NAME:
      return isSetRegulatoryUserName();
    case ASSIGNE_USER_NAME:
      return isSetAssigneUserName();
    case REGULATORY_PLAN_ID:
      return isSetRegulatoryPlanId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultBizProjectRegPlan)
      return this.equals((ResultBizProjectRegPlan)that);
    return false;
  }

  public boolean equals(ResultBizProjectRegPlan that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_regulatoryUserId = true;
    boolean that_present_regulatoryUserId = true;
    if (this_present_regulatoryUserId || that_present_regulatoryUserId) {
      if (!(this_present_regulatoryUserId && that_present_regulatoryUserId))
        return false;
      if (this.regulatoryUserId != that.regulatoryUserId)
        return false;
    }

    boolean this_present_planBeginDt = true && this.isSetPlanBeginDt();
    boolean that_present_planBeginDt = true && that.isSetPlanBeginDt();
    if (this_present_planBeginDt || that_present_planBeginDt) {
      if (!(this_present_planBeginDt && that_present_planBeginDt))
        return false;
      if (!this.planBeginDt.equals(that.planBeginDt))
        return false;
    }

    boolean this_present_assigneUserId = true;
    boolean that_present_assigneUserId = true;
    if (this_present_assigneUserId || that_present_assigneUserId) {
      if (!(this_present_assigneUserId && that_present_assigneUserId))
        return false;
      if (this.assigneUserId != that.assigneUserId)
        return false;
    }

    boolean this_present_regulatoryStatus = true;
    boolean that_present_regulatoryStatus = true;
    if (this_present_regulatoryStatus || that_present_regulatoryStatus) {
      if (!(this_present_regulatoryStatus && that_present_regulatoryStatus))
        return false;
      if (this.regulatoryStatus != that.regulatoryStatus)
        return false;
    }

    boolean this_present_isMail = true;
    boolean that_present_isMail = true;
    if (this_present_isMail || that_present_isMail) {
      if (!(this_present_isMail && that_present_isMail))
        return false;
      if (this.isMail != that.isMail)
        return false;
    }

    boolean this_present_isSms = true;
    boolean that_present_isSms = true;
    if (this_present_isSms || that_present_isSms) {
      if (!(this_present_isSms && that_present_isSms))
        return false;
      if (this.isSms != that.isSms)
        return false;
    }

    boolean this_present_planDt = true && this.isSetPlanDt();
    boolean that_present_planDt = true && that.isSetPlanDt();
    if (this_present_planDt || that_present_planDt) {
      if (!(this_present_planDt && that_present_planDt))
        return false;
      if (!this.planDt.equals(that.planDt))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_cusTypeStr = true && this.isSetCusTypeStr();
    boolean that_present_cusTypeStr = true && that.isSetCusTypeStr();
    if (this_present_cusTypeStr || that_present_cusTypeStr) {
      if (!(this_present_cusTypeStr && that_present_cusTypeStr))
        return false;
      if (!this.cusTypeStr.equals(that.cusTypeStr))
        return false;
    }

    boolean this_present_startRequestDttm = true && this.isSetStartRequestDttm();
    boolean that_present_startRequestDttm = true && that.isSetStartRequestDttm();
    if (this_present_startRequestDttm || that_present_startRequestDttm) {
      if (!(this_present_startRequestDttm && that_present_startRequestDttm))
        return false;
      if (!this.startRequestDttm.equals(that.startRequestDttm))
        return false;
    }

    boolean this_present_regulatoryUser = true && this.isSetRegulatoryUser();
    boolean that_present_regulatoryUser = true && that.isSetRegulatoryUser();
    if (this_present_regulatoryUser || that_present_regulatoryUser) {
      if (!(this_present_regulatoryUser && that_present_regulatoryUser))
        return false;
      if (!this.regulatoryUser.equals(that.regulatoryUser))
        return false;
    }

    boolean this_present_regulatoryResult = true && this.isSetRegulatoryResult();
    boolean that_present_regulatoryResult = true && that.isSetRegulatoryResult();
    if (this_present_regulatoryResult || that_present_regulatoryResult) {
      if (!(this_present_regulatoryResult && that_present_regulatoryResult))
        return false;
      if (!this.regulatoryResult.equals(that.regulatoryResult))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_actualBeginDt = true && this.isSetActualBeginDt();
    boolean that_present_actualBeginDt = true && that.isSetActualBeginDt();
    if (this_present_actualBeginDt || that_present_actualBeginDt) {
      if (!(this_present_actualBeginDt && that_present_actualBeginDt))
        return false;
      if (!this.actualBeginDt.equals(that.actualBeginDt))
        return false;
    }

    boolean this_present_regulatoryStatusStr = true && this.isSetRegulatoryStatusStr();
    boolean that_present_regulatoryStatusStr = true && that.isSetRegulatoryStatusStr();
    if (this_present_regulatoryStatusStr || that_present_regulatoryStatusStr) {
      if (!(this_present_regulatoryStatusStr && that_present_regulatoryStatusStr))
        return false;
      if (!this.regulatoryStatusStr.equals(that.regulatoryStatusStr))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_regulatoryUserName = true && this.isSetRegulatoryUserName();
    boolean that_present_regulatoryUserName = true && that.isSetRegulatoryUserName();
    if (this_present_regulatoryUserName || that_present_regulatoryUserName) {
      if (!(this_present_regulatoryUserName && that_present_regulatoryUserName))
        return false;
      if (!this.regulatoryUserName.equals(that.regulatoryUserName))
        return false;
    }

    boolean this_present_assigneUserName = true && this.isSetAssigneUserName();
    boolean that_present_assigneUserName = true && that.isSetAssigneUserName();
    if (this_present_assigneUserName || that_present_assigneUserName) {
      if (!(this_present_assigneUserName && that_present_assigneUserName))
        return false;
      if (!this.assigneUserName.equals(that.assigneUserName))
        return false;
    }

    boolean this_present_regulatoryPlanId = true;
    boolean that_present_regulatoryPlanId = true;
    if (this_present_regulatoryPlanId || that_present_regulatoryPlanId) {
      if (!(this_present_regulatoryPlanId && that_present_regulatoryPlanId))
        return false;
      if (this.regulatoryPlanId != that.regulatoryPlanId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_regulatoryUserId = true;
    list.add(present_regulatoryUserId);
    if (present_regulatoryUserId)
      list.add(regulatoryUserId);

    boolean present_planBeginDt = true && (isSetPlanBeginDt());
    list.add(present_planBeginDt);
    if (present_planBeginDt)
      list.add(planBeginDt);

    boolean present_assigneUserId = true;
    list.add(present_assigneUserId);
    if (present_assigneUserId)
      list.add(assigneUserId);

    boolean present_regulatoryStatus = true;
    list.add(present_regulatoryStatus);
    if (present_regulatoryStatus)
      list.add(regulatoryStatus);

    boolean present_isMail = true;
    list.add(present_isMail);
    if (present_isMail)
      list.add(isMail);

    boolean present_isSms = true;
    list.add(present_isSms);
    if (present_isSms)
      list.add(isSms);

    boolean present_planDt = true && (isSetPlanDt());
    list.add(present_planDt);
    if (present_planDt)
      list.add(planDt);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_cusTypeStr = true && (isSetCusTypeStr());
    list.add(present_cusTypeStr);
    if (present_cusTypeStr)
      list.add(cusTypeStr);

    boolean present_startRequestDttm = true && (isSetStartRequestDttm());
    list.add(present_startRequestDttm);
    if (present_startRequestDttm)
      list.add(startRequestDttm);

    boolean present_regulatoryUser = true && (isSetRegulatoryUser());
    list.add(present_regulatoryUser);
    if (present_regulatoryUser)
      list.add(regulatoryUser);

    boolean present_regulatoryResult = true && (isSetRegulatoryResult());
    list.add(present_regulatoryResult);
    if (present_regulatoryResult)
      list.add(regulatoryResult);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_actualBeginDt = true && (isSetActualBeginDt());
    list.add(present_actualBeginDt);
    if (present_actualBeginDt)
      list.add(actualBeginDt);

    boolean present_regulatoryStatusStr = true && (isSetRegulatoryStatusStr());
    list.add(present_regulatoryStatusStr);
    if (present_regulatoryStatusStr)
      list.add(regulatoryStatusStr);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_regulatoryUserName = true && (isSetRegulatoryUserName());
    list.add(present_regulatoryUserName);
    if (present_regulatoryUserName)
      list.add(regulatoryUserName);

    boolean present_assigneUserName = true && (isSetAssigneUserName());
    list.add(present_assigneUserName);
    if (present_assigneUserName)
      list.add(assigneUserName);

    boolean present_regulatoryPlanId = true;
    list.add(present_regulatoryPlanId);
    if (present_regulatoryPlanId)
      list.add(regulatoryPlanId);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResultBizProjectRegPlan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryUserId()).compareTo(other.isSetRegulatoryUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryUserId, other.regulatoryUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanBeginDt()).compareTo(other.isSetPlanBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planBeginDt, other.planBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigneUserId()).compareTo(other.isSetAssigneUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigneUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigneUserId, other.assigneUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryStatus()).compareTo(other.isSetRegulatoryStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryStatus, other.regulatoryStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMail()).compareTo(other.isSetIsMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMail, other.isMail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSms()).compareTo(other.isSetIsSms());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSms()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSms, other.isSms);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanDt()).compareTo(other.isSetPlanDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planDt, other.planDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusTypeStr()).compareTo(other.isSetCusTypeStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusTypeStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusTypeStr, other.cusTypeStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartRequestDttm()).compareTo(other.isSetStartRequestDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartRequestDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRequestDttm, other.startRequestDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryUser()).compareTo(other.isSetRegulatoryUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryUser, other.regulatoryUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryResult()).compareTo(other.isSetRegulatoryResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryResult, other.regulatoryResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualBeginDt()).compareTo(other.isSetActualBeginDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualBeginDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualBeginDt, other.actualBeginDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryStatusStr()).compareTo(other.isSetRegulatoryStatusStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryStatusStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryStatusStr, other.regulatoryStatusStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryUserName()).compareTo(other.isSetRegulatoryUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryUserName, other.regulatoryUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssigneUserName()).compareTo(other.isSetAssigneUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssigneUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assigneUserName, other.assigneUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegulatoryPlanId()).compareTo(other.isSetRegulatoryPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegulatoryPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regulatoryPlanId, other.regulatoryPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResultBizProjectRegPlan(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryUserId:");
    sb.append(this.regulatoryUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planBeginDt:");
    if (this.planBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assigneUserId:");
    sb.append(this.assigneUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryStatus:");
    sb.append(this.regulatoryStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMail:");
    sb.append(this.isMail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSms:");
    sb.append(this.isSms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planDt:");
    if (this.planDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusTypeStr:");
    if (this.cusTypeStr == null) {
      sb.append("null");
    } else {
      sb.append(this.cusTypeStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startRequestDttm:");
    if (this.startRequestDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.startRequestDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryUser:");
    if (this.regulatoryUser == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryResult:");
    if (this.regulatoryResult == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualBeginDt:");
    if (this.actualBeginDt == null) {
      sb.append("null");
    } else {
      sb.append(this.actualBeginDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryStatusStr:");
    if (this.regulatoryStatusStr == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryStatusStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryUserName:");
    if (this.regulatoryUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.regulatoryUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assigneUserName:");
    if (this.assigneUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.assigneUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regulatoryPlanId:");
    sb.append(this.regulatoryPlanId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultBizProjectRegPlanStandardSchemeFactory implements SchemeFactory {
    public ResultBizProjectRegPlanStandardScheme getScheme() {
      return new ResultBizProjectRegPlanStandardScheme();
    }
  }

  private static class ResultBizProjectRegPlanStandardScheme extends StandardScheme<ResultBizProjectRegPlan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultBizProjectRegPlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGULATORY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryUserId = iprot.readI32();
              struct.setRegulatoryUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAN_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planBeginDt = iprot.readString();
              struct.setPlanBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ASSIGNE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.assigneUserId = iprot.readI32();
              struct.setAssigneUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REGULATORY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryStatus = iprot.readI32();
              struct.setRegulatoryStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isMail = iprot.readI32();
              struct.setIsMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_SMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSms = iprot.readI32();
              struct.setIsSmsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PLAN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planDt = iprot.readString();
              struct.setPlanDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CUS_TYPE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusTypeStr = iprot.readString();
              struct.setCusTypeStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // START_REQUEST_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startRequestDttm = iprot.readString();
              struct.setStartRequestDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REGULATORY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryUser = iprot.readString();
              struct.setRegulatoryUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // REGULATORY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryResult = iprot.readString();
              struct.setRegulatoryResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // ACTUAL_BEGIN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualBeginDt = iprot.readString();
              struct.setActualBeginDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REGULATORY_STATUS_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryStatusStr = iprot.readString();
              struct.setRegulatoryStatusStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // REGULATORY_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regulatoryUserName = iprot.readString();
              struct.setRegulatoryUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ASSIGNE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assigneUserName = iprot.readString();
              struct.setAssigneUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // REGULATORY_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.regulatoryPlanId = iprot.readI32();
              struct.setRegulatoryPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultBizProjectRegPlan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGULATORY_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.regulatoryUserId);
      oprot.writeFieldEnd();
      if (struct.planBeginDt != null) {
        oprot.writeFieldBegin(PLAN_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.planBeginDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ASSIGNE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.assigneUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REGULATORY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.regulatoryStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MAIL_FIELD_DESC);
      oprot.writeI32(struct.isMail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SMS_FIELD_DESC);
      oprot.writeI32(struct.isSms);
      oprot.writeFieldEnd();
      if (struct.planDt != null) {
        oprot.writeFieldBegin(PLAN_DT_FIELD_DESC);
        oprot.writeString(struct.planDt);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.cusTypeStr != null) {
        oprot.writeFieldBegin(CUS_TYPE_STR_FIELD_DESC);
        oprot.writeString(struct.cusTypeStr);
        oprot.writeFieldEnd();
      }
      if (struct.startRequestDttm != null) {
        oprot.writeFieldBegin(START_REQUEST_DTTM_FIELD_DESC);
        oprot.writeString(struct.startRequestDttm);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryUser != null) {
        oprot.writeFieldBegin(REGULATORY_USER_FIELD_DESC);
        oprot.writeString(struct.regulatoryUser);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryResult != null) {
        oprot.writeFieldBegin(REGULATORY_RESULT_FIELD_DESC);
        oprot.writeString(struct.regulatoryResult);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.actualBeginDt != null) {
        oprot.writeFieldBegin(ACTUAL_BEGIN_DT_FIELD_DESC);
        oprot.writeString(struct.actualBeginDt);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryStatusStr != null) {
        oprot.writeFieldBegin(REGULATORY_STATUS_STR_FIELD_DESC);
        oprot.writeString(struct.regulatoryStatusStr);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.regulatoryUserName != null) {
        oprot.writeFieldBegin(REGULATORY_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.regulatoryUserName);
        oprot.writeFieldEnd();
      }
      if (struct.assigneUserName != null) {
        oprot.writeFieldBegin(ASSIGNE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.assigneUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REGULATORY_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.regulatoryPlanId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultBizProjectRegPlanTupleSchemeFactory implements SchemeFactory {
    public ResultBizProjectRegPlanTupleScheme getScheme() {
      return new ResultBizProjectRegPlanTupleScheme();
    }
  }

  private static class ResultBizProjectRegPlanTupleScheme extends TupleScheme<ResultBizProjectRegPlan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultBizProjectRegPlan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetRegulatoryUserId()) {
        optionals.set(2);
      }
      if (struct.isSetPlanBeginDt()) {
        optionals.set(3);
      }
      if (struct.isSetAssigneUserId()) {
        optionals.set(4);
      }
      if (struct.isSetRegulatoryStatus()) {
        optionals.set(5);
      }
      if (struct.isSetIsMail()) {
        optionals.set(6);
      }
      if (struct.isSetIsSms()) {
        optionals.set(7);
      }
      if (struct.isSetPlanDt()) {
        optionals.set(8);
      }
      if (struct.isSetRemark()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetCusTypeStr()) {
        optionals.set(11);
      }
      if (struct.isSetStartRequestDttm()) {
        optionals.set(12);
      }
      if (struct.isSetRegulatoryUser()) {
        optionals.set(13);
      }
      if (struct.isSetRegulatoryResult()) {
        optionals.set(14);
      }
      if (struct.isSetUserName()) {
        optionals.set(15);
      }
      if (struct.isSetActualBeginDt()) {
        optionals.set(16);
      }
      if (struct.isSetRegulatoryStatusStr()) {
        optionals.set(17);
      }
      if (struct.isSetProjectName()) {
        optionals.set(18);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(19);
      }
      if (struct.isSetRegulatoryUserName()) {
        optionals.set(20);
      }
      if (struct.isSetAssigneUserName()) {
        optionals.set(21);
      }
      if (struct.isSetRegulatoryPlanId()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRegulatoryUserId()) {
        oprot.writeI32(struct.regulatoryUserId);
      }
      if (struct.isSetPlanBeginDt()) {
        oprot.writeString(struct.planBeginDt);
      }
      if (struct.isSetAssigneUserId()) {
        oprot.writeI32(struct.assigneUserId);
      }
      if (struct.isSetRegulatoryStatus()) {
        oprot.writeI32(struct.regulatoryStatus);
      }
      if (struct.isSetIsMail()) {
        oprot.writeI32(struct.isMail);
      }
      if (struct.isSetIsSms()) {
        oprot.writeI32(struct.isSms);
      }
      if (struct.isSetPlanDt()) {
        oprot.writeString(struct.planDt);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCusTypeStr()) {
        oprot.writeString(struct.cusTypeStr);
      }
      if (struct.isSetStartRequestDttm()) {
        oprot.writeString(struct.startRequestDttm);
      }
      if (struct.isSetRegulatoryUser()) {
        oprot.writeString(struct.regulatoryUser);
      }
      if (struct.isSetRegulatoryResult()) {
        oprot.writeString(struct.regulatoryResult);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetActualBeginDt()) {
        oprot.writeString(struct.actualBeginDt);
      }
      if (struct.isSetRegulatoryStatusStr()) {
        oprot.writeString(struct.regulatoryStatusStr);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetRegulatoryUserName()) {
        oprot.writeString(struct.regulatoryUserName);
      }
      if (struct.isSetAssigneUserName()) {
        oprot.writeString(struct.assigneUserName);
      }
      if (struct.isSetRegulatoryPlanId()) {
        oprot.writeI32(struct.regulatoryPlanId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultBizProjectRegPlan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regulatoryUserId = iprot.readI32();
        struct.setRegulatoryUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.planBeginDt = iprot.readString();
        struct.setPlanBeginDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.assigneUserId = iprot.readI32();
        struct.setAssigneUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.regulatoryStatus = iprot.readI32();
        struct.setRegulatoryStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isMail = iprot.readI32();
        struct.setIsMailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isSms = iprot.readI32();
        struct.setIsSmsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.planDt = iprot.readString();
        struct.setPlanDtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cusTypeStr = iprot.readString();
        struct.setCusTypeStrIsSet(true);
      }
      if (incoming.get(12)) {
        struct.startRequestDttm = iprot.readString();
        struct.setStartRequestDttmIsSet(true);
      }
      if (incoming.get(13)) {
        struct.regulatoryUser = iprot.readString();
        struct.setRegulatoryUserIsSet(true);
      }
      if (incoming.get(14)) {
        struct.regulatoryResult = iprot.readString();
        struct.setRegulatoryResultIsSet(true);
      }
      if (incoming.get(15)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.actualBeginDt = iprot.readString();
        struct.setActualBeginDtIsSet(true);
      }
      if (incoming.get(17)) {
        struct.regulatoryStatusStr = iprot.readString();
        struct.setRegulatoryStatusStrIsSet(true);
      }
      if (incoming.get(18)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(20)) {
        struct.regulatoryUserName = iprot.readString();
        struct.setRegulatoryUserNameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.assigneUserName = iprot.readString();
        struct.setAssigneUserNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.regulatoryPlanId = iprot.readI32();
        struct.setRegulatoryPlanIdIsSet(true);
      }
    }
  }

}


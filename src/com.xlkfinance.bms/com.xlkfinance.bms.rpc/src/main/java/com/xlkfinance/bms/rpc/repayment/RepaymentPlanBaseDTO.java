/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-10")
public class RepaymentPlanBaseDTO implements org.apache.thrift.TBase<RepaymentPlanBaseDTO, RepaymentPlanBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentPlanBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentPlanBaseDTO");

  private static final org.apache.thrift.protocol.TField LOAN_INFO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanInfoId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GEN_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("genDttm", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GEN_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("genUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLAN_REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planRepayDt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PLAN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("planType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EX_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("exTarget", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EX_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField SHOULD_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField SHOULD_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SHOULD_OTHER_COST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOtherCostName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField SHOULD_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField THIS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("thisStatus", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PLAN_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("planVersion", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField IS_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("isReconciliation", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField FREEZE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("freezeStatus", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PLAN_CYCLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("planCycleName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField OPER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operType", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField OPER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("operCost", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDays", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField OVERDUE_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField OVERDUE_FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueFine", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField ACCOUNTS_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("accountsTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField RECEIVED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)32);
  private static final org.apache.thrift.protocol.TField UNCOLLECTED_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("uncollectedTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)33);
  private static final org.apache.thrift.protocol.TField RESULTS_FIELD_DESC = new org.apache.thrift.protocol.TField("results", org.apache.thrift.protocol.TType.LIST, (short)34);
  private static final org.apache.thrift.protocol.TField IS_EXTENSION_FIELD_DESC = new org.apache.thrift.protocol.TField("isExtension", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField REBATE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("rebateFee", org.apache.thrift.protocol.TType.DOUBLE, (short)36);
  private static final org.apache.thrift.protocol.TField MONTH_MAID_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("monthMaidRate", org.apache.thrift.protocol.TType.DOUBLE, (short)37);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)38);
  private static final org.apache.thrift.protocol.TField ACTUAL_OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("actualOverdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField SHOULD_OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOverdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField SHOULD_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField ACTUAL_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)42);
  private static final org.apache.thrift.protocol.TField ACTUAL_PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPrincipal", org.apache.thrift.protocol.TType.DOUBLE, (short)43);
  private static final org.apache.thrift.protocol.TField ACTUAL_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("actualInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)44);
  private static final org.apache.thrift.protocol.TField ACTUAL_TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("actualTotal", org.apache.thrift.protocol.TType.DOUBLE, (short)45);
  private static final org.apache.thrift.protocol.TField OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)46);
  private static final org.apache.thrift.protocol.TField PAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentId", org.apache.thrift.protocol.TType.I32, (short)47);
  private static final org.apache.thrift.protocol.TField OVERDUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueId", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)49);
  private static final org.apache.thrift.protocol.TField PID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("pidList", org.apache.thrift.protocol.TType.LIST, (short)50);
  private static final org.apache.thrift.protocol.TField LOAN_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("loanTerm", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField REPAYMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentId", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField RENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)53);
  private static final org.apache.thrift.protocol.TField SHOULD_PAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)54);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentPlanBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentPlanBaseDTOTupleSchemeFactory());
  }

  public int loanInfoId; // required
  public String genDttm; // required
  public int genUserId; // required
  public String planRepayDt; // required
  public int planCycleNum; // required
  public int planType; // required
  public int exTarget; // required
  public int exType; // required
  public double shouldPrincipal; // required
  public double shouldMangCost; // required
  public double shouldOtherCost; // required
  public String shouldOtherCostName; // required
  public double shouldInterest; // required
  public double total; // required
  public double principalBalance; // required
  public int thisStatus; // required
  public int planVersion; // required
  public int status; // required
  public int pId; // required
  public int isReconciliation; // required
  public int freezeStatus; // required
  public String planCycleName; // required
  public int operType; // required
  public double operCost; // required
  public int dataType; // required
  public int overdueDays; // required
  public double overdueInterest; // required
  public double overdueFine; // required
  public double accountsTotal; // required
  public double receivedTotal; // required
  public double uncollectedTotal; // required
  public List<RepaymentPlanBaseDTO> results; // required
  public int isExtension; // required
  public double rebateFee; // required
  public double monthMaidRate; // required
  public int projectId; // required
  public double actualOverdueMoney; // required
  public double shouldOverdueMoney; // required
  public double shouldPenalty; // required
  public double actualPenalty; // required
  public double actualPrincipal; // required
  public double actualInterest; // required
  public double actualTotal; // required
  public double overdueMoney; // required
  public int paymentId; // required
  public int overdueId; // required
  public double overdueRate; // required
  public List<Integer> pidList; // required
  public int loanTerm; // required
  public int repaymentId; // required
  public double rentMoney; // required
  public double shouldPaymentMoney; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_INFO_ID((short)1, "loanInfoId"),
    GEN_DTTM((short)2, "genDttm"),
    GEN_USER_ID((short)3, "genUserId"),
    PLAN_REPAY_DT((short)4, "planRepayDt"),
    PLAN_CYCLE_NUM((short)5, "planCycleNum"),
    PLAN_TYPE((short)6, "planType"),
    EX_TARGET((short)7, "exTarget"),
    EX_TYPE((short)8, "exType"),
    SHOULD_PRINCIPAL((short)9, "shouldPrincipal"),
    SHOULD_MANG_COST((short)10, "shouldMangCost"),
    SHOULD_OTHER_COST((short)11, "shouldOtherCost"),
    SHOULD_OTHER_COST_NAME((short)12, "shouldOtherCostName"),
    SHOULD_INTEREST((short)13, "shouldInterest"),
    TOTAL((short)14, "total"),
    PRINCIPAL_BALANCE((short)15, "principalBalance"),
    THIS_STATUS((short)16, "thisStatus"),
    PLAN_VERSION((short)17, "planVersion"),
    STATUS((short)18, "status"),
    P_ID((short)19, "pId"),
    IS_RECONCILIATION((short)20, "isReconciliation"),
    FREEZE_STATUS((short)21, "freezeStatus"),
    PLAN_CYCLE_NAME((short)22, "planCycleName"),
    OPER_TYPE((short)23, "operType"),
    OPER_COST((short)24, "operCost"),
    DATA_TYPE((short)25, "dataType"),
    OVERDUE_DAYS((short)28, "overdueDays"),
    OVERDUE_INTEREST((short)29, "overdueInterest"),
    OVERDUE_FINE((short)30, "overdueFine"),
    ACCOUNTS_TOTAL((short)31, "accountsTotal"),
    RECEIVED_TOTAL((short)32, "receivedTotal"),
    UNCOLLECTED_TOTAL((short)33, "uncollectedTotal"),
    RESULTS((short)34, "results"),
    IS_EXTENSION((short)35, "isExtension"),
    REBATE_FEE((short)36, "rebateFee"),
    MONTH_MAID_RATE((short)37, "monthMaidRate"),
    PROJECT_ID((short)38, "projectId"),
    ACTUAL_OVERDUE_MONEY((short)39, "actualOverdueMoney"),
    SHOULD_OVERDUE_MONEY((short)40, "shouldOverdueMoney"),
    SHOULD_PENALTY((short)41, "shouldPenalty"),
    ACTUAL_PENALTY((short)42, "actualPenalty"),
    ACTUAL_PRINCIPAL((short)43, "actualPrincipal"),
    ACTUAL_INTEREST((short)44, "actualInterest"),
    ACTUAL_TOTAL((short)45, "actualTotal"),
    OVERDUE_MONEY((short)46, "overdueMoney"),
    PAYMENT_ID((short)47, "paymentId"),
    OVERDUE_ID((short)48, "overdueId"),
    OVERDUE_RATE((short)49, "overdueRate"),
    PID_LIST((short)50, "pidList"),
    LOAN_TERM((short)51, "loanTerm"),
    REPAYMENT_ID((short)52, "repaymentId"),
    RENT_MONEY((short)53, "rentMoney"),
    SHOULD_PAYMENT_MONEY((short)54, "shouldPaymentMoney");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_INFO_ID
          return LOAN_INFO_ID;
        case 2: // GEN_DTTM
          return GEN_DTTM;
        case 3: // GEN_USER_ID
          return GEN_USER_ID;
        case 4: // PLAN_REPAY_DT
          return PLAN_REPAY_DT;
        case 5: // PLAN_CYCLE_NUM
          return PLAN_CYCLE_NUM;
        case 6: // PLAN_TYPE
          return PLAN_TYPE;
        case 7: // EX_TARGET
          return EX_TARGET;
        case 8: // EX_TYPE
          return EX_TYPE;
        case 9: // SHOULD_PRINCIPAL
          return SHOULD_PRINCIPAL;
        case 10: // SHOULD_MANG_COST
          return SHOULD_MANG_COST;
        case 11: // SHOULD_OTHER_COST
          return SHOULD_OTHER_COST;
        case 12: // SHOULD_OTHER_COST_NAME
          return SHOULD_OTHER_COST_NAME;
        case 13: // SHOULD_INTEREST
          return SHOULD_INTEREST;
        case 14: // TOTAL
          return TOTAL;
        case 15: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 16: // THIS_STATUS
          return THIS_STATUS;
        case 17: // PLAN_VERSION
          return PLAN_VERSION;
        case 18: // STATUS
          return STATUS;
        case 19: // P_ID
          return P_ID;
        case 20: // IS_RECONCILIATION
          return IS_RECONCILIATION;
        case 21: // FREEZE_STATUS
          return FREEZE_STATUS;
        case 22: // PLAN_CYCLE_NAME
          return PLAN_CYCLE_NAME;
        case 23: // OPER_TYPE
          return OPER_TYPE;
        case 24: // OPER_COST
          return OPER_COST;
        case 25: // DATA_TYPE
          return DATA_TYPE;
        case 28: // OVERDUE_DAYS
          return OVERDUE_DAYS;
        case 29: // OVERDUE_INTEREST
          return OVERDUE_INTEREST;
        case 30: // OVERDUE_FINE
          return OVERDUE_FINE;
        case 31: // ACCOUNTS_TOTAL
          return ACCOUNTS_TOTAL;
        case 32: // RECEIVED_TOTAL
          return RECEIVED_TOTAL;
        case 33: // UNCOLLECTED_TOTAL
          return UNCOLLECTED_TOTAL;
        case 34: // RESULTS
          return RESULTS;
        case 35: // IS_EXTENSION
          return IS_EXTENSION;
        case 36: // REBATE_FEE
          return REBATE_FEE;
        case 37: // MONTH_MAID_RATE
          return MONTH_MAID_RATE;
        case 38: // PROJECT_ID
          return PROJECT_ID;
        case 39: // ACTUAL_OVERDUE_MONEY
          return ACTUAL_OVERDUE_MONEY;
        case 40: // SHOULD_OVERDUE_MONEY
          return SHOULD_OVERDUE_MONEY;
        case 41: // SHOULD_PENALTY
          return SHOULD_PENALTY;
        case 42: // ACTUAL_PENALTY
          return ACTUAL_PENALTY;
        case 43: // ACTUAL_PRINCIPAL
          return ACTUAL_PRINCIPAL;
        case 44: // ACTUAL_INTEREST
          return ACTUAL_INTEREST;
        case 45: // ACTUAL_TOTAL
          return ACTUAL_TOTAL;
        case 46: // OVERDUE_MONEY
          return OVERDUE_MONEY;
        case 47: // PAYMENT_ID
          return PAYMENT_ID;
        case 48: // OVERDUE_ID
          return OVERDUE_ID;
        case 49: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 50: // PID_LIST
          return PID_LIST;
        case 51: // LOAN_TERM
          return LOAN_TERM;
        case 52: // REPAYMENT_ID
          return REPAYMENT_ID;
        case 53: // RENT_MONEY
          return RENT_MONEY;
        case 54: // SHOULD_PAYMENT_MONEY
          return SHOULD_PAYMENT_MONEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANINFOID_ISSET_ID = 0;
  private static final int __GENUSERID_ISSET_ID = 1;
  private static final int __PLANCYCLENUM_ISSET_ID = 2;
  private static final int __PLANTYPE_ISSET_ID = 3;
  private static final int __EXTARGET_ISSET_ID = 4;
  private static final int __EXTYPE_ISSET_ID = 5;
  private static final int __SHOULDPRINCIPAL_ISSET_ID = 6;
  private static final int __SHOULDMANGCOST_ISSET_ID = 7;
  private static final int __SHOULDOTHERCOST_ISSET_ID = 8;
  private static final int __SHOULDINTEREST_ISSET_ID = 9;
  private static final int __TOTAL_ISSET_ID = 10;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 11;
  private static final int __THISSTATUS_ISSET_ID = 12;
  private static final int __PLANVERSION_ISSET_ID = 13;
  private static final int __STATUS_ISSET_ID = 14;
  private static final int __PID_ISSET_ID = 15;
  private static final int __ISRECONCILIATION_ISSET_ID = 16;
  private static final int __FREEZESTATUS_ISSET_ID = 17;
  private static final int __OPERTYPE_ISSET_ID = 18;
  private static final int __OPERCOST_ISSET_ID = 19;
  private static final int __DATATYPE_ISSET_ID = 20;
  private static final int __OVERDUEDAYS_ISSET_ID = 21;
  private static final int __OVERDUEINTEREST_ISSET_ID = 22;
  private static final int __OVERDUEFINE_ISSET_ID = 23;
  private static final int __ACCOUNTSTOTAL_ISSET_ID = 24;
  private static final int __RECEIVEDTOTAL_ISSET_ID = 25;
  private static final int __UNCOLLECTEDTOTAL_ISSET_ID = 26;
  private static final int __ISEXTENSION_ISSET_ID = 27;
  private static final int __REBATEFEE_ISSET_ID = 28;
  private static final int __MONTHMAIDRATE_ISSET_ID = 29;
  private static final int __PROJECTID_ISSET_ID = 30;
  private static final int __ACTUALOVERDUEMONEY_ISSET_ID = 31;
  private static final int __SHOULDOVERDUEMONEY_ISSET_ID = 32;
  private static final int __SHOULDPENALTY_ISSET_ID = 33;
  private static final int __ACTUALPENALTY_ISSET_ID = 34;
  private static final int __ACTUALPRINCIPAL_ISSET_ID = 35;
  private static final int __ACTUALINTEREST_ISSET_ID = 36;
  private static final int __ACTUALTOTAL_ISSET_ID = 37;
  private static final int __OVERDUEMONEY_ISSET_ID = 38;
  private static final int __PAYMENTID_ISSET_ID = 39;
  private static final int __OVERDUEID_ISSET_ID = 40;
  private static final int __OVERDUERATE_ISSET_ID = 41;
  private static final int __LOANTERM_ISSET_ID = 42;
  private static final int __REPAYMENTID_ISSET_ID = 43;
  private static final int __RENTMONEY_ISSET_ID = 44;
  private static final int __SHOULDPAYMENTMONEY_ISSET_ID = 45;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_INFO_ID, new org.apache.thrift.meta_data.FieldMetaData("loanInfoId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GEN_DTTM, new org.apache.thrift.meta_data.FieldMetaData("genDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEN_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("genUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("planRepayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAN_CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("planCycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("planType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EX_TARGET, new org.apache.thrift.meta_data.FieldMetaData("exTarget", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EX_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SHOULD_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("shouldPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OTHER_COST_NAME, new org.apache.thrift.meta_data.FieldMetaData("shouldOtherCostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHOULD_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("shouldInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.THIS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("thisStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_VERSION, new org.apache.thrift.meta_data.FieldMetaData("planVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("isReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FREEZE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("freezeStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLAN_CYCLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("planCycleName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OPER_COST, new org.apache.thrift.meta_data.FieldMetaData("operCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_DAYS, new org.apache.thrift.meta_data.FieldMetaData("overdueDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("overdueInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_FINE, new org.apache.thrift.meta_data.FieldMetaData("overdueFine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACCOUNTS_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("accountsTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("receivedTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UNCOLLECTED_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("uncollectedTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESULTS, new org.apache.thrift.meta_data.FieldMetaData("results", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "RepaymentPlanBaseDTO"))));
    tmpMap.put(_Fields.IS_EXTENSION, new org.apache.thrift.meta_data.FieldMetaData("isExtension", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REBATE_FEE, new org.apache.thrift.meta_data.FieldMetaData("rebateFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MONTH_MAID_RATE, new org.apache.thrift.meta_data.FieldMetaData("monthMaidRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTUAL_OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("actualOverdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("shouldOverdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("shouldPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("actualPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("actualPrincipal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("actualInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_TOTAL, new org.apache.thrift.meta_data.FieldMetaData("actualTotal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("overdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("paymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_ID, new org.apache.thrift.meta_data.FieldMetaData("overdueId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PID_LIST, new org.apache.thrift.meta_data.FieldMetaData("pidList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LOAN_TERM, new org.apache.thrift.meta_data.FieldMetaData("loanTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("repaymentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_PAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("shouldPaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentPlanBaseDTO.class, metaDataMap);
  }

  public RepaymentPlanBaseDTO() {
  }

  public RepaymentPlanBaseDTO(
    int loanInfoId,
    String genDttm,
    int genUserId,
    String planRepayDt,
    int planCycleNum,
    int planType,
    int exTarget,
    int exType,
    double shouldPrincipal,
    double shouldMangCost,
    double shouldOtherCost,
    String shouldOtherCostName,
    double shouldInterest,
    double total,
    double principalBalance,
    int thisStatus,
    int planVersion,
    int status,
    int pId,
    int isReconciliation,
    int freezeStatus,
    String planCycleName,
    int operType,
    double operCost,
    int dataType,
    int overdueDays,
    double overdueInterest,
    double overdueFine,
    double accountsTotal,
    double receivedTotal,
    double uncollectedTotal,
    List<RepaymentPlanBaseDTO> results,
    int isExtension,
    double rebateFee,
    double monthMaidRate,
    int projectId,
    double actualOverdueMoney,
    double shouldOverdueMoney,
    double shouldPenalty,
    double actualPenalty,
    double actualPrincipal,
    double actualInterest,
    double actualTotal,
    double overdueMoney,
    int paymentId,
    int overdueId,
    double overdueRate,
    List<Integer> pidList,
    int loanTerm,
    int repaymentId,
    double rentMoney,
    double shouldPaymentMoney)
  {
    this();
    this.loanInfoId = loanInfoId;
    setLoanInfoIdIsSet(true);
    this.genDttm = genDttm;
    this.genUserId = genUserId;
    setGenUserIdIsSet(true);
    this.planRepayDt = planRepayDt;
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    this.planType = planType;
    setPlanTypeIsSet(true);
    this.exTarget = exTarget;
    setExTargetIsSet(true);
    this.exType = exType;
    setExTypeIsSet(true);
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    this.shouldOtherCostName = shouldOtherCostName;
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.thisStatus = thisStatus;
    setThisStatusIsSet(true);
    this.planVersion = planVersion;
    setPlanVersionIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.pId = pId;
    setPIdIsSet(true);
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    this.freezeStatus = freezeStatus;
    setFreezeStatusIsSet(true);
    this.planCycleName = planCycleName;
    this.operType = operType;
    setOperTypeIsSet(true);
    this.operCost = operCost;
    setOperCostIsSet(true);
    this.dataType = dataType;
    setDataTypeIsSet(true);
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    this.overdueInterest = overdueInterest;
    setOverdueInterestIsSet(true);
    this.overdueFine = overdueFine;
    setOverdueFineIsSet(true);
    this.accountsTotal = accountsTotal;
    setAccountsTotalIsSet(true);
    this.receivedTotal = receivedTotal;
    setReceivedTotalIsSet(true);
    this.uncollectedTotal = uncollectedTotal;
    setUncollectedTotalIsSet(true);
    this.results = results;
    this.isExtension = isExtension;
    setIsExtensionIsSet(true);
    this.rebateFee = rebateFee;
    setRebateFeeIsSet(true);
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.actualOverdueMoney = actualOverdueMoney;
    setActualOverdueMoneyIsSet(true);
    this.shouldOverdueMoney = shouldOverdueMoney;
    setShouldOverdueMoneyIsSet(true);
    this.shouldPenalty = shouldPenalty;
    setShouldPenaltyIsSet(true);
    this.actualPenalty = actualPenalty;
    setActualPenaltyIsSet(true);
    this.actualPrincipal = actualPrincipal;
    setActualPrincipalIsSet(true);
    this.actualInterest = actualInterest;
    setActualInterestIsSet(true);
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    this.overdueId = overdueId;
    setOverdueIdIsSet(true);
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.pidList = pidList;
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    this.rentMoney = rentMoney;
    setRentMoneyIsSet(true);
    this.shouldPaymentMoney = shouldPaymentMoney;
    setShouldPaymentMoneyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentPlanBaseDTO(RepaymentPlanBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanInfoId = other.loanInfoId;
    if (other.isSetGenDttm()) {
      this.genDttm = other.genDttm;
    }
    this.genUserId = other.genUserId;
    if (other.isSetPlanRepayDt()) {
      this.planRepayDt = other.planRepayDt;
    }
    this.planCycleNum = other.planCycleNum;
    this.planType = other.planType;
    this.exTarget = other.exTarget;
    this.exType = other.exType;
    this.shouldPrincipal = other.shouldPrincipal;
    this.shouldMangCost = other.shouldMangCost;
    this.shouldOtherCost = other.shouldOtherCost;
    if (other.isSetShouldOtherCostName()) {
      this.shouldOtherCostName = other.shouldOtherCostName;
    }
    this.shouldInterest = other.shouldInterest;
    this.total = other.total;
    this.principalBalance = other.principalBalance;
    this.thisStatus = other.thisStatus;
    this.planVersion = other.planVersion;
    this.status = other.status;
    this.pId = other.pId;
    this.isReconciliation = other.isReconciliation;
    this.freezeStatus = other.freezeStatus;
    if (other.isSetPlanCycleName()) {
      this.planCycleName = other.planCycleName;
    }
    this.operType = other.operType;
    this.operCost = other.operCost;
    this.dataType = other.dataType;
    this.overdueDays = other.overdueDays;
    this.overdueInterest = other.overdueInterest;
    this.overdueFine = other.overdueFine;
    this.accountsTotal = other.accountsTotal;
    this.receivedTotal = other.receivedTotal;
    this.uncollectedTotal = other.uncollectedTotal;
    if (other.isSetResults()) {
      List<RepaymentPlanBaseDTO> __this__results = new ArrayList<RepaymentPlanBaseDTO>(other.results.size());
      for (RepaymentPlanBaseDTO other_element : other.results) {
        __this__results.add(other_element);
      }
      this.results = __this__results;
    }
    this.isExtension = other.isExtension;
    this.rebateFee = other.rebateFee;
    this.monthMaidRate = other.monthMaidRate;
    this.projectId = other.projectId;
    this.actualOverdueMoney = other.actualOverdueMoney;
    this.shouldOverdueMoney = other.shouldOverdueMoney;
    this.shouldPenalty = other.shouldPenalty;
    this.actualPenalty = other.actualPenalty;
    this.actualPrincipal = other.actualPrincipal;
    this.actualInterest = other.actualInterest;
    this.actualTotal = other.actualTotal;
    this.overdueMoney = other.overdueMoney;
    this.paymentId = other.paymentId;
    this.overdueId = other.overdueId;
    this.overdueRate = other.overdueRate;
    if (other.isSetPidList()) {
      List<Integer> __this__pidList = new ArrayList<Integer>(other.pidList);
      this.pidList = __this__pidList;
    }
    this.loanTerm = other.loanTerm;
    this.repaymentId = other.repaymentId;
    this.rentMoney = other.rentMoney;
    this.shouldPaymentMoney = other.shouldPaymentMoney;
  }

  public RepaymentPlanBaseDTO deepCopy() {
    return new RepaymentPlanBaseDTO(this);
  }

  @Override
  public void clear() {
    setLoanInfoIdIsSet(false);
    this.loanInfoId = 0;
    this.genDttm = null;
    setGenUserIdIsSet(false);
    this.genUserId = 0;
    this.planRepayDt = null;
    setPlanCycleNumIsSet(false);
    this.planCycleNum = 0;
    setPlanTypeIsSet(false);
    this.planType = 0;
    setExTargetIsSet(false);
    this.exTarget = 0;
    setExTypeIsSet(false);
    this.exType = 0;
    setShouldPrincipalIsSet(false);
    this.shouldPrincipal = 0.0;
    setShouldMangCostIsSet(false);
    this.shouldMangCost = 0.0;
    setShouldOtherCostIsSet(false);
    this.shouldOtherCost = 0.0;
    this.shouldOtherCostName = null;
    setShouldInterestIsSet(false);
    this.shouldInterest = 0.0;
    setTotalIsSet(false);
    this.total = 0.0;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setThisStatusIsSet(false);
    this.thisStatus = 0;
    setPlanVersionIsSet(false);
    this.planVersion = 0;
    setStatusIsSet(false);
    this.status = 0;
    setPIdIsSet(false);
    this.pId = 0;
    setIsReconciliationIsSet(false);
    this.isReconciliation = 0;
    setFreezeStatusIsSet(false);
    this.freezeStatus = 0;
    this.planCycleName = null;
    setOperTypeIsSet(false);
    this.operType = 0;
    setOperCostIsSet(false);
    this.operCost = 0.0;
    setDataTypeIsSet(false);
    this.dataType = 0;
    setOverdueDaysIsSet(false);
    this.overdueDays = 0;
    setOverdueInterestIsSet(false);
    this.overdueInterest = 0.0;
    setOverdueFineIsSet(false);
    this.overdueFine = 0.0;
    setAccountsTotalIsSet(false);
    this.accountsTotal = 0.0;
    setReceivedTotalIsSet(false);
    this.receivedTotal = 0.0;
    setUncollectedTotalIsSet(false);
    this.uncollectedTotal = 0.0;
    this.results = null;
    setIsExtensionIsSet(false);
    this.isExtension = 0;
    setRebateFeeIsSet(false);
    this.rebateFee = 0.0;
    setMonthMaidRateIsSet(false);
    this.monthMaidRate = 0.0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setActualOverdueMoneyIsSet(false);
    this.actualOverdueMoney = 0.0;
    setShouldOverdueMoneyIsSet(false);
    this.shouldOverdueMoney = 0.0;
    setShouldPenaltyIsSet(false);
    this.shouldPenalty = 0.0;
    setActualPenaltyIsSet(false);
    this.actualPenalty = 0.0;
    setActualPrincipalIsSet(false);
    this.actualPrincipal = 0.0;
    setActualInterestIsSet(false);
    this.actualInterest = 0.0;
    setActualTotalIsSet(false);
    this.actualTotal = 0.0;
    setOverdueMoneyIsSet(false);
    this.overdueMoney = 0.0;
    setPaymentIdIsSet(false);
    this.paymentId = 0;
    setOverdueIdIsSet(false);
    this.overdueId = 0;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    this.pidList = null;
    setLoanTermIsSet(false);
    this.loanTerm = 0;
    setRepaymentIdIsSet(false);
    this.repaymentId = 0;
    setRentMoneyIsSet(false);
    this.rentMoney = 0.0;
    setShouldPaymentMoneyIsSet(false);
    this.shouldPaymentMoney = 0.0;
  }

  public int getLoanInfoId() {
    return this.loanInfoId;
  }

  public RepaymentPlanBaseDTO setLoanInfoId(int loanInfoId) {
    this.loanInfoId = loanInfoId;
    setLoanInfoIdIsSet(true);
    return this;
  }

  public void unsetLoanInfoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANINFOID_ISSET_ID);
  }

  /** Returns true if field loanInfoId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanInfoId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANINFOID_ISSET_ID);
  }

  public void setLoanInfoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANINFOID_ISSET_ID, value);
  }

  public String getGenDttm() {
    return this.genDttm;
  }

  public RepaymentPlanBaseDTO setGenDttm(String genDttm) {
    this.genDttm = genDttm;
    return this;
  }

  public void unsetGenDttm() {
    this.genDttm = null;
  }

  /** Returns true if field genDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetGenDttm() {
    return this.genDttm != null;
  }

  public void setGenDttmIsSet(boolean value) {
    if (!value) {
      this.genDttm = null;
    }
  }

  public int getGenUserId() {
    return this.genUserId;
  }

  public RepaymentPlanBaseDTO setGenUserId(int genUserId) {
    this.genUserId = genUserId;
    setGenUserIdIsSet(true);
    return this;
  }

  public void unsetGenUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENUSERID_ISSET_ID);
  }

  /** Returns true if field genUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetGenUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __GENUSERID_ISSET_ID);
  }

  public void setGenUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENUSERID_ISSET_ID, value);
  }

  public String getPlanRepayDt() {
    return this.planRepayDt;
  }

  public RepaymentPlanBaseDTO setPlanRepayDt(String planRepayDt) {
    this.planRepayDt = planRepayDt;
    return this;
  }

  public void unsetPlanRepayDt() {
    this.planRepayDt = null;
  }

  /** Returns true if field planRepayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanRepayDt() {
    return this.planRepayDt != null;
  }

  public void setPlanRepayDtIsSet(boolean value) {
    if (!value) {
      this.planRepayDt = null;
    }
  }

  public int getPlanCycleNum() {
    return this.planCycleNum;
  }

  public RepaymentPlanBaseDTO setPlanCycleNum(int planCycleNum) {
    this.planCycleNum = planCycleNum;
    setPlanCycleNumIsSet(true);
    return this;
  }

  public void unsetPlanCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  /** Returns true if field planCycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID);
  }

  public void setPlanCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANCYCLENUM_ISSET_ID, value);
  }

  public int getPlanType() {
    return this.planType;
  }

  public RepaymentPlanBaseDTO setPlanType(int planType) {
    this.planType = planType;
    setPlanTypeIsSet(true);
    return this;
  }

  public void unsetPlanType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANTYPE_ISSET_ID);
  }

  /** Returns true if field planType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanType() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANTYPE_ISSET_ID);
  }

  public void setPlanTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANTYPE_ISSET_ID, value);
  }

  public int getExTarget() {
    return this.exTarget;
  }

  public RepaymentPlanBaseDTO setExTarget(int exTarget) {
    this.exTarget = exTarget;
    setExTargetIsSet(true);
    return this;
  }

  public void unsetExTarget() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTARGET_ISSET_ID);
  }

  /** Returns true if field exTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetExTarget() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTARGET_ISSET_ID);
  }

  public void setExTargetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTARGET_ISSET_ID, value);
  }

  public int getExType() {
    return this.exType;
  }

  public RepaymentPlanBaseDTO setExType(int exType) {
    this.exType = exType;
    setExTypeIsSet(true);
    return this;
  }

  public void unsetExType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTYPE_ISSET_ID);
  }

  /** Returns true if field exType is set (has been assigned a value) and false otherwise */
  public boolean isSetExType() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTYPE_ISSET_ID);
  }

  public void setExTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTYPE_ISSET_ID, value);
  }

  public double getShouldPrincipal() {
    return this.shouldPrincipal;
  }

  public RepaymentPlanBaseDTO setShouldPrincipal(double shouldPrincipal) {
    this.shouldPrincipal = shouldPrincipal;
    setShouldPrincipalIsSet(true);
    return this;
  }

  public void unsetShouldPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field shouldPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID);
  }

  public void setShouldPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPRINCIPAL_ISSET_ID, value);
  }

  public double getShouldMangCost() {
    return this.shouldMangCost;
  }

  public RepaymentPlanBaseDTO setShouldMangCost(double shouldMangCost) {
    this.shouldMangCost = shouldMangCost;
    setShouldMangCostIsSet(true);
    return this;
  }

  public void unsetShouldMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  /** Returns true if field shouldMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID);
  }

  public void setShouldMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDMANGCOST_ISSET_ID, value);
  }

  public double getShouldOtherCost() {
    return this.shouldOtherCost;
  }

  public RepaymentPlanBaseDTO setShouldOtherCost(double shouldOtherCost) {
    this.shouldOtherCost = shouldOtherCost;
    setShouldOtherCostIsSet(true);
    return this;
  }

  public void unsetShouldOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  /** Returns true if field shouldOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID);
  }

  public void setShouldOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOTHERCOST_ISSET_ID, value);
  }

  public String getShouldOtherCostName() {
    return this.shouldOtherCostName;
  }

  public RepaymentPlanBaseDTO setShouldOtherCostName(String shouldOtherCostName) {
    this.shouldOtherCostName = shouldOtherCostName;
    return this;
  }

  public void unsetShouldOtherCostName() {
    this.shouldOtherCostName = null;
  }

  /** Returns true if field shouldOtherCostName is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOtherCostName() {
    return this.shouldOtherCostName != null;
  }

  public void setShouldOtherCostNameIsSet(boolean value) {
    if (!value) {
      this.shouldOtherCostName = null;
    }
  }

  public double getShouldInterest() {
    return this.shouldInterest;
  }

  public RepaymentPlanBaseDTO setShouldInterest(double shouldInterest) {
    this.shouldInterest = shouldInterest;
    setShouldInterestIsSet(true);
    return this;
  }

  public void unsetShouldInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  /** Returns true if field shouldInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID);
  }

  public void setShouldInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDINTEREST_ISSET_ID, value);
  }

  public double getTotal() {
    return this.total;
  }

  public RepaymentPlanBaseDTO setTotal(double total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public RepaymentPlanBaseDTO setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public int getThisStatus() {
    return this.thisStatus;
  }

  public RepaymentPlanBaseDTO setThisStatus(int thisStatus) {
    this.thisStatus = thisStatus;
    setThisStatusIsSet(true);
    return this;
  }

  public void unsetThisStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THISSTATUS_ISSET_ID);
  }

  /** Returns true if field thisStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetThisStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __THISSTATUS_ISSET_ID);
  }

  public void setThisStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THISSTATUS_ISSET_ID, value);
  }

  public int getPlanVersion() {
    return this.planVersion;
  }

  public RepaymentPlanBaseDTO setPlanVersion(int planVersion) {
    this.planVersion = planVersion;
    setPlanVersionIsSet(true);
    return this;
  }

  public void unsetPlanVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLANVERSION_ISSET_ID);
  }

  /** Returns true if field planVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __PLANVERSION_ISSET_ID);
  }

  public void setPlanVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLANVERSION_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public RepaymentPlanBaseDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPId() {
    return this.pId;
  }

  public RepaymentPlanBaseDTO setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getIsReconciliation() {
    return this.isReconciliation;
  }

  public RepaymentPlanBaseDTO setIsReconciliation(int isReconciliation) {
    this.isReconciliation = isReconciliation;
    setIsReconciliationIsSet(true);
    return this;
  }

  public void unsetIsReconciliation() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  /** Returns true if field isReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetIsReconciliation() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID);
  }

  public void setIsReconciliationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECONCILIATION_ISSET_ID, value);
  }

  public int getFreezeStatus() {
    return this.freezeStatus;
  }

  public RepaymentPlanBaseDTO setFreezeStatus(int freezeStatus) {
    this.freezeStatus = freezeStatus;
    setFreezeStatusIsSet(true);
    return this;
  }

  public void unsetFreezeStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FREEZESTATUS_ISSET_ID);
  }

  /** Returns true if field freezeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetFreezeStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __FREEZESTATUS_ISSET_ID);
  }

  public void setFreezeStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FREEZESTATUS_ISSET_ID, value);
  }

  public String getPlanCycleName() {
    return this.planCycleName;
  }

  public RepaymentPlanBaseDTO setPlanCycleName(String planCycleName) {
    this.planCycleName = planCycleName;
    return this;
  }

  public void unsetPlanCycleName() {
    this.planCycleName = null;
  }

  /** Returns true if field planCycleName is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanCycleName() {
    return this.planCycleName != null;
  }

  public void setPlanCycleNameIsSet(boolean value) {
    if (!value) {
      this.planCycleName = null;
    }
  }

  public int getOperType() {
    return this.operType;
  }

  public RepaymentPlanBaseDTO setOperType(int operType) {
    this.operType = operType;
    setOperTypeIsSet(true);
    return this;
  }

  public void unsetOperType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERTYPE_ISSET_ID);
  }

  /** Returns true if field operType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperType() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERTYPE_ISSET_ID);
  }

  public void setOperTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERTYPE_ISSET_ID, value);
  }

  public double getOperCost() {
    return this.operCost;
  }

  public RepaymentPlanBaseDTO setOperCost(double operCost) {
    this.operCost = operCost;
    setOperCostIsSet(true);
    return this;
  }

  public void unsetOperCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERCOST_ISSET_ID);
  }

  /** Returns true if field operCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOperCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERCOST_ISSET_ID);
  }

  public void setOperCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERCOST_ISSET_ID, value);
  }

  public int getDataType() {
    return this.dataType;
  }

  public RepaymentPlanBaseDTO setDataType(int dataType) {
    this.dataType = dataType;
    setDataTypeIsSet(true);
    return this;
  }

  public void unsetDataType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATATYPE_ISSET_ID);
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return EncodingUtils.testBit(__isset_bitfield, __DATATYPE_ISSET_ID);
  }

  public void setDataTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATATYPE_ISSET_ID, value);
  }

  public int getOverdueDays() {
    return this.overdueDays;
  }

  public RepaymentPlanBaseDTO setOverdueDays(int overdueDays) {
    this.overdueDays = overdueDays;
    setOverdueDaysIsSet(true);
    return this;
  }

  public void unsetOverdueDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  /** Returns true if field overdueDays is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDays() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID);
  }

  public void setOverdueDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAYS_ISSET_ID, value);
  }

  public double getOverdueInterest() {
    return this.overdueInterest;
  }

  public RepaymentPlanBaseDTO setOverdueInterest(double overdueInterest) {
    this.overdueInterest = overdueInterest;
    setOverdueInterestIsSet(true);
    return this;
  }

  public void unsetOverdueInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEINTEREST_ISSET_ID);
  }

  /** Returns true if field overdueInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEINTEREST_ISSET_ID);
  }

  public void setOverdueInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEINTEREST_ISSET_ID, value);
  }

  public double getOverdueFine() {
    return this.overdueFine;
  }

  public RepaymentPlanBaseDTO setOverdueFine(double overdueFine) {
    this.overdueFine = overdueFine;
    setOverdueFineIsSet(true);
    return this;
  }

  public void unsetOverdueFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEFINE_ISSET_ID);
  }

  /** Returns true if field overdueFine is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueFine() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEFINE_ISSET_ID);
  }

  public void setOverdueFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEFINE_ISSET_ID, value);
  }

  public double getAccountsTotal() {
    return this.accountsTotal;
  }

  public RepaymentPlanBaseDTO setAccountsTotal(double accountsTotal) {
    this.accountsTotal = accountsTotal;
    setAccountsTotalIsSet(true);
    return this;
  }

  public void unsetAccountsTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCOUNTSTOTAL_ISSET_ID);
  }

  /** Returns true if field accountsTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountsTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCOUNTSTOTAL_ISSET_ID);
  }

  public void setAccountsTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCOUNTSTOTAL_ISSET_ID, value);
  }

  public double getReceivedTotal() {
    return this.receivedTotal;
  }

  public RepaymentPlanBaseDTO setReceivedTotal(double receivedTotal) {
    this.receivedTotal = receivedTotal;
    setReceivedTotalIsSet(true);
    return this;
  }

  public void unsetReceivedTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDTOTAL_ISSET_ID);
  }

  /** Returns true if field receivedTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDTOTAL_ISSET_ID);
  }

  public void setReceivedTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDTOTAL_ISSET_ID, value);
  }

  public double getUncollectedTotal() {
    return this.uncollectedTotal;
  }

  public RepaymentPlanBaseDTO setUncollectedTotal(double uncollectedTotal) {
    this.uncollectedTotal = uncollectedTotal;
    setUncollectedTotalIsSet(true);
    return this;
  }

  public void unsetUncollectedTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNCOLLECTEDTOTAL_ISSET_ID);
  }

  /** Returns true if field uncollectedTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetUncollectedTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __UNCOLLECTEDTOTAL_ISSET_ID);
  }

  public void setUncollectedTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNCOLLECTEDTOTAL_ISSET_ID, value);
  }

  public int getResultsSize() {
    return (this.results == null) ? 0 : this.results.size();
  }

  public java.util.Iterator<RepaymentPlanBaseDTO> getResultsIterator() {
    return (this.results == null) ? null : this.results.iterator();
  }

  public void addToResults(RepaymentPlanBaseDTO elem) {
    if (this.results == null) {
      this.results = new ArrayList<RepaymentPlanBaseDTO>();
    }
    this.results.add(elem);
  }

  public List<RepaymentPlanBaseDTO> getResults() {
    return this.results;
  }

  public RepaymentPlanBaseDTO setResults(List<RepaymentPlanBaseDTO> results) {
    this.results = results;
    return this;
  }

  public void unsetResults() {
    this.results = null;
  }

  /** Returns true if field results is set (has been assigned a value) and false otherwise */
  public boolean isSetResults() {
    return this.results != null;
  }

  public void setResultsIsSet(boolean value) {
    if (!value) {
      this.results = null;
    }
  }

  public int getIsExtension() {
    return this.isExtension;
  }

  public RepaymentPlanBaseDTO setIsExtension(int isExtension) {
    this.isExtension = isExtension;
    setIsExtensionIsSet(true);
    return this;
  }

  public void unsetIsExtension() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEXTENSION_ISSET_ID);
  }

  /** Returns true if field isExtension is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExtension() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEXTENSION_ISSET_ID);
  }

  public void setIsExtensionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEXTENSION_ISSET_ID, value);
  }

  public double getRebateFee() {
    return this.rebateFee;
  }

  public RepaymentPlanBaseDTO setRebateFee(double rebateFee) {
    this.rebateFee = rebateFee;
    setRebateFeeIsSet(true);
    return this;
  }

  public void unsetRebateFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REBATEFEE_ISSET_ID);
  }

  /** Returns true if field rebateFee is set (has been assigned a value) and false otherwise */
  public boolean isSetRebateFee() {
    return EncodingUtils.testBit(__isset_bitfield, __REBATEFEE_ISSET_ID);
  }

  public void setRebateFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REBATEFEE_ISSET_ID, value);
  }

  public double getMonthMaidRate() {
    return this.monthMaidRate;
  }

  public RepaymentPlanBaseDTO setMonthMaidRate(double monthMaidRate) {
    this.monthMaidRate = monthMaidRate;
    setMonthMaidRateIsSet(true);
    return this;
  }

  public void unsetMonthMaidRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  /** Returns true if field monthMaidRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthMaidRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID);
  }

  public void setMonthMaidRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHMAIDRATE_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RepaymentPlanBaseDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public double getActualOverdueMoney() {
    return this.actualOverdueMoney;
  }

  public RepaymentPlanBaseDTO setActualOverdueMoney(double actualOverdueMoney) {
    this.actualOverdueMoney = actualOverdueMoney;
    setActualOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetActualOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field actualOverdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetActualOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID);
  }

  public void setActualOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID, value);
  }

  public double getShouldOverdueMoney() {
    return this.shouldOverdueMoney;
  }

  public RepaymentPlanBaseDTO setShouldOverdueMoney(double shouldOverdueMoney) {
    this.shouldOverdueMoney = shouldOverdueMoney;
    setShouldOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetShouldOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field shouldOverdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID);
  }

  public void setShouldOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID, value);
  }

  public double getShouldPenalty() {
    return this.shouldPenalty;
  }

  public RepaymentPlanBaseDTO setShouldPenalty(double shouldPenalty) {
    this.shouldPenalty = shouldPenalty;
    setShouldPenaltyIsSet(true);
    return this;
  }

  public void unsetShouldPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID);
  }

  /** Returns true if field shouldPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID);
  }

  public void setShouldPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID, value);
  }

  public double getActualPenalty() {
    return this.actualPenalty;
  }

  public RepaymentPlanBaseDTO setActualPenalty(double actualPenalty) {
    this.actualPenalty = actualPenalty;
    setActualPenaltyIsSet(true);
    return this;
  }

  public void unsetActualPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID);
  }

  /** Returns true if field actualPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID);
  }

  public void setActualPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID, value);
  }

  public double getActualPrincipal() {
    return this.actualPrincipal;
  }

  public RepaymentPlanBaseDTO setActualPrincipal(double actualPrincipal) {
    this.actualPrincipal = actualPrincipal;
    setActualPrincipalIsSet(true);
    return this;
  }

  public void unsetActualPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID);
  }

  /** Returns true if field actualPrincipal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID);
  }

  public void setActualPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALPRINCIPAL_ISSET_ID, value);
  }

  public double getActualInterest() {
    return this.actualInterest;
  }

  public RepaymentPlanBaseDTO setActualInterest(double actualInterest) {
    this.actualInterest = actualInterest;
    setActualInterestIsSet(true);
    return this;
  }

  public void unsetActualInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID);
  }

  /** Returns true if field actualInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetActualInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID);
  }

  public void setActualInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALINTEREST_ISSET_ID, value);
  }

  public double getActualTotal() {
    return this.actualTotal;
  }

  public RepaymentPlanBaseDTO setActualTotal(double actualTotal) {
    this.actualTotal = actualTotal;
    setActualTotalIsSet(true);
    return this;
  }

  public void unsetActualTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  /** Returns true if field actualTotal is set (has been assigned a value) and false otherwise */
  public boolean isSetActualTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID);
  }

  public void setActualTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALTOTAL_ISSET_ID, value);
  }

  public double getOverdueMoney() {
    return this.overdueMoney;
  }

  public RepaymentPlanBaseDTO setOverdueMoney(double overdueMoney) {
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field overdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  public void setOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID, value);
  }

  public int getPaymentId() {
    return this.paymentId;
  }

  public RepaymentPlanBaseDTO setPaymentId(int paymentId) {
    this.paymentId = paymentId;
    setPaymentIdIsSet(true);
    return this;
  }

  public void unsetPaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  /** Returns true if field paymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTID_ISSET_ID);
  }

  public void setPaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTID_ISSET_ID, value);
  }

  public int getOverdueId() {
    return this.overdueId;
  }

  public RepaymentPlanBaseDTO setOverdueId(int overdueId) {
    this.overdueId = overdueId;
    setOverdueIdIsSet(true);
    return this;
  }

  public void unsetOverdueId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEID_ISSET_ID);
  }

  /** Returns true if field overdueId is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueId() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEID_ISSET_ID);
  }

  public void setOverdueIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEID_ISSET_ID, value);
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public RepaymentPlanBaseDTO setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public int getPidListSize() {
    return (this.pidList == null) ? 0 : this.pidList.size();
  }

  public java.util.Iterator<Integer> getPidListIterator() {
    return (this.pidList == null) ? null : this.pidList.iterator();
  }

  public void addToPidList(int elem) {
    if (this.pidList == null) {
      this.pidList = new ArrayList<Integer>();
    }
    this.pidList.add(elem);
  }

  public List<Integer> getPidList() {
    return this.pidList;
  }

  public RepaymentPlanBaseDTO setPidList(List<Integer> pidList) {
    this.pidList = pidList;
    return this;
  }

  public void unsetPidList() {
    this.pidList = null;
  }

  /** Returns true if field pidList is set (has been assigned a value) and false otherwise */
  public boolean isSetPidList() {
    return this.pidList != null;
  }

  public void setPidListIsSet(boolean value) {
    if (!value) {
      this.pidList = null;
    }
  }

  public int getLoanTerm() {
    return this.loanTerm;
  }

  public RepaymentPlanBaseDTO setLoanTerm(int loanTerm) {
    this.loanTerm = loanTerm;
    setLoanTermIsSet(true);
    return this;
  }

  public void unsetLoanTerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  /** Returns true if field loanTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanTerm() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANTERM_ISSET_ID);
  }

  public void setLoanTermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANTERM_ISSET_ID, value);
  }

  public int getRepaymentId() {
    return this.repaymentId;
  }

  public RepaymentPlanBaseDTO setRepaymentId(int repaymentId) {
    this.repaymentId = repaymentId;
    setRepaymentIdIsSet(true);
    return this;
  }

  public void unsetRepaymentId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  /** Returns true if field repaymentId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTID_ISSET_ID);
  }

  public void setRepaymentIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTID_ISSET_ID, value);
  }

  public double getRentMoney() {
    return this.rentMoney;
  }

  public RepaymentPlanBaseDTO setRentMoney(double rentMoney) {
    this.rentMoney = rentMoney;
    setRentMoneyIsSet(true);
    return this;
  }

  public void unsetRentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RENTMONEY_ISSET_ID);
  }

  /** Returns true if field rentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RENTMONEY_ISSET_ID);
  }

  public void setRentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RENTMONEY_ISSET_ID, value);
  }

  public double getShouldPaymentMoney() {
    return this.shouldPaymentMoney;
  }

  public RepaymentPlanBaseDTO setShouldPaymentMoney(double shouldPaymentMoney) {
    this.shouldPaymentMoney = shouldPaymentMoney;
    setShouldPaymentMoneyIsSet(true);
    return this;
  }

  public void unsetShouldPaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field shouldPaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPAYMENTMONEY_ISSET_ID);
  }

  public void setShouldPaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPAYMENTMONEY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_INFO_ID:
      if (value == null) {
        unsetLoanInfoId();
      } else {
        setLoanInfoId((Integer)value);
      }
      break;

    case GEN_DTTM:
      if (value == null) {
        unsetGenDttm();
      } else {
        setGenDttm((String)value);
      }
      break;

    case GEN_USER_ID:
      if (value == null) {
        unsetGenUserId();
      } else {
        setGenUserId((Integer)value);
      }
      break;

    case PLAN_REPAY_DT:
      if (value == null) {
        unsetPlanRepayDt();
      } else {
        setPlanRepayDt((String)value);
      }
      break;

    case PLAN_CYCLE_NUM:
      if (value == null) {
        unsetPlanCycleNum();
      } else {
        setPlanCycleNum((Integer)value);
      }
      break;

    case PLAN_TYPE:
      if (value == null) {
        unsetPlanType();
      } else {
        setPlanType((Integer)value);
      }
      break;

    case EX_TARGET:
      if (value == null) {
        unsetExTarget();
      } else {
        setExTarget((Integer)value);
      }
      break;

    case EX_TYPE:
      if (value == null) {
        unsetExType();
      } else {
        setExType((Integer)value);
      }
      break;

    case SHOULD_PRINCIPAL:
      if (value == null) {
        unsetShouldPrincipal();
      } else {
        setShouldPrincipal((Double)value);
      }
      break;

    case SHOULD_MANG_COST:
      if (value == null) {
        unsetShouldMangCost();
      } else {
        setShouldMangCost((Double)value);
      }
      break;

    case SHOULD_OTHER_COST:
      if (value == null) {
        unsetShouldOtherCost();
      } else {
        setShouldOtherCost((Double)value);
      }
      break;

    case SHOULD_OTHER_COST_NAME:
      if (value == null) {
        unsetShouldOtherCostName();
      } else {
        setShouldOtherCostName((String)value);
      }
      break;

    case SHOULD_INTEREST:
      if (value == null) {
        unsetShouldInterest();
      } else {
        setShouldInterest((Double)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case THIS_STATUS:
      if (value == null) {
        unsetThisStatus();
      } else {
        setThisStatus((Integer)value);
      }
      break;

    case PLAN_VERSION:
      if (value == null) {
        unsetPlanVersion();
      } else {
        setPlanVersion((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case IS_RECONCILIATION:
      if (value == null) {
        unsetIsReconciliation();
      } else {
        setIsReconciliation((Integer)value);
      }
      break;

    case FREEZE_STATUS:
      if (value == null) {
        unsetFreezeStatus();
      } else {
        setFreezeStatus((Integer)value);
      }
      break;

    case PLAN_CYCLE_NAME:
      if (value == null) {
        unsetPlanCycleName();
      } else {
        setPlanCycleName((String)value);
      }
      break;

    case OPER_TYPE:
      if (value == null) {
        unsetOperType();
      } else {
        setOperType((Integer)value);
      }
      break;

    case OPER_COST:
      if (value == null) {
        unsetOperCost();
      } else {
        setOperCost((Double)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((Integer)value);
      }
      break;

    case OVERDUE_DAYS:
      if (value == null) {
        unsetOverdueDays();
      } else {
        setOverdueDays((Integer)value);
      }
      break;

    case OVERDUE_INTEREST:
      if (value == null) {
        unsetOverdueInterest();
      } else {
        setOverdueInterest((Double)value);
      }
      break;

    case OVERDUE_FINE:
      if (value == null) {
        unsetOverdueFine();
      } else {
        setOverdueFine((Double)value);
      }
      break;

    case ACCOUNTS_TOTAL:
      if (value == null) {
        unsetAccountsTotal();
      } else {
        setAccountsTotal((Double)value);
      }
      break;

    case RECEIVED_TOTAL:
      if (value == null) {
        unsetReceivedTotal();
      } else {
        setReceivedTotal((Double)value);
      }
      break;

    case UNCOLLECTED_TOTAL:
      if (value == null) {
        unsetUncollectedTotal();
      } else {
        setUncollectedTotal((Double)value);
      }
      break;

    case RESULTS:
      if (value == null) {
        unsetResults();
      } else {
        setResults((List<RepaymentPlanBaseDTO>)value);
      }
      break;

    case IS_EXTENSION:
      if (value == null) {
        unsetIsExtension();
      } else {
        setIsExtension((Integer)value);
      }
      break;

    case REBATE_FEE:
      if (value == null) {
        unsetRebateFee();
      } else {
        setRebateFee((Double)value);
      }
      break;

    case MONTH_MAID_RATE:
      if (value == null) {
        unsetMonthMaidRate();
      } else {
        setMonthMaidRate((Double)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case ACTUAL_OVERDUE_MONEY:
      if (value == null) {
        unsetActualOverdueMoney();
      } else {
        setActualOverdueMoney((Double)value);
      }
      break;

    case SHOULD_OVERDUE_MONEY:
      if (value == null) {
        unsetShouldOverdueMoney();
      } else {
        setShouldOverdueMoney((Double)value);
      }
      break;

    case SHOULD_PENALTY:
      if (value == null) {
        unsetShouldPenalty();
      } else {
        setShouldPenalty((Double)value);
      }
      break;

    case ACTUAL_PENALTY:
      if (value == null) {
        unsetActualPenalty();
      } else {
        setActualPenalty((Double)value);
      }
      break;

    case ACTUAL_PRINCIPAL:
      if (value == null) {
        unsetActualPrincipal();
      } else {
        setActualPrincipal((Double)value);
      }
      break;

    case ACTUAL_INTEREST:
      if (value == null) {
        unsetActualInterest();
      } else {
        setActualInterest((Double)value);
      }
      break;

    case ACTUAL_TOTAL:
      if (value == null) {
        unsetActualTotal();
      } else {
        setActualTotal((Double)value);
      }
      break;

    case OVERDUE_MONEY:
      if (value == null) {
        unsetOverdueMoney();
      } else {
        setOverdueMoney((Double)value);
      }
      break;

    case PAYMENT_ID:
      if (value == null) {
        unsetPaymentId();
      } else {
        setPaymentId((Integer)value);
      }
      break;

    case OVERDUE_ID:
      if (value == null) {
        unsetOverdueId();
      } else {
        setOverdueId((Integer)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case PID_LIST:
      if (value == null) {
        unsetPidList();
      } else {
        setPidList((List<Integer>)value);
      }
      break;

    case LOAN_TERM:
      if (value == null) {
        unsetLoanTerm();
      } else {
        setLoanTerm((Integer)value);
      }
      break;

    case REPAYMENT_ID:
      if (value == null) {
        unsetRepaymentId();
      } else {
        setRepaymentId((Integer)value);
      }
      break;

    case RENT_MONEY:
      if (value == null) {
        unsetRentMoney();
      } else {
        setRentMoney((Double)value);
      }
      break;

    case SHOULD_PAYMENT_MONEY:
      if (value == null) {
        unsetShouldPaymentMoney();
      } else {
        setShouldPaymentMoney((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_INFO_ID:
      return Integer.valueOf(getLoanInfoId());

    case GEN_DTTM:
      return getGenDttm();

    case GEN_USER_ID:
      return Integer.valueOf(getGenUserId());

    case PLAN_REPAY_DT:
      return getPlanRepayDt();

    case PLAN_CYCLE_NUM:
      return Integer.valueOf(getPlanCycleNum());

    case PLAN_TYPE:
      return Integer.valueOf(getPlanType());

    case EX_TARGET:
      return Integer.valueOf(getExTarget());

    case EX_TYPE:
      return Integer.valueOf(getExType());

    case SHOULD_PRINCIPAL:
      return Double.valueOf(getShouldPrincipal());

    case SHOULD_MANG_COST:
      return Double.valueOf(getShouldMangCost());

    case SHOULD_OTHER_COST:
      return Double.valueOf(getShouldOtherCost());

    case SHOULD_OTHER_COST_NAME:
      return getShouldOtherCostName();

    case SHOULD_INTEREST:
      return Double.valueOf(getShouldInterest());

    case TOTAL:
      return Double.valueOf(getTotal());

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case THIS_STATUS:
      return Integer.valueOf(getThisStatus());

    case PLAN_VERSION:
      return Integer.valueOf(getPlanVersion());

    case STATUS:
      return Integer.valueOf(getStatus());

    case P_ID:
      return Integer.valueOf(getPId());

    case IS_RECONCILIATION:
      return Integer.valueOf(getIsReconciliation());

    case FREEZE_STATUS:
      return Integer.valueOf(getFreezeStatus());

    case PLAN_CYCLE_NAME:
      return getPlanCycleName();

    case OPER_TYPE:
      return Integer.valueOf(getOperType());

    case OPER_COST:
      return Double.valueOf(getOperCost());

    case DATA_TYPE:
      return Integer.valueOf(getDataType());

    case OVERDUE_DAYS:
      return Integer.valueOf(getOverdueDays());

    case OVERDUE_INTEREST:
      return Double.valueOf(getOverdueInterest());

    case OVERDUE_FINE:
      return Double.valueOf(getOverdueFine());

    case ACCOUNTS_TOTAL:
      return Double.valueOf(getAccountsTotal());

    case RECEIVED_TOTAL:
      return Double.valueOf(getReceivedTotal());

    case UNCOLLECTED_TOTAL:
      return Double.valueOf(getUncollectedTotal());

    case RESULTS:
      return getResults();

    case IS_EXTENSION:
      return Integer.valueOf(getIsExtension());

    case REBATE_FEE:
      return Double.valueOf(getRebateFee());

    case MONTH_MAID_RATE:
      return Double.valueOf(getMonthMaidRate());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case ACTUAL_OVERDUE_MONEY:
      return Double.valueOf(getActualOverdueMoney());

    case SHOULD_OVERDUE_MONEY:
      return Double.valueOf(getShouldOverdueMoney());

    case SHOULD_PENALTY:
      return Double.valueOf(getShouldPenalty());

    case ACTUAL_PENALTY:
      return Double.valueOf(getActualPenalty());

    case ACTUAL_PRINCIPAL:
      return Double.valueOf(getActualPrincipal());

    case ACTUAL_INTEREST:
      return Double.valueOf(getActualInterest());

    case ACTUAL_TOTAL:
      return Double.valueOf(getActualTotal());

    case OVERDUE_MONEY:
      return Double.valueOf(getOverdueMoney());

    case PAYMENT_ID:
      return Integer.valueOf(getPaymentId());

    case OVERDUE_ID:
      return Integer.valueOf(getOverdueId());

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case PID_LIST:
      return getPidList();

    case LOAN_TERM:
      return Integer.valueOf(getLoanTerm());

    case REPAYMENT_ID:
      return Integer.valueOf(getRepaymentId());

    case RENT_MONEY:
      return Double.valueOf(getRentMoney());

    case SHOULD_PAYMENT_MONEY:
      return Double.valueOf(getShouldPaymentMoney());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_INFO_ID:
      return isSetLoanInfoId();
    case GEN_DTTM:
      return isSetGenDttm();
    case GEN_USER_ID:
      return isSetGenUserId();
    case PLAN_REPAY_DT:
      return isSetPlanRepayDt();
    case PLAN_CYCLE_NUM:
      return isSetPlanCycleNum();
    case PLAN_TYPE:
      return isSetPlanType();
    case EX_TARGET:
      return isSetExTarget();
    case EX_TYPE:
      return isSetExType();
    case SHOULD_PRINCIPAL:
      return isSetShouldPrincipal();
    case SHOULD_MANG_COST:
      return isSetShouldMangCost();
    case SHOULD_OTHER_COST:
      return isSetShouldOtherCost();
    case SHOULD_OTHER_COST_NAME:
      return isSetShouldOtherCostName();
    case SHOULD_INTEREST:
      return isSetShouldInterest();
    case TOTAL:
      return isSetTotal();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case THIS_STATUS:
      return isSetThisStatus();
    case PLAN_VERSION:
      return isSetPlanVersion();
    case STATUS:
      return isSetStatus();
    case P_ID:
      return isSetPId();
    case IS_RECONCILIATION:
      return isSetIsReconciliation();
    case FREEZE_STATUS:
      return isSetFreezeStatus();
    case PLAN_CYCLE_NAME:
      return isSetPlanCycleName();
    case OPER_TYPE:
      return isSetOperType();
    case OPER_COST:
      return isSetOperCost();
    case DATA_TYPE:
      return isSetDataType();
    case OVERDUE_DAYS:
      return isSetOverdueDays();
    case OVERDUE_INTEREST:
      return isSetOverdueInterest();
    case OVERDUE_FINE:
      return isSetOverdueFine();
    case ACCOUNTS_TOTAL:
      return isSetAccountsTotal();
    case RECEIVED_TOTAL:
      return isSetReceivedTotal();
    case UNCOLLECTED_TOTAL:
      return isSetUncollectedTotal();
    case RESULTS:
      return isSetResults();
    case IS_EXTENSION:
      return isSetIsExtension();
    case REBATE_FEE:
      return isSetRebateFee();
    case MONTH_MAID_RATE:
      return isSetMonthMaidRate();
    case PROJECT_ID:
      return isSetProjectId();
    case ACTUAL_OVERDUE_MONEY:
      return isSetActualOverdueMoney();
    case SHOULD_OVERDUE_MONEY:
      return isSetShouldOverdueMoney();
    case SHOULD_PENALTY:
      return isSetShouldPenalty();
    case ACTUAL_PENALTY:
      return isSetActualPenalty();
    case ACTUAL_PRINCIPAL:
      return isSetActualPrincipal();
    case ACTUAL_INTEREST:
      return isSetActualInterest();
    case ACTUAL_TOTAL:
      return isSetActualTotal();
    case OVERDUE_MONEY:
      return isSetOverdueMoney();
    case PAYMENT_ID:
      return isSetPaymentId();
    case OVERDUE_ID:
      return isSetOverdueId();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case PID_LIST:
      return isSetPidList();
    case LOAN_TERM:
      return isSetLoanTerm();
    case REPAYMENT_ID:
      return isSetRepaymentId();
    case RENT_MONEY:
      return isSetRentMoney();
    case SHOULD_PAYMENT_MONEY:
      return isSetShouldPaymentMoney();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentPlanBaseDTO)
      return this.equals((RepaymentPlanBaseDTO)that);
    return false;
  }

  public boolean equals(RepaymentPlanBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_loanInfoId = true;
    boolean that_present_loanInfoId = true;
    if (this_present_loanInfoId || that_present_loanInfoId) {
      if (!(this_present_loanInfoId && that_present_loanInfoId))
        return false;
      if (this.loanInfoId != that.loanInfoId)
        return false;
    }

    boolean this_present_genDttm = true && this.isSetGenDttm();
    boolean that_present_genDttm = true && that.isSetGenDttm();
    if (this_present_genDttm || that_present_genDttm) {
      if (!(this_present_genDttm && that_present_genDttm))
        return false;
      if (!this.genDttm.equals(that.genDttm))
        return false;
    }

    boolean this_present_genUserId = true;
    boolean that_present_genUserId = true;
    if (this_present_genUserId || that_present_genUserId) {
      if (!(this_present_genUserId && that_present_genUserId))
        return false;
      if (this.genUserId != that.genUserId)
        return false;
    }

    boolean this_present_planRepayDt = true && this.isSetPlanRepayDt();
    boolean that_present_planRepayDt = true && that.isSetPlanRepayDt();
    if (this_present_planRepayDt || that_present_planRepayDt) {
      if (!(this_present_planRepayDt && that_present_planRepayDt))
        return false;
      if (!this.planRepayDt.equals(that.planRepayDt))
        return false;
    }

    boolean this_present_planCycleNum = true;
    boolean that_present_planCycleNum = true;
    if (this_present_planCycleNum || that_present_planCycleNum) {
      if (!(this_present_planCycleNum && that_present_planCycleNum))
        return false;
      if (this.planCycleNum != that.planCycleNum)
        return false;
    }

    boolean this_present_planType = true;
    boolean that_present_planType = true;
    if (this_present_planType || that_present_planType) {
      if (!(this_present_planType && that_present_planType))
        return false;
      if (this.planType != that.planType)
        return false;
    }

    boolean this_present_exTarget = true;
    boolean that_present_exTarget = true;
    if (this_present_exTarget || that_present_exTarget) {
      if (!(this_present_exTarget && that_present_exTarget))
        return false;
      if (this.exTarget != that.exTarget)
        return false;
    }

    boolean this_present_exType = true;
    boolean that_present_exType = true;
    if (this_present_exType || that_present_exType) {
      if (!(this_present_exType && that_present_exType))
        return false;
      if (this.exType != that.exType)
        return false;
    }

    boolean this_present_shouldPrincipal = true;
    boolean that_present_shouldPrincipal = true;
    if (this_present_shouldPrincipal || that_present_shouldPrincipal) {
      if (!(this_present_shouldPrincipal && that_present_shouldPrincipal))
        return false;
      if (this.shouldPrincipal != that.shouldPrincipal)
        return false;
    }

    boolean this_present_shouldMangCost = true;
    boolean that_present_shouldMangCost = true;
    if (this_present_shouldMangCost || that_present_shouldMangCost) {
      if (!(this_present_shouldMangCost && that_present_shouldMangCost))
        return false;
      if (this.shouldMangCost != that.shouldMangCost)
        return false;
    }

    boolean this_present_shouldOtherCost = true;
    boolean that_present_shouldOtherCost = true;
    if (this_present_shouldOtherCost || that_present_shouldOtherCost) {
      if (!(this_present_shouldOtherCost && that_present_shouldOtherCost))
        return false;
      if (this.shouldOtherCost != that.shouldOtherCost)
        return false;
    }

    boolean this_present_shouldOtherCostName = true && this.isSetShouldOtherCostName();
    boolean that_present_shouldOtherCostName = true && that.isSetShouldOtherCostName();
    if (this_present_shouldOtherCostName || that_present_shouldOtherCostName) {
      if (!(this_present_shouldOtherCostName && that_present_shouldOtherCostName))
        return false;
      if (!this.shouldOtherCostName.equals(that.shouldOtherCostName))
        return false;
    }

    boolean this_present_shouldInterest = true;
    boolean that_present_shouldInterest = true;
    if (this_present_shouldInterest || that_present_shouldInterest) {
      if (!(this_present_shouldInterest && that_present_shouldInterest))
        return false;
      if (this.shouldInterest != that.shouldInterest)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_thisStatus = true;
    boolean that_present_thisStatus = true;
    if (this_present_thisStatus || that_present_thisStatus) {
      if (!(this_present_thisStatus && that_present_thisStatus))
        return false;
      if (this.thisStatus != that.thisStatus)
        return false;
    }

    boolean this_present_planVersion = true;
    boolean that_present_planVersion = true;
    if (this_present_planVersion || that_present_planVersion) {
      if (!(this_present_planVersion && that_present_planVersion))
        return false;
      if (this.planVersion != that.planVersion)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_pId = true;
    boolean that_present_pId = true;
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_isReconciliation = true;
    boolean that_present_isReconciliation = true;
    if (this_present_isReconciliation || that_present_isReconciliation) {
      if (!(this_present_isReconciliation && that_present_isReconciliation))
        return false;
      if (this.isReconciliation != that.isReconciliation)
        return false;
    }

    boolean this_present_freezeStatus = true;
    boolean that_present_freezeStatus = true;
    if (this_present_freezeStatus || that_present_freezeStatus) {
      if (!(this_present_freezeStatus && that_present_freezeStatus))
        return false;
      if (this.freezeStatus != that.freezeStatus)
        return false;
    }

    boolean this_present_planCycleName = true && this.isSetPlanCycleName();
    boolean that_present_planCycleName = true && that.isSetPlanCycleName();
    if (this_present_planCycleName || that_present_planCycleName) {
      if (!(this_present_planCycleName && that_present_planCycleName))
        return false;
      if (!this.planCycleName.equals(that.planCycleName))
        return false;
    }

    boolean this_present_operType = true;
    boolean that_present_operType = true;
    if (this_present_operType || that_present_operType) {
      if (!(this_present_operType && that_present_operType))
        return false;
      if (this.operType != that.operType)
        return false;
    }

    boolean this_present_operCost = true;
    boolean that_present_operCost = true;
    if (this_present_operCost || that_present_operCost) {
      if (!(this_present_operCost && that_present_operCost))
        return false;
      if (this.operCost != that.operCost)
        return false;
    }

    boolean this_present_dataType = true;
    boolean that_present_dataType = true;
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (this.dataType != that.dataType)
        return false;
    }

    boolean this_present_overdueDays = true;
    boolean that_present_overdueDays = true;
    if (this_present_overdueDays || that_present_overdueDays) {
      if (!(this_present_overdueDays && that_present_overdueDays))
        return false;
      if (this.overdueDays != that.overdueDays)
        return false;
    }

    boolean this_present_overdueInterest = true;
    boolean that_present_overdueInterest = true;
    if (this_present_overdueInterest || that_present_overdueInterest) {
      if (!(this_present_overdueInterest && that_present_overdueInterest))
        return false;
      if (this.overdueInterest != that.overdueInterest)
        return false;
    }

    boolean this_present_overdueFine = true;
    boolean that_present_overdueFine = true;
    if (this_present_overdueFine || that_present_overdueFine) {
      if (!(this_present_overdueFine && that_present_overdueFine))
        return false;
      if (this.overdueFine != that.overdueFine)
        return false;
    }

    boolean this_present_accountsTotal = true;
    boolean that_present_accountsTotal = true;
    if (this_present_accountsTotal || that_present_accountsTotal) {
      if (!(this_present_accountsTotal && that_present_accountsTotal))
        return false;
      if (this.accountsTotal != that.accountsTotal)
        return false;
    }

    boolean this_present_receivedTotal = true;
    boolean that_present_receivedTotal = true;
    if (this_present_receivedTotal || that_present_receivedTotal) {
      if (!(this_present_receivedTotal && that_present_receivedTotal))
        return false;
      if (this.receivedTotal != that.receivedTotal)
        return false;
    }

    boolean this_present_uncollectedTotal = true;
    boolean that_present_uncollectedTotal = true;
    if (this_present_uncollectedTotal || that_present_uncollectedTotal) {
      if (!(this_present_uncollectedTotal && that_present_uncollectedTotal))
        return false;
      if (this.uncollectedTotal != that.uncollectedTotal)
        return false;
    }

    boolean this_present_results = true && this.isSetResults();
    boolean that_present_results = true && that.isSetResults();
    if (this_present_results || that_present_results) {
      if (!(this_present_results && that_present_results))
        return false;
      if (!this.results.equals(that.results))
        return false;
    }

    boolean this_present_isExtension = true;
    boolean that_present_isExtension = true;
    if (this_present_isExtension || that_present_isExtension) {
      if (!(this_present_isExtension && that_present_isExtension))
        return false;
      if (this.isExtension != that.isExtension)
        return false;
    }

    boolean this_present_rebateFee = true;
    boolean that_present_rebateFee = true;
    if (this_present_rebateFee || that_present_rebateFee) {
      if (!(this_present_rebateFee && that_present_rebateFee))
        return false;
      if (this.rebateFee != that.rebateFee)
        return false;
    }

    boolean this_present_monthMaidRate = true;
    boolean that_present_monthMaidRate = true;
    if (this_present_monthMaidRate || that_present_monthMaidRate) {
      if (!(this_present_monthMaidRate && that_present_monthMaidRate))
        return false;
      if (this.monthMaidRate != that.monthMaidRate)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_actualOverdueMoney = true;
    boolean that_present_actualOverdueMoney = true;
    if (this_present_actualOverdueMoney || that_present_actualOverdueMoney) {
      if (!(this_present_actualOverdueMoney && that_present_actualOverdueMoney))
        return false;
      if (this.actualOverdueMoney != that.actualOverdueMoney)
        return false;
    }

    boolean this_present_shouldOverdueMoney = true;
    boolean that_present_shouldOverdueMoney = true;
    if (this_present_shouldOverdueMoney || that_present_shouldOverdueMoney) {
      if (!(this_present_shouldOverdueMoney && that_present_shouldOverdueMoney))
        return false;
      if (this.shouldOverdueMoney != that.shouldOverdueMoney)
        return false;
    }

    boolean this_present_shouldPenalty = true;
    boolean that_present_shouldPenalty = true;
    if (this_present_shouldPenalty || that_present_shouldPenalty) {
      if (!(this_present_shouldPenalty && that_present_shouldPenalty))
        return false;
      if (this.shouldPenalty != that.shouldPenalty)
        return false;
    }

    boolean this_present_actualPenalty = true;
    boolean that_present_actualPenalty = true;
    if (this_present_actualPenalty || that_present_actualPenalty) {
      if (!(this_present_actualPenalty && that_present_actualPenalty))
        return false;
      if (this.actualPenalty != that.actualPenalty)
        return false;
    }

    boolean this_present_actualPrincipal = true;
    boolean that_present_actualPrincipal = true;
    if (this_present_actualPrincipal || that_present_actualPrincipal) {
      if (!(this_present_actualPrincipal && that_present_actualPrincipal))
        return false;
      if (this.actualPrincipal != that.actualPrincipal)
        return false;
    }

    boolean this_present_actualInterest = true;
    boolean that_present_actualInterest = true;
    if (this_present_actualInterest || that_present_actualInterest) {
      if (!(this_present_actualInterest && that_present_actualInterest))
        return false;
      if (this.actualInterest != that.actualInterest)
        return false;
    }

    boolean this_present_actualTotal = true;
    boolean that_present_actualTotal = true;
    if (this_present_actualTotal || that_present_actualTotal) {
      if (!(this_present_actualTotal && that_present_actualTotal))
        return false;
      if (this.actualTotal != that.actualTotal)
        return false;
    }

    boolean this_present_overdueMoney = true;
    boolean that_present_overdueMoney = true;
    if (this_present_overdueMoney || that_present_overdueMoney) {
      if (!(this_present_overdueMoney && that_present_overdueMoney))
        return false;
      if (this.overdueMoney != that.overdueMoney)
        return false;
    }

    boolean this_present_paymentId = true;
    boolean that_present_paymentId = true;
    if (this_present_paymentId || that_present_paymentId) {
      if (!(this_present_paymentId && that_present_paymentId))
        return false;
      if (this.paymentId != that.paymentId)
        return false;
    }

    boolean this_present_overdueId = true;
    boolean that_present_overdueId = true;
    if (this_present_overdueId || that_present_overdueId) {
      if (!(this_present_overdueId && that_present_overdueId))
        return false;
      if (this.overdueId != that.overdueId)
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_pidList = true && this.isSetPidList();
    boolean that_present_pidList = true && that.isSetPidList();
    if (this_present_pidList || that_present_pidList) {
      if (!(this_present_pidList && that_present_pidList))
        return false;
      if (!this.pidList.equals(that.pidList))
        return false;
    }

    boolean this_present_loanTerm = true;
    boolean that_present_loanTerm = true;
    if (this_present_loanTerm || that_present_loanTerm) {
      if (!(this_present_loanTerm && that_present_loanTerm))
        return false;
      if (this.loanTerm != that.loanTerm)
        return false;
    }

    boolean this_present_repaymentId = true;
    boolean that_present_repaymentId = true;
    if (this_present_repaymentId || that_present_repaymentId) {
      if (!(this_present_repaymentId && that_present_repaymentId))
        return false;
      if (this.repaymentId != that.repaymentId)
        return false;
    }

    boolean this_present_rentMoney = true;
    boolean that_present_rentMoney = true;
    if (this_present_rentMoney || that_present_rentMoney) {
      if (!(this_present_rentMoney && that_present_rentMoney))
        return false;
      if (this.rentMoney != that.rentMoney)
        return false;
    }

    boolean this_present_shouldPaymentMoney = true;
    boolean that_present_shouldPaymentMoney = true;
    if (this_present_shouldPaymentMoney || that_present_shouldPaymentMoney) {
      if (!(this_present_shouldPaymentMoney && that_present_shouldPaymentMoney))
        return false;
      if (this.shouldPaymentMoney != that.shouldPaymentMoney)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanInfoId = true;
    list.add(present_loanInfoId);
    if (present_loanInfoId)
      list.add(loanInfoId);

    boolean present_genDttm = true && (isSetGenDttm());
    list.add(present_genDttm);
    if (present_genDttm)
      list.add(genDttm);

    boolean present_genUserId = true;
    list.add(present_genUserId);
    if (present_genUserId)
      list.add(genUserId);

    boolean present_planRepayDt = true && (isSetPlanRepayDt());
    list.add(present_planRepayDt);
    if (present_planRepayDt)
      list.add(planRepayDt);

    boolean present_planCycleNum = true;
    list.add(present_planCycleNum);
    if (present_planCycleNum)
      list.add(planCycleNum);

    boolean present_planType = true;
    list.add(present_planType);
    if (present_planType)
      list.add(planType);

    boolean present_exTarget = true;
    list.add(present_exTarget);
    if (present_exTarget)
      list.add(exTarget);

    boolean present_exType = true;
    list.add(present_exType);
    if (present_exType)
      list.add(exType);

    boolean present_shouldPrincipal = true;
    list.add(present_shouldPrincipal);
    if (present_shouldPrincipal)
      list.add(shouldPrincipal);

    boolean present_shouldMangCost = true;
    list.add(present_shouldMangCost);
    if (present_shouldMangCost)
      list.add(shouldMangCost);

    boolean present_shouldOtherCost = true;
    list.add(present_shouldOtherCost);
    if (present_shouldOtherCost)
      list.add(shouldOtherCost);

    boolean present_shouldOtherCostName = true && (isSetShouldOtherCostName());
    list.add(present_shouldOtherCostName);
    if (present_shouldOtherCostName)
      list.add(shouldOtherCostName);

    boolean present_shouldInterest = true;
    list.add(present_shouldInterest);
    if (present_shouldInterest)
      list.add(shouldInterest);

    boolean present_total = true;
    list.add(present_total);
    if (present_total)
      list.add(total);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_thisStatus = true;
    list.add(present_thisStatus);
    if (present_thisStatus)
      list.add(thisStatus);

    boolean present_planVersion = true;
    list.add(present_planVersion);
    if (present_planVersion)
      list.add(planVersion);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_pId = true;
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_isReconciliation = true;
    list.add(present_isReconciliation);
    if (present_isReconciliation)
      list.add(isReconciliation);

    boolean present_freezeStatus = true;
    list.add(present_freezeStatus);
    if (present_freezeStatus)
      list.add(freezeStatus);

    boolean present_planCycleName = true && (isSetPlanCycleName());
    list.add(present_planCycleName);
    if (present_planCycleName)
      list.add(planCycleName);

    boolean present_operType = true;
    list.add(present_operType);
    if (present_operType)
      list.add(operType);

    boolean present_operCost = true;
    list.add(present_operCost);
    if (present_operCost)
      list.add(operCost);

    boolean present_dataType = true;
    list.add(present_dataType);
    if (present_dataType)
      list.add(dataType);

    boolean present_overdueDays = true;
    list.add(present_overdueDays);
    if (present_overdueDays)
      list.add(overdueDays);

    boolean present_overdueInterest = true;
    list.add(present_overdueInterest);
    if (present_overdueInterest)
      list.add(overdueInterest);

    boolean present_overdueFine = true;
    list.add(present_overdueFine);
    if (present_overdueFine)
      list.add(overdueFine);

    boolean present_accountsTotal = true;
    list.add(present_accountsTotal);
    if (present_accountsTotal)
      list.add(accountsTotal);

    boolean present_receivedTotal = true;
    list.add(present_receivedTotal);
    if (present_receivedTotal)
      list.add(receivedTotal);

    boolean present_uncollectedTotal = true;
    list.add(present_uncollectedTotal);
    if (present_uncollectedTotal)
      list.add(uncollectedTotal);

    boolean present_results = true && (isSetResults());
    list.add(present_results);
    if (present_results)
      list.add(results);

    boolean present_isExtension = true;
    list.add(present_isExtension);
    if (present_isExtension)
      list.add(isExtension);

    boolean present_rebateFee = true;
    list.add(present_rebateFee);
    if (present_rebateFee)
      list.add(rebateFee);

    boolean present_monthMaidRate = true;
    list.add(present_monthMaidRate);
    if (present_monthMaidRate)
      list.add(monthMaidRate);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_actualOverdueMoney = true;
    list.add(present_actualOverdueMoney);
    if (present_actualOverdueMoney)
      list.add(actualOverdueMoney);

    boolean present_shouldOverdueMoney = true;
    list.add(present_shouldOverdueMoney);
    if (present_shouldOverdueMoney)
      list.add(shouldOverdueMoney);

    boolean present_shouldPenalty = true;
    list.add(present_shouldPenalty);
    if (present_shouldPenalty)
      list.add(shouldPenalty);

    boolean present_actualPenalty = true;
    list.add(present_actualPenalty);
    if (present_actualPenalty)
      list.add(actualPenalty);

    boolean present_actualPrincipal = true;
    list.add(present_actualPrincipal);
    if (present_actualPrincipal)
      list.add(actualPrincipal);

    boolean present_actualInterest = true;
    list.add(present_actualInterest);
    if (present_actualInterest)
      list.add(actualInterest);

    boolean present_actualTotal = true;
    list.add(present_actualTotal);
    if (present_actualTotal)
      list.add(actualTotal);

    boolean present_overdueMoney = true;
    list.add(present_overdueMoney);
    if (present_overdueMoney)
      list.add(overdueMoney);

    boolean present_paymentId = true;
    list.add(present_paymentId);
    if (present_paymentId)
      list.add(paymentId);

    boolean present_overdueId = true;
    list.add(present_overdueId);
    if (present_overdueId)
      list.add(overdueId);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_pidList = true && (isSetPidList());
    list.add(present_pidList);
    if (present_pidList)
      list.add(pidList);

    boolean present_loanTerm = true;
    list.add(present_loanTerm);
    if (present_loanTerm)
      list.add(loanTerm);

    boolean present_repaymentId = true;
    list.add(present_repaymentId);
    if (present_repaymentId)
      list.add(repaymentId);

    boolean present_rentMoney = true;
    list.add(present_rentMoney);
    if (present_rentMoney)
      list.add(rentMoney);

    boolean present_shouldPaymentMoney = true;
    list.add(present_shouldPaymentMoney);
    if (present_shouldPaymentMoney)
      list.add(shouldPaymentMoney);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentPlanBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanInfoId()).compareTo(other.isSetLoanInfoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanInfoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanInfoId, other.loanInfoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenDttm()).compareTo(other.isSetGenDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genDttm, other.genDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGenUserId()).compareTo(other.isSetGenUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGenUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genUserId, other.genUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanRepayDt()).compareTo(other.isSetPlanRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planRepayDt, other.planRepayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleNum()).compareTo(other.isSetPlanCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleNum, other.planCycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanType()).compareTo(other.isSetPlanType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planType, other.planType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExTarget()).compareTo(other.isSetExTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exTarget, other.exTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExType()).compareTo(other.isSetExType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exType, other.exType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPrincipal()).compareTo(other.isSetShouldPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPrincipal, other.shouldPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldMangCost()).compareTo(other.isSetShouldMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldMangCost, other.shouldMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCost()).compareTo(other.isSetShouldOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCost, other.shouldOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOtherCostName()).compareTo(other.isSetShouldOtherCostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOtherCostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOtherCostName, other.shouldOtherCostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldInterest()).compareTo(other.isSetShouldInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldInterest, other.shouldInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThisStatus()).compareTo(other.isSetThisStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThisStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thisStatus, other.thisStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanVersion()).compareTo(other.isSetPlanVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planVersion, other.planVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsReconciliation()).compareTo(other.isSetIsReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isReconciliation, other.isReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFreezeStatus()).compareTo(other.isSetFreezeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreezeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freezeStatus, other.freezeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanCycleName()).compareTo(other.isSetPlanCycleName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanCycleName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planCycleName, other.planCycleName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperType()).compareTo(other.isSetOperType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operType, other.operType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperCost()).compareTo(other.isSetOperCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operCost, other.operCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDays()).compareTo(other.isSetOverdueDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDays, other.overdueDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueInterest()).compareTo(other.isSetOverdueInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueInterest, other.overdueInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueFine()).compareTo(other.isSetOverdueFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueFine, other.overdueFine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountsTotal()).compareTo(other.isSetAccountsTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountsTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountsTotal, other.accountsTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedTotal()).compareTo(other.isSetReceivedTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedTotal, other.receivedTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUncollectedTotal()).compareTo(other.isSetUncollectedTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUncollectedTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uncollectedTotal, other.uncollectedTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResults()).compareTo(other.isSetResults());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResults()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.results, other.results);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsExtension()).compareTo(other.isSetIsExtension());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExtension()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExtension, other.isExtension);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRebateFee()).compareTo(other.isSetRebateFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRebateFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rebateFee, other.rebateFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthMaidRate()).compareTo(other.isSetMonthMaidRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthMaidRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthMaidRate, other.monthMaidRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualOverdueMoney()).compareTo(other.isSetActualOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualOverdueMoney, other.actualOverdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOverdueMoney()).compareTo(other.isSetShouldOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOverdueMoney, other.shouldOverdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPenalty()).compareTo(other.isSetShouldPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPenalty, other.shouldPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPenalty()).compareTo(other.isSetActualPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPenalty, other.actualPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPrincipal()).compareTo(other.isSetActualPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPrincipal, other.actualPrincipal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualInterest()).compareTo(other.isSetActualInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualInterest, other.actualInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualTotal()).compareTo(other.isSetActualTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualTotal, other.actualTotal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueMoney()).compareTo(other.isSetOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueMoney, other.overdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentId()).compareTo(other.isSetPaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentId, other.paymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueId()).compareTo(other.isSetOverdueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueId, other.overdueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPidList()).compareTo(other.isSetPidList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPidList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pidList, other.pidList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanTerm()).compareTo(other.isSetLoanTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanTerm, other.loanTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentId()).compareTo(other.isSetRepaymentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentId, other.repaymentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRentMoney()).compareTo(other.isSetRentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rentMoney, other.rentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPaymentMoney()).compareTo(other.isSetShouldPaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPaymentMoney, other.shouldPaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentPlanBaseDTO(");
    boolean first = true;

    sb.append("loanInfoId:");
    sb.append(this.loanInfoId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("genDttm:");
    if (this.genDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.genDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("genUserId:");
    sb.append(this.genUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planRepayDt:");
    if (this.planRepayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planRepayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleNum:");
    sb.append(this.planCycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planType:");
    sb.append(this.planType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exTarget:");
    sb.append(this.exTarget);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exType:");
    sb.append(this.exType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPrincipal:");
    sb.append(this.shouldPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldMangCost:");
    sb.append(this.shouldMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCost:");
    sb.append(this.shouldOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOtherCostName:");
    if (this.shouldOtherCostName == null) {
      sb.append("null");
    } else {
      sb.append(this.shouldOtherCostName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldInterest:");
    sb.append(this.shouldInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thisStatus:");
    sb.append(this.thisStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planVersion:");
    sb.append(this.planVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pId:");
    sb.append(this.pId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isReconciliation:");
    sb.append(this.isReconciliation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freezeStatus:");
    sb.append(this.freezeStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planCycleName:");
    if (this.planCycleName == null) {
      sb.append("null");
    } else {
      sb.append(this.planCycleName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operType:");
    sb.append(this.operType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operCost:");
    sb.append(this.operCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataType:");
    sb.append(this.dataType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDays:");
    sb.append(this.overdueDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueInterest:");
    sb.append(this.overdueInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueFine:");
    sb.append(this.overdueFine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountsTotal:");
    sb.append(this.accountsTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receivedTotal:");
    sb.append(this.receivedTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uncollectedTotal:");
    sb.append(this.uncollectedTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("results:");
    if (this.results == null) {
      sb.append("null");
    } else {
      sb.append(this.results);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isExtension:");
    sb.append(this.isExtension);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rebateFee:");
    sb.append(this.rebateFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthMaidRate:");
    sb.append(this.monthMaidRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualOverdueMoney:");
    sb.append(this.actualOverdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOverdueMoney:");
    sb.append(this.shouldOverdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPenalty:");
    sb.append(this.shouldPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPenalty:");
    sb.append(this.actualPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPrincipal:");
    sb.append(this.actualPrincipal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualInterest:");
    sb.append(this.actualInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualTotal:");
    sb.append(this.actualTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueMoney:");
    sb.append(this.overdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentId:");
    sb.append(this.paymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueId:");
    sb.append(this.overdueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pidList:");
    if (this.pidList == null) {
      sb.append("null");
    } else {
      sb.append(this.pidList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanTerm:");
    sb.append(this.loanTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentId:");
    sb.append(this.repaymentId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rentMoney:");
    sb.append(this.rentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPaymentMoney:");
    sb.append(this.shouldPaymentMoney);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentPlanBaseDTOStandardSchemeFactory implements SchemeFactory {
    public RepaymentPlanBaseDTOStandardScheme getScheme() {
      return new RepaymentPlanBaseDTOStandardScheme();
    }
  }

  private static class RepaymentPlanBaseDTOStandardScheme extends StandardScheme<RepaymentPlanBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentPlanBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_INFO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanInfoId = iprot.readI32();
              struct.setLoanInfoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GEN_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.genDttm = iprot.readString();
              struct.setGenDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GEN_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.genUserId = iprot.readI32();
              struct.setGenUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLAN_REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planRepayDt = iprot.readString();
              struct.setPlanRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PLAN_CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planCycleNum = iprot.readI32();
              struct.setPlanCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PLAN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planType = iprot.readI32();
              struct.setPlanTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EX_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exTarget = iprot.readI32();
              struct.setExTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EX_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exType = iprot.readI32();
              struct.setExTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHOULD_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPrincipal = iprot.readDouble();
              struct.setShouldPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SHOULD_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldMangCost = iprot.readDouble();
              struct.setShouldMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SHOULD_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOtherCost = iprot.readDouble();
              struct.setShouldOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHOULD_OTHER_COST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.shouldOtherCostName = iprot.readString();
              struct.setShouldOtherCostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SHOULD_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldInterest = iprot.readDouble();
              struct.setShouldInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // THIS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thisStatus = iprot.readI32();
              struct.setThisStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PLAN_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.planVersion = iprot.readI32();
              struct.setPlanVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // IS_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isReconciliation = iprot.readI32();
              struct.setIsReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FREEZE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.freezeStatus = iprot.readI32();
              struct.setFreezeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PLAN_CYCLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planCycleName = iprot.readString();
              struct.setPlanCycleNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // OPER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operType = iprot.readI32();
              struct.setOperTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // OPER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.operCost = iprot.readDouble();
              struct.setOperCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataType = iprot.readI32();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // OVERDUE_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDays = iprot.readI32();
              struct.setOverdueDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // OVERDUE_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueInterest = iprot.readDouble();
              struct.setOverdueInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // OVERDUE_FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueFine = iprot.readDouble();
              struct.setOverdueFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ACCOUNTS_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accountsTotal = iprot.readDouble();
              struct.setAccountsTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // RECEIVED_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receivedTotal = iprot.readDouble();
              struct.setReceivedTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // UNCOLLECTED_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.uncollectedTotal = iprot.readDouble();
              struct.setUncollectedTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // RESULTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.results = new ArrayList<RepaymentPlanBaseDTO>(_list0.size);
                RepaymentPlanBaseDTO _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RepaymentPlanBaseDTO();
                  _elem1.read(iprot);
                  struct.results.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setResultsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // IS_EXTENSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isExtension = iprot.readI32();
              struct.setIsExtensionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // REBATE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rebateFee = iprot.readDouble();
              struct.setRebateFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // MONTH_MAID_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthMaidRate = iprot.readDouble();
              struct.setMonthMaidRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // ACTUAL_OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualOverdueMoney = iprot.readDouble();
              struct.setActualOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // SHOULD_OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOverdueMoney = iprot.readDouble();
              struct.setShouldOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // SHOULD_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPenalty = iprot.readDouble();
              struct.setShouldPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // ACTUAL_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualPenalty = iprot.readDouble();
              struct.setActualPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // ACTUAL_PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualPrincipal = iprot.readDouble();
              struct.setActualPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // ACTUAL_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualInterest = iprot.readDouble();
              struct.setActualInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // ACTUAL_TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualTotal = iprot.readDouble();
              struct.setActualTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueMoney = iprot.readDouble();
              struct.setOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // PAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentId = iprot.readI32();
              struct.setPaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // OVERDUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueId = iprot.readI32();
              struct.setOverdueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // PID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.pidList = new ArrayList<Integer>(_list3.size);
                int _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI32();
                  struct.pidList.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setPidListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // LOAN_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanTerm = iprot.readI32();
              struct.setLoanTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // REPAYMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentId = iprot.readI32();
              struct.setRepaymentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // RENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rentMoney = iprot.readDouble();
              struct.setRentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // SHOULD_PAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPaymentMoney = iprot.readDouble();
              struct.setShouldPaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentPlanBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_INFO_ID_FIELD_DESC);
      oprot.writeI32(struct.loanInfoId);
      oprot.writeFieldEnd();
      if (struct.genDttm != null) {
        oprot.writeFieldBegin(GEN_DTTM_FIELD_DESC);
        oprot.writeString(struct.genDttm);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GEN_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.genUserId);
      oprot.writeFieldEnd();
      if (struct.planRepayDt != null) {
        oprot.writeFieldBegin(PLAN_REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.planRepayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAN_CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.planCycleNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_TYPE_FIELD_DESC);
      oprot.writeI32(struct.planType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EX_TARGET_FIELD_DESC);
      oprot.writeI32(struct.exTarget);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EX_TYPE_FIELD_DESC);
      oprot.writeI32(struct.exType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.shouldPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.shouldOtherCost);
      oprot.writeFieldEnd();
      if (struct.shouldOtherCostName != null) {
        oprot.writeFieldBegin(SHOULD_OTHER_COST_NAME_FIELD_DESC);
        oprot.writeString(struct.shouldOtherCostName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHOULD_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.shouldInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THIS_STATUS_FIELD_DESC);
      oprot.writeI32(struct.thisStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLAN_VERSION_FIELD_DESC);
      oprot.writeI32(struct.planVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(P_ID_FIELD_DESC);
      oprot.writeI32(struct.pId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RECONCILIATION_FIELD_DESC);
      oprot.writeI32(struct.isReconciliation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FREEZE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.freezeStatus);
      oprot.writeFieldEnd();
      if (struct.planCycleName != null) {
        oprot.writeFieldBegin(PLAN_CYCLE_NAME_FIELD_DESC);
        oprot.writeString(struct.planCycleName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.operType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OPER_COST_FIELD_DESC);
      oprot.writeDouble(struct.operCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
      oprot.writeI32(struct.dataType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAYS_FIELD_DESC);
      oprot.writeI32(struct.overdueDays);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.overdueInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_FINE_FIELD_DESC);
      oprot.writeDouble(struct.overdueFine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCOUNTS_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.accountsTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECEIVED_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.receivedTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNCOLLECTED_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.uncollectedTotal);
      oprot.writeFieldEnd();
      if (struct.results != null) {
        oprot.writeFieldBegin(RESULTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.results.size()));
          for (RepaymentPlanBaseDTO _iter6 : struct.results)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_EXTENSION_FIELD_DESC);
      oprot.writeI32(struct.isExtension);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REBATE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.rebateFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_MAID_RATE_FIELD_DESC);
      oprot.writeDouble(struct.monthMaidRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.actualOverdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.shouldOverdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.shouldPenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.actualPenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.actualPrincipal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.actualInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.actualTotal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.overdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.paymentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_ID_FIELD_DESC);
      oprot.writeI32(struct.overdueId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      if (struct.pidList != null) {
        oprot.writeFieldBegin(PID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.pidList.size()));
          for (int _iter7 : struct.pidList)
          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_TERM_FIELD_DESC);
      oprot.writeI32(struct.loanTerm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_ID_FIELD_DESC);
      oprot.writeI32(struct.repaymentId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.rentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.shouldPaymentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentPlanBaseDTOTupleSchemeFactory implements SchemeFactory {
    public RepaymentPlanBaseDTOTupleScheme getScheme() {
      return new RepaymentPlanBaseDTOTupleScheme();
    }
  }

  private static class RepaymentPlanBaseDTOTupleScheme extends TupleScheme<RepaymentPlanBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentPlanBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanInfoId()) {
        optionals.set(0);
      }
      if (struct.isSetGenDttm()) {
        optionals.set(1);
      }
      if (struct.isSetGenUserId()) {
        optionals.set(2);
      }
      if (struct.isSetPlanRepayDt()) {
        optionals.set(3);
      }
      if (struct.isSetPlanCycleNum()) {
        optionals.set(4);
      }
      if (struct.isSetPlanType()) {
        optionals.set(5);
      }
      if (struct.isSetExTarget()) {
        optionals.set(6);
      }
      if (struct.isSetExType()) {
        optionals.set(7);
      }
      if (struct.isSetShouldPrincipal()) {
        optionals.set(8);
      }
      if (struct.isSetShouldMangCost()) {
        optionals.set(9);
      }
      if (struct.isSetShouldOtherCost()) {
        optionals.set(10);
      }
      if (struct.isSetShouldOtherCostName()) {
        optionals.set(11);
      }
      if (struct.isSetShouldInterest()) {
        optionals.set(12);
      }
      if (struct.isSetTotal()) {
        optionals.set(13);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(14);
      }
      if (struct.isSetThisStatus()) {
        optionals.set(15);
      }
      if (struct.isSetPlanVersion()) {
        optionals.set(16);
      }
      if (struct.isSetStatus()) {
        optionals.set(17);
      }
      if (struct.isSetPId()) {
        optionals.set(18);
      }
      if (struct.isSetIsReconciliation()) {
        optionals.set(19);
      }
      if (struct.isSetFreezeStatus()) {
        optionals.set(20);
      }
      if (struct.isSetPlanCycleName()) {
        optionals.set(21);
      }
      if (struct.isSetOperType()) {
        optionals.set(22);
      }
      if (struct.isSetOperCost()) {
        optionals.set(23);
      }
      if (struct.isSetDataType()) {
        optionals.set(24);
      }
      if (struct.isSetOverdueDays()) {
        optionals.set(25);
      }
      if (struct.isSetOverdueInterest()) {
        optionals.set(26);
      }
      if (struct.isSetOverdueFine()) {
        optionals.set(27);
      }
      if (struct.isSetAccountsTotal()) {
        optionals.set(28);
      }
      if (struct.isSetReceivedTotal()) {
        optionals.set(29);
      }
      if (struct.isSetUncollectedTotal()) {
        optionals.set(30);
      }
      if (struct.isSetResults()) {
        optionals.set(31);
      }
      if (struct.isSetIsExtension()) {
        optionals.set(32);
      }
      if (struct.isSetRebateFee()) {
        optionals.set(33);
      }
      if (struct.isSetMonthMaidRate()) {
        optionals.set(34);
      }
      if (struct.isSetProjectId()) {
        optionals.set(35);
      }
      if (struct.isSetActualOverdueMoney()) {
        optionals.set(36);
      }
      if (struct.isSetShouldOverdueMoney()) {
        optionals.set(37);
      }
      if (struct.isSetShouldPenalty()) {
        optionals.set(38);
      }
      if (struct.isSetActualPenalty()) {
        optionals.set(39);
      }
      if (struct.isSetActualPrincipal()) {
        optionals.set(40);
      }
      if (struct.isSetActualInterest()) {
        optionals.set(41);
      }
      if (struct.isSetActualTotal()) {
        optionals.set(42);
      }
      if (struct.isSetOverdueMoney()) {
        optionals.set(43);
      }
      if (struct.isSetPaymentId()) {
        optionals.set(44);
      }
      if (struct.isSetOverdueId()) {
        optionals.set(45);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(46);
      }
      if (struct.isSetPidList()) {
        optionals.set(47);
      }
      if (struct.isSetLoanTerm()) {
        optionals.set(48);
      }
      if (struct.isSetRepaymentId()) {
        optionals.set(49);
      }
      if (struct.isSetRentMoney()) {
        optionals.set(50);
      }
      if (struct.isSetShouldPaymentMoney()) {
        optionals.set(51);
      }
      oprot.writeBitSet(optionals, 52);
      if (struct.isSetLoanInfoId()) {
        oprot.writeI32(struct.loanInfoId);
      }
      if (struct.isSetGenDttm()) {
        oprot.writeString(struct.genDttm);
      }
      if (struct.isSetGenUserId()) {
        oprot.writeI32(struct.genUserId);
      }
      if (struct.isSetPlanRepayDt()) {
        oprot.writeString(struct.planRepayDt);
      }
      if (struct.isSetPlanCycleNum()) {
        oprot.writeI32(struct.planCycleNum);
      }
      if (struct.isSetPlanType()) {
        oprot.writeI32(struct.planType);
      }
      if (struct.isSetExTarget()) {
        oprot.writeI32(struct.exTarget);
      }
      if (struct.isSetExType()) {
        oprot.writeI32(struct.exType);
      }
      if (struct.isSetShouldPrincipal()) {
        oprot.writeDouble(struct.shouldPrincipal);
      }
      if (struct.isSetShouldMangCost()) {
        oprot.writeDouble(struct.shouldMangCost);
      }
      if (struct.isSetShouldOtherCost()) {
        oprot.writeDouble(struct.shouldOtherCost);
      }
      if (struct.isSetShouldOtherCostName()) {
        oprot.writeString(struct.shouldOtherCostName);
      }
      if (struct.isSetShouldInterest()) {
        oprot.writeDouble(struct.shouldInterest);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.total);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetThisStatus()) {
        oprot.writeI32(struct.thisStatus);
      }
      if (struct.isSetPlanVersion()) {
        oprot.writeI32(struct.planVersion);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetIsReconciliation()) {
        oprot.writeI32(struct.isReconciliation);
      }
      if (struct.isSetFreezeStatus()) {
        oprot.writeI32(struct.freezeStatus);
      }
      if (struct.isSetPlanCycleName()) {
        oprot.writeString(struct.planCycleName);
      }
      if (struct.isSetOperType()) {
        oprot.writeI32(struct.operType);
      }
      if (struct.isSetOperCost()) {
        oprot.writeDouble(struct.operCost);
      }
      if (struct.isSetDataType()) {
        oprot.writeI32(struct.dataType);
      }
      if (struct.isSetOverdueDays()) {
        oprot.writeI32(struct.overdueDays);
      }
      if (struct.isSetOverdueInterest()) {
        oprot.writeDouble(struct.overdueInterest);
      }
      if (struct.isSetOverdueFine()) {
        oprot.writeDouble(struct.overdueFine);
      }
      if (struct.isSetAccountsTotal()) {
        oprot.writeDouble(struct.accountsTotal);
      }
      if (struct.isSetReceivedTotal()) {
        oprot.writeDouble(struct.receivedTotal);
      }
      if (struct.isSetUncollectedTotal()) {
        oprot.writeDouble(struct.uncollectedTotal);
      }
      if (struct.isSetResults()) {
        {
          oprot.writeI32(struct.results.size());
          for (RepaymentPlanBaseDTO _iter8 : struct.results)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetIsExtension()) {
        oprot.writeI32(struct.isExtension);
      }
      if (struct.isSetRebateFee()) {
        oprot.writeDouble(struct.rebateFee);
      }
      if (struct.isSetMonthMaidRate()) {
        oprot.writeDouble(struct.monthMaidRate);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetActualOverdueMoney()) {
        oprot.writeDouble(struct.actualOverdueMoney);
      }
      if (struct.isSetShouldOverdueMoney()) {
        oprot.writeDouble(struct.shouldOverdueMoney);
      }
      if (struct.isSetShouldPenalty()) {
        oprot.writeDouble(struct.shouldPenalty);
      }
      if (struct.isSetActualPenalty()) {
        oprot.writeDouble(struct.actualPenalty);
      }
      if (struct.isSetActualPrincipal()) {
        oprot.writeDouble(struct.actualPrincipal);
      }
      if (struct.isSetActualInterest()) {
        oprot.writeDouble(struct.actualInterest);
      }
      if (struct.isSetActualTotal()) {
        oprot.writeDouble(struct.actualTotal);
      }
      if (struct.isSetOverdueMoney()) {
        oprot.writeDouble(struct.overdueMoney);
      }
      if (struct.isSetPaymentId()) {
        oprot.writeI32(struct.paymentId);
      }
      if (struct.isSetOverdueId()) {
        oprot.writeI32(struct.overdueId);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetPidList()) {
        {
          oprot.writeI32(struct.pidList.size());
          for (int _iter9 : struct.pidList)
          {
            oprot.writeI32(_iter9);
          }
        }
      }
      if (struct.isSetLoanTerm()) {
        oprot.writeI32(struct.loanTerm);
      }
      if (struct.isSetRepaymentId()) {
        oprot.writeI32(struct.repaymentId);
      }
      if (struct.isSetRentMoney()) {
        oprot.writeDouble(struct.rentMoney);
      }
      if (struct.isSetShouldPaymentMoney()) {
        oprot.writeDouble(struct.shouldPaymentMoney);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentPlanBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(52);
      if (incoming.get(0)) {
        struct.loanInfoId = iprot.readI32();
        struct.setLoanInfoIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.genDttm = iprot.readString();
        struct.setGenDttmIsSet(true);
      }
      if (incoming.get(2)) {
        struct.genUserId = iprot.readI32();
        struct.setGenUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.planRepayDt = iprot.readString();
        struct.setPlanRepayDtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.planCycleNum = iprot.readI32();
        struct.setPlanCycleNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.planType = iprot.readI32();
        struct.setPlanTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exTarget = iprot.readI32();
        struct.setExTargetIsSet(true);
      }
      if (incoming.get(7)) {
        struct.exType = iprot.readI32();
        struct.setExTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shouldPrincipal = iprot.readDouble();
        struct.setShouldPrincipalIsSet(true);
      }
      if (incoming.get(9)) {
        struct.shouldMangCost = iprot.readDouble();
        struct.setShouldMangCostIsSet(true);
      }
      if (incoming.get(10)) {
        struct.shouldOtherCost = iprot.readDouble();
        struct.setShouldOtherCostIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shouldOtherCostName = iprot.readString();
        struct.setShouldOtherCostNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shouldInterest = iprot.readDouble();
        struct.setShouldInterestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(14)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.thisStatus = iprot.readI32();
        struct.setThisStatusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.planVersion = iprot.readI32();
        struct.setPlanVersionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(19)) {
        struct.isReconciliation = iprot.readI32();
        struct.setIsReconciliationIsSet(true);
      }
      if (incoming.get(20)) {
        struct.freezeStatus = iprot.readI32();
        struct.setFreezeStatusIsSet(true);
      }
      if (incoming.get(21)) {
        struct.planCycleName = iprot.readString();
        struct.setPlanCycleNameIsSet(true);
      }
      if (incoming.get(22)) {
        struct.operType = iprot.readI32();
        struct.setOperTypeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.operCost = iprot.readDouble();
        struct.setOperCostIsSet(true);
      }
      if (incoming.get(24)) {
        struct.dataType = iprot.readI32();
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.overdueDays = iprot.readI32();
        struct.setOverdueDaysIsSet(true);
      }
      if (incoming.get(26)) {
        struct.overdueInterest = iprot.readDouble();
        struct.setOverdueInterestIsSet(true);
      }
      if (incoming.get(27)) {
        struct.overdueFine = iprot.readDouble();
        struct.setOverdueFineIsSet(true);
      }
      if (incoming.get(28)) {
        struct.accountsTotal = iprot.readDouble();
        struct.setAccountsTotalIsSet(true);
      }
      if (incoming.get(29)) {
        struct.receivedTotal = iprot.readDouble();
        struct.setReceivedTotalIsSet(true);
      }
      if (incoming.get(30)) {
        struct.uncollectedTotal = iprot.readDouble();
        struct.setUncollectedTotalIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.results = new ArrayList<RepaymentPlanBaseDTO>(_list10.size);
          RepaymentPlanBaseDTO _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new RepaymentPlanBaseDTO();
            _elem11.read(iprot);
            struct.results.add(_elem11);
          }
        }
        struct.setResultsIsSet(true);
      }
      if (incoming.get(32)) {
        struct.isExtension = iprot.readI32();
        struct.setIsExtensionIsSet(true);
      }
      if (incoming.get(33)) {
        struct.rebateFee = iprot.readDouble();
        struct.setRebateFeeIsSet(true);
      }
      if (incoming.get(34)) {
        struct.monthMaidRate = iprot.readDouble();
        struct.setMonthMaidRateIsSet(true);
      }
      if (incoming.get(35)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(36)) {
        struct.actualOverdueMoney = iprot.readDouble();
        struct.setActualOverdueMoneyIsSet(true);
      }
      if (incoming.get(37)) {
        struct.shouldOverdueMoney = iprot.readDouble();
        struct.setShouldOverdueMoneyIsSet(true);
      }
      if (incoming.get(38)) {
        struct.shouldPenalty = iprot.readDouble();
        struct.setShouldPenaltyIsSet(true);
      }
      if (incoming.get(39)) {
        struct.actualPenalty = iprot.readDouble();
        struct.setActualPenaltyIsSet(true);
      }
      if (incoming.get(40)) {
        struct.actualPrincipal = iprot.readDouble();
        struct.setActualPrincipalIsSet(true);
      }
      if (incoming.get(41)) {
        struct.actualInterest = iprot.readDouble();
        struct.setActualInterestIsSet(true);
      }
      if (incoming.get(42)) {
        struct.actualTotal = iprot.readDouble();
        struct.setActualTotalIsSet(true);
      }
      if (incoming.get(43)) {
        struct.overdueMoney = iprot.readDouble();
        struct.setOverdueMoneyIsSet(true);
      }
      if (incoming.get(44)) {
        struct.paymentId = iprot.readI32();
        struct.setPaymentIdIsSet(true);
      }
      if (incoming.get(45)) {
        struct.overdueId = iprot.readI32();
        struct.setOverdueIdIsSet(true);
      }
      if (incoming.get(46)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(47)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.pidList = new ArrayList<Integer>(_list13.size);
          int _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI32();
            struct.pidList.add(_elem14);
          }
        }
        struct.setPidListIsSet(true);
      }
      if (incoming.get(48)) {
        struct.loanTerm = iprot.readI32();
        struct.setLoanTermIsSet(true);
      }
      if (incoming.get(49)) {
        struct.repaymentId = iprot.readI32();
        struct.setRepaymentIdIsSet(true);
      }
      if (incoming.get(50)) {
        struct.rentMoney = iprot.readDouble();
        struct.setRentMoneyIsSet(true);
      }
      if (incoming.get(51)) {
        struct.shouldPaymentMoney = iprot.readDouble();
        struct.setShouldPaymentMoneyIsSet(true);
      }
    }
  }

}


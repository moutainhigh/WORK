/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class SaveAdvRepaymentBaseDTO implements org.apache.thrift.TBase<SaveAdvRepaymentBaseDTO, SaveAdvRepaymentBaseDTO._Fields>, java.io.Serializable, Cloneable, Comparable<SaveAdvRepaymentBaseDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SaveAdvRepaymentBaseDTO");

  private static final org.apache.thrift.protocol.TField ACTUAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("actualAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("principalBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("liqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prepayLiqDmgProportion", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField RECEIVE_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveDt", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BROCONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("BrocontractNo", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREDIT_CONTRACT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("CreditContractNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CREDIT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REPAY_CYCLE_FIELD_DESC = new org.apache.thrift.protocol.TField("repayCycle", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MONTH_LOAN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("monthLoanInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SaveAdvRepaymentBaseDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SaveAdvRepaymentBaseDTOTupleSchemeFactory());
  }

  public double actualAmt; // required
  public double principalBalance; // required
  public double liqDmgProportion; // required
  public double prepayLiqDmgProportion; // required
  public String receiveDt; // required
  public String BrocontractNo; // required
  public String CreditContractNo; // required
  public double creditAmt; // required
  public String projectType; // required
  public int repayCycle; // required
  public double monthLoanInterest; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACTUAL_AMT((short)1, "actualAmt"),
    PRINCIPAL_BALANCE((short)2, "principalBalance"),
    LIQ_DMG_PROPORTION((short)3, "liqDmgProportion"),
    PREPAY_LIQ_DMG_PROPORTION((short)4, "prepayLiqDmgProportion"),
    RECEIVE_DT((short)5, "receiveDt"),
    BROCONTRACT_NO((short)6, "BrocontractNo"),
    CREDIT_CONTRACT_NO((short)7, "CreditContractNo"),
    CREDIT_AMT((short)8, "creditAmt"),
    PROJECT_TYPE((short)9, "projectType"),
    REPAY_CYCLE((short)10, "repayCycle"),
    MONTH_LOAN_INTEREST((short)11, "monthLoanInterest");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACTUAL_AMT
          return ACTUAL_AMT;
        case 2: // PRINCIPAL_BALANCE
          return PRINCIPAL_BALANCE;
        case 3: // LIQ_DMG_PROPORTION
          return LIQ_DMG_PROPORTION;
        case 4: // PREPAY_LIQ_DMG_PROPORTION
          return PREPAY_LIQ_DMG_PROPORTION;
        case 5: // RECEIVE_DT
          return RECEIVE_DT;
        case 6: // BROCONTRACT_NO
          return BROCONTRACT_NO;
        case 7: // CREDIT_CONTRACT_NO
          return CREDIT_CONTRACT_NO;
        case 8: // CREDIT_AMT
          return CREDIT_AMT;
        case 9: // PROJECT_TYPE
          return PROJECT_TYPE;
        case 10: // REPAY_CYCLE
          return REPAY_CYCLE;
        case 11: // MONTH_LOAN_INTEREST
          return MONTH_LOAN_INTEREST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ACTUALAMT_ISSET_ID = 0;
  private static final int __PRINCIPALBALANCE_ISSET_ID = 1;
  private static final int __LIQDMGPROPORTION_ISSET_ID = 2;
  private static final int __PREPAYLIQDMGPROPORTION_ISSET_ID = 3;
  private static final int __CREDITAMT_ISSET_ID = 4;
  private static final int __REPAYCYCLE_ISSET_ID = 5;
  private static final int __MONTHLOANINTEREST_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACTUAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("actualAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRINCIPAL_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("principalBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("liqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREPAY_LIQ_DMG_PROPORTION, new org.apache.thrift.meta_data.FieldMetaData("prepayLiqDmgProportion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECEIVE_DT, new org.apache.thrift.meta_data.FieldMetaData("receiveDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROCONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("BrocontractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_CONTRACT_NO, new org.apache.thrift.meta_data.FieldMetaData("CreditContractNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMT, new org.apache.thrift.meta_data.FieldMetaData("creditAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAY_CYCLE, new org.apache.thrift.meta_data.FieldMetaData("repayCycle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH_LOAN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("monthLoanInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SaveAdvRepaymentBaseDTO.class, metaDataMap);
  }

  public SaveAdvRepaymentBaseDTO() {
  }

  public SaveAdvRepaymentBaseDTO(
    double actualAmt,
    double principalBalance,
    double liqDmgProportion,
    double prepayLiqDmgProportion,
    String receiveDt,
    String BrocontractNo,
    String CreditContractNo,
    double creditAmt,
    String projectType,
    int repayCycle,
    double monthLoanInterest)
  {
    this();
    this.actualAmt = actualAmt;
    setActualAmtIsSet(true);
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    this.liqDmgProportion = liqDmgProportion;
    setLiqDmgProportionIsSet(true);
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    this.receiveDt = receiveDt;
    this.BrocontractNo = BrocontractNo;
    this.CreditContractNo = CreditContractNo;
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    this.projectType = projectType;
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SaveAdvRepaymentBaseDTO(SaveAdvRepaymentBaseDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.actualAmt = other.actualAmt;
    this.principalBalance = other.principalBalance;
    this.liqDmgProportion = other.liqDmgProportion;
    this.prepayLiqDmgProportion = other.prepayLiqDmgProportion;
    if (other.isSetReceiveDt()) {
      this.receiveDt = other.receiveDt;
    }
    if (other.isSetBrocontractNo()) {
      this.BrocontractNo = other.BrocontractNo;
    }
    if (other.isSetCreditContractNo()) {
      this.CreditContractNo = other.CreditContractNo;
    }
    this.creditAmt = other.creditAmt;
    if (other.isSetProjectType()) {
      this.projectType = other.projectType;
    }
    this.repayCycle = other.repayCycle;
    this.monthLoanInterest = other.monthLoanInterest;
  }

  public SaveAdvRepaymentBaseDTO deepCopy() {
    return new SaveAdvRepaymentBaseDTO(this);
  }

  @Override
  public void clear() {
    setActualAmtIsSet(false);
    this.actualAmt = 0.0;
    setPrincipalBalanceIsSet(false);
    this.principalBalance = 0.0;
    setLiqDmgProportionIsSet(false);
    this.liqDmgProportion = 0.0;
    setPrepayLiqDmgProportionIsSet(false);
    this.prepayLiqDmgProportion = 0.0;
    this.receiveDt = null;
    this.BrocontractNo = null;
    this.CreditContractNo = null;
    setCreditAmtIsSet(false);
    this.creditAmt = 0.0;
    this.projectType = null;
    setRepayCycleIsSet(false);
    this.repayCycle = 0;
    setMonthLoanInterestIsSet(false);
    this.monthLoanInterest = 0.0;
  }

  public double getActualAmt() {
    return this.actualAmt;
  }

  public SaveAdvRepaymentBaseDTO setActualAmt(double actualAmt) {
    this.actualAmt = actualAmt;
    setActualAmtIsSet(true);
    return this;
  }

  public void unsetActualAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALAMT_ISSET_ID);
  }

  /** Returns true if field actualAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetActualAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALAMT_ISSET_ID);
  }

  public void setActualAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALAMT_ISSET_ID, value);
  }

  public double getPrincipalBalance() {
    return this.principalBalance;
  }

  public SaveAdvRepaymentBaseDTO setPrincipalBalance(double principalBalance) {
    this.principalBalance = principalBalance;
    setPrincipalBalanceIsSet(true);
    return this;
  }

  public void unsetPrincipalBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  /** Returns true if field principalBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipalBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID);
  }

  public void setPrincipalBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPALBALANCE_ISSET_ID, value);
  }

  public double getLiqDmgProportion() {
    return this.liqDmgProportion;
  }

  public SaveAdvRepaymentBaseDTO setLiqDmgProportion(double liqDmgProportion) {
    this.liqDmgProportion = liqDmgProportion;
    setLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetLiqDmgProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field liqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetLiqDmgProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __LIQDMGPROPORTION_ISSET_ID);
  }

  public void setLiqDmgProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIQDMGPROPORTION_ISSET_ID, value);
  }

  public double getPrepayLiqDmgProportion() {
    return this.prepayLiqDmgProportion;
  }

  public SaveAdvRepaymentBaseDTO setPrepayLiqDmgProportion(double prepayLiqDmgProportion) {
    this.prepayLiqDmgProportion = prepayLiqDmgProportion;
    setPrepayLiqDmgProportionIsSet(true);
    return this;
  }

  public void unsetPrepayLiqDmgProportion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  /** Returns true if field prepayLiqDmgProportion is set (has been assigned a value) and false otherwise */
  public boolean isSetPrepayLiqDmgProportion() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID);
  }

  public void setPrepayLiqDmgProportionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPAYLIQDMGPROPORTION_ISSET_ID, value);
  }

  public String getReceiveDt() {
    return this.receiveDt;
  }

  public SaveAdvRepaymentBaseDTO setReceiveDt(String receiveDt) {
    this.receiveDt = receiveDt;
    return this;
  }

  public void unsetReceiveDt() {
    this.receiveDt = null;
  }

  /** Returns true if field receiveDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveDt() {
    return this.receiveDt != null;
  }

  public void setReceiveDtIsSet(boolean value) {
    if (!value) {
      this.receiveDt = null;
    }
  }

  public String getBrocontractNo() {
    return this.BrocontractNo;
  }

  public SaveAdvRepaymentBaseDTO setBrocontractNo(String BrocontractNo) {
    this.BrocontractNo = BrocontractNo;
    return this;
  }

  public void unsetBrocontractNo() {
    this.BrocontractNo = null;
  }

  /** Returns true if field BrocontractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBrocontractNo() {
    return this.BrocontractNo != null;
  }

  public void setBrocontractNoIsSet(boolean value) {
    if (!value) {
      this.BrocontractNo = null;
    }
  }

  public String getCreditContractNo() {
    return this.CreditContractNo;
  }

  public SaveAdvRepaymentBaseDTO setCreditContractNo(String CreditContractNo) {
    this.CreditContractNo = CreditContractNo;
    return this;
  }

  public void unsetCreditContractNo() {
    this.CreditContractNo = null;
  }

  /** Returns true if field CreditContractNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditContractNo() {
    return this.CreditContractNo != null;
  }

  public void setCreditContractNoIsSet(boolean value) {
    if (!value) {
      this.CreditContractNo = null;
    }
  }

  public double getCreditAmt() {
    return this.creditAmt;
  }

  public SaveAdvRepaymentBaseDTO setCreditAmt(double creditAmt) {
    this.creditAmt = creditAmt;
    setCreditAmtIsSet(true);
    return this;
  }

  public void unsetCreditAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  /** Returns true if field creditAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMT_ISSET_ID);
  }

  public void setCreditAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMT_ISSET_ID, value);
  }

  public String getProjectType() {
    return this.projectType;
  }

  public SaveAdvRepaymentBaseDTO setProjectType(String projectType) {
    this.projectType = projectType;
    return this;
  }

  public void unsetProjectType() {
    this.projectType = null;
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return this.projectType != null;
  }

  public void setProjectTypeIsSet(boolean value) {
    if (!value) {
      this.projectType = null;
    }
  }

  public int getRepayCycle() {
    return this.repayCycle;
  }

  public SaveAdvRepaymentBaseDTO setRepayCycle(int repayCycle) {
    this.repayCycle = repayCycle;
    setRepayCycleIsSet(true);
    return this;
  }

  public void unsetRepayCycle() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  /** Returns true if field repayCycle is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayCycle() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID);
  }

  public void setRepayCycleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYCYCLE_ISSET_ID, value);
  }

  public double getMonthLoanInterest() {
    return this.monthLoanInterest;
  }

  public SaveAdvRepaymentBaseDTO setMonthLoanInterest(double monthLoanInterest) {
    this.monthLoanInterest = monthLoanInterest;
    setMonthLoanInterestIsSet(true);
    return this;
  }

  public void unsetMonthLoanInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  /** Returns true if field monthLoanInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthLoanInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID);
  }

  public void setMonthLoanInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHLOANINTEREST_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACTUAL_AMT:
      if (value == null) {
        unsetActualAmt();
      } else {
        setActualAmt((Double)value);
      }
      break;

    case PRINCIPAL_BALANCE:
      if (value == null) {
        unsetPrincipalBalance();
      } else {
        setPrincipalBalance((Double)value);
      }
      break;

    case LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetLiqDmgProportion();
      } else {
        setLiqDmgProportion((Double)value);
      }
      break;

    case PREPAY_LIQ_DMG_PROPORTION:
      if (value == null) {
        unsetPrepayLiqDmgProportion();
      } else {
        setPrepayLiqDmgProportion((Double)value);
      }
      break;

    case RECEIVE_DT:
      if (value == null) {
        unsetReceiveDt();
      } else {
        setReceiveDt((String)value);
      }
      break;

    case BROCONTRACT_NO:
      if (value == null) {
        unsetBrocontractNo();
      } else {
        setBrocontractNo((String)value);
      }
      break;

    case CREDIT_CONTRACT_NO:
      if (value == null) {
        unsetCreditContractNo();
      } else {
        setCreditContractNo((String)value);
      }
      break;

    case CREDIT_AMT:
      if (value == null) {
        unsetCreditAmt();
      } else {
        setCreditAmt((Double)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((String)value);
      }
      break;

    case REPAY_CYCLE:
      if (value == null) {
        unsetRepayCycle();
      } else {
        setRepayCycle((Integer)value);
      }
      break;

    case MONTH_LOAN_INTEREST:
      if (value == null) {
        unsetMonthLoanInterest();
      } else {
        setMonthLoanInterest((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACTUAL_AMT:
      return Double.valueOf(getActualAmt());

    case PRINCIPAL_BALANCE:
      return Double.valueOf(getPrincipalBalance());

    case LIQ_DMG_PROPORTION:
      return Double.valueOf(getLiqDmgProportion());

    case PREPAY_LIQ_DMG_PROPORTION:
      return Double.valueOf(getPrepayLiqDmgProportion());

    case RECEIVE_DT:
      return getReceiveDt();

    case BROCONTRACT_NO:
      return getBrocontractNo();

    case CREDIT_CONTRACT_NO:
      return getCreditContractNo();

    case CREDIT_AMT:
      return Double.valueOf(getCreditAmt());

    case PROJECT_TYPE:
      return getProjectType();

    case REPAY_CYCLE:
      return Integer.valueOf(getRepayCycle());

    case MONTH_LOAN_INTEREST:
      return Double.valueOf(getMonthLoanInterest());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACTUAL_AMT:
      return isSetActualAmt();
    case PRINCIPAL_BALANCE:
      return isSetPrincipalBalance();
    case LIQ_DMG_PROPORTION:
      return isSetLiqDmgProportion();
    case PREPAY_LIQ_DMG_PROPORTION:
      return isSetPrepayLiqDmgProportion();
    case RECEIVE_DT:
      return isSetReceiveDt();
    case BROCONTRACT_NO:
      return isSetBrocontractNo();
    case CREDIT_CONTRACT_NO:
      return isSetCreditContractNo();
    case CREDIT_AMT:
      return isSetCreditAmt();
    case PROJECT_TYPE:
      return isSetProjectType();
    case REPAY_CYCLE:
      return isSetRepayCycle();
    case MONTH_LOAN_INTEREST:
      return isSetMonthLoanInterest();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SaveAdvRepaymentBaseDTO)
      return this.equals((SaveAdvRepaymentBaseDTO)that);
    return false;
  }

  public boolean equals(SaveAdvRepaymentBaseDTO that) {
    if (that == null)
      return false;

    boolean this_present_actualAmt = true;
    boolean that_present_actualAmt = true;
    if (this_present_actualAmt || that_present_actualAmt) {
      if (!(this_present_actualAmt && that_present_actualAmt))
        return false;
      if (this.actualAmt != that.actualAmt)
        return false;
    }

    boolean this_present_principalBalance = true;
    boolean that_present_principalBalance = true;
    if (this_present_principalBalance || that_present_principalBalance) {
      if (!(this_present_principalBalance && that_present_principalBalance))
        return false;
      if (this.principalBalance != that.principalBalance)
        return false;
    }

    boolean this_present_liqDmgProportion = true;
    boolean that_present_liqDmgProportion = true;
    if (this_present_liqDmgProportion || that_present_liqDmgProportion) {
      if (!(this_present_liqDmgProportion && that_present_liqDmgProportion))
        return false;
      if (this.liqDmgProportion != that.liqDmgProportion)
        return false;
    }

    boolean this_present_prepayLiqDmgProportion = true;
    boolean that_present_prepayLiqDmgProportion = true;
    if (this_present_prepayLiqDmgProportion || that_present_prepayLiqDmgProportion) {
      if (!(this_present_prepayLiqDmgProportion && that_present_prepayLiqDmgProportion))
        return false;
      if (this.prepayLiqDmgProportion != that.prepayLiqDmgProportion)
        return false;
    }

    boolean this_present_receiveDt = true && this.isSetReceiveDt();
    boolean that_present_receiveDt = true && that.isSetReceiveDt();
    if (this_present_receiveDt || that_present_receiveDt) {
      if (!(this_present_receiveDt && that_present_receiveDt))
        return false;
      if (!this.receiveDt.equals(that.receiveDt))
        return false;
    }

    boolean this_present_BrocontractNo = true && this.isSetBrocontractNo();
    boolean that_present_BrocontractNo = true && that.isSetBrocontractNo();
    if (this_present_BrocontractNo || that_present_BrocontractNo) {
      if (!(this_present_BrocontractNo && that_present_BrocontractNo))
        return false;
      if (!this.BrocontractNo.equals(that.BrocontractNo))
        return false;
    }

    boolean this_present_CreditContractNo = true && this.isSetCreditContractNo();
    boolean that_present_CreditContractNo = true && that.isSetCreditContractNo();
    if (this_present_CreditContractNo || that_present_CreditContractNo) {
      if (!(this_present_CreditContractNo && that_present_CreditContractNo))
        return false;
      if (!this.CreditContractNo.equals(that.CreditContractNo))
        return false;
    }

    boolean this_present_creditAmt = true;
    boolean that_present_creditAmt = true;
    if (this_present_creditAmt || that_present_creditAmt) {
      if (!(this_present_creditAmt && that_present_creditAmt))
        return false;
      if (this.creditAmt != that.creditAmt)
        return false;
    }

    boolean this_present_projectType = true && this.isSetProjectType();
    boolean that_present_projectType = true && that.isSetProjectType();
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (!this.projectType.equals(that.projectType))
        return false;
    }

    boolean this_present_repayCycle = true;
    boolean that_present_repayCycle = true;
    if (this_present_repayCycle || that_present_repayCycle) {
      if (!(this_present_repayCycle && that_present_repayCycle))
        return false;
      if (this.repayCycle != that.repayCycle)
        return false;
    }

    boolean this_present_monthLoanInterest = true;
    boolean that_present_monthLoanInterest = true;
    if (this_present_monthLoanInterest || that_present_monthLoanInterest) {
      if (!(this_present_monthLoanInterest && that_present_monthLoanInterest))
        return false;
      if (this.monthLoanInterest != that.monthLoanInterest)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_actualAmt = true;
    list.add(present_actualAmt);
    if (present_actualAmt)
      list.add(actualAmt);

    boolean present_principalBalance = true;
    list.add(present_principalBalance);
    if (present_principalBalance)
      list.add(principalBalance);

    boolean present_liqDmgProportion = true;
    list.add(present_liqDmgProportion);
    if (present_liqDmgProportion)
      list.add(liqDmgProportion);

    boolean present_prepayLiqDmgProportion = true;
    list.add(present_prepayLiqDmgProportion);
    if (present_prepayLiqDmgProportion)
      list.add(prepayLiqDmgProportion);

    boolean present_receiveDt = true && (isSetReceiveDt());
    list.add(present_receiveDt);
    if (present_receiveDt)
      list.add(receiveDt);

    boolean present_BrocontractNo = true && (isSetBrocontractNo());
    list.add(present_BrocontractNo);
    if (present_BrocontractNo)
      list.add(BrocontractNo);

    boolean present_CreditContractNo = true && (isSetCreditContractNo());
    list.add(present_CreditContractNo);
    if (present_CreditContractNo)
      list.add(CreditContractNo);

    boolean present_creditAmt = true;
    list.add(present_creditAmt);
    if (present_creditAmt)
      list.add(creditAmt);

    boolean present_projectType = true && (isSetProjectType());
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    boolean present_repayCycle = true;
    list.add(present_repayCycle);
    if (present_repayCycle)
      list.add(repayCycle);

    boolean present_monthLoanInterest = true;
    list.add(present_monthLoanInterest);
    if (present_monthLoanInterest)
      list.add(monthLoanInterest);

    return list.hashCode();
  }

  @Override
  public int compareTo(SaveAdvRepaymentBaseDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetActualAmt()).compareTo(other.isSetActualAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualAmt, other.actualAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipalBalance()).compareTo(other.isSetPrincipalBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipalBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalBalance, other.principalBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiqDmgProportion()).compareTo(other.isSetLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liqDmgProportion, other.liqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrepayLiqDmgProportion()).compareTo(other.isSetPrepayLiqDmgProportion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrepayLiqDmgProportion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepayLiqDmgProportion, other.prepayLiqDmgProportion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveDt()).compareTo(other.isSetReceiveDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveDt, other.receiveDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrocontractNo()).compareTo(other.isSetBrocontractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrocontractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BrocontractNo, other.BrocontractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditContractNo()).compareTo(other.isSetCreditContractNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditContractNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CreditContractNo, other.CreditContractNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmt()).compareTo(other.isSetCreditAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmt, other.creditAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayCycle()).compareTo(other.isSetRepayCycle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayCycle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayCycle, other.repayCycle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthLoanInterest()).compareTo(other.isSetMonthLoanInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthLoanInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthLoanInterest, other.monthLoanInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SaveAdvRepaymentBaseDTO(");
    boolean first = true;

    sb.append("actualAmt:");
    sb.append(this.actualAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principalBalance:");
    sb.append(this.principalBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liqDmgProportion:");
    sb.append(this.liqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("prepayLiqDmgProportion:");
    sb.append(this.prepayLiqDmgProportion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveDt:");
    if (this.receiveDt == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BrocontractNo:");
    if (this.BrocontractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.BrocontractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CreditContractNo:");
    if (this.CreditContractNo == null) {
      sb.append("null");
    } else {
      sb.append(this.CreditContractNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditAmt:");
    sb.append(this.creditAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    if (this.projectType == null) {
      sb.append("null");
    } else {
      sb.append(this.projectType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayCycle:");
    sb.append(this.repayCycle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthLoanInterest:");
    sb.append(this.monthLoanInterest);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SaveAdvRepaymentBaseDTOStandardSchemeFactory implements SchemeFactory {
    public SaveAdvRepaymentBaseDTOStandardScheme getScheme() {
      return new SaveAdvRepaymentBaseDTOStandardScheme();
    }
  }

  private static class SaveAdvRepaymentBaseDTOStandardScheme extends StandardScheme<SaveAdvRepaymentBaseDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SaveAdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACTUAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualAmt = iprot.readDouble();
              struct.setActualAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINCIPAL_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principalBalance = iprot.readDouble();
              struct.setPrincipalBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.liqDmgProportion = iprot.readDouble();
              struct.setLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PREPAY_LIQ_DMG_PROPORTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.prepayLiqDmgProportion = iprot.readDouble();
              struct.setPrepayLiqDmgProportionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RECEIVE_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveDt = iprot.readString();
              struct.setReceiveDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BROCONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.BrocontractNo = iprot.readString();
              struct.setBrocontractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREDIT_CONTRACT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.CreditContractNo = iprot.readString();
              struct.setCreditContractNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREDIT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmt = iprot.readDouble();
              struct.setCreditAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectType = iprot.readString();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REPAY_CYCLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repayCycle = iprot.readI32();
              struct.setRepayCycleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MONTH_LOAN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.monthLoanInterest = iprot.readDouble();
              struct.setMonthLoanInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SaveAdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ACTUAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.actualAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_BALANCE_FIELD_DESC);
      oprot.writeDouble(struct.principalBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.liqDmgProportion);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPAY_LIQ_DMG_PROPORTION_FIELD_DESC);
      oprot.writeDouble(struct.prepayLiqDmgProportion);
      oprot.writeFieldEnd();
      if (struct.receiveDt != null) {
        oprot.writeFieldBegin(RECEIVE_DT_FIELD_DESC);
        oprot.writeString(struct.receiveDt);
        oprot.writeFieldEnd();
      }
      if (struct.BrocontractNo != null) {
        oprot.writeFieldBegin(BROCONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.BrocontractNo);
        oprot.writeFieldEnd();
      }
      if (struct.CreditContractNo != null) {
        oprot.writeFieldBegin(CREDIT_CONTRACT_NO_FIELD_DESC);
        oprot.writeString(struct.CreditContractNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREDIT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.creditAmt);
      oprot.writeFieldEnd();
      if (struct.projectType != null) {
        oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
        oprot.writeString(struct.projectType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAY_CYCLE_FIELD_DESC);
      oprot.writeI32(struct.repayCycle);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_LOAN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.monthLoanInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SaveAdvRepaymentBaseDTOTupleSchemeFactory implements SchemeFactory {
    public SaveAdvRepaymentBaseDTOTupleScheme getScheme() {
      return new SaveAdvRepaymentBaseDTOTupleScheme();
    }
  }

  private static class SaveAdvRepaymentBaseDTOTupleScheme extends TupleScheme<SaveAdvRepaymentBaseDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SaveAdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetActualAmt()) {
        optionals.set(0);
      }
      if (struct.isSetPrincipalBalance()) {
        optionals.set(1);
      }
      if (struct.isSetLiqDmgProportion()) {
        optionals.set(2);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        optionals.set(3);
      }
      if (struct.isSetReceiveDt()) {
        optionals.set(4);
      }
      if (struct.isSetBrocontractNo()) {
        optionals.set(5);
      }
      if (struct.isSetCreditContractNo()) {
        optionals.set(6);
      }
      if (struct.isSetCreditAmt()) {
        optionals.set(7);
      }
      if (struct.isSetProjectType()) {
        optionals.set(8);
      }
      if (struct.isSetRepayCycle()) {
        optionals.set(9);
      }
      if (struct.isSetMonthLoanInterest()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetActualAmt()) {
        oprot.writeDouble(struct.actualAmt);
      }
      if (struct.isSetPrincipalBalance()) {
        oprot.writeDouble(struct.principalBalance);
      }
      if (struct.isSetLiqDmgProportion()) {
        oprot.writeDouble(struct.liqDmgProportion);
      }
      if (struct.isSetPrepayLiqDmgProportion()) {
        oprot.writeDouble(struct.prepayLiqDmgProportion);
      }
      if (struct.isSetReceiveDt()) {
        oprot.writeString(struct.receiveDt);
      }
      if (struct.isSetBrocontractNo()) {
        oprot.writeString(struct.BrocontractNo);
      }
      if (struct.isSetCreditContractNo()) {
        oprot.writeString(struct.CreditContractNo);
      }
      if (struct.isSetCreditAmt()) {
        oprot.writeDouble(struct.creditAmt);
      }
      if (struct.isSetProjectType()) {
        oprot.writeString(struct.projectType);
      }
      if (struct.isSetRepayCycle()) {
        oprot.writeI32(struct.repayCycle);
      }
      if (struct.isSetMonthLoanInterest()) {
        oprot.writeDouble(struct.monthLoanInterest);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SaveAdvRepaymentBaseDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.actualAmt = iprot.readDouble();
        struct.setActualAmtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.principalBalance = iprot.readDouble();
        struct.setPrincipalBalanceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.liqDmgProportion = iprot.readDouble();
        struct.setLiqDmgProportionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.prepayLiqDmgProportion = iprot.readDouble();
        struct.setPrepayLiqDmgProportionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receiveDt = iprot.readString();
        struct.setReceiveDtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.BrocontractNo = iprot.readString();
        struct.setBrocontractNoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.CreditContractNo = iprot.readString();
        struct.setCreditContractNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.creditAmt = iprot.readDouble();
        struct.setCreditAmtIsSet(true);
      }
      if (incoming.get(8)) {
        struct.projectType = iprot.readString();
        struct.setProjectTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.repayCycle = iprot.readI32();
        struct.setRepayCycleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.monthLoanInterest = iprot.readDouble();
        struct.setMonthLoanInterestIsSet(true);
      }
    }
  }

}


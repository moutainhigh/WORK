/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class MonthlyReportBasePlan implements org.apache.thrift.TBase<MonthlyReportBasePlan, MonthlyReportBasePlan._Fields>, java.io.Serializable, Cloneable, Comparable<MonthlyReportBasePlan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MonthlyReportBasePlan");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPAY_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("repayDt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CYCLE_NMU_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleNmu", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("principal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("mangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("otherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CURRENT_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("currentMonth", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("lastMonth", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField NEXT_NOMTH_FIELD_DESC = new org.apache.thrift.protocol.TField("nextNomth", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PREPOSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("preposition", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField PLAN_OUT_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("planOutDt", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CROSS_MONTH_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("crossMonthMangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CROSS_MONTH_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("crossMonthOtherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CROSS_MONTH_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("crossMonthInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField O_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("o_mangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField O_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("o_otherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField O_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("o_interest", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField T_MANG_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("t_mangCost", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField T_OTHER_COST_FIELD_DESC = new org.apache.thrift.protocol.TField("t_otherCost", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField T_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("t_interest", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField IS_LAST_PLAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isLastPlan", org.apache.thrift.protocol.TType.BOOL, (short)23);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MonthlyReportBasePlanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MonthlyReportBasePlanTupleSchemeFactory());
  }

  public int loanId; // required
  public String repayDt; // required
  public int cycleNmu; // required
  public double principal; // required
  public double mangCost; // required
  public double otherCost; // required
  public double interest; // required
  public int pid; // required
  public double currentMonth; // required
  public double lastMonth; // required
  public double nextNomth; // required
  public boolean preposition; // required
  public String planOutDt; // required
  public double crossMonthMangCost; // required
  public double crossMonthOtherCost; // required
  public double crossMonthInterest; // required
  public double o_mangCost; // required
  public double o_otherCost; // required
  public double o_interest; // required
  public double t_mangCost; // required
  public double t_otherCost; // required
  public double t_interest; // required
  public boolean isLastPlan; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    REPAY_DT((short)2, "repayDt"),
    CYCLE_NMU((short)3, "cycleNmu"),
    PRINCIPAL((short)4, "principal"),
    MANG_COST((short)5, "mangCost"),
    OTHER_COST((short)6, "otherCost"),
    INTEREST((short)7, "interest"),
    PID((short)8, "pid"),
    CURRENT_MONTH((short)9, "currentMonth"),
    LAST_MONTH((short)10, "lastMonth"),
    NEXT_NOMTH((short)11, "nextNomth"),
    PREPOSITION((short)12, "preposition"),
    PLAN_OUT_DT((short)13, "planOutDt"),
    CROSS_MONTH_MANG_COST((short)14, "crossMonthMangCost"),
    CROSS_MONTH_OTHER_COST((short)15, "crossMonthOtherCost"),
    CROSS_MONTH_INTEREST((short)16, "crossMonthInterest"),
    O_MANG_COST((short)17, "o_mangCost"),
    O_OTHER_COST((short)18, "o_otherCost"),
    O_INTEREST((short)19, "o_interest"),
    T_MANG_COST((short)20, "t_mangCost"),
    T_OTHER_COST((short)21, "t_otherCost"),
    T_INTEREST((short)22, "t_interest"),
    IS_LAST_PLAN((short)23, "isLastPlan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // REPAY_DT
          return REPAY_DT;
        case 3: // CYCLE_NMU
          return CYCLE_NMU;
        case 4: // PRINCIPAL
          return PRINCIPAL;
        case 5: // MANG_COST
          return MANG_COST;
        case 6: // OTHER_COST
          return OTHER_COST;
        case 7: // INTEREST
          return INTEREST;
        case 8: // PID
          return PID;
        case 9: // CURRENT_MONTH
          return CURRENT_MONTH;
        case 10: // LAST_MONTH
          return LAST_MONTH;
        case 11: // NEXT_NOMTH
          return NEXT_NOMTH;
        case 12: // PREPOSITION
          return PREPOSITION;
        case 13: // PLAN_OUT_DT
          return PLAN_OUT_DT;
        case 14: // CROSS_MONTH_MANG_COST
          return CROSS_MONTH_MANG_COST;
        case 15: // CROSS_MONTH_OTHER_COST
          return CROSS_MONTH_OTHER_COST;
        case 16: // CROSS_MONTH_INTEREST
          return CROSS_MONTH_INTEREST;
        case 17: // O_MANG_COST
          return O_MANG_COST;
        case 18: // O_OTHER_COST
          return O_OTHER_COST;
        case 19: // O_INTEREST
          return O_INTEREST;
        case 20: // T_MANG_COST
          return T_MANG_COST;
        case 21: // T_OTHER_COST
          return T_OTHER_COST;
        case 22: // T_INTEREST
          return T_INTEREST;
        case 23: // IS_LAST_PLAN
          return IS_LAST_PLAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __CYCLENMU_ISSET_ID = 1;
  private static final int __PRINCIPAL_ISSET_ID = 2;
  private static final int __MANGCOST_ISSET_ID = 3;
  private static final int __OTHERCOST_ISSET_ID = 4;
  private static final int __INTEREST_ISSET_ID = 5;
  private static final int __PID_ISSET_ID = 6;
  private static final int __CURRENTMONTH_ISSET_ID = 7;
  private static final int __LASTMONTH_ISSET_ID = 8;
  private static final int __NEXTNOMTH_ISSET_ID = 9;
  private static final int __PREPOSITION_ISSET_ID = 10;
  private static final int __CROSSMONTHMANGCOST_ISSET_ID = 11;
  private static final int __CROSSMONTHOTHERCOST_ISSET_ID = 12;
  private static final int __CROSSMONTHINTEREST_ISSET_ID = 13;
  private static final int __O_MANGCOST_ISSET_ID = 14;
  private static final int __O_OTHERCOST_ISSET_ID = 15;
  private static final int __O_INTEREST_ISSET_ID = 16;
  private static final int __T_MANGCOST_ISSET_ID = 17;
  private static final int __T_OTHERCOST_ISSET_ID = 18;
  private static final int __T_INTEREST_ISSET_ID = 19;
  private static final int __ISLASTPLAN_ISSET_ID = 20;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAY_DT, new org.apache.thrift.meta_data.FieldMetaData("repayDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CYCLE_NMU, new org.apache.thrift.meta_data.FieldMetaData("cycleNmu", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("principal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("mangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("otherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CURRENT_MONTH, new org.apache.thrift.meta_data.FieldMetaData("currentMonth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_MONTH, new org.apache.thrift.meta_data.FieldMetaData("lastMonth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEXT_NOMTH, new org.apache.thrift.meta_data.FieldMetaData("nextNomth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PREPOSITION, new org.apache.thrift.meta_data.FieldMetaData("preposition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PLAN_OUT_DT, new org.apache.thrift.meta_data.FieldMetaData("planOutDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CROSS_MONTH_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("crossMonthMangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CROSS_MONTH_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("crossMonthOtherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CROSS_MONTH_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("crossMonthInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.O_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("o_mangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.O_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("o_otherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.O_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("o_interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_MANG_COST, new org.apache.thrift.meta_data.FieldMetaData("t_mangCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_OTHER_COST, new org.apache.thrift.meta_data.FieldMetaData("t_otherCost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.T_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("t_interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_LAST_PLAN, new org.apache.thrift.meta_data.FieldMetaData("isLastPlan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MonthlyReportBasePlan.class, metaDataMap);
  }

  public MonthlyReportBasePlan() {
  }

  public MonthlyReportBasePlan(
    int loanId,
    String repayDt,
    int cycleNmu,
    double principal,
    double mangCost,
    double otherCost,
    double interest,
    int pid,
    double currentMonth,
    double lastMonth,
    double nextNomth,
    boolean preposition,
    String planOutDt,
    double crossMonthMangCost,
    double crossMonthOtherCost,
    double crossMonthInterest,
    double o_mangCost,
    double o_otherCost,
    double o_interest,
    double t_mangCost,
    double t_otherCost,
    double t_interest,
    boolean isLastPlan)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.repayDt = repayDt;
    this.cycleNmu = cycleNmu;
    setCycleNmuIsSet(true);
    this.principal = principal;
    setPrincipalIsSet(true);
    this.mangCost = mangCost;
    setMangCostIsSet(true);
    this.otherCost = otherCost;
    setOtherCostIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.currentMonth = currentMonth;
    setCurrentMonthIsSet(true);
    this.lastMonth = lastMonth;
    setLastMonthIsSet(true);
    this.nextNomth = nextNomth;
    setNextNomthIsSet(true);
    this.preposition = preposition;
    setPrepositionIsSet(true);
    this.planOutDt = planOutDt;
    this.crossMonthMangCost = crossMonthMangCost;
    setCrossMonthMangCostIsSet(true);
    this.crossMonthOtherCost = crossMonthOtherCost;
    setCrossMonthOtherCostIsSet(true);
    this.crossMonthInterest = crossMonthInterest;
    setCrossMonthInterestIsSet(true);
    this.o_mangCost = o_mangCost;
    setO_mangCostIsSet(true);
    this.o_otherCost = o_otherCost;
    setO_otherCostIsSet(true);
    this.o_interest = o_interest;
    setO_interestIsSet(true);
    this.t_mangCost = t_mangCost;
    setT_mangCostIsSet(true);
    this.t_otherCost = t_otherCost;
    setT_otherCostIsSet(true);
    this.t_interest = t_interest;
    setT_interestIsSet(true);
    this.isLastPlan = isLastPlan;
    setIsLastPlanIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MonthlyReportBasePlan(MonthlyReportBasePlan other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    if (other.isSetRepayDt()) {
      this.repayDt = other.repayDt;
    }
    this.cycleNmu = other.cycleNmu;
    this.principal = other.principal;
    this.mangCost = other.mangCost;
    this.otherCost = other.otherCost;
    this.interest = other.interest;
    this.pid = other.pid;
    this.currentMonth = other.currentMonth;
    this.lastMonth = other.lastMonth;
    this.nextNomth = other.nextNomth;
    this.preposition = other.preposition;
    if (other.isSetPlanOutDt()) {
      this.planOutDt = other.planOutDt;
    }
    this.crossMonthMangCost = other.crossMonthMangCost;
    this.crossMonthOtherCost = other.crossMonthOtherCost;
    this.crossMonthInterest = other.crossMonthInterest;
    this.o_mangCost = other.o_mangCost;
    this.o_otherCost = other.o_otherCost;
    this.o_interest = other.o_interest;
    this.t_mangCost = other.t_mangCost;
    this.t_otherCost = other.t_otherCost;
    this.t_interest = other.t_interest;
    this.isLastPlan = other.isLastPlan;
  }

  public MonthlyReportBasePlan deepCopy() {
    return new MonthlyReportBasePlan(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.repayDt = null;
    setCycleNmuIsSet(false);
    this.cycleNmu = 0;
    setPrincipalIsSet(false);
    this.principal = 0.0;
    setMangCostIsSet(false);
    this.mangCost = 0.0;
    setOtherCostIsSet(false);
    this.otherCost = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setPidIsSet(false);
    this.pid = 0;
    setCurrentMonthIsSet(false);
    this.currentMonth = 0.0;
    setLastMonthIsSet(false);
    this.lastMonth = 0.0;
    setNextNomthIsSet(false);
    this.nextNomth = 0.0;
    setPrepositionIsSet(false);
    this.preposition = false;
    this.planOutDt = null;
    setCrossMonthMangCostIsSet(false);
    this.crossMonthMangCost = 0.0;
    setCrossMonthOtherCostIsSet(false);
    this.crossMonthOtherCost = 0.0;
    setCrossMonthInterestIsSet(false);
    this.crossMonthInterest = 0.0;
    setO_mangCostIsSet(false);
    this.o_mangCost = 0.0;
    setO_otherCostIsSet(false);
    this.o_otherCost = 0.0;
    setO_interestIsSet(false);
    this.o_interest = 0.0;
    setT_mangCostIsSet(false);
    this.t_mangCost = 0.0;
    setT_otherCostIsSet(false);
    this.t_otherCost = 0.0;
    setT_interestIsSet(false);
    this.t_interest = 0.0;
    setIsLastPlanIsSet(false);
    this.isLastPlan = false;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public MonthlyReportBasePlan setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getRepayDt() {
    return this.repayDt;
  }

  public MonthlyReportBasePlan setRepayDt(String repayDt) {
    this.repayDt = repayDt;
    return this;
  }

  public void unsetRepayDt() {
    this.repayDt = null;
  }

  /** Returns true if field repayDt is set (has been assigned a value) and false otherwise */
  public boolean isSetRepayDt() {
    return this.repayDt != null;
  }

  public void setRepayDtIsSet(boolean value) {
    if (!value) {
      this.repayDt = null;
    }
  }

  public int getCycleNmu() {
    return this.cycleNmu;
  }

  public MonthlyReportBasePlan setCycleNmu(int cycleNmu) {
    this.cycleNmu = cycleNmu;
    setCycleNmuIsSet(true);
    return this;
  }

  public void unsetCycleNmu() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLENMU_ISSET_ID);
  }

  /** Returns true if field cycleNmu is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleNmu() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLENMU_ISSET_ID);
  }

  public void setCycleNmuIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLENMU_ISSET_ID, value);
  }

  public double getPrincipal() {
    return this.principal;
  }

  public MonthlyReportBasePlan setPrincipal(double principal) {
    this.principal = principal;
    setPrincipalIsSet(true);
    return this;
  }

  public void unsetPrincipal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  /** Returns true if field principal is set (has been assigned a value) and false otherwise */
  public boolean isSetPrincipal() {
    return EncodingUtils.testBit(__isset_bitfield, __PRINCIPAL_ISSET_ID);
  }

  public void setPrincipalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINCIPAL_ISSET_ID, value);
  }

  public double getMangCost() {
    return this.mangCost;
  }

  public MonthlyReportBasePlan setMangCost(double mangCost) {
    this.mangCost = mangCost;
    setMangCostIsSet(true);
    return this;
  }

  public void unsetMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANGCOST_ISSET_ID);
  }

  /** Returns true if field mangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __MANGCOST_ISSET_ID);
  }

  public void setMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANGCOST_ISSET_ID, value);
  }

  public double getOtherCost() {
    return this.otherCost;
  }

  public MonthlyReportBasePlan setOtherCost(double otherCost) {
    this.otherCost = otherCost;
    setOtherCostIsSet(true);
    return this;
  }

  public void unsetOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OTHERCOST_ISSET_ID);
  }

  /** Returns true if field otherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __OTHERCOST_ISSET_ID);
  }

  public void setOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OTHERCOST_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public MonthlyReportBasePlan setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public MonthlyReportBasePlan setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public double getCurrentMonth() {
    return this.currentMonth;
  }

  public MonthlyReportBasePlan setCurrentMonth(double currentMonth) {
    this.currentMonth = currentMonth;
    setCurrentMonthIsSet(true);
    return this;
  }

  public void unsetCurrentMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRENTMONTH_ISSET_ID);
  }

  /** Returns true if field currentMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRENTMONTH_ISSET_ID);
  }

  public void setCurrentMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRENTMONTH_ISSET_ID, value);
  }

  public double getLastMonth() {
    return this.lastMonth;
  }

  public MonthlyReportBasePlan setLastMonth(double lastMonth) {
    this.lastMonth = lastMonth;
    setLastMonthIsSet(true);
    return this;
  }

  public void unsetLastMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMONTH_ISSET_ID);
  }

  /** Returns true if field lastMonth is set (has been assigned a value) and false otherwise */
  public boolean isSetLastMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMONTH_ISSET_ID);
  }

  public void setLastMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMONTH_ISSET_ID, value);
  }

  public double getNextNomth() {
    return this.nextNomth;
  }

  public MonthlyReportBasePlan setNextNomth(double nextNomth) {
    this.nextNomth = nextNomth;
    setNextNomthIsSet(true);
    return this;
  }

  public void unsetNextNomth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEXTNOMTH_ISSET_ID);
  }

  /** Returns true if field nextNomth is set (has been assigned a value) and false otherwise */
  public boolean isSetNextNomth() {
    return EncodingUtils.testBit(__isset_bitfield, __NEXTNOMTH_ISSET_ID);
  }

  public void setNextNomthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEXTNOMTH_ISSET_ID, value);
  }

  public boolean isPreposition() {
    return this.preposition;
  }

  public MonthlyReportBasePlan setPreposition(boolean preposition) {
    this.preposition = preposition;
    setPrepositionIsSet(true);
    return this;
  }

  public void unsetPreposition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREPOSITION_ISSET_ID);
  }

  /** Returns true if field preposition is set (has been assigned a value) and false otherwise */
  public boolean isSetPreposition() {
    return EncodingUtils.testBit(__isset_bitfield, __PREPOSITION_ISSET_ID);
  }

  public void setPrepositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREPOSITION_ISSET_ID, value);
  }

  public String getPlanOutDt() {
    return this.planOutDt;
  }

  public MonthlyReportBasePlan setPlanOutDt(String planOutDt) {
    this.planOutDt = planOutDt;
    return this;
  }

  public void unsetPlanOutDt() {
    this.planOutDt = null;
  }

  /** Returns true if field planOutDt is set (has been assigned a value) and false otherwise */
  public boolean isSetPlanOutDt() {
    return this.planOutDt != null;
  }

  public void setPlanOutDtIsSet(boolean value) {
    if (!value) {
      this.planOutDt = null;
    }
  }

  public double getCrossMonthMangCost() {
    return this.crossMonthMangCost;
  }

  public MonthlyReportBasePlan setCrossMonthMangCost(double crossMonthMangCost) {
    this.crossMonthMangCost = crossMonthMangCost;
    setCrossMonthMangCostIsSet(true);
    return this;
  }

  public void unsetCrossMonthMangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSMONTHMANGCOST_ISSET_ID);
  }

  /** Returns true if field crossMonthMangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossMonthMangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSMONTHMANGCOST_ISSET_ID);
  }

  public void setCrossMonthMangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSMONTHMANGCOST_ISSET_ID, value);
  }

  public double getCrossMonthOtherCost() {
    return this.crossMonthOtherCost;
  }

  public MonthlyReportBasePlan setCrossMonthOtherCost(double crossMonthOtherCost) {
    this.crossMonthOtherCost = crossMonthOtherCost;
    setCrossMonthOtherCostIsSet(true);
    return this;
  }

  public void unsetCrossMonthOtherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSMONTHOTHERCOST_ISSET_ID);
  }

  /** Returns true if field crossMonthOtherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossMonthOtherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSMONTHOTHERCOST_ISSET_ID);
  }

  public void setCrossMonthOtherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSMONTHOTHERCOST_ISSET_ID, value);
  }

  public double getCrossMonthInterest() {
    return this.crossMonthInterest;
  }

  public MonthlyReportBasePlan setCrossMonthInterest(double crossMonthInterest) {
    this.crossMonthInterest = crossMonthInterest;
    setCrossMonthInterestIsSet(true);
    return this;
  }

  public void unsetCrossMonthInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSMONTHINTEREST_ISSET_ID);
  }

  /** Returns true if field crossMonthInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossMonthInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSMONTHINTEREST_ISSET_ID);
  }

  public void setCrossMonthInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSMONTHINTEREST_ISSET_ID, value);
  }

  public double getO_mangCost() {
    return this.o_mangCost;
  }

  public MonthlyReportBasePlan setO_mangCost(double o_mangCost) {
    this.o_mangCost = o_mangCost;
    setO_mangCostIsSet(true);
    return this;
  }

  public void unsetO_mangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __O_MANGCOST_ISSET_ID);
  }

  /** Returns true if field o_mangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetO_mangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __O_MANGCOST_ISSET_ID);
  }

  public void setO_mangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __O_MANGCOST_ISSET_ID, value);
  }

  public double getO_otherCost() {
    return this.o_otherCost;
  }

  public MonthlyReportBasePlan setO_otherCost(double o_otherCost) {
    this.o_otherCost = o_otherCost;
    setO_otherCostIsSet(true);
    return this;
  }

  public void unsetO_otherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __O_OTHERCOST_ISSET_ID);
  }

  /** Returns true if field o_otherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetO_otherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __O_OTHERCOST_ISSET_ID);
  }

  public void setO_otherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __O_OTHERCOST_ISSET_ID, value);
  }

  public double getO_interest() {
    return this.o_interest;
  }

  public MonthlyReportBasePlan setO_interest(double o_interest) {
    this.o_interest = o_interest;
    setO_interestIsSet(true);
    return this;
  }

  public void unsetO_interest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __O_INTEREST_ISSET_ID);
  }

  /** Returns true if field o_interest is set (has been assigned a value) and false otherwise */
  public boolean isSetO_interest() {
    return EncodingUtils.testBit(__isset_bitfield, __O_INTEREST_ISSET_ID);
  }

  public void setO_interestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __O_INTEREST_ISSET_ID, value);
  }

  public double getT_mangCost() {
    return this.t_mangCost;
  }

  public MonthlyReportBasePlan setT_mangCost(double t_mangCost) {
    this.t_mangCost = t_mangCost;
    setT_mangCostIsSet(true);
    return this;
  }

  public void unsetT_mangCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __T_MANGCOST_ISSET_ID);
  }

  /** Returns true if field t_mangCost is set (has been assigned a value) and false otherwise */
  public boolean isSetT_mangCost() {
    return EncodingUtils.testBit(__isset_bitfield, __T_MANGCOST_ISSET_ID);
  }

  public void setT_mangCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __T_MANGCOST_ISSET_ID, value);
  }

  public double getT_otherCost() {
    return this.t_otherCost;
  }

  public MonthlyReportBasePlan setT_otherCost(double t_otherCost) {
    this.t_otherCost = t_otherCost;
    setT_otherCostIsSet(true);
    return this;
  }

  public void unsetT_otherCost() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __T_OTHERCOST_ISSET_ID);
  }

  /** Returns true if field t_otherCost is set (has been assigned a value) and false otherwise */
  public boolean isSetT_otherCost() {
    return EncodingUtils.testBit(__isset_bitfield, __T_OTHERCOST_ISSET_ID);
  }

  public void setT_otherCostIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __T_OTHERCOST_ISSET_ID, value);
  }

  public double getT_interest() {
    return this.t_interest;
  }

  public MonthlyReportBasePlan setT_interest(double t_interest) {
    this.t_interest = t_interest;
    setT_interestIsSet(true);
    return this;
  }

  public void unsetT_interest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __T_INTEREST_ISSET_ID);
  }

  /** Returns true if field t_interest is set (has been assigned a value) and false otherwise */
  public boolean isSetT_interest() {
    return EncodingUtils.testBit(__isset_bitfield, __T_INTEREST_ISSET_ID);
  }

  public void setT_interestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __T_INTEREST_ISSET_ID, value);
  }

  public boolean isIsLastPlan() {
    return this.isLastPlan;
  }

  public MonthlyReportBasePlan setIsLastPlan(boolean isLastPlan) {
    this.isLastPlan = isLastPlan;
    setIsLastPlanIsSet(true);
    return this;
  }

  public void unsetIsLastPlan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLASTPLAN_ISSET_ID);
  }

  /** Returns true if field isLastPlan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLastPlan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLASTPLAN_ISSET_ID);
  }

  public void setIsLastPlanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLASTPLAN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case REPAY_DT:
      if (value == null) {
        unsetRepayDt();
      } else {
        setRepayDt((String)value);
      }
      break;

    case CYCLE_NMU:
      if (value == null) {
        unsetCycleNmu();
      } else {
        setCycleNmu((Integer)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPrincipal();
      } else {
        setPrincipal((Double)value);
      }
      break;

    case MANG_COST:
      if (value == null) {
        unsetMangCost();
      } else {
        setMangCost((Double)value);
      }
      break;

    case OTHER_COST:
      if (value == null) {
        unsetOtherCost();
      } else {
        setOtherCost((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CURRENT_MONTH:
      if (value == null) {
        unsetCurrentMonth();
      } else {
        setCurrentMonth((Double)value);
      }
      break;

    case LAST_MONTH:
      if (value == null) {
        unsetLastMonth();
      } else {
        setLastMonth((Double)value);
      }
      break;

    case NEXT_NOMTH:
      if (value == null) {
        unsetNextNomth();
      } else {
        setNextNomth((Double)value);
      }
      break;

    case PREPOSITION:
      if (value == null) {
        unsetPreposition();
      } else {
        setPreposition((Boolean)value);
      }
      break;

    case PLAN_OUT_DT:
      if (value == null) {
        unsetPlanOutDt();
      } else {
        setPlanOutDt((String)value);
      }
      break;

    case CROSS_MONTH_MANG_COST:
      if (value == null) {
        unsetCrossMonthMangCost();
      } else {
        setCrossMonthMangCost((Double)value);
      }
      break;

    case CROSS_MONTH_OTHER_COST:
      if (value == null) {
        unsetCrossMonthOtherCost();
      } else {
        setCrossMonthOtherCost((Double)value);
      }
      break;

    case CROSS_MONTH_INTEREST:
      if (value == null) {
        unsetCrossMonthInterest();
      } else {
        setCrossMonthInterest((Double)value);
      }
      break;

    case O_MANG_COST:
      if (value == null) {
        unsetO_mangCost();
      } else {
        setO_mangCost((Double)value);
      }
      break;

    case O_OTHER_COST:
      if (value == null) {
        unsetO_otherCost();
      } else {
        setO_otherCost((Double)value);
      }
      break;

    case O_INTEREST:
      if (value == null) {
        unsetO_interest();
      } else {
        setO_interest((Double)value);
      }
      break;

    case T_MANG_COST:
      if (value == null) {
        unsetT_mangCost();
      } else {
        setT_mangCost((Double)value);
      }
      break;

    case T_OTHER_COST:
      if (value == null) {
        unsetT_otherCost();
      } else {
        setT_otherCost((Double)value);
      }
      break;

    case T_INTEREST:
      if (value == null) {
        unsetT_interest();
      } else {
        setT_interest((Double)value);
      }
      break;

    case IS_LAST_PLAN:
      if (value == null) {
        unsetIsLastPlan();
      } else {
        setIsLastPlan((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case REPAY_DT:
      return getRepayDt();

    case CYCLE_NMU:
      return Integer.valueOf(getCycleNmu());

    case PRINCIPAL:
      return Double.valueOf(getPrincipal());

    case MANG_COST:
      return Double.valueOf(getMangCost());

    case OTHER_COST:
      return Double.valueOf(getOtherCost());

    case INTEREST:
      return Double.valueOf(getInterest());

    case PID:
      return Integer.valueOf(getPid());

    case CURRENT_MONTH:
      return Double.valueOf(getCurrentMonth());

    case LAST_MONTH:
      return Double.valueOf(getLastMonth());

    case NEXT_NOMTH:
      return Double.valueOf(getNextNomth());

    case PREPOSITION:
      return Boolean.valueOf(isPreposition());

    case PLAN_OUT_DT:
      return getPlanOutDt();

    case CROSS_MONTH_MANG_COST:
      return Double.valueOf(getCrossMonthMangCost());

    case CROSS_MONTH_OTHER_COST:
      return Double.valueOf(getCrossMonthOtherCost());

    case CROSS_MONTH_INTEREST:
      return Double.valueOf(getCrossMonthInterest());

    case O_MANG_COST:
      return Double.valueOf(getO_mangCost());

    case O_OTHER_COST:
      return Double.valueOf(getO_otherCost());

    case O_INTEREST:
      return Double.valueOf(getO_interest());

    case T_MANG_COST:
      return Double.valueOf(getT_mangCost());

    case T_OTHER_COST:
      return Double.valueOf(getT_otherCost());

    case T_INTEREST:
      return Double.valueOf(getT_interest());

    case IS_LAST_PLAN:
      return Boolean.valueOf(isIsLastPlan());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case REPAY_DT:
      return isSetRepayDt();
    case CYCLE_NMU:
      return isSetCycleNmu();
    case PRINCIPAL:
      return isSetPrincipal();
    case MANG_COST:
      return isSetMangCost();
    case OTHER_COST:
      return isSetOtherCost();
    case INTEREST:
      return isSetInterest();
    case PID:
      return isSetPid();
    case CURRENT_MONTH:
      return isSetCurrentMonth();
    case LAST_MONTH:
      return isSetLastMonth();
    case NEXT_NOMTH:
      return isSetNextNomth();
    case PREPOSITION:
      return isSetPreposition();
    case PLAN_OUT_DT:
      return isSetPlanOutDt();
    case CROSS_MONTH_MANG_COST:
      return isSetCrossMonthMangCost();
    case CROSS_MONTH_OTHER_COST:
      return isSetCrossMonthOtherCost();
    case CROSS_MONTH_INTEREST:
      return isSetCrossMonthInterest();
    case O_MANG_COST:
      return isSetO_mangCost();
    case O_OTHER_COST:
      return isSetO_otherCost();
    case O_INTEREST:
      return isSetO_interest();
    case T_MANG_COST:
      return isSetT_mangCost();
    case T_OTHER_COST:
      return isSetT_otherCost();
    case T_INTEREST:
      return isSetT_interest();
    case IS_LAST_PLAN:
      return isSetIsLastPlan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MonthlyReportBasePlan)
      return this.equals((MonthlyReportBasePlan)that);
    return false;
  }

  public boolean equals(MonthlyReportBasePlan that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_repayDt = true && this.isSetRepayDt();
    boolean that_present_repayDt = true && that.isSetRepayDt();
    if (this_present_repayDt || that_present_repayDt) {
      if (!(this_present_repayDt && that_present_repayDt))
        return false;
      if (!this.repayDt.equals(that.repayDt))
        return false;
    }

    boolean this_present_cycleNmu = true;
    boolean that_present_cycleNmu = true;
    if (this_present_cycleNmu || that_present_cycleNmu) {
      if (!(this_present_cycleNmu && that_present_cycleNmu))
        return false;
      if (this.cycleNmu != that.cycleNmu)
        return false;
    }

    boolean this_present_principal = true;
    boolean that_present_principal = true;
    if (this_present_principal || that_present_principal) {
      if (!(this_present_principal && that_present_principal))
        return false;
      if (this.principal != that.principal)
        return false;
    }

    boolean this_present_mangCost = true;
    boolean that_present_mangCost = true;
    if (this_present_mangCost || that_present_mangCost) {
      if (!(this_present_mangCost && that_present_mangCost))
        return false;
      if (this.mangCost != that.mangCost)
        return false;
    }

    boolean this_present_otherCost = true;
    boolean that_present_otherCost = true;
    if (this_present_otherCost || that_present_otherCost) {
      if (!(this_present_otherCost && that_present_otherCost))
        return false;
      if (this.otherCost != that.otherCost)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_currentMonth = true;
    boolean that_present_currentMonth = true;
    if (this_present_currentMonth || that_present_currentMonth) {
      if (!(this_present_currentMonth && that_present_currentMonth))
        return false;
      if (this.currentMonth != that.currentMonth)
        return false;
    }

    boolean this_present_lastMonth = true;
    boolean that_present_lastMonth = true;
    if (this_present_lastMonth || that_present_lastMonth) {
      if (!(this_present_lastMonth && that_present_lastMonth))
        return false;
      if (this.lastMonth != that.lastMonth)
        return false;
    }

    boolean this_present_nextNomth = true;
    boolean that_present_nextNomth = true;
    if (this_present_nextNomth || that_present_nextNomth) {
      if (!(this_present_nextNomth && that_present_nextNomth))
        return false;
      if (this.nextNomth != that.nextNomth)
        return false;
    }

    boolean this_present_preposition = true;
    boolean that_present_preposition = true;
    if (this_present_preposition || that_present_preposition) {
      if (!(this_present_preposition && that_present_preposition))
        return false;
      if (this.preposition != that.preposition)
        return false;
    }

    boolean this_present_planOutDt = true && this.isSetPlanOutDt();
    boolean that_present_planOutDt = true && that.isSetPlanOutDt();
    if (this_present_planOutDt || that_present_planOutDt) {
      if (!(this_present_planOutDt && that_present_planOutDt))
        return false;
      if (!this.planOutDt.equals(that.planOutDt))
        return false;
    }

    boolean this_present_crossMonthMangCost = true;
    boolean that_present_crossMonthMangCost = true;
    if (this_present_crossMonthMangCost || that_present_crossMonthMangCost) {
      if (!(this_present_crossMonthMangCost && that_present_crossMonthMangCost))
        return false;
      if (this.crossMonthMangCost != that.crossMonthMangCost)
        return false;
    }

    boolean this_present_crossMonthOtherCost = true;
    boolean that_present_crossMonthOtherCost = true;
    if (this_present_crossMonthOtherCost || that_present_crossMonthOtherCost) {
      if (!(this_present_crossMonthOtherCost && that_present_crossMonthOtherCost))
        return false;
      if (this.crossMonthOtherCost != that.crossMonthOtherCost)
        return false;
    }

    boolean this_present_crossMonthInterest = true;
    boolean that_present_crossMonthInterest = true;
    if (this_present_crossMonthInterest || that_present_crossMonthInterest) {
      if (!(this_present_crossMonthInterest && that_present_crossMonthInterest))
        return false;
      if (this.crossMonthInterest != that.crossMonthInterest)
        return false;
    }

    boolean this_present_o_mangCost = true;
    boolean that_present_o_mangCost = true;
    if (this_present_o_mangCost || that_present_o_mangCost) {
      if (!(this_present_o_mangCost && that_present_o_mangCost))
        return false;
      if (this.o_mangCost != that.o_mangCost)
        return false;
    }

    boolean this_present_o_otherCost = true;
    boolean that_present_o_otherCost = true;
    if (this_present_o_otherCost || that_present_o_otherCost) {
      if (!(this_present_o_otherCost && that_present_o_otherCost))
        return false;
      if (this.o_otherCost != that.o_otherCost)
        return false;
    }

    boolean this_present_o_interest = true;
    boolean that_present_o_interest = true;
    if (this_present_o_interest || that_present_o_interest) {
      if (!(this_present_o_interest && that_present_o_interest))
        return false;
      if (this.o_interest != that.o_interest)
        return false;
    }

    boolean this_present_t_mangCost = true;
    boolean that_present_t_mangCost = true;
    if (this_present_t_mangCost || that_present_t_mangCost) {
      if (!(this_present_t_mangCost && that_present_t_mangCost))
        return false;
      if (this.t_mangCost != that.t_mangCost)
        return false;
    }

    boolean this_present_t_otherCost = true;
    boolean that_present_t_otherCost = true;
    if (this_present_t_otherCost || that_present_t_otherCost) {
      if (!(this_present_t_otherCost && that_present_t_otherCost))
        return false;
      if (this.t_otherCost != that.t_otherCost)
        return false;
    }

    boolean this_present_t_interest = true;
    boolean that_present_t_interest = true;
    if (this_present_t_interest || that_present_t_interest) {
      if (!(this_present_t_interest && that_present_t_interest))
        return false;
      if (this.t_interest != that.t_interest)
        return false;
    }

    boolean this_present_isLastPlan = true;
    boolean that_present_isLastPlan = true;
    if (this_present_isLastPlan || that_present_isLastPlan) {
      if (!(this_present_isLastPlan && that_present_isLastPlan))
        return false;
      if (this.isLastPlan != that.isLastPlan)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_repayDt = true && (isSetRepayDt());
    list.add(present_repayDt);
    if (present_repayDt)
      list.add(repayDt);

    boolean present_cycleNmu = true;
    list.add(present_cycleNmu);
    if (present_cycleNmu)
      list.add(cycleNmu);

    boolean present_principal = true;
    list.add(present_principal);
    if (present_principal)
      list.add(principal);

    boolean present_mangCost = true;
    list.add(present_mangCost);
    if (present_mangCost)
      list.add(mangCost);

    boolean present_otherCost = true;
    list.add(present_otherCost);
    if (present_otherCost)
      list.add(otherCost);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_currentMonth = true;
    list.add(present_currentMonth);
    if (present_currentMonth)
      list.add(currentMonth);

    boolean present_lastMonth = true;
    list.add(present_lastMonth);
    if (present_lastMonth)
      list.add(lastMonth);

    boolean present_nextNomth = true;
    list.add(present_nextNomth);
    if (present_nextNomth)
      list.add(nextNomth);

    boolean present_preposition = true;
    list.add(present_preposition);
    if (present_preposition)
      list.add(preposition);

    boolean present_planOutDt = true && (isSetPlanOutDt());
    list.add(present_planOutDt);
    if (present_planOutDt)
      list.add(planOutDt);

    boolean present_crossMonthMangCost = true;
    list.add(present_crossMonthMangCost);
    if (present_crossMonthMangCost)
      list.add(crossMonthMangCost);

    boolean present_crossMonthOtherCost = true;
    list.add(present_crossMonthOtherCost);
    if (present_crossMonthOtherCost)
      list.add(crossMonthOtherCost);

    boolean present_crossMonthInterest = true;
    list.add(present_crossMonthInterest);
    if (present_crossMonthInterest)
      list.add(crossMonthInterest);

    boolean present_o_mangCost = true;
    list.add(present_o_mangCost);
    if (present_o_mangCost)
      list.add(o_mangCost);

    boolean present_o_otherCost = true;
    list.add(present_o_otherCost);
    if (present_o_otherCost)
      list.add(o_otherCost);

    boolean present_o_interest = true;
    list.add(present_o_interest);
    if (present_o_interest)
      list.add(o_interest);

    boolean present_t_mangCost = true;
    list.add(present_t_mangCost);
    if (present_t_mangCost)
      list.add(t_mangCost);

    boolean present_t_otherCost = true;
    list.add(present_t_otherCost);
    if (present_t_otherCost)
      list.add(t_otherCost);

    boolean present_t_interest = true;
    list.add(present_t_interest);
    if (present_t_interest)
      list.add(t_interest);

    boolean present_isLastPlan = true;
    list.add(present_isLastPlan);
    if (present_isLastPlan)
      list.add(isLastPlan);

    return list.hashCode();
  }

  @Override
  public int compareTo(MonthlyReportBasePlan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepayDt()).compareTo(other.isSetRepayDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepayDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repayDt, other.repayDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleNmu()).compareTo(other.isSetCycleNmu());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleNmu()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleNmu, other.cycleNmu);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrincipal()).compareTo(other.isSetPrincipal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrincipal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principal, other.principal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMangCost()).compareTo(other.isSetMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mangCost, other.mangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherCost()).compareTo(other.isSetOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherCost, other.otherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentMonth()).compareTo(other.isSetCurrentMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentMonth, other.currentMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastMonth()).compareTo(other.isSetLastMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastMonth, other.lastMonth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextNomth()).compareTo(other.isSetNextNomth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextNomth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextNomth, other.nextNomth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreposition()).compareTo(other.isSetPreposition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreposition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preposition, other.preposition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlanOutDt()).compareTo(other.isSetPlanOutDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlanOutDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planOutDt, other.planOutDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossMonthMangCost()).compareTo(other.isSetCrossMonthMangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossMonthMangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossMonthMangCost, other.crossMonthMangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossMonthOtherCost()).compareTo(other.isSetCrossMonthOtherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossMonthOtherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossMonthOtherCost, other.crossMonthOtherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossMonthInterest()).compareTo(other.isSetCrossMonthInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossMonthInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossMonthInterest, other.crossMonthInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO_mangCost()).compareTo(other.isSetO_mangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO_mangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o_mangCost, other.o_mangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO_otherCost()).compareTo(other.isSetO_otherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO_otherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o_otherCost, other.o_otherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetO_interest()).compareTo(other.isSetO_interest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetO_interest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.o_interest, other.o_interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetT_mangCost()).compareTo(other.isSetT_mangCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT_mangCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_mangCost, other.t_mangCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetT_otherCost()).compareTo(other.isSetT_otherCost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT_otherCost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_otherCost, other.t_otherCost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetT_interest()).compareTo(other.isSetT_interest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT_interest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t_interest, other.t_interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsLastPlan()).compareTo(other.isSetIsLastPlan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLastPlan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLastPlan, other.isLastPlan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MonthlyReportBasePlan(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repayDt:");
    if (this.repayDt == null) {
      sb.append("null");
    } else {
      sb.append(this.repayDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleNmu:");
    sb.append(this.cycleNmu);
    first = false;
    if (!first) sb.append(", ");
    sb.append("principal:");
    sb.append(this.principal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mangCost:");
    sb.append(this.mangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherCost:");
    sb.append(this.otherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentMonth:");
    sb.append(this.currentMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastMonth:");
    sb.append(this.lastMonth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nextNomth:");
    sb.append(this.nextNomth);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preposition:");
    sb.append(this.preposition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("planOutDt:");
    if (this.planOutDt == null) {
      sb.append("null");
    } else {
      sb.append(this.planOutDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossMonthMangCost:");
    sb.append(this.crossMonthMangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossMonthOtherCost:");
    sb.append(this.crossMonthOtherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("crossMonthInterest:");
    sb.append(this.crossMonthInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o_mangCost:");
    sb.append(this.o_mangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o_otherCost:");
    sb.append(this.o_otherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("o_interest:");
    sb.append(this.o_interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("t_mangCost:");
    sb.append(this.t_mangCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("t_otherCost:");
    sb.append(this.t_otherCost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("t_interest:");
    sb.append(this.t_interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isLastPlan:");
    sb.append(this.isLastPlan);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MonthlyReportBasePlanStandardSchemeFactory implements SchemeFactory {
    public MonthlyReportBasePlanStandardScheme getScheme() {
      return new MonthlyReportBasePlanStandardScheme();
    }
  }

  private static class MonthlyReportBasePlanStandardScheme extends StandardScheme<MonthlyReportBasePlan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MonthlyReportBasePlan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPAY_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repayDt = iprot.readString();
              struct.setRepayDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CYCLE_NMU
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleNmu = iprot.readI32();
              struct.setCycleNmuIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.principal = iprot.readDouble();
              struct.setPrincipalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mangCost = iprot.readDouble();
              struct.setMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.otherCost = iprot.readDouble();
              struct.setOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURRENT_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currentMonth = iprot.readDouble();
              struct.setCurrentMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastMonth = iprot.readDouble();
              struct.setLastMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NEXT_NOMTH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.nextNomth = iprot.readDouble();
              struct.setNextNomthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PREPOSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.preposition = iprot.readBool();
              struct.setPrepositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PLAN_OUT_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planOutDt = iprot.readString();
              struct.setPlanOutDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CROSS_MONTH_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.crossMonthMangCost = iprot.readDouble();
              struct.setCrossMonthMangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CROSS_MONTH_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.crossMonthOtherCost = iprot.readDouble();
              struct.setCrossMonthOtherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CROSS_MONTH_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.crossMonthInterest = iprot.readDouble();
              struct.setCrossMonthInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // O_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.o_mangCost = iprot.readDouble();
              struct.setO_mangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // O_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.o_otherCost = iprot.readDouble();
              struct.setO_otherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // O_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.o_interest = iprot.readDouble();
              struct.setO_interestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // T_MANG_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.t_mangCost = iprot.readDouble();
              struct.setT_mangCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // T_OTHER_COST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.t_otherCost = iprot.readDouble();
              struct.setT_otherCostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // T_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.t_interest = iprot.readDouble();
              struct.setT_interestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_LAST_PLAN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLastPlan = iprot.readBool();
              struct.setIsLastPlanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MonthlyReportBasePlan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.repayDt != null) {
        oprot.writeFieldBegin(REPAY_DT_FIELD_DESC);
        oprot.writeString(struct.repayDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CYCLE_NMU_FIELD_DESC);
      oprot.writeI32(struct.cycleNmu);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
      oprot.writeDouble(struct.principal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.mangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.otherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CURRENT_MONTH_FIELD_DESC);
      oprot.writeDouble(struct.currentMonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_MONTH_FIELD_DESC);
      oprot.writeDouble(struct.lastMonth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEXT_NOMTH_FIELD_DESC);
      oprot.writeDouble(struct.nextNomth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PREPOSITION_FIELD_DESC);
      oprot.writeBool(struct.preposition);
      oprot.writeFieldEnd();
      if (struct.planOutDt != null) {
        oprot.writeFieldBegin(PLAN_OUT_DT_FIELD_DESC);
        oprot.writeString(struct.planOutDt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CROSS_MONTH_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.crossMonthMangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CROSS_MONTH_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.crossMonthOtherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CROSS_MONTH_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.crossMonthInterest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(O_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.o_mangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(O_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.o_otherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(O_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.o_interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(T_MANG_COST_FIELD_DESC);
      oprot.writeDouble(struct.t_mangCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(T_OTHER_COST_FIELD_DESC);
      oprot.writeDouble(struct.t_otherCost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(T_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.t_interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_LAST_PLAN_FIELD_DESC);
      oprot.writeBool(struct.isLastPlan);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MonthlyReportBasePlanTupleSchemeFactory implements SchemeFactory {
    public MonthlyReportBasePlanTupleScheme getScheme() {
      return new MonthlyReportBasePlanTupleScheme();
    }
  }

  private static class MonthlyReportBasePlanTupleScheme extends TupleScheme<MonthlyReportBasePlan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MonthlyReportBasePlan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetRepayDt()) {
        optionals.set(1);
      }
      if (struct.isSetCycleNmu()) {
        optionals.set(2);
      }
      if (struct.isSetPrincipal()) {
        optionals.set(3);
      }
      if (struct.isSetMangCost()) {
        optionals.set(4);
      }
      if (struct.isSetOtherCost()) {
        optionals.set(5);
      }
      if (struct.isSetInterest()) {
        optionals.set(6);
      }
      if (struct.isSetPid()) {
        optionals.set(7);
      }
      if (struct.isSetCurrentMonth()) {
        optionals.set(8);
      }
      if (struct.isSetLastMonth()) {
        optionals.set(9);
      }
      if (struct.isSetNextNomth()) {
        optionals.set(10);
      }
      if (struct.isSetPreposition()) {
        optionals.set(11);
      }
      if (struct.isSetPlanOutDt()) {
        optionals.set(12);
      }
      if (struct.isSetCrossMonthMangCost()) {
        optionals.set(13);
      }
      if (struct.isSetCrossMonthOtherCost()) {
        optionals.set(14);
      }
      if (struct.isSetCrossMonthInterest()) {
        optionals.set(15);
      }
      if (struct.isSetO_mangCost()) {
        optionals.set(16);
      }
      if (struct.isSetO_otherCost()) {
        optionals.set(17);
      }
      if (struct.isSetO_interest()) {
        optionals.set(18);
      }
      if (struct.isSetT_mangCost()) {
        optionals.set(19);
      }
      if (struct.isSetT_otherCost()) {
        optionals.set(20);
      }
      if (struct.isSetT_interest()) {
        optionals.set(21);
      }
      if (struct.isSetIsLastPlan()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetRepayDt()) {
        oprot.writeString(struct.repayDt);
      }
      if (struct.isSetCycleNmu()) {
        oprot.writeI32(struct.cycleNmu);
      }
      if (struct.isSetPrincipal()) {
        oprot.writeDouble(struct.principal);
      }
      if (struct.isSetMangCost()) {
        oprot.writeDouble(struct.mangCost);
      }
      if (struct.isSetOtherCost()) {
        oprot.writeDouble(struct.otherCost);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCurrentMonth()) {
        oprot.writeDouble(struct.currentMonth);
      }
      if (struct.isSetLastMonth()) {
        oprot.writeDouble(struct.lastMonth);
      }
      if (struct.isSetNextNomth()) {
        oprot.writeDouble(struct.nextNomth);
      }
      if (struct.isSetPreposition()) {
        oprot.writeBool(struct.preposition);
      }
      if (struct.isSetPlanOutDt()) {
        oprot.writeString(struct.planOutDt);
      }
      if (struct.isSetCrossMonthMangCost()) {
        oprot.writeDouble(struct.crossMonthMangCost);
      }
      if (struct.isSetCrossMonthOtherCost()) {
        oprot.writeDouble(struct.crossMonthOtherCost);
      }
      if (struct.isSetCrossMonthInterest()) {
        oprot.writeDouble(struct.crossMonthInterest);
      }
      if (struct.isSetO_mangCost()) {
        oprot.writeDouble(struct.o_mangCost);
      }
      if (struct.isSetO_otherCost()) {
        oprot.writeDouble(struct.o_otherCost);
      }
      if (struct.isSetO_interest()) {
        oprot.writeDouble(struct.o_interest);
      }
      if (struct.isSetT_mangCost()) {
        oprot.writeDouble(struct.t_mangCost);
      }
      if (struct.isSetT_otherCost()) {
        oprot.writeDouble(struct.t_otherCost);
      }
      if (struct.isSetT_interest()) {
        oprot.writeDouble(struct.t_interest);
      }
      if (struct.isSetIsLastPlan()) {
        oprot.writeBool(struct.isLastPlan);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MonthlyReportBasePlan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.repayDt = iprot.readString();
        struct.setRepayDtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cycleNmu = iprot.readI32();
        struct.setCycleNmuIsSet(true);
      }
      if (incoming.get(3)) {
        struct.principal = iprot.readDouble();
        struct.setPrincipalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.mangCost = iprot.readDouble();
        struct.setMangCostIsSet(true);
      }
      if (incoming.get(5)) {
        struct.otherCost = iprot.readDouble();
        struct.setOtherCostIsSet(true);
      }
      if (incoming.get(6)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(7)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.currentMonth = iprot.readDouble();
        struct.setCurrentMonthIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastMonth = iprot.readDouble();
        struct.setLastMonthIsSet(true);
      }
      if (incoming.get(10)) {
        struct.nextNomth = iprot.readDouble();
        struct.setNextNomthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.preposition = iprot.readBool();
        struct.setPrepositionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.planOutDt = iprot.readString();
        struct.setPlanOutDtIsSet(true);
      }
      if (incoming.get(13)) {
        struct.crossMonthMangCost = iprot.readDouble();
        struct.setCrossMonthMangCostIsSet(true);
      }
      if (incoming.get(14)) {
        struct.crossMonthOtherCost = iprot.readDouble();
        struct.setCrossMonthOtherCostIsSet(true);
      }
      if (incoming.get(15)) {
        struct.crossMonthInterest = iprot.readDouble();
        struct.setCrossMonthInterestIsSet(true);
      }
      if (incoming.get(16)) {
        struct.o_mangCost = iprot.readDouble();
        struct.setO_mangCostIsSet(true);
      }
      if (incoming.get(17)) {
        struct.o_otherCost = iprot.readDouble();
        struct.setO_otherCostIsSet(true);
      }
      if (incoming.get(18)) {
        struct.o_interest = iprot.readDouble();
        struct.setO_interestIsSet(true);
      }
      if (incoming.get(19)) {
        struct.t_mangCost = iprot.readDouble();
        struct.setT_mangCostIsSet(true);
      }
      if (incoming.get(20)) {
        struct.t_otherCost = iprot.readDouble();
        struct.setT_otherCostIsSet(true);
      }
      if (incoming.get(21)) {
        struct.t_interest = iprot.readDouble();
        struct.setT_interestIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isLastPlan = iprot.readBool();
        struct.setIsLastPlanIsSet(true);
      }
    }
  }

}


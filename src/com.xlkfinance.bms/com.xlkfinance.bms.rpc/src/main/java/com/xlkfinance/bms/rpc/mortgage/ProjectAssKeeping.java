/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.mortgage;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-10")
public class ProjectAssKeeping implements org.apache.thrift.TBase<ProjectAssKeeping, ProjectAssKeeping._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectAssKeeping> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectAssKeeping");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SAVE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("saveUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SAVE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("saveUserName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SAVE_DTTM_FIELD_DESC = new org.apache.thrift.protocol.TField("saveDttm", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SAVE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("saveRemark", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectAssKeepingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectAssKeepingTupleSchemeFactory());
  }

  public int pid; // required
  public int baseId; // required
  public int saveUserId; // required
  public String saveUserName; // required
  public int status; // required
  public String saveDttm; // required
  public String saveRemark; // required
  public int page; // required
  public int rows; // required
  public String itemName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    BASE_ID((short)2, "baseId"),
    SAVE_USER_ID((short)3, "saveUserId"),
    SAVE_USER_NAME((short)4, "saveUserName"),
    STATUS((short)5, "status"),
    SAVE_DTTM((short)6, "saveDttm"),
    SAVE_REMARK((short)7, "saveRemark"),
    PAGE((short)8, "page"),
    ROWS((short)9, "rows"),
    ITEM_NAME((short)10, "itemName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // BASE_ID
          return BASE_ID;
        case 3: // SAVE_USER_ID
          return SAVE_USER_ID;
        case 4: // SAVE_USER_NAME
          return SAVE_USER_NAME;
        case 5: // STATUS
          return STATUS;
        case 6: // SAVE_DTTM
          return SAVE_DTTM;
        case 7: // SAVE_REMARK
          return SAVE_REMARK;
        case 8: // PAGE
          return PAGE;
        case 9: // ROWS
          return ROWS;
        case 10: // ITEM_NAME
          return ITEM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __BASEID_ISSET_ID = 1;
  private static final int __SAVEUSERID_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __PAGE_ISSET_ID = 4;
  private static final int __ROWS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAVE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("saveUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAVE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("saveUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SAVE_DTTM, new org.apache.thrift.meta_data.FieldMetaData("saveDttm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAVE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("saveRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectAssKeeping.class, metaDataMap);
  }

  public ProjectAssKeeping() {
  }

  public ProjectAssKeeping(
    int pid,
    int baseId,
    int saveUserId,
    String saveUserName,
    int status,
    String saveDttm,
    String saveRemark,
    int page,
    int rows,
    String itemName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.baseId = baseId;
    setBaseIdIsSet(true);
    this.saveUserId = saveUserId;
    setSaveUserIdIsSet(true);
    this.saveUserName = saveUserName;
    this.status = status;
    setStatusIsSet(true);
    this.saveDttm = saveDttm;
    this.saveRemark = saveRemark;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.itemName = itemName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectAssKeeping(ProjectAssKeeping other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.baseId = other.baseId;
    this.saveUserId = other.saveUserId;
    if (other.isSetSaveUserName()) {
      this.saveUserName = other.saveUserName;
    }
    this.status = other.status;
    if (other.isSetSaveDttm()) {
      this.saveDttm = other.saveDttm;
    }
    if (other.isSetSaveRemark()) {
      this.saveRemark = other.saveRemark;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
  }

  public ProjectAssKeeping deepCopy() {
    return new ProjectAssKeeping(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setBaseIdIsSet(false);
    this.baseId = 0;
    setSaveUserIdIsSet(false);
    this.saveUserId = 0;
    this.saveUserName = null;
    setStatusIsSet(false);
    this.status = 0;
    this.saveDttm = null;
    this.saveRemark = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.itemName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectAssKeeping setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getBaseId() {
    return this.baseId;
  }

  public ProjectAssKeeping setBaseId(int baseId) {
    this.baseId = baseId;
    setBaseIdIsSet(true);
    return this;
  }

  public void unsetBaseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseId() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
  }

  public void setBaseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
  }

  public int getSaveUserId() {
    return this.saveUserId;
  }

  public ProjectAssKeeping setSaveUserId(int saveUserId) {
    this.saveUserId = saveUserId;
    setSaveUserIdIsSet(true);
    return this;
  }

  public void unsetSaveUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SAVEUSERID_ISSET_ID);
  }

  /** Returns true if field saveUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SAVEUSERID_ISSET_ID);
  }

  public void setSaveUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SAVEUSERID_ISSET_ID, value);
  }

  public String getSaveUserName() {
    return this.saveUserName;
  }

  public ProjectAssKeeping setSaveUserName(String saveUserName) {
    this.saveUserName = saveUserName;
    return this;
  }

  public void unsetSaveUserName() {
    this.saveUserName = null;
  }

  /** Returns true if field saveUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveUserName() {
    return this.saveUserName != null;
  }

  public void setSaveUserNameIsSet(boolean value) {
    if (!value) {
      this.saveUserName = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public ProjectAssKeeping setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getSaveDttm() {
    return this.saveDttm;
  }

  public ProjectAssKeeping setSaveDttm(String saveDttm) {
    this.saveDttm = saveDttm;
    return this;
  }

  public void unsetSaveDttm() {
    this.saveDttm = null;
  }

  /** Returns true if field saveDttm is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveDttm() {
    return this.saveDttm != null;
  }

  public void setSaveDttmIsSet(boolean value) {
    if (!value) {
      this.saveDttm = null;
    }
  }

  public String getSaveRemark() {
    return this.saveRemark;
  }

  public ProjectAssKeeping setSaveRemark(String saveRemark) {
    this.saveRemark = saveRemark;
    return this;
  }

  public void unsetSaveRemark() {
    this.saveRemark = null;
  }

  /** Returns true if field saveRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveRemark() {
    return this.saveRemark != null;
  }

  public void setSaveRemarkIsSet(boolean value) {
    if (!value) {
      this.saveRemark = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ProjectAssKeeping setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ProjectAssKeeping setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getItemName() {
    return this.itemName;
  }

  public ProjectAssKeeping setItemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case BASE_ID:
      if (value == null) {
        unsetBaseId();
      } else {
        setBaseId((Integer)value);
      }
      break;

    case SAVE_USER_ID:
      if (value == null) {
        unsetSaveUserId();
      } else {
        setSaveUserId((Integer)value);
      }
      break;

    case SAVE_USER_NAME:
      if (value == null) {
        unsetSaveUserName();
      } else {
        setSaveUserName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SAVE_DTTM:
      if (value == null) {
        unsetSaveDttm();
      } else {
        setSaveDttm((String)value);
      }
      break;

    case SAVE_REMARK:
      if (value == null) {
        unsetSaveRemark();
      } else {
        setSaveRemark((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case BASE_ID:
      return Integer.valueOf(getBaseId());

    case SAVE_USER_ID:
      return Integer.valueOf(getSaveUserId());

    case SAVE_USER_NAME:
      return getSaveUserName();

    case STATUS:
      return Integer.valueOf(getStatus());

    case SAVE_DTTM:
      return getSaveDttm();

    case SAVE_REMARK:
      return getSaveRemark();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case ITEM_NAME:
      return getItemName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case BASE_ID:
      return isSetBaseId();
    case SAVE_USER_ID:
      return isSetSaveUserId();
    case SAVE_USER_NAME:
      return isSetSaveUserName();
    case STATUS:
      return isSetStatus();
    case SAVE_DTTM:
      return isSetSaveDttm();
    case SAVE_REMARK:
      return isSetSaveRemark();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case ITEM_NAME:
      return isSetItemName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectAssKeeping)
      return this.equals((ProjectAssKeeping)that);
    return false;
  }

  public boolean equals(ProjectAssKeeping that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_baseId = true;
    boolean that_present_baseId = true;
    if (this_present_baseId || that_present_baseId) {
      if (!(this_present_baseId && that_present_baseId))
        return false;
      if (this.baseId != that.baseId)
        return false;
    }

    boolean this_present_saveUserId = true;
    boolean that_present_saveUserId = true;
    if (this_present_saveUserId || that_present_saveUserId) {
      if (!(this_present_saveUserId && that_present_saveUserId))
        return false;
      if (this.saveUserId != that.saveUserId)
        return false;
    }

    boolean this_present_saveUserName = true && this.isSetSaveUserName();
    boolean that_present_saveUserName = true && that.isSetSaveUserName();
    if (this_present_saveUserName || that_present_saveUserName) {
      if (!(this_present_saveUserName && that_present_saveUserName))
        return false;
      if (!this.saveUserName.equals(that.saveUserName))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_saveDttm = true && this.isSetSaveDttm();
    boolean that_present_saveDttm = true && that.isSetSaveDttm();
    if (this_present_saveDttm || that_present_saveDttm) {
      if (!(this_present_saveDttm && that_present_saveDttm))
        return false;
      if (!this.saveDttm.equals(that.saveDttm))
        return false;
    }

    boolean this_present_saveRemark = true && this.isSetSaveRemark();
    boolean that_present_saveRemark = true && that.isSetSaveRemark();
    if (this_present_saveRemark || that_present_saveRemark) {
      if (!(this_present_saveRemark && that_present_saveRemark))
        return false;
      if (!this.saveRemark.equals(that.saveRemark))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_baseId = true;
    list.add(present_baseId);
    if (present_baseId)
      list.add(baseId);

    boolean present_saveUserId = true;
    list.add(present_saveUserId);
    if (present_saveUserId)
      list.add(saveUserId);

    boolean present_saveUserName = true && (isSetSaveUserName());
    list.add(present_saveUserName);
    if (present_saveUserName)
      list.add(saveUserName);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_saveDttm = true && (isSetSaveDttm());
    list.add(present_saveDttm);
    if (present_saveDttm)
      list.add(saveDttm);

    boolean present_saveRemark = true && (isSetSaveRemark());
    list.add(present_saveRemark);
    if (present_saveRemark)
      list.add(saveRemark);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_itemName = true && (isSetItemName());
    list.add(present_itemName);
    if (present_itemName)
      list.add(itemName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectAssKeeping other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveUserId()).compareTo(other.isSetSaveUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveUserId, other.saveUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveUserName()).compareTo(other.isSetSaveUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveUserName, other.saveUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveDttm()).compareTo(other.isSetSaveDttm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveDttm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveDttm, other.saveDttm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveRemark()).compareTo(other.isSetSaveRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveRemark, other.saveRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectAssKeeping(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseId:");
    sb.append(this.baseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saveUserId:");
    sb.append(this.saveUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saveUserName:");
    if (this.saveUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.saveUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("saveDttm:");
    if (this.saveDttm == null) {
      sb.append("null");
    } else {
      sb.append(this.saveDttm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saveRemark:");
    if (this.saveRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.saveRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectAssKeepingStandardSchemeFactory implements SchemeFactory {
    public ProjectAssKeepingStandardScheme getScheme() {
      return new ProjectAssKeepingStandardScheme();
    }
  }

  private static class ProjectAssKeepingStandardScheme extends StandardScheme<ProjectAssKeeping> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectAssKeeping struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.baseId = iprot.readI32();
              struct.setBaseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SAVE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.saveUserId = iprot.readI32();
              struct.setSaveUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SAVE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveUserName = iprot.readString();
              struct.setSaveUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SAVE_DTTM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveDttm = iprot.readString();
              struct.setSaveDttmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SAVE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveRemark = iprot.readString();
              struct.setSaveRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectAssKeeping struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
      oprot.writeI32(struct.baseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SAVE_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.saveUserId);
      oprot.writeFieldEnd();
      if (struct.saveUserName != null) {
        oprot.writeFieldBegin(SAVE_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.saveUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.saveDttm != null) {
        oprot.writeFieldBegin(SAVE_DTTM_FIELD_DESC);
        oprot.writeString(struct.saveDttm);
        oprot.writeFieldEnd();
      }
      if (struct.saveRemark != null) {
        oprot.writeFieldBegin(SAVE_REMARK_FIELD_DESC);
        oprot.writeString(struct.saveRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectAssKeepingTupleSchemeFactory implements SchemeFactory {
    public ProjectAssKeepingTupleScheme getScheme() {
      return new ProjectAssKeepingTupleScheme();
    }
  }

  private static class ProjectAssKeepingTupleScheme extends TupleScheme<ProjectAssKeeping> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectAssKeeping struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetBaseId()) {
        optionals.set(1);
      }
      if (struct.isSetSaveUserId()) {
        optionals.set(2);
      }
      if (struct.isSetSaveUserName()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetSaveDttm()) {
        optionals.set(5);
      }
      if (struct.isSetSaveRemark()) {
        optionals.set(6);
      }
      if (struct.isSetPage()) {
        optionals.set(7);
      }
      if (struct.isSetRows()) {
        optionals.set(8);
      }
      if (struct.isSetItemName()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetBaseId()) {
        oprot.writeI32(struct.baseId);
      }
      if (struct.isSetSaveUserId()) {
        oprot.writeI32(struct.saveUserId);
      }
      if (struct.isSetSaveUserName()) {
        oprot.writeString(struct.saveUserName);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSaveDttm()) {
        oprot.writeString(struct.saveDttm);
      }
      if (struct.isSetSaveRemark()) {
        oprot.writeString(struct.saveRemark);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetItemName()) {
        oprot.writeString(struct.itemName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectAssKeeping struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.baseId = iprot.readI32();
        struct.setBaseIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.saveUserId = iprot.readI32();
        struct.setSaveUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.saveUserName = iprot.readString();
        struct.setSaveUserNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.saveDttm = iprot.readString();
        struct.setSaveDttmIsSet(true);
      }
      if (incoming.get(6)) {
        struct.saveRemark = iprot.readString();
        struct.setSaveRemarkIsSet(true);
      }
      if (incoming.get(7)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.itemName = iprot.readString();
        struct.setItemNameIsSet(true);
      }
    }
  }

}


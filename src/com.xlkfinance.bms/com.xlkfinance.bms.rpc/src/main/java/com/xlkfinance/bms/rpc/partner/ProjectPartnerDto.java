/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-25")
public class ProjectPartnerDto implements org.apache.thrift.TBase<ProjectPartnerDto, ProjectPartnerDto._Fields>, java.io.Serializable, Cloneable, Comparable<ProjectPartnerDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProjectPartnerDto");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField REQUEST_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("requestFiles", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField APPLY_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("applyMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField APPLY_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyDate", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanDate", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserName", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField BUSINESS_TYPE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessTypeStr", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PARTNER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerNo", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField APPROVAL_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalComment", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField RE_APPLY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reApplyReason", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField LOAN_JUSTICE_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanJusticeFiles", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField LOAN_BLANK_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanBlankFiles", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField LOAN_OTHER_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("loanOtherFiles", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanReason", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseType", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField REPAYMENT_VOUCHER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentVoucherPath", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseStatus", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField APPLY_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("applyLoanDate", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField LOAN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("loanStatus", org.apache.thrift.protocol.TType.I32, (short)32);
  private static final org.apache.thrift.protocol.TField LOAN_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("loanRemark", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField CERT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certType", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBank", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBankBranch", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAcctName", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAcctNo", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField PAYMENT_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)39);
  private static final org.apache.thrift.protocol.TField PAYMENT_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCityCode", org.apache.thrift.protocol.TType.STRING, (short)40);
  private static final org.apache.thrift.protocol.TField PAYMENT_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentAccount", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField PAYMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentName", org.apache.thrift.protocol.TType.STRING, (short)42);
  private static final org.apache.thrift.protocol.TField PM_CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmCustomerName", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField LIVE_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("liveAddr", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField BUSINESS_CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("businessContacts", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField MANAGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("managers", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField OLD_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldBankName", org.apache.thrift.protocol.TType.STRING, (short)48);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)49);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanPerson", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField OLD_LOAN_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldLoanPhone", org.apache.thrift.protocol.TType.STRING, (short)51);
  private static final org.apache.thrift.protocol.TField NEW_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("newBankName", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)53);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanPerson", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField NEW_LOAN_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("newLoanPhone", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField PAYMENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentType", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField ACCUMULATION_FUND_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("accumulationFundBank", org.apache.thrift.protocol.TType.STRING, (short)57);
  private static final org.apache.thrift.protocol.TField ACCUMULATION_FUND_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("accumulationFundMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)58);
  private static final org.apache.thrift.protocol.TField SUPERVISE_DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("superviseDepartment", org.apache.thrift.protocol.TType.STRING, (short)59);
  private static final org.apache.thrift.protocol.TField FUNDS_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("fundsMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)60);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationDate", org.apache.thrift.protocol.TType.STRING, (short)61);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)62);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.DOUBLE, (short)63);
  private static final org.apache.thrift.protocol.TField COST_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("costMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)64);
  private static final org.apache.thrift.protocol.TField TRANASCTION_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tranasctionMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)65);
  private static final org.apache.thrift.protocol.TField HOUSE_PROPERTY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("housePropertyCard", org.apache.thrift.protocol.TType.STRING, (short)66);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)67);
  private static final org.apache.thrift.protocol.TField BUYER_CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerCardNo", org.apache.thrift.protocol.TType.STRING, (short)68);
  private static final org.apache.thrift.protocol.TField BUYER_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerAddress", org.apache.thrift.protocol.TType.STRING, (short)69);
  private static final org.apache.thrift.protocol.TField PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("provinceCode", org.apache.thrift.protocol.TType.STRING, (short)70);
  private static final org.apache.thrift.protocol.TField CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cityCode", org.apache.thrift.protocol.TType.STRING, (short)71);
  private static final org.apache.thrift.protocol.TField PUBLIC_MAN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("publicManList", org.apache.thrift.protocol.TType.LIST, (short)72);
  private static final org.apache.thrift.protocol.TField TASK_HISTORY_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskHistoryList", org.apache.thrift.protocol.TType.LIST, (short)73);
  private static final org.apache.thrift.protocol.TField LOAN_EFFE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("loanEffeDate", org.apache.thrift.protocol.TType.STRING, (short)74);
  private static final org.apache.thrift.protocol.TField PARTNER_LOAN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerLoanDate", org.apache.thrift.protocol.TType.STRING, (short)75);
  private static final org.apache.thrift.protocol.TField PARTNER_LOAN_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerLoanFile", org.apache.thrift.protocol.TType.STRING, (short)76);
  private static final org.apache.thrift.protocol.TField PARTNER_REAL_REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRealRefundDate", org.apache.thrift.protocol.TType.STRING, (short)77);
  private static final org.apache.thrift.protocol.TField PARTNER_REFUND_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerRefundFile", org.apache.thrift.protocol.TType.STRING, (short)78);
  private static final org.apache.thrift.protocol.TField PARTNER_INTERESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerInterests", org.apache.thrift.protocol.TType.DOUBLE, (short)79);
  private static final org.apache.thrift.protocol.TField REPAYMENT_REPURCHASE_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentRepurchaseRemark", org.apache.thrift.protocol.TType.STRING, (short)80);
  private static final org.apache.thrift.protocol.TField REFUND_LOAN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundLoanAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)81);
  private static final org.apache.thrift.protocol.TField REFUND_XIFEE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundXifee", org.apache.thrift.protocol.TType.DOUBLE, (short)82);
  private static final org.apache.thrift.protocol.TField XI_FEE_VOUCHER_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("xiFeeVoucherPath", org.apache.thrift.protocol.TType.STRING, (short)83);
  private static final org.apache.thrift.protocol.TField REFUND_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDate", org.apache.thrift.protocol.TType.STRING, (short)84);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCategory", org.apache.thrift.protocol.TType.I32, (short)85);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATEGORY_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCategoryStr", org.apache.thrift.protocol.TType.STRING, (short)86);
  private static final org.apache.thrift.protocol.TField PAY_ACCT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("payAcctNo", org.apache.thrift.protocol.TType.STRING, (short)87);
  private static final org.apache.thrift.protocol.TField PAY_ACCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("payAcctName", org.apache.thrift.protocol.TType.STRING, (short)88);
  private static final org.apache.thrift.protocol.TField PAY_BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("payBankName", org.apache.thrift.protocol.TType.STRING, (short)89);
  private static final org.apache.thrift.protocol.TField PAY_BANK_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payBankCode", org.apache.thrift.protocol.TType.STRING, (short)90);
  private static final org.apache.thrift.protocol.TField PAY_BANK_BRANCH_FIELD_DESC = new org.apache.thrift.protocol.TField("payBankBranch", org.apache.thrift.protocol.TType.STRING, (short)91);
  private static final org.apache.thrift.protocol.TField PAY_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)92);
  private static final org.apache.thrift.protocol.TField PAY_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("payCityCode", org.apache.thrift.protocol.TType.STRING, (short)93);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)94);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)95);
  private static final org.apache.thrift.protocol.TField CONFIRM_LOAN_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmLoanDays", org.apache.thrift.protocol.TType.I32, (short)96);
  private static final org.apache.thrift.protocol.TField HOUSE_PROVINCE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseProvinceCode", org.apache.thrift.protocol.TType.STRING, (short)97);
  private static final org.apache.thrift.protocol.TField HOUSE_CITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("houseCityCode", org.apache.thrift.protocol.TType.STRING, (short)98);
  private static final org.apache.thrift.protocol.TField APPROVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("approveMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)99);
  private static final org.apache.thrift.protocol.TField PROJECT_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectSource", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField ESTATE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("estateList", org.apache.thrift.protocol.TType.LIST, (short)101);
  private static final org.apache.thrift.protocol.TField PROJECT_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("projectProperty", org.apache.thrift.protocol.TType.STRUCT, (short)102);
  private static final org.apache.thrift.protocol.TField PARTNER_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerOrderCode", org.apache.thrift.protocol.TType.STRING, (short)103);
  private static final org.apache.thrift.protocol.TField LOAN_PERIOD_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPeriodLimit", org.apache.thrift.protocol.TType.I32, (short)104);
  private static final org.apache.thrift.protocol.TField IS_CREDIT_LOAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isCreditLoan", org.apache.thrift.protocol.TType.I32, (short)105);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBankPhone", org.apache.thrift.protocol.TType.STRING, (short)106);
  private static final org.apache.thrift.protocol.TField PAYMENT_BANK_LINE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentBankLineNo", org.apache.thrift.protocol.TType.STRING, (short)107);
  private static final org.apache.thrift.protocol.TField REFUND_TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundTotalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)108);
  private static final org.apache.thrift.protocol.TField REFUND_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("refundPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)109);
  private static final org.apache.thrift.protocol.TField REFUND_FINE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundFine", org.apache.thrift.protocol.TType.DOUBLE, (short)110);
  private static final org.apache.thrift.protocol.TField REFUND_COMPDINTE_FIELD_DESC = new org.apache.thrift.protocol.TField("refundCompdinte", org.apache.thrift.protocol.TType.DOUBLE, (short)111);
  private static final org.apache.thrift.protocol.TField PARTNER_PLATFORM_ORDER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerPlatformOrderCode", org.apache.thrift.protocol.TType.STRING, (short)112);
  private static final org.apache.thrift.protocol.TField PROJECT_FORECLOSURE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectForeclosure", org.apache.thrift.protocol.TType.STRUCT, (short)113);
  private static final org.apache.thrift.protocol.TField IS_PARTNER_OPEN_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("isPartnerOpenAccount", org.apache.thrift.protocol.TType.I32, (short)114);
  private static final org.apache.thrift.protocol.TField PARTNER_PUSH_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerPushAccount", org.apache.thrift.protocol.TType.I32, (short)115);
  private static final org.apache.thrift.protocol.TField PARTNER_GROSS_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerGrossRate", org.apache.thrift.protocol.TType.DOUBLE, (short)116);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProjectPartnerDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProjectPartnerDtoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String loanId; // required
  public String projectNumber; // required
  public String projectName; // required
  public List<Integer> fileIds; // required
  public String requestFiles; // required
  public String remark; // required
  public int businessType; // required
  public String city; // required
  public String userName; // required
  public String cardNo; // required
  public String phone; // required
  public double applyMoney; // required
  public int applyDate; // required
  public String loanDate; // required
  public String pmUserName; // required
  public int pmUserId; // required
  public String businessTypeStr; // required
  public String partnerNo; // required
  public String approvalComment; // required
  public String reApplyReason; // required
  public String loanJusticeFiles; // required
  public String loanBlankFiles; // required
  public String loanOtherFiles; // required
  public String confirmLoanReason; // required
  public int repaymentRepurchaseType; // required
  public String repaymentVoucherPath; // required
  public String repaymentRepurchaseStatus; // required
  public String applyLoanDate; // required
  public int loanStatus; // required
  public String loanRemark; // required
  public String certType; // required
  public String paymentBank; // required
  public String paymentBankBranch; // required
  public String paymentAcctName; // required
  public String paymentAcctNo; // required
  public String paymentProvinceCode; // required
  public String paymentCityCode; // required
  public String paymentAccount; // required
  public String paymentName; // required
  public String pmCustomerName; // required
  public int sex; // required
  public String liveAddr; // required
  public String businessContacts; // required
  public String managers; // required
  public String oldBankName; // required
  public double oldLoanMoney; // required
  public String oldLoanPerson; // required
  public String oldLoanPhone; // required
  public String newBankName; // required
  public double newLoanMoney; // required
  public String newLoanPerson; // required
  public String newLoanPhone; // required
  public int paymentType; // required
  public String accumulationFundBank; // required
  public double accumulationFundMoney; // required
  public String superviseDepartment; // required
  public double fundsMoney; // required
  public String notarizationDate; // required
  public String houseName; // required
  public double area; // required
  public double costMoney; // required
  public double tranasctionMoney; // required
  public String housePropertyCard; // required
  public String buyerName; // required
  public String buyerCardNo; // required
  public String buyerAddress; // required
  public String provinceCode; // required
  public String cityCode; // required
  public List<com.xlkfinance.bms.rpc.customer.CusDTO> publicManList; // required
  public List<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto> taskHistoryList; // required
  public String loanEffeDate; // required
  public String partnerLoanDate; // required
  public String partnerLoanFile; // required
  public String partnerRealRefundDate; // required
  public String partnerRefundFile; // required
  public double partnerInterests; // required
  public String repaymentRepurchaseRemark; // required
  public double refundLoanAmount; // required
  public double refundXifee; // required
  public String xiFeeVoucherPath; // required
  public String refundDate; // required
  public int businessCategory; // required
  public String businessCategoryStr; // required
  public String payAcctNo; // required
  public String payAcctName; // required
  public String payBankName; // required
  public String payBankCode; // required
  public String payBankBranch; // required
  public String payProvinceCode; // required
  public String payCityCode; // required
  public int acctId; // required
  public double confirmLoanMoney; // required
  public int confirmLoanDays; // required
  public String houseProvinceCode; // required
  public String houseCityCode; // required
  public double approveMoney; // required
  public int projectSource; // required
  public List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> estateList; // required
  public com.xlkfinance.bms.rpc.beforeloan.ProjectProperty projectProperty; // required
  public String partnerOrderCode; // required
  public int loanPeriodLimit; // required
  public int isCreditLoan; // required
  public String paymentBankPhone; // required
  public String paymentBankLineNo; // required
  public double refundTotalAmount; // required
  public double refundPenalty; // required
  public double refundFine; // required
  public double refundCompdinte; // required
  public String partnerPlatformOrderCode; // required
  public com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure projectForeclosure; // required
  public int isPartnerOpenAccount; // required
  public int partnerPushAccount; // required
  public double partnerGrossRate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    LOAN_ID((short)3, "loanId"),
    PROJECT_NUMBER((short)4, "projectNumber"),
    PROJECT_NAME((short)5, "projectName"),
    FILE_IDS((short)6, "fileIds"),
    REQUEST_FILES((short)7, "requestFiles"),
    REMARK((short)8, "remark"),
    BUSINESS_TYPE((short)9, "businessType"),
    CITY((short)10, "city"),
    USER_NAME((short)11, "userName"),
    CARD_NO((short)12, "cardNo"),
    PHONE((short)13, "phone"),
    APPLY_MONEY((short)14, "applyMoney"),
    APPLY_DATE((short)15, "applyDate"),
    LOAN_DATE((short)16, "loanDate"),
    PM_USER_NAME((short)17, "pmUserName"),
    PM_USER_ID((short)18, "pmUserId"),
    BUSINESS_TYPE_STR((short)20, "businessTypeStr"),
    PARTNER_NO((short)21, "partnerNo"),
    APPROVAL_COMMENT((short)22, "approvalComment"),
    RE_APPLY_REASON((short)23, "reApplyReason"),
    LOAN_JUSTICE_FILES((short)24, "loanJusticeFiles"),
    LOAN_BLANK_FILES((short)25, "loanBlankFiles"),
    LOAN_OTHER_FILES((short)26, "loanOtherFiles"),
    CONFIRM_LOAN_REASON((short)27, "confirmLoanReason"),
    REPAYMENT_REPURCHASE_TYPE((short)28, "repaymentRepurchaseType"),
    REPAYMENT_VOUCHER_PATH((short)29, "repaymentVoucherPath"),
    REPAYMENT_REPURCHASE_STATUS((short)30, "repaymentRepurchaseStatus"),
    APPLY_LOAN_DATE((short)31, "applyLoanDate"),
    LOAN_STATUS((short)32, "loanStatus"),
    LOAN_REMARK((short)33, "loanRemark"),
    CERT_TYPE((short)34, "certType"),
    PAYMENT_BANK((short)35, "paymentBank"),
    PAYMENT_BANK_BRANCH((short)36, "paymentBankBranch"),
    PAYMENT_ACCT_NAME((short)37, "paymentAcctName"),
    PAYMENT_ACCT_NO((short)38, "paymentAcctNo"),
    PAYMENT_PROVINCE_CODE((short)39, "paymentProvinceCode"),
    PAYMENT_CITY_CODE((short)40, "paymentCityCode"),
    PAYMENT_ACCOUNT((short)41, "paymentAccount"),
    PAYMENT_NAME((short)42, "paymentName"),
    PM_CUSTOMER_NAME((short)43, "pmCustomerName"),
    SEX((short)44, "sex"),
    LIVE_ADDR((short)45, "liveAddr"),
    BUSINESS_CONTACTS((short)46, "businessContacts"),
    MANAGERS((short)47, "managers"),
    OLD_BANK_NAME((short)48, "oldBankName"),
    OLD_LOAN_MONEY((short)49, "oldLoanMoney"),
    OLD_LOAN_PERSON((short)50, "oldLoanPerson"),
    OLD_LOAN_PHONE((short)51, "oldLoanPhone"),
    NEW_BANK_NAME((short)52, "newBankName"),
    NEW_LOAN_MONEY((short)53, "newLoanMoney"),
    NEW_LOAN_PERSON((short)54, "newLoanPerson"),
    NEW_LOAN_PHONE((short)55, "newLoanPhone"),
    PAYMENT_TYPE((short)56, "paymentType"),
    ACCUMULATION_FUND_BANK((short)57, "accumulationFundBank"),
    ACCUMULATION_FUND_MONEY((short)58, "accumulationFundMoney"),
    SUPERVISE_DEPARTMENT((short)59, "superviseDepartment"),
    FUNDS_MONEY((short)60, "fundsMoney"),
    NOTARIZATION_DATE((short)61, "notarizationDate"),
    HOUSE_NAME((short)62, "houseName"),
    AREA((short)63, "area"),
    COST_MONEY((short)64, "costMoney"),
    TRANASCTION_MONEY((short)65, "tranasctionMoney"),
    HOUSE_PROPERTY_CARD((short)66, "housePropertyCard"),
    BUYER_NAME((short)67, "buyerName"),
    BUYER_CARD_NO((short)68, "buyerCardNo"),
    BUYER_ADDRESS((short)69, "buyerAddress"),
    PROVINCE_CODE((short)70, "provinceCode"),
    CITY_CODE((short)71, "cityCode"),
    PUBLIC_MAN_LIST((short)72, "publicManList"),
    TASK_HISTORY_LIST((short)73, "taskHistoryList"),
    LOAN_EFFE_DATE((short)74, "loanEffeDate"),
    PARTNER_LOAN_DATE((short)75, "partnerLoanDate"),
    PARTNER_LOAN_FILE((short)76, "partnerLoanFile"),
    PARTNER_REAL_REFUND_DATE((short)77, "partnerRealRefundDate"),
    PARTNER_REFUND_FILE((short)78, "partnerRefundFile"),
    PARTNER_INTERESTS((short)79, "partnerInterests"),
    REPAYMENT_REPURCHASE_REMARK((short)80, "repaymentRepurchaseRemark"),
    REFUND_LOAN_AMOUNT((short)81, "refundLoanAmount"),
    REFUND_XIFEE((short)82, "refundXifee"),
    XI_FEE_VOUCHER_PATH((short)83, "xiFeeVoucherPath"),
    REFUND_DATE((short)84, "refundDate"),
    BUSINESS_CATEGORY((short)85, "businessCategory"),
    BUSINESS_CATEGORY_STR((short)86, "businessCategoryStr"),
    PAY_ACCT_NO((short)87, "payAcctNo"),
    PAY_ACCT_NAME((short)88, "payAcctName"),
    PAY_BANK_NAME((short)89, "payBankName"),
    PAY_BANK_CODE((short)90, "payBankCode"),
    PAY_BANK_BRANCH((short)91, "payBankBranch"),
    PAY_PROVINCE_CODE((short)92, "payProvinceCode"),
    PAY_CITY_CODE((short)93, "payCityCode"),
    ACCT_ID((short)94, "acctId"),
    CONFIRM_LOAN_MONEY((short)95, "confirmLoanMoney"),
    CONFIRM_LOAN_DAYS((short)96, "confirmLoanDays"),
    HOUSE_PROVINCE_CODE((short)97, "houseProvinceCode"),
    HOUSE_CITY_CODE((short)98, "houseCityCode"),
    APPROVE_MONEY((short)99, "approveMoney"),
    PROJECT_SOURCE((short)100, "projectSource"),
    ESTATE_LIST((short)101, "estateList"),
    PROJECT_PROPERTY((short)102, "projectProperty"),
    PARTNER_ORDER_CODE((short)103, "partnerOrderCode"),
    LOAN_PERIOD_LIMIT((short)104, "loanPeriodLimit"),
    IS_CREDIT_LOAN((short)105, "isCreditLoan"),
    PAYMENT_BANK_PHONE((short)106, "paymentBankPhone"),
    PAYMENT_BANK_LINE_NO((short)107, "paymentBankLineNo"),
    REFUND_TOTAL_AMOUNT((short)108, "refundTotalAmount"),
    REFUND_PENALTY((short)109, "refundPenalty"),
    REFUND_FINE((short)110, "refundFine"),
    REFUND_COMPDINTE((short)111, "refundCompdinte"),
    PARTNER_PLATFORM_ORDER_CODE((short)112, "partnerPlatformOrderCode"),
    PROJECT_FORECLOSURE((short)113, "projectForeclosure"),
    IS_PARTNER_OPEN_ACCOUNT((short)114, "isPartnerOpenAccount"),
    PARTNER_PUSH_ACCOUNT((short)115, "partnerPushAccount"),
    PARTNER_GROSS_RATE((short)116, "partnerGrossRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // LOAN_ID
          return LOAN_ID;
        case 4: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 5: // PROJECT_NAME
          return PROJECT_NAME;
        case 6: // FILE_IDS
          return FILE_IDS;
        case 7: // REQUEST_FILES
          return REQUEST_FILES;
        case 8: // REMARK
          return REMARK;
        case 9: // BUSINESS_TYPE
          return BUSINESS_TYPE;
        case 10: // CITY
          return CITY;
        case 11: // USER_NAME
          return USER_NAME;
        case 12: // CARD_NO
          return CARD_NO;
        case 13: // PHONE
          return PHONE;
        case 14: // APPLY_MONEY
          return APPLY_MONEY;
        case 15: // APPLY_DATE
          return APPLY_DATE;
        case 16: // LOAN_DATE
          return LOAN_DATE;
        case 17: // PM_USER_NAME
          return PM_USER_NAME;
        case 18: // PM_USER_ID
          return PM_USER_ID;
        case 20: // BUSINESS_TYPE_STR
          return BUSINESS_TYPE_STR;
        case 21: // PARTNER_NO
          return PARTNER_NO;
        case 22: // APPROVAL_COMMENT
          return APPROVAL_COMMENT;
        case 23: // RE_APPLY_REASON
          return RE_APPLY_REASON;
        case 24: // LOAN_JUSTICE_FILES
          return LOAN_JUSTICE_FILES;
        case 25: // LOAN_BLANK_FILES
          return LOAN_BLANK_FILES;
        case 26: // LOAN_OTHER_FILES
          return LOAN_OTHER_FILES;
        case 27: // CONFIRM_LOAN_REASON
          return CONFIRM_LOAN_REASON;
        case 28: // REPAYMENT_REPURCHASE_TYPE
          return REPAYMENT_REPURCHASE_TYPE;
        case 29: // REPAYMENT_VOUCHER_PATH
          return REPAYMENT_VOUCHER_PATH;
        case 30: // REPAYMENT_REPURCHASE_STATUS
          return REPAYMENT_REPURCHASE_STATUS;
        case 31: // APPLY_LOAN_DATE
          return APPLY_LOAN_DATE;
        case 32: // LOAN_STATUS
          return LOAN_STATUS;
        case 33: // LOAN_REMARK
          return LOAN_REMARK;
        case 34: // CERT_TYPE
          return CERT_TYPE;
        case 35: // PAYMENT_BANK
          return PAYMENT_BANK;
        case 36: // PAYMENT_BANK_BRANCH
          return PAYMENT_BANK_BRANCH;
        case 37: // PAYMENT_ACCT_NAME
          return PAYMENT_ACCT_NAME;
        case 38: // PAYMENT_ACCT_NO
          return PAYMENT_ACCT_NO;
        case 39: // PAYMENT_PROVINCE_CODE
          return PAYMENT_PROVINCE_CODE;
        case 40: // PAYMENT_CITY_CODE
          return PAYMENT_CITY_CODE;
        case 41: // PAYMENT_ACCOUNT
          return PAYMENT_ACCOUNT;
        case 42: // PAYMENT_NAME
          return PAYMENT_NAME;
        case 43: // PM_CUSTOMER_NAME
          return PM_CUSTOMER_NAME;
        case 44: // SEX
          return SEX;
        case 45: // LIVE_ADDR
          return LIVE_ADDR;
        case 46: // BUSINESS_CONTACTS
          return BUSINESS_CONTACTS;
        case 47: // MANAGERS
          return MANAGERS;
        case 48: // OLD_BANK_NAME
          return OLD_BANK_NAME;
        case 49: // OLD_LOAN_MONEY
          return OLD_LOAN_MONEY;
        case 50: // OLD_LOAN_PERSON
          return OLD_LOAN_PERSON;
        case 51: // OLD_LOAN_PHONE
          return OLD_LOAN_PHONE;
        case 52: // NEW_BANK_NAME
          return NEW_BANK_NAME;
        case 53: // NEW_LOAN_MONEY
          return NEW_LOAN_MONEY;
        case 54: // NEW_LOAN_PERSON
          return NEW_LOAN_PERSON;
        case 55: // NEW_LOAN_PHONE
          return NEW_LOAN_PHONE;
        case 56: // PAYMENT_TYPE
          return PAYMENT_TYPE;
        case 57: // ACCUMULATION_FUND_BANK
          return ACCUMULATION_FUND_BANK;
        case 58: // ACCUMULATION_FUND_MONEY
          return ACCUMULATION_FUND_MONEY;
        case 59: // SUPERVISE_DEPARTMENT
          return SUPERVISE_DEPARTMENT;
        case 60: // FUNDS_MONEY
          return FUNDS_MONEY;
        case 61: // NOTARIZATION_DATE
          return NOTARIZATION_DATE;
        case 62: // HOUSE_NAME
          return HOUSE_NAME;
        case 63: // AREA
          return AREA;
        case 64: // COST_MONEY
          return COST_MONEY;
        case 65: // TRANASCTION_MONEY
          return TRANASCTION_MONEY;
        case 66: // HOUSE_PROPERTY_CARD
          return HOUSE_PROPERTY_CARD;
        case 67: // BUYER_NAME
          return BUYER_NAME;
        case 68: // BUYER_CARD_NO
          return BUYER_CARD_NO;
        case 69: // BUYER_ADDRESS
          return BUYER_ADDRESS;
        case 70: // PROVINCE_CODE
          return PROVINCE_CODE;
        case 71: // CITY_CODE
          return CITY_CODE;
        case 72: // PUBLIC_MAN_LIST
          return PUBLIC_MAN_LIST;
        case 73: // TASK_HISTORY_LIST
          return TASK_HISTORY_LIST;
        case 74: // LOAN_EFFE_DATE
          return LOAN_EFFE_DATE;
        case 75: // PARTNER_LOAN_DATE
          return PARTNER_LOAN_DATE;
        case 76: // PARTNER_LOAN_FILE
          return PARTNER_LOAN_FILE;
        case 77: // PARTNER_REAL_REFUND_DATE
          return PARTNER_REAL_REFUND_DATE;
        case 78: // PARTNER_REFUND_FILE
          return PARTNER_REFUND_FILE;
        case 79: // PARTNER_INTERESTS
          return PARTNER_INTERESTS;
        case 80: // REPAYMENT_REPURCHASE_REMARK
          return REPAYMENT_REPURCHASE_REMARK;
        case 81: // REFUND_LOAN_AMOUNT
          return REFUND_LOAN_AMOUNT;
        case 82: // REFUND_XIFEE
          return REFUND_XIFEE;
        case 83: // XI_FEE_VOUCHER_PATH
          return XI_FEE_VOUCHER_PATH;
        case 84: // REFUND_DATE
          return REFUND_DATE;
        case 85: // BUSINESS_CATEGORY
          return BUSINESS_CATEGORY;
        case 86: // BUSINESS_CATEGORY_STR
          return BUSINESS_CATEGORY_STR;
        case 87: // PAY_ACCT_NO
          return PAY_ACCT_NO;
        case 88: // PAY_ACCT_NAME
          return PAY_ACCT_NAME;
        case 89: // PAY_BANK_NAME
          return PAY_BANK_NAME;
        case 90: // PAY_BANK_CODE
          return PAY_BANK_CODE;
        case 91: // PAY_BANK_BRANCH
          return PAY_BANK_BRANCH;
        case 92: // PAY_PROVINCE_CODE
          return PAY_PROVINCE_CODE;
        case 93: // PAY_CITY_CODE
          return PAY_CITY_CODE;
        case 94: // ACCT_ID
          return ACCT_ID;
        case 95: // CONFIRM_LOAN_MONEY
          return CONFIRM_LOAN_MONEY;
        case 96: // CONFIRM_LOAN_DAYS
          return CONFIRM_LOAN_DAYS;
        case 97: // HOUSE_PROVINCE_CODE
          return HOUSE_PROVINCE_CODE;
        case 98: // HOUSE_CITY_CODE
          return HOUSE_CITY_CODE;
        case 99: // APPROVE_MONEY
          return APPROVE_MONEY;
        case 100: // PROJECT_SOURCE
          return PROJECT_SOURCE;
        case 101: // ESTATE_LIST
          return ESTATE_LIST;
        case 102: // PROJECT_PROPERTY
          return PROJECT_PROPERTY;
        case 103: // PARTNER_ORDER_CODE
          return PARTNER_ORDER_CODE;
        case 104: // LOAN_PERIOD_LIMIT
          return LOAN_PERIOD_LIMIT;
        case 105: // IS_CREDIT_LOAN
          return IS_CREDIT_LOAN;
        case 106: // PAYMENT_BANK_PHONE
          return PAYMENT_BANK_PHONE;
        case 107: // PAYMENT_BANK_LINE_NO
          return PAYMENT_BANK_LINE_NO;
        case 108: // REFUND_TOTAL_AMOUNT
          return REFUND_TOTAL_AMOUNT;
        case 109: // REFUND_PENALTY
          return REFUND_PENALTY;
        case 110: // REFUND_FINE
          return REFUND_FINE;
        case 111: // REFUND_COMPDINTE
          return REFUND_COMPDINTE;
        case 112: // PARTNER_PLATFORM_ORDER_CODE
          return PARTNER_PLATFORM_ORDER_CODE;
        case 113: // PROJECT_FORECLOSURE
          return PROJECT_FORECLOSURE;
        case 114: // IS_PARTNER_OPEN_ACCOUNT
          return IS_PARTNER_OPEN_ACCOUNT;
        case 115: // PARTNER_PUSH_ACCOUNT
          return PARTNER_PUSH_ACCOUNT;
        case 116: // PARTNER_GROSS_RATE
          return PARTNER_GROSS_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __BUSINESSTYPE_ISSET_ID = 2;
  private static final int __APPLYMONEY_ISSET_ID = 3;
  private static final int __APPLYDATE_ISSET_ID = 4;
  private static final int __PMUSERID_ISSET_ID = 5;
  private static final int __REPAYMENTREPURCHASETYPE_ISSET_ID = 6;
  private static final int __LOANSTATUS_ISSET_ID = 7;
  private static final int __SEX_ISSET_ID = 8;
  private static final int __OLDLOANMONEY_ISSET_ID = 9;
  private static final int __NEWLOANMONEY_ISSET_ID = 10;
  private static final int __PAYMENTTYPE_ISSET_ID = 11;
  private static final int __ACCUMULATIONFUNDMONEY_ISSET_ID = 12;
  private static final int __FUNDSMONEY_ISSET_ID = 13;
  private static final int __AREA_ISSET_ID = 14;
  private static final int __COSTMONEY_ISSET_ID = 15;
  private static final int __TRANASCTIONMONEY_ISSET_ID = 16;
  private static final int __PARTNERINTERESTS_ISSET_ID = 17;
  private static final int __REFUNDLOANAMOUNT_ISSET_ID = 18;
  private static final int __REFUNDXIFEE_ISSET_ID = 19;
  private static final int __BUSINESSCATEGORY_ISSET_ID = 20;
  private static final int __ACCTID_ISSET_ID = 21;
  private static final int __CONFIRMLOANMONEY_ISSET_ID = 22;
  private static final int __CONFIRMLOANDAYS_ISSET_ID = 23;
  private static final int __APPROVEMONEY_ISSET_ID = 24;
  private static final int __PROJECTSOURCE_ISSET_ID = 25;
  private static final int __LOANPERIODLIMIT_ISSET_ID = 26;
  private static final int __ISCREDITLOAN_ISSET_ID = 27;
  private static final int __REFUNDTOTALAMOUNT_ISSET_ID = 28;
  private static final int __REFUNDPENALTY_ISSET_ID = 29;
  private static final int __REFUNDFINE_ISSET_ID = 30;
  private static final int __REFUNDCOMPDINTE_ISSET_ID = 31;
  private static final int __ISPARTNEROPENACCOUNT_ISSET_ID = 32;
  private static final int __PARTNERPUSHACCOUNT_ISSET_ID = 33;
  private static final int __PARTNERGROSSRATE_ISSET_ID = 34;
  private long __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_IDS, new org.apache.thrift.meta_data.FieldMetaData("fileIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.REQUEST_FILES, new org.apache.thrift.meta_data.FieldMetaData("requestFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("businessType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_MONEY, new org.apache.thrift.meta_data.FieldMetaData("applyMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.APPLY_DATE, new org.apache.thrift.meta_data.FieldMetaData("applyDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_TYPE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessTypeStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_NO, new org.apache.thrift.meta_data.FieldMetaData("partnerNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("approvalComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_APPLY_REASON, new org.apache.thrift.meta_data.FieldMetaData("reApplyReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_JUSTICE_FILES, new org.apache.thrift.meta_data.FieldMetaData("loanJusticeFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_BLANK_FILES, new org.apache.thrift.meta_data.FieldMetaData("loanBlankFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_OTHER_FILES, new org.apache.thrift.meta_data.FieldMetaData("loanOtherFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRM_LOAN_REASON, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_VOUCHER_PATH, new org.apache.thrift.meta_data.FieldMetaData("repaymentVoucherPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("applyLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("loanStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_REMARK, new org.apache.thrift.meta_data.FieldMetaData("loanRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK, new org.apache.thrift.meta_data.FieldMetaData("paymentBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("paymentBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("paymentAcctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCT_NO, new org.apache.thrift.meta_data.FieldMetaData("paymentAcctNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("paymentAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("paymentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmCustomerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIVE_ADDR, new org.apache.thrift.meta_data.FieldMetaData("liveAddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("businessContacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MANAGERS, new org.apache.thrift.meta_data.FieldMetaData("managers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("oldBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("oldLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OLD_LOAN_PERSON, new org.apache.thrift.meta_data.FieldMetaData("oldLoanPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_LOAN_PHONE, new org.apache.thrift.meta_data.FieldMetaData("oldLoanPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("newBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("newLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NEW_LOAN_PERSON, new org.apache.thrift.meta_data.FieldMetaData("newLoanPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_LOAN_PHONE, new org.apache.thrift.meta_data.FieldMetaData("newLoanPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paymentType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCUMULATION_FUND_BANK, new org.apache.thrift.meta_data.FieldMetaData("accumulationFundBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCUMULATION_FUND_MONEY, new org.apache.thrift.meta_data.FieldMetaData("accumulationFundMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUPERVISE_DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("superviseDepartment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNDS_MONEY, new org.apache.thrift.meta_data.FieldMetaData("fundsMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOTARIZATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("notarizationDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COST_MONEY, new org.apache.thrift.meta_data.FieldMetaData("costMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRANASCTION_MONEY, new org.apache.thrift.meta_data.FieldMetaData("tranasctionMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_PROPERTY_CARD, new org.apache.thrift.meta_data.FieldMetaData("housePropertyCard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("buyerCardNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("buyerAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("provinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("cityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_MAN_LIST, new org.apache.thrift.meta_data.FieldMetaData("publicManList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.customer.CusDTO.class))));
    tmpMap.put(_Fields.TASK_HISTORY_LIST, new org.apache.thrift.meta_data.FieldMetaData("taskHistoryList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.workflow.TaskHistoryDto.class))));
    tmpMap.put(_Fields.LOAN_EFFE_DATE, new org.apache.thrift.meta_data.FieldMetaData("loanEffeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_LOAN_DATE, new org.apache.thrift.meta_data.FieldMetaData("partnerLoanDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_LOAN_FILE, new org.apache.thrift.meta_data.FieldMetaData("partnerLoanFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_REAL_REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("partnerRealRefundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_REFUND_FILE, new org.apache.thrift.meta_data.FieldMetaData("partnerRefundFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTNER_INTERESTS, new org.apache.thrift.meta_data.FieldMetaData("partnerInterests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REPAYMENT_REPURCHASE_REMARK, new org.apache.thrift.meta_data.FieldMetaData("repaymentRepurchaseRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_LOAN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundLoanAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_XIFEE, new org.apache.thrift.meta_data.FieldMetaData("refundXifee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.XI_FEE_VOUCHER_PATH, new org.apache.thrift.meta_data.FieldMetaData("xiFeeVoucherPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_DATE, new org.apache.thrift.meta_data.FieldMetaData("refundDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("businessCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATEGORY_STR, new org.apache.thrift.meta_data.FieldMetaData("businessCategoryStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_ACCT_NO, new org.apache.thrift.meta_data.FieldMetaData("payAcctNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_ACCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("payAcctName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("payBankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_BANK_CODE, new org.apache.thrift.meta_data.FieldMetaData("payBankCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_BANK_BRANCH, new org.apache.thrift.meta_data.FieldMetaData("payBankBranch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("payProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("payCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONFIRM_LOAN_DAYS, new org.apache.thrift.meta_data.FieldMetaData("confirmLoanDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_PROVINCE_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseProvinceCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOUSE_CITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("houseCityCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("approveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("projectSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESTATE_LIST, new org.apache.thrift.meta_data.FieldMetaData("estateList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate.class))));
    tmpMap.put(_Fields.PROJECT_PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("projectProperty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.ProjectProperty.class)));
    tmpMap.put(_Fields.PARTNER_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("partnerOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOAN_PERIOD_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("loanPeriodLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CREDIT_LOAN, new org.apache.thrift.meta_data.FieldMetaData("isCreditLoan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAYMENT_BANK_PHONE, new org.apache.thrift.meta_data.FieldMetaData("paymentBankPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAYMENT_BANK_LINE_NO, new org.apache.thrift.meta_data.FieldMetaData("paymentBankLineNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundTotalAmount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("refundPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_FINE, new org.apache.thrift.meta_data.FieldMetaData("refundFine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REFUND_COMPDINTE, new org.apache.thrift.meta_data.FieldMetaData("refundCompdinte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PARTNER_PLATFORM_ORDER_CODE, new org.apache.thrift.meta_data.FieldMetaData("partnerPlatformOrderCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_FORECLOSURE, new org.apache.thrift.meta_data.FieldMetaData("projectForeclosure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure.class)));
    tmpMap.put(_Fields.IS_PARTNER_OPEN_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("isPartnerOpenAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_PUSH_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("partnerPushAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_GROSS_RATE, new org.apache.thrift.meta_data.FieldMetaData("partnerGrossRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProjectPartnerDto.class, metaDataMap);
  }

  public ProjectPartnerDto() {
  }

  public ProjectPartnerDto(
    int pid,
    int projectId,
    String loanId,
    String projectNumber,
    String projectName,
    List<Integer> fileIds,
    String requestFiles,
    String remark,
    int businessType,
    String city,
    String userName,
    String cardNo,
    String phone,
    double applyMoney,
    int applyDate,
    String loanDate,
    String pmUserName,
    int pmUserId,
    String businessTypeStr,
    String partnerNo,
    String approvalComment,
    String reApplyReason,
    String loanJusticeFiles,
    String loanBlankFiles,
    String loanOtherFiles,
    String confirmLoanReason,
    int repaymentRepurchaseType,
    String repaymentVoucherPath,
    String repaymentRepurchaseStatus,
    String applyLoanDate,
    int loanStatus,
    String loanRemark,
    String certType,
    String paymentBank,
    String paymentBankBranch,
    String paymentAcctName,
    String paymentAcctNo,
    String paymentProvinceCode,
    String paymentCityCode,
    String paymentAccount,
    String paymentName,
    String pmCustomerName,
    int sex,
    String liveAddr,
    String businessContacts,
    String managers,
    String oldBankName,
    double oldLoanMoney,
    String oldLoanPerson,
    String oldLoanPhone,
    String newBankName,
    double newLoanMoney,
    String newLoanPerson,
    String newLoanPhone,
    int paymentType,
    String accumulationFundBank,
    double accumulationFundMoney,
    String superviseDepartment,
    double fundsMoney,
    String notarizationDate,
    String houseName,
    double area,
    double costMoney,
    double tranasctionMoney,
    String housePropertyCard,
    String buyerName,
    String buyerCardNo,
    String buyerAddress,
    String provinceCode,
    String cityCode,
    List<com.xlkfinance.bms.rpc.customer.CusDTO> publicManList,
    List<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto> taskHistoryList,
    String loanEffeDate,
    String partnerLoanDate,
    String partnerLoanFile,
    String partnerRealRefundDate,
    String partnerRefundFile,
    double partnerInterests,
    String repaymentRepurchaseRemark,
    double refundLoanAmount,
    double refundXifee,
    String xiFeeVoucherPath,
    String refundDate,
    int businessCategory,
    String businessCategoryStr,
    String payAcctNo,
    String payAcctName,
    String payBankName,
    String payBankCode,
    String payBankBranch,
    String payProvinceCode,
    String payCityCode,
    int acctId,
    double confirmLoanMoney,
    int confirmLoanDays,
    String houseProvinceCode,
    String houseCityCode,
    double approveMoney,
    int projectSource,
    List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> estateList,
    com.xlkfinance.bms.rpc.beforeloan.ProjectProperty projectProperty,
    String partnerOrderCode,
    int loanPeriodLimit,
    int isCreditLoan,
    String paymentBankPhone,
    String paymentBankLineNo,
    double refundTotalAmount,
    double refundPenalty,
    double refundFine,
    double refundCompdinte,
    String partnerPlatformOrderCode,
    com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure projectForeclosure,
    int isPartnerOpenAccount,
    int partnerPushAccount,
    double partnerGrossRate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanId = loanId;
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.fileIds = fileIds;
    this.requestFiles = requestFiles;
    this.remark = remark;
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    this.city = city;
    this.userName = userName;
    this.cardNo = cardNo;
    this.phone = phone;
    this.applyMoney = applyMoney;
    setApplyMoneyIsSet(true);
    this.applyDate = applyDate;
    setApplyDateIsSet(true);
    this.loanDate = loanDate;
    this.pmUserName = pmUserName;
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.businessTypeStr = businessTypeStr;
    this.partnerNo = partnerNo;
    this.approvalComment = approvalComment;
    this.reApplyReason = reApplyReason;
    this.loanJusticeFiles = loanJusticeFiles;
    this.loanBlankFiles = loanBlankFiles;
    this.loanOtherFiles = loanOtherFiles;
    this.confirmLoanReason = confirmLoanReason;
    this.repaymentRepurchaseType = repaymentRepurchaseType;
    setRepaymentRepurchaseTypeIsSet(true);
    this.repaymentVoucherPath = repaymentVoucherPath;
    this.repaymentRepurchaseStatus = repaymentRepurchaseStatus;
    this.applyLoanDate = applyLoanDate;
    this.loanStatus = loanStatus;
    setLoanStatusIsSet(true);
    this.loanRemark = loanRemark;
    this.certType = certType;
    this.paymentBank = paymentBank;
    this.paymentBankBranch = paymentBankBranch;
    this.paymentAcctName = paymentAcctName;
    this.paymentAcctNo = paymentAcctNo;
    this.paymentProvinceCode = paymentProvinceCode;
    this.paymentCityCode = paymentCityCode;
    this.paymentAccount = paymentAccount;
    this.paymentName = paymentName;
    this.pmCustomerName = pmCustomerName;
    this.sex = sex;
    setSexIsSet(true);
    this.liveAddr = liveAddr;
    this.businessContacts = businessContacts;
    this.managers = managers;
    this.oldBankName = oldBankName;
    this.oldLoanMoney = oldLoanMoney;
    setOldLoanMoneyIsSet(true);
    this.oldLoanPerson = oldLoanPerson;
    this.oldLoanPhone = oldLoanPhone;
    this.newBankName = newBankName;
    this.newLoanMoney = newLoanMoney;
    setNewLoanMoneyIsSet(true);
    this.newLoanPerson = newLoanPerson;
    this.newLoanPhone = newLoanPhone;
    this.paymentType = paymentType;
    setPaymentTypeIsSet(true);
    this.accumulationFundBank = accumulationFundBank;
    this.accumulationFundMoney = accumulationFundMoney;
    setAccumulationFundMoneyIsSet(true);
    this.superviseDepartment = superviseDepartment;
    this.fundsMoney = fundsMoney;
    setFundsMoneyIsSet(true);
    this.notarizationDate = notarizationDate;
    this.houseName = houseName;
    this.area = area;
    setAreaIsSet(true);
    this.costMoney = costMoney;
    setCostMoneyIsSet(true);
    this.tranasctionMoney = tranasctionMoney;
    setTranasctionMoneyIsSet(true);
    this.housePropertyCard = housePropertyCard;
    this.buyerName = buyerName;
    this.buyerCardNo = buyerCardNo;
    this.buyerAddress = buyerAddress;
    this.provinceCode = provinceCode;
    this.cityCode = cityCode;
    this.publicManList = publicManList;
    this.taskHistoryList = taskHistoryList;
    this.loanEffeDate = loanEffeDate;
    this.partnerLoanDate = partnerLoanDate;
    this.partnerLoanFile = partnerLoanFile;
    this.partnerRealRefundDate = partnerRealRefundDate;
    this.partnerRefundFile = partnerRefundFile;
    this.partnerInterests = partnerInterests;
    setPartnerInterestsIsSet(true);
    this.repaymentRepurchaseRemark = repaymentRepurchaseRemark;
    this.refundLoanAmount = refundLoanAmount;
    setRefundLoanAmountIsSet(true);
    this.refundXifee = refundXifee;
    setRefundXifeeIsSet(true);
    this.xiFeeVoucherPath = xiFeeVoucherPath;
    this.refundDate = refundDate;
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    this.businessCategoryStr = businessCategoryStr;
    this.payAcctNo = payAcctNo;
    this.payAcctName = payAcctName;
    this.payBankName = payBankName;
    this.payBankCode = payBankCode;
    this.payBankBranch = payBankBranch;
    this.payProvinceCode = payProvinceCode;
    this.payCityCode = payCityCode;
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.confirmLoanMoney = confirmLoanMoney;
    setConfirmLoanMoneyIsSet(true);
    this.confirmLoanDays = confirmLoanDays;
    setConfirmLoanDaysIsSet(true);
    this.houseProvinceCode = houseProvinceCode;
    this.houseCityCode = houseCityCode;
    this.approveMoney = approveMoney;
    setApproveMoneyIsSet(true);
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    this.estateList = estateList;
    this.projectProperty = projectProperty;
    this.partnerOrderCode = partnerOrderCode;
    this.loanPeriodLimit = loanPeriodLimit;
    setLoanPeriodLimitIsSet(true);
    this.isCreditLoan = isCreditLoan;
    setIsCreditLoanIsSet(true);
    this.paymentBankPhone = paymentBankPhone;
    this.paymentBankLineNo = paymentBankLineNo;
    this.refundTotalAmount = refundTotalAmount;
    setRefundTotalAmountIsSet(true);
    this.refundPenalty = refundPenalty;
    setRefundPenaltyIsSet(true);
    this.refundFine = refundFine;
    setRefundFineIsSet(true);
    this.refundCompdinte = refundCompdinte;
    setRefundCompdinteIsSet(true);
    this.partnerPlatformOrderCode = partnerPlatformOrderCode;
    this.projectForeclosure = projectForeclosure;
    this.isPartnerOpenAccount = isPartnerOpenAccount;
    setIsPartnerOpenAccountIsSet(true);
    this.partnerPushAccount = partnerPushAccount;
    setPartnerPushAccountIsSet(true);
    this.partnerGrossRate = partnerGrossRate;
    setPartnerGrossRateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProjectPartnerDto(ProjectPartnerDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetLoanId()) {
      this.loanId = other.loanId;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetFileIds()) {
      List<Integer> __this__fileIds = new ArrayList<Integer>(other.fileIds);
      this.fileIds = __this__fileIds;
    }
    if (other.isSetRequestFiles()) {
      this.requestFiles = other.requestFiles;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.businessType = other.businessType;
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    this.applyMoney = other.applyMoney;
    this.applyDate = other.applyDate;
    if (other.isSetLoanDate()) {
      this.loanDate = other.loanDate;
    }
    if (other.isSetPmUserName()) {
      this.pmUserName = other.pmUserName;
    }
    this.pmUserId = other.pmUserId;
    if (other.isSetBusinessTypeStr()) {
      this.businessTypeStr = other.businessTypeStr;
    }
    if (other.isSetPartnerNo()) {
      this.partnerNo = other.partnerNo;
    }
    if (other.isSetApprovalComment()) {
      this.approvalComment = other.approvalComment;
    }
    if (other.isSetReApplyReason()) {
      this.reApplyReason = other.reApplyReason;
    }
    if (other.isSetLoanJusticeFiles()) {
      this.loanJusticeFiles = other.loanJusticeFiles;
    }
    if (other.isSetLoanBlankFiles()) {
      this.loanBlankFiles = other.loanBlankFiles;
    }
    if (other.isSetLoanOtherFiles()) {
      this.loanOtherFiles = other.loanOtherFiles;
    }
    if (other.isSetConfirmLoanReason()) {
      this.confirmLoanReason = other.confirmLoanReason;
    }
    this.repaymentRepurchaseType = other.repaymentRepurchaseType;
    if (other.isSetRepaymentVoucherPath()) {
      this.repaymentVoucherPath = other.repaymentVoucherPath;
    }
    if (other.isSetRepaymentRepurchaseStatus()) {
      this.repaymentRepurchaseStatus = other.repaymentRepurchaseStatus;
    }
    if (other.isSetApplyLoanDate()) {
      this.applyLoanDate = other.applyLoanDate;
    }
    this.loanStatus = other.loanStatus;
    if (other.isSetLoanRemark()) {
      this.loanRemark = other.loanRemark;
    }
    if (other.isSetCertType()) {
      this.certType = other.certType;
    }
    if (other.isSetPaymentBank()) {
      this.paymentBank = other.paymentBank;
    }
    if (other.isSetPaymentBankBranch()) {
      this.paymentBankBranch = other.paymentBankBranch;
    }
    if (other.isSetPaymentAcctName()) {
      this.paymentAcctName = other.paymentAcctName;
    }
    if (other.isSetPaymentAcctNo()) {
      this.paymentAcctNo = other.paymentAcctNo;
    }
    if (other.isSetPaymentProvinceCode()) {
      this.paymentProvinceCode = other.paymentProvinceCode;
    }
    if (other.isSetPaymentCityCode()) {
      this.paymentCityCode = other.paymentCityCode;
    }
    if (other.isSetPaymentAccount()) {
      this.paymentAccount = other.paymentAccount;
    }
    if (other.isSetPaymentName()) {
      this.paymentName = other.paymentName;
    }
    if (other.isSetPmCustomerName()) {
      this.pmCustomerName = other.pmCustomerName;
    }
    this.sex = other.sex;
    if (other.isSetLiveAddr()) {
      this.liveAddr = other.liveAddr;
    }
    if (other.isSetBusinessContacts()) {
      this.businessContacts = other.businessContacts;
    }
    if (other.isSetManagers()) {
      this.managers = other.managers;
    }
    if (other.isSetOldBankName()) {
      this.oldBankName = other.oldBankName;
    }
    this.oldLoanMoney = other.oldLoanMoney;
    if (other.isSetOldLoanPerson()) {
      this.oldLoanPerson = other.oldLoanPerson;
    }
    if (other.isSetOldLoanPhone()) {
      this.oldLoanPhone = other.oldLoanPhone;
    }
    if (other.isSetNewBankName()) {
      this.newBankName = other.newBankName;
    }
    this.newLoanMoney = other.newLoanMoney;
    if (other.isSetNewLoanPerson()) {
      this.newLoanPerson = other.newLoanPerson;
    }
    if (other.isSetNewLoanPhone()) {
      this.newLoanPhone = other.newLoanPhone;
    }
    this.paymentType = other.paymentType;
    if (other.isSetAccumulationFundBank()) {
      this.accumulationFundBank = other.accumulationFundBank;
    }
    this.accumulationFundMoney = other.accumulationFundMoney;
    if (other.isSetSuperviseDepartment()) {
      this.superviseDepartment = other.superviseDepartment;
    }
    this.fundsMoney = other.fundsMoney;
    if (other.isSetNotarizationDate()) {
      this.notarizationDate = other.notarizationDate;
    }
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    this.area = other.area;
    this.costMoney = other.costMoney;
    this.tranasctionMoney = other.tranasctionMoney;
    if (other.isSetHousePropertyCard()) {
      this.housePropertyCard = other.housePropertyCard;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetBuyerCardNo()) {
      this.buyerCardNo = other.buyerCardNo;
    }
    if (other.isSetBuyerAddress()) {
      this.buyerAddress = other.buyerAddress;
    }
    if (other.isSetProvinceCode()) {
      this.provinceCode = other.provinceCode;
    }
    if (other.isSetCityCode()) {
      this.cityCode = other.cityCode;
    }
    if (other.isSetPublicManList()) {
      List<com.xlkfinance.bms.rpc.customer.CusDTO> __this__publicManList = new ArrayList<com.xlkfinance.bms.rpc.customer.CusDTO>(other.publicManList.size());
      for (com.xlkfinance.bms.rpc.customer.CusDTO other_element : other.publicManList) {
        __this__publicManList.add(new com.xlkfinance.bms.rpc.customer.CusDTO(other_element));
      }
      this.publicManList = __this__publicManList;
    }
    if (other.isSetTaskHistoryList()) {
      List<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto> __this__taskHistoryList = new ArrayList<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto>(other.taskHistoryList.size());
      for (com.xlkfinance.bms.rpc.workflow.TaskHistoryDto other_element : other.taskHistoryList) {
        __this__taskHistoryList.add(new com.xlkfinance.bms.rpc.workflow.TaskHistoryDto(other_element));
      }
      this.taskHistoryList = __this__taskHistoryList;
    }
    if (other.isSetLoanEffeDate()) {
      this.loanEffeDate = other.loanEffeDate;
    }
    if (other.isSetPartnerLoanDate()) {
      this.partnerLoanDate = other.partnerLoanDate;
    }
    if (other.isSetPartnerLoanFile()) {
      this.partnerLoanFile = other.partnerLoanFile;
    }
    if (other.isSetPartnerRealRefundDate()) {
      this.partnerRealRefundDate = other.partnerRealRefundDate;
    }
    if (other.isSetPartnerRefundFile()) {
      this.partnerRefundFile = other.partnerRefundFile;
    }
    this.partnerInterests = other.partnerInterests;
    if (other.isSetRepaymentRepurchaseRemark()) {
      this.repaymentRepurchaseRemark = other.repaymentRepurchaseRemark;
    }
    this.refundLoanAmount = other.refundLoanAmount;
    this.refundXifee = other.refundXifee;
    if (other.isSetXiFeeVoucherPath()) {
      this.xiFeeVoucherPath = other.xiFeeVoucherPath;
    }
    if (other.isSetRefundDate()) {
      this.refundDate = other.refundDate;
    }
    this.businessCategory = other.businessCategory;
    if (other.isSetBusinessCategoryStr()) {
      this.businessCategoryStr = other.businessCategoryStr;
    }
    if (other.isSetPayAcctNo()) {
      this.payAcctNo = other.payAcctNo;
    }
    if (other.isSetPayAcctName()) {
      this.payAcctName = other.payAcctName;
    }
    if (other.isSetPayBankName()) {
      this.payBankName = other.payBankName;
    }
    if (other.isSetPayBankCode()) {
      this.payBankCode = other.payBankCode;
    }
    if (other.isSetPayBankBranch()) {
      this.payBankBranch = other.payBankBranch;
    }
    if (other.isSetPayProvinceCode()) {
      this.payProvinceCode = other.payProvinceCode;
    }
    if (other.isSetPayCityCode()) {
      this.payCityCode = other.payCityCode;
    }
    this.acctId = other.acctId;
    this.confirmLoanMoney = other.confirmLoanMoney;
    this.confirmLoanDays = other.confirmLoanDays;
    if (other.isSetHouseProvinceCode()) {
      this.houseProvinceCode = other.houseProvinceCode;
    }
    if (other.isSetHouseCityCode()) {
      this.houseCityCode = other.houseCityCode;
    }
    this.approveMoney = other.approveMoney;
    this.projectSource = other.projectSource;
    if (other.isSetEstateList()) {
      List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> __this__estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>(other.estateList.size());
      for (com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate other_element : other.estateList) {
        __this__estateList.add(new com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate(other_element));
      }
      this.estateList = __this__estateList;
    }
    if (other.isSetProjectProperty()) {
      this.projectProperty = new com.xlkfinance.bms.rpc.beforeloan.ProjectProperty(other.projectProperty);
    }
    if (other.isSetPartnerOrderCode()) {
      this.partnerOrderCode = other.partnerOrderCode;
    }
    this.loanPeriodLimit = other.loanPeriodLimit;
    this.isCreditLoan = other.isCreditLoan;
    if (other.isSetPaymentBankPhone()) {
      this.paymentBankPhone = other.paymentBankPhone;
    }
    if (other.isSetPaymentBankLineNo()) {
      this.paymentBankLineNo = other.paymentBankLineNo;
    }
    this.refundTotalAmount = other.refundTotalAmount;
    this.refundPenalty = other.refundPenalty;
    this.refundFine = other.refundFine;
    this.refundCompdinte = other.refundCompdinte;
    if (other.isSetPartnerPlatformOrderCode()) {
      this.partnerPlatformOrderCode = other.partnerPlatformOrderCode;
    }
    if (other.isSetProjectForeclosure()) {
      this.projectForeclosure = new com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure(other.projectForeclosure);
    }
    this.isPartnerOpenAccount = other.isPartnerOpenAccount;
    this.partnerPushAccount = other.partnerPushAccount;
    this.partnerGrossRate = other.partnerGrossRate;
  }

  public ProjectPartnerDto deepCopy() {
    return new ProjectPartnerDto(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.loanId = null;
    this.projectNumber = null;
    this.projectName = null;
    this.fileIds = null;
    this.requestFiles = null;
    this.remark = null;
    setBusinessTypeIsSet(false);
    this.businessType = 0;
    this.city = null;
    this.userName = null;
    this.cardNo = null;
    this.phone = null;
    setApplyMoneyIsSet(false);
    this.applyMoney = 0.0;
    setApplyDateIsSet(false);
    this.applyDate = 0;
    this.loanDate = null;
    this.pmUserName = null;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    this.businessTypeStr = null;
    this.partnerNo = null;
    this.approvalComment = null;
    this.reApplyReason = null;
    this.loanJusticeFiles = null;
    this.loanBlankFiles = null;
    this.loanOtherFiles = null;
    this.confirmLoanReason = null;
    setRepaymentRepurchaseTypeIsSet(false);
    this.repaymentRepurchaseType = 0;
    this.repaymentVoucherPath = null;
    this.repaymentRepurchaseStatus = null;
    this.applyLoanDate = null;
    setLoanStatusIsSet(false);
    this.loanStatus = 0;
    this.loanRemark = null;
    this.certType = null;
    this.paymentBank = null;
    this.paymentBankBranch = null;
    this.paymentAcctName = null;
    this.paymentAcctNo = null;
    this.paymentProvinceCode = null;
    this.paymentCityCode = null;
    this.paymentAccount = null;
    this.paymentName = null;
    this.pmCustomerName = null;
    setSexIsSet(false);
    this.sex = 0;
    this.liveAddr = null;
    this.businessContacts = null;
    this.managers = null;
    this.oldBankName = null;
    setOldLoanMoneyIsSet(false);
    this.oldLoanMoney = 0.0;
    this.oldLoanPerson = null;
    this.oldLoanPhone = null;
    this.newBankName = null;
    setNewLoanMoneyIsSet(false);
    this.newLoanMoney = 0.0;
    this.newLoanPerson = null;
    this.newLoanPhone = null;
    setPaymentTypeIsSet(false);
    this.paymentType = 0;
    this.accumulationFundBank = null;
    setAccumulationFundMoneyIsSet(false);
    this.accumulationFundMoney = 0.0;
    this.superviseDepartment = null;
    setFundsMoneyIsSet(false);
    this.fundsMoney = 0.0;
    this.notarizationDate = null;
    this.houseName = null;
    setAreaIsSet(false);
    this.area = 0.0;
    setCostMoneyIsSet(false);
    this.costMoney = 0.0;
    setTranasctionMoneyIsSet(false);
    this.tranasctionMoney = 0.0;
    this.housePropertyCard = null;
    this.buyerName = null;
    this.buyerCardNo = null;
    this.buyerAddress = null;
    this.provinceCode = null;
    this.cityCode = null;
    this.publicManList = null;
    this.taskHistoryList = null;
    this.loanEffeDate = null;
    this.partnerLoanDate = null;
    this.partnerLoanFile = null;
    this.partnerRealRefundDate = null;
    this.partnerRefundFile = null;
    setPartnerInterestsIsSet(false);
    this.partnerInterests = 0.0;
    this.repaymentRepurchaseRemark = null;
    setRefundLoanAmountIsSet(false);
    this.refundLoanAmount = 0.0;
    setRefundXifeeIsSet(false);
    this.refundXifee = 0.0;
    this.xiFeeVoucherPath = null;
    this.refundDate = null;
    setBusinessCategoryIsSet(false);
    this.businessCategory = 0;
    this.businessCategoryStr = null;
    this.payAcctNo = null;
    this.payAcctName = null;
    this.payBankName = null;
    this.payBankCode = null;
    this.payBankBranch = null;
    this.payProvinceCode = null;
    this.payCityCode = null;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setConfirmLoanMoneyIsSet(false);
    this.confirmLoanMoney = 0.0;
    setConfirmLoanDaysIsSet(false);
    this.confirmLoanDays = 0;
    this.houseProvinceCode = null;
    this.houseCityCode = null;
    setApproveMoneyIsSet(false);
    this.approveMoney = 0.0;
    setProjectSourceIsSet(false);
    this.projectSource = 0;
    this.estateList = null;
    this.projectProperty = null;
    this.partnerOrderCode = null;
    setLoanPeriodLimitIsSet(false);
    this.loanPeriodLimit = 0;
    setIsCreditLoanIsSet(false);
    this.isCreditLoan = 0;
    this.paymentBankPhone = null;
    this.paymentBankLineNo = null;
    setRefundTotalAmountIsSet(false);
    this.refundTotalAmount = 0.0;
    setRefundPenaltyIsSet(false);
    this.refundPenalty = 0.0;
    setRefundFineIsSet(false);
    this.refundFine = 0.0;
    setRefundCompdinteIsSet(false);
    this.refundCompdinte = 0.0;
    this.partnerPlatformOrderCode = null;
    this.projectForeclosure = null;
    setIsPartnerOpenAccountIsSet(false);
    this.isPartnerOpenAccount = 0;
    setPartnerPushAccountIsSet(false);
    this.partnerPushAccount = 0;
    setPartnerGrossRateIsSet(false);
    this.partnerGrossRate = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public ProjectPartnerDto setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ProjectPartnerDto setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getLoanId() {
    return this.loanId;
  }

  public ProjectPartnerDto setLoanId(String loanId) {
    this.loanId = loanId;
    return this;
  }

  public void unsetLoanId() {
    this.loanId = null;
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return this.loanId != null;
  }

  public void setLoanIdIsSet(boolean value) {
    if (!value) {
      this.loanId = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public ProjectPartnerDto setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public ProjectPartnerDto setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getFileIdsSize() {
    return (this.fileIds == null) ? 0 : this.fileIds.size();
  }

  public java.util.Iterator<Integer> getFileIdsIterator() {
    return (this.fileIds == null) ? null : this.fileIds.iterator();
  }

  public void addToFileIds(int elem) {
    if (this.fileIds == null) {
      this.fileIds = new ArrayList<Integer>();
    }
    this.fileIds.add(elem);
  }

  public List<Integer> getFileIds() {
    return this.fileIds;
  }

  public ProjectPartnerDto setFileIds(List<Integer> fileIds) {
    this.fileIds = fileIds;
    return this;
  }

  public void unsetFileIds() {
    this.fileIds = null;
  }

  /** Returns true if field fileIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFileIds() {
    return this.fileIds != null;
  }

  public void setFileIdsIsSet(boolean value) {
    if (!value) {
      this.fileIds = null;
    }
  }

  public String getRequestFiles() {
    return this.requestFiles;
  }

  public ProjectPartnerDto setRequestFiles(String requestFiles) {
    this.requestFiles = requestFiles;
    return this;
  }

  public void unsetRequestFiles() {
    this.requestFiles = null;
  }

  /** Returns true if field requestFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestFiles() {
    return this.requestFiles != null;
  }

  public void setRequestFilesIsSet(boolean value) {
    if (!value) {
      this.requestFiles = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ProjectPartnerDto setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getBusinessType() {
    return this.businessType;
  }

  public ProjectPartnerDto setBusinessType(int businessType) {
    this.businessType = businessType;
    setBusinessTypeIsSet(true);
    return this;
  }

  public void unsetBusinessType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID);
  }

  /** Returns true if field businessType is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessType() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID);
  }

  public void setBusinessTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSTYPE_ISSET_ID, value);
  }

  public String getCity() {
    return this.city;
  }

  public ProjectPartnerDto setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getUserName() {
    return this.userName;
  }

  public ProjectPartnerDto setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getCardNo() {
    return this.cardNo;
  }

  public ProjectPartnerDto setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public ProjectPartnerDto setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public double getApplyMoney() {
    return this.applyMoney;
  }

  public ProjectPartnerDto setApplyMoney(double applyMoney) {
    this.applyMoney = applyMoney;
    setApplyMoneyIsSet(true);
    return this;
  }

  public void unsetApplyMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYMONEY_ISSET_ID);
  }

  /** Returns true if field applyMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYMONEY_ISSET_ID);
  }

  public void setApplyMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYMONEY_ISSET_ID, value);
  }

  public int getApplyDate() {
    return this.applyDate;
  }

  public ProjectPartnerDto setApplyDate(int applyDate) {
    this.applyDate = applyDate;
    setApplyDateIsSet(true);
    return this;
  }

  public void unsetApplyDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYDATE_ISSET_ID);
  }

  /** Returns true if field applyDate is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyDate() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYDATE_ISSET_ID);
  }

  public void setApplyDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYDATE_ISSET_ID, value);
  }

  public String getLoanDate() {
    return this.loanDate;
  }

  public ProjectPartnerDto setLoanDate(String loanDate) {
    this.loanDate = loanDate;
    return this;
  }

  public void unsetLoanDate() {
    this.loanDate = null;
  }

  /** Returns true if field loanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanDate() {
    return this.loanDate != null;
  }

  public void setLoanDateIsSet(boolean value) {
    if (!value) {
      this.loanDate = null;
    }
  }

  public String getPmUserName() {
    return this.pmUserName;
  }

  public ProjectPartnerDto setPmUserName(String pmUserName) {
    this.pmUserName = pmUserName;
    return this;
  }

  public void unsetPmUserName() {
    this.pmUserName = null;
  }

  /** Returns true if field pmUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserName() {
    return this.pmUserName != null;
  }

  public void setPmUserNameIsSet(boolean value) {
    if (!value) {
      this.pmUserName = null;
    }
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public ProjectPartnerDto setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public String getBusinessTypeStr() {
    return this.businessTypeStr;
  }

  public ProjectPartnerDto setBusinessTypeStr(String businessTypeStr) {
    this.businessTypeStr = businessTypeStr;
    return this;
  }

  public void unsetBusinessTypeStr() {
    this.businessTypeStr = null;
  }

  /** Returns true if field businessTypeStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessTypeStr() {
    return this.businessTypeStr != null;
  }

  public void setBusinessTypeStrIsSet(boolean value) {
    if (!value) {
      this.businessTypeStr = null;
    }
  }

  public String getPartnerNo() {
    return this.partnerNo;
  }

  public ProjectPartnerDto setPartnerNo(String partnerNo) {
    this.partnerNo = partnerNo;
    return this;
  }

  public void unsetPartnerNo() {
    this.partnerNo = null;
  }

  /** Returns true if field partnerNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerNo() {
    return this.partnerNo != null;
  }

  public void setPartnerNoIsSet(boolean value) {
    if (!value) {
      this.partnerNo = null;
    }
  }

  public String getApprovalComment() {
    return this.approvalComment;
  }

  public ProjectPartnerDto setApprovalComment(String approvalComment) {
    this.approvalComment = approvalComment;
    return this;
  }

  public void unsetApprovalComment() {
    this.approvalComment = null;
  }

  /** Returns true if field approvalComment is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalComment() {
    return this.approvalComment != null;
  }

  public void setApprovalCommentIsSet(boolean value) {
    if (!value) {
      this.approvalComment = null;
    }
  }

  public String getReApplyReason() {
    return this.reApplyReason;
  }

  public ProjectPartnerDto setReApplyReason(String reApplyReason) {
    this.reApplyReason = reApplyReason;
    return this;
  }

  public void unsetReApplyReason() {
    this.reApplyReason = null;
  }

  /** Returns true if field reApplyReason is set (has been assigned a value) and false otherwise */
  public boolean isSetReApplyReason() {
    return this.reApplyReason != null;
  }

  public void setReApplyReasonIsSet(boolean value) {
    if (!value) {
      this.reApplyReason = null;
    }
  }

  public String getLoanJusticeFiles() {
    return this.loanJusticeFiles;
  }

  public ProjectPartnerDto setLoanJusticeFiles(String loanJusticeFiles) {
    this.loanJusticeFiles = loanJusticeFiles;
    return this;
  }

  public void unsetLoanJusticeFiles() {
    this.loanJusticeFiles = null;
  }

  /** Returns true if field loanJusticeFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanJusticeFiles() {
    return this.loanJusticeFiles != null;
  }

  public void setLoanJusticeFilesIsSet(boolean value) {
    if (!value) {
      this.loanJusticeFiles = null;
    }
  }

  public String getLoanBlankFiles() {
    return this.loanBlankFiles;
  }

  public ProjectPartnerDto setLoanBlankFiles(String loanBlankFiles) {
    this.loanBlankFiles = loanBlankFiles;
    return this;
  }

  public void unsetLoanBlankFiles() {
    this.loanBlankFiles = null;
  }

  /** Returns true if field loanBlankFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanBlankFiles() {
    return this.loanBlankFiles != null;
  }

  public void setLoanBlankFilesIsSet(boolean value) {
    if (!value) {
      this.loanBlankFiles = null;
    }
  }

  public String getLoanOtherFiles() {
    return this.loanOtherFiles;
  }

  public ProjectPartnerDto setLoanOtherFiles(String loanOtherFiles) {
    this.loanOtherFiles = loanOtherFiles;
    return this;
  }

  public void unsetLoanOtherFiles() {
    this.loanOtherFiles = null;
  }

  /** Returns true if field loanOtherFiles is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanOtherFiles() {
    return this.loanOtherFiles != null;
  }

  public void setLoanOtherFilesIsSet(boolean value) {
    if (!value) {
      this.loanOtherFiles = null;
    }
  }

  public String getConfirmLoanReason() {
    return this.confirmLoanReason;
  }

  public ProjectPartnerDto setConfirmLoanReason(String confirmLoanReason) {
    this.confirmLoanReason = confirmLoanReason;
    return this;
  }

  public void unsetConfirmLoanReason() {
    this.confirmLoanReason = null;
  }

  /** Returns true if field confirmLoanReason is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanReason() {
    return this.confirmLoanReason != null;
  }

  public void setConfirmLoanReasonIsSet(boolean value) {
    if (!value) {
      this.confirmLoanReason = null;
    }
  }

  public int getRepaymentRepurchaseType() {
    return this.repaymentRepurchaseType;
  }

  public ProjectPartnerDto setRepaymentRepurchaseType(int repaymentRepurchaseType) {
    this.repaymentRepurchaseType = repaymentRepurchaseType;
    setRepaymentRepurchaseTypeIsSet(true);
    return this;
  }

  public void unsetRepaymentRepurchaseType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTREPURCHASETYPE_ISSET_ID);
  }

  /** Returns true if field repaymentRepurchaseType is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTREPURCHASETYPE_ISSET_ID);
  }

  public void setRepaymentRepurchaseTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTREPURCHASETYPE_ISSET_ID, value);
  }

  public String getRepaymentVoucherPath() {
    return this.repaymentVoucherPath;
  }

  public ProjectPartnerDto setRepaymentVoucherPath(String repaymentVoucherPath) {
    this.repaymentVoucherPath = repaymentVoucherPath;
    return this;
  }

  public void unsetRepaymentVoucherPath() {
    this.repaymentVoucherPath = null;
  }

  /** Returns true if field repaymentVoucherPath is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentVoucherPath() {
    return this.repaymentVoucherPath != null;
  }

  public void setRepaymentVoucherPathIsSet(boolean value) {
    if (!value) {
      this.repaymentVoucherPath = null;
    }
  }

  public String getRepaymentRepurchaseStatus() {
    return this.repaymentRepurchaseStatus;
  }

  public ProjectPartnerDto setRepaymentRepurchaseStatus(String repaymentRepurchaseStatus) {
    this.repaymentRepurchaseStatus = repaymentRepurchaseStatus;
    return this;
  }

  public void unsetRepaymentRepurchaseStatus() {
    this.repaymentRepurchaseStatus = null;
  }

  /** Returns true if field repaymentRepurchaseStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseStatus() {
    return this.repaymentRepurchaseStatus != null;
  }

  public void setRepaymentRepurchaseStatusIsSet(boolean value) {
    if (!value) {
      this.repaymentRepurchaseStatus = null;
    }
  }

  public String getApplyLoanDate() {
    return this.applyLoanDate;
  }

  public ProjectPartnerDto setApplyLoanDate(String applyLoanDate) {
    this.applyLoanDate = applyLoanDate;
    return this;
  }

  public void unsetApplyLoanDate() {
    this.applyLoanDate = null;
  }

  /** Returns true if field applyLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyLoanDate() {
    return this.applyLoanDate != null;
  }

  public void setApplyLoanDateIsSet(boolean value) {
    if (!value) {
      this.applyLoanDate = null;
    }
  }

  public int getLoanStatus() {
    return this.loanStatus;
  }

  public ProjectPartnerDto setLoanStatus(int loanStatus) {
    this.loanStatus = loanStatus;
    setLoanStatusIsSet(true);
    return this;
  }

  public void unsetLoanStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANSTATUS_ISSET_ID);
  }

  /** Returns true if field loanStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANSTATUS_ISSET_ID);
  }

  public void setLoanStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANSTATUS_ISSET_ID, value);
  }

  public String getLoanRemark() {
    return this.loanRemark;
  }

  public ProjectPartnerDto setLoanRemark(String loanRemark) {
    this.loanRemark = loanRemark;
    return this;
  }

  public void unsetLoanRemark() {
    this.loanRemark = null;
  }

  /** Returns true if field loanRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanRemark() {
    return this.loanRemark != null;
  }

  public void setLoanRemarkIsSet(boolean value) {
    if (!value) {
      this.loanRemark = null;
    }
  }

  public String getCertType() {
    return this.certType;
  }

  public ProjectPartnerDto setCertType(String certType) {
    this.certType = certType;
    return this;
  }

  public void unsetCertType() {
    this.certType = null;
  }

  /** Returns true if field certType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertType() {
    return this.certType != null;
  }

  public void setCertTypeIsSet(boolean value) {
    if (!value) {
      this.certType = null;
    }
  }

  public String getPaymentBank() {
    return this.paymentBank;
  }

  public ProjectPartnerDto setPaymentBank(String paymentBank) {
    this.paymentBank = paymentBank;
    return this;
  }

  public void unsetPaymentBank() {
    this.paymentBank = null;
  }

  /** Returns true if field paymentBank is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBank() {
    return this.paymentBank != null;
  }

  public void setPaymentBankIsSet(boolean value) {
    if (!value) {
      this.paymentBank = null;
    }
  }

  public String getPaymentBankBranch() {
    return this.paymentBankBranch;
  }

  public ProjectPartnerDto setPaymentBankBranch(String paymentBankBranch) {
    this.paymentBankBranch = paymentBankBranch;
    return this;
  }

  public void unsetPaymentBankBranch() {
    this.paymentBankBranch = null;
  }

  /** Returns true if field paymentBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBankBranch() {
    return this.paymentBankBranch != null;
  }

  public void setPaymentBankBranchIsSet(boolean value) {
    if (!value) {
      this.paymentBankBranch = null;
    }
  }

  public String getPaymentAcctName() {
    return this.paymentAcctName;
  }

  public ProjectPartnerDto setPaymentAcctName(String paymentAcctName) {
    this.paymentAcctName = paymentAcctName;
    return this;
  }

  public void unsetPaymentAcctName() {
    this.paymentAcctName = null;
  }

  /** Returns true if field paymentAcctName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAcctName() {
    return this.paymentAcctName != null;
  }

  public void setPaymentAcctNameIsSet(boolean value) {
    if (!value) {
      this.paymentAcctName = null;
    }
  }

  public String getPaymentAcctNo() {
    return this.paymentAcctNo;
  }

  public ProjectPartnerDto setPaymentAcctNo(String paymentAcctNo) {
    this.paymentAcctNo = paymentAcctNo;
    return this;
  }

  public void unsetPaymentAcctNo() {
    this.paymentAcctNo = null;
  }

  /** Returns true if field paymentAcctNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAcctNo() {
    return this.paymentAcctNo != null;
  }

  public void setPaymentAcctNoIsSet(boolean value) {
    if (!value) {
      this.paymentAcctNo = null;
    }
  }

  public String getPaymentProvinceCode() {
    return this.paymentProvinceCode;
  }

  public ProjectPartnerDto setPaymentProvinceCode(String paymentProvinceCode) {
    this.paymentProvinceCode = paymentProvinceCode;
    return this;
  }

  public void unsetPaymentProvinceCode() {
    this.paymentProvinceCode = null;
  }

  /** Returns true if field paymentProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentProvinceCode() {
    return this.paymentProvinceCode != null;
  }

  public void setPaymentProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.paymentProvinceCode = null;
    }
  }

  public String getPaymentCityCode() {
    return this.paymentCityCode;
  }

  public ProjectPartnerDto setPaymentCityCode(String paymentCityCode) {
    this.paymentCityCode = paymentCityCode;
    return this;
  }

  public void unsetPaymentCityCode() {
    this.paymentCityCode = null;
  }

  /** Returns true if field paymentCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentCityCode() {
    return this.paymentCityCode != null;
  }

  public void setPaymentCityCodeIsSet(boolean value) {
    if (!value) {
      this.paymentCityCode = null;
    }
  }

  public String getPaymentAccount() {
    return this.paymentAccount;
  }

  public ProjectPartnerDto setPaymentAccount(String paymentAccount) {
    this.paymentAccount = paymentAccount;
    return this;
  }

  public void unsetPaymentAccount() {
    this.paymentAccount = null;
  }

  /** Returns true if field paymentAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentAccount() {
    return this.paymentAccount != null;
  }

  public void setPaymentAccountIsSet(boolean value) {
    if (!value) {
      this.paymentAccount = null;
    }
  }

  public String getPaymentName() {
    return this.paymentName;
  }

  public ProjectPartnerDto setPaymentName(String paymentName) {
    this.paymentName = paymentName;
    return this;
  }

  public void unsetPaymentName() {
    this.paymentName = null;
  }

  /** Returns true if field paymentName is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentName() {
    return this.paymentName != null;
  }

  public void setPaymentNameIsSet(boolean value) {
    if (!value) {
      this.paymentName = null;
    }
  }

  public String getPmCustomerName() {
    return this.pmCustomerName;
  }

  public ProjectPartnerDto setPmCustomerName(String pmCustomerName) {
    this.pmCustomerName = pmCustomerName;
    return this;
  }

  public void unsetPmCustomerName() {
    this.pmCustomerName = null;
  }

  /** Returns true if field pmCustomerName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmCustomerName() {
    return this.pmCustomerName != null;
  }

  public void setPmCustomerNameIsSet(boolean value) {
    if (!value) {
      this.pmCustomerName = null;
    }
  }

  public int getSex() {
    return this.sex;
  }

  public ProjectPartnerDto setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public String getLiveAddr() {
    return this.liveAddr;
  }

  public ProjectPartnerDto setLiveAddr(String liveAddr) {
    this.liveAddr = liveAddr;
    return this;
  }

  public void unsetLiveAddr() {
    this.liveAddr = null;
  }

  /** Returns true if field liveAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveAddr() {
    return this.liveAddr != null;
  }

  public void setLiveAddrIsSet(boolean value) {
    if (!value) {
      this.liveAddr = null;
    }
  }

  public String getBusinessContacts() {
    return this.businessContacts;
  }

  public ProjectPartnerDto setBusinessContacts(String businessContacts) {
    this.businessContacts = businessContacts;
    return this;
  }

  public void unsetBusinessContacts() {
    this.businessContacts = null;
  }

  /** Returns true if field businessContacts is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessContacts() {
    return this.businessContacts != null;
  }

  public void setBusinessContactsIsSet(boolean value) {
    if (!value) {
      this.businessContacts = null;
    }
  }

  public String getManagers() {
    return this.managers;
  }

  public ProjectPartnerDto setManagers(String managers) {
    this.managers = managers;
    return this;
  }

  public void unsetManagers() {
    this.managers = null;
  }

  /** Returns true if field managers is set (has been assigned a value) and false otherwise */
  public boolean isSetManagers() {
    return this.managers != null;
  }

  public void setManagersIsSet(boolean value) {
    if (!value) {
      this.managers = null;
    }
  }

  public String getOldBankName() {
    return this.oldBankName;
  }

  public ProjectPartnerDto setOldBankName(String oldBankName) {
    this.oldBankName = oldBankName;
    return this;
  }

  public void unsetOldBankName() {
    this.oldBankName = null;
  }

  /** Returns true if field oldBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetOldBankName() {
    return this.oldBankName != null;
  }

  public void setOldBankNameIsSet(boolean value) {
    if (!value) {
      this.oldBankName = null;
    }
  }

  public double getOldLoanMoney() {
    return this.oldLoanMoney;
  }

  public ProjectPartnerDto setOldLoanMoney(double oldLoanMoney) {
    this.oldLoanMoney = oldLoanMoney;
    setOldLoanMoneyIsSet(true);
    return this;
  }

  public void unsetOldLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDLOANMONEY_ISSET_ID);
  }

  /** Returns true if field oldLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDLOANMONEY_ISSET_ID);
  }

  public void setOldLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDLOANMONEY_ISSET_ID, value);
  }

  public String getOldLoanPerson() {
    return this.oldLoanPerson;
  }

  public ProjectPartnerDto setOldLoanPerson(String oldLoanPerson) {
    this.oldLoanPerson = oldLoanPerson;
    return this;
  }

  public void unsetOldLoanPerson() {
    this.oldLoanPerson = null;
  }

  /** Returns true if field oldLoanPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanPerson() {
    return this.oldLoanPerson != null;
  }

  public void setOldLoanPersonIsSet(boolean value) {
    if (!value) {
      this.oldLoanPerson = null;
    }
  }

  public String getOldLoanPhone() {
    return this.oldLoanPhone;
  }

  public ProjectPartnerDto setOldLoanPhone(String oldLoanPhone) {
    this.oldLoanPhone = oldLoanPhone;
    return this;
  }

  public void unsetOldLoanPhone() {
    this.oldLoanPhone = null;
  }

  /** Returns true if field oldLoanPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetOldLoanPhone() {
    return this.oldLoanPhone != null;
  }

  public void setOldLoanPhoneIsSet(boolean value) {
    if (!value) {
      this.oldLoanPhone = null;
    }
  }

  public String getNewBankName() {
    return this.newBankName;
  }

  public ProjectPartnerDto setNewBankName(String newBankName) {
    this.newBankName = newBankName;
    return this;
  }

  public void unsetNewBankName() {
    this.newBankName = null;
  }

  /** Returns true if field newBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetNewBankName() {
    return this.newBankName != null;
  }

  public void setNewBankNameIsSet(boolean value) {
    if (!value) {
      this.newBankName = null;
    }
  }

  public double getNewLoanMoney() {
    return this.newLoanMoney;
  }

  public ProjectPartnerDto setNewLoanMoney(double newLoanMoney) {
    this.newLoanMoney = newLoanMoney;
    setNewLoanMoneyIsSet(true);
    return this;
  }

  public void unsetNewLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWLOANMONEY_ISSET_ID);
  }

  /** Returns true if field newLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWLOANMONEY_ISSET_ID);
  }

  public void setNewLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWLOANMONEY_ISSET_ID, value);
  }

  public String getNewLoanPerson() {
    return this.newLoanPerson;
  }

  public ProjectPartnerDto setNewLoanPerson(String newLoanPerson) {
    this.newLoanPerson = newLoanPerson;
    return this;
  }

  public void unsetNewLoanPerson() {
    this.newLoanPerson = null;
  }

  /** Returns true if field newLoanPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanPerson() {
    return this.newLoanPerson != null;
  }

  public void setNewLoanPersonIsSet(boolean value) {
    if (!value) {
      this.newLoanPerson = null;
    }
  }

  public String getNewLoanPhone() {
    return this.newLoanPhone;
  }

  public ProjectPartnerDto setNewLoanPhone(String newLoanPhone) {
    this.newLoanPhone = newLoanPhone;
    return this;
  }

  public void unsetNewLoanPhone() {
    this.newLoanPhone = null;
  }

  /** Returns true if field newLoanPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetNewLoanPhone() {
    return this.newLoanPhone != null;
  }

  public void setNewLoanPhoneIsSet(boolean value) {
    if (!value) {
      this.newLoanPhone = null;
    }
  }

  public int getPaymentType() {
    return this.paymentType;
  }

  public ProjectPartnerDto setPaymentType(int paymentType) {
    this.paymentType = paymentType;
    setPaymentTypeIsSet(true);
    return this;
  }

  public void unsetPaymentType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID);
  }

  /** Returns true if field paymentType is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentType() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID);
  }

  public void setPaymentTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYMENTTYPE_ISSET_ID, value);
  }

  public String getAccumulationFundBank() {
    return this.accumulationFundBank;
  }

  public ProjectPartnerDto setAccumulationFundBank(String accumulationFundBank) {
    this.accumulationFundBank = accumulationFundBank;
    return this;
  }

  public void unsetAccumulationFundBank() {
    this.accumulationFundBank = null;
  }

  /** Returns true if field accumulationFundBank is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumulationFundBank() {
    return this.accumulationFundBank != null;
  }

  public void setAccumulationFundBankIsSet(boolean value) {
    if (!value) {
      this.accumulationFundBank = null;
    }
  }

  public double getAccumulationFundMoney() {
    return this.accumulationFundMoney;
  }

  public ProjectPartnerDto setAccumulationFundMoney(double accumulationFundMoney) {
    this.accumulationFundMoney = accumulationFundMoney;
    setAccumulationFundMoneyIsSet(true);
    return this;
  }

  public void unsetAccumulationFundMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCUMULATIONFUNDMONEY_ISSET_ID);
  }

  /** Returns true if field accumulationFundMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumulationFundMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCUMULATIONFUNDMONEY_ISSET_ID);
  }

  public void setAccumulationFundMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCUMULATIONFUNDMONEY_ISSET_ID, value);
  }

  public String getSuperviseDepartment() {
    return this.superviseDepartment;
  }

  public ProjectPartnerDto setSuperviseDepartment(String superviseDepartment) {
    this.superviseDepartment = superviseDepartment;
    return this;
  }

  public void unsetSuperviseDepartment() {
    this.superviseDepartment = null;
  }

  /** Returns true if field superviseDepartment is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperviseDepartment() {
    return this.superviseDepartment != null;
  }

  public void setSuperviseDepartmentIsSet(boolean value) {
    if (!value) {
      this.superviseDepartment = null;
    }
  }

  public double getFundsMoney() {
    return this.fundsMoney;
  }

  public ProjectPartnerDto setFundsMoney(double fundsMoney) {
    this.fundsMoney = fundsMoney;
    setFundsMoneyIsSet(true);
    return this;
  }

  public void unsetFundsMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FUNDSMONEY_ISSET_ID);
  }

  /** Returns true if field fundsMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetFundsMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FUNDSMONEY_ISSET_ID);
  }

  public void setFundsMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FUNDSMONEY_ISSET_ID, value);
  }

  public String getNotarizationDate() {
    return this.notarizationDate;
  }

  public ProjectPartnerDto setNotarizationDate(String notarizationDate) {
    this.notarizationDate = notarizationDate;
    return this;
  }

  public void unsetNotarizationDate() {
    this.notarizationDate = null;
  }

  /** Returns true if field notarizationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationDate() {
    return this.notarizationDate != null;
  }

  public void setNotarizationDateIsSet(boolean value) {
    if (!value) {
      this.notarizationDate = null;
    }
  }

  public String getHouseName() {
    return this.houseName;
  }

  public ProjectPartnerDto setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public double getArea() {
    return this.area;
  }

  public ProjectPartnerDto setArea(double area) {
    this.area = area;
    setAreaIsSet(true);
    return this;
  }

  public void unsetArea() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return EncodingUtils.testBit(__isset_bitfield, __AREA_ISSET_ID);
  }

  public void setAreaIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREA_ISSET_ID, value);
  }

  public double getCostMoney() {
    return this.costMoney;
  }

  public ProjectPartnerDto setCostMoney(double costMoney) {
    this.costMoney = costMoney;
    setCostMoneyIsSet(true);
    return this;
  }

  public void unsetCostMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COSTMONEY_ISSET_ID);
  }

  /** Returns true if field costMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetCostMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __COSTMONEY_ISSET_ID);
  }

  public void setCostMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COSTMONEY_ISSET_ID, value);
  }

  public double getTranasctionMoney() {
    return this.tranasctionMoney;
  }

  public ProjectPartnerDto setTranasctionMoney(double tranasctionMoney) {
    this.tranasctionMoney = tranasctionMoney;
    setTranasctionMoneyIsSet(true);
    return this;
  }

  public void unsetTranasctionMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID);
  }

  /** Returns true if field tranasctionMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetTranasctionMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID);
  }

  public void setTranasctionMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANASCTIONMONEY_ISSET_ID, value);
  }

  public String getHousePropertyCard() {
    return this.housePropertyCard;
  }

  public ProjectPartnerDto setHousePropertyCard(String housePropertyCard) {
    this.housePropertyCard = housePropertyCard;
    return this;
  }

  public void unsetHousePropertyCard() {
    this.housePropertyCard = null;
  }

  /** Returns true if field housePropertyCard is set (has been assigned a value) and false otherwise */
  public boolean isSetHousePropertyCard() {
    return this.housePropertyCard != null;
  }

  public void setHousePropertyCardIsSet(boolean value) {
    if (!value) {
      this.housePropertyCard = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public ProjectPartnerDto setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getBuyerCardNo() {
    return this.buyerCardNo;
  }

  public ProjectPartnerDto setBuyerCardNo(String buyerCardNo) {
    this.buyerCardNo = buyerCardNo;
    return this;
  }

  public void unsetBuyerCardNo() {
    this.buyerCardNo = null;
  }

  /** Returns true if field buyerCardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerCardNo() {
    return this.buyerCardNo != null;
  }

  public void setBuyerCardNoIsSet(boolean value) {
    if (!value) {
      this.buyerCardNo = null;
    }
  }

  public String getBuyerAddress() {
    return this.buyerAddress;
  }

  public ProjectPartnerDto setBuyerAddress(String buyerAddress) {
    this.buyerAddress = buyerAddress;
    return this;
  }

  public void unsetBuyerAddress() {
    this.buyerAddress = null;
  }

  /** Returns true if field buyerAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerAddress() {
    return this.buyerAddress != null;
  }

  public void setBuyerAddressIsSet(boolean value) {
    if (!value) {
      this.buyerAddress = null;
    }
  }

  public String getProvinceCode() {
    return this.provinceCode;
  }

  public ProjectPartnerDto setProvinceCode(String provinceCode) {
    this.provinceCode = provinceCode;
    return this;
  }

  public void unsetProvinceCode() {
    this.provinceCode = null;
  }

  /** Returns true if field provinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceCode() {
    return this.provinceCode != null;
  }

  public void setProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.provinceCode = null;
    }
  }

  public String getCityCode() {
    return this.cityCode;
  }

  public ProjectPartnerDto setCityCode(String cityCode) {
    this.cityCode = cityCode;
    return this;
  }

  public void unsetCityCode() {
    this.cityCode = null;
  }

  /** Returns true if field cityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCityCode() {
    return this.cityCode != null;
  }

  public void setCityCodeIsSet(boolean value) {
    if (!value) {
      this.cityCode = null;
    }
  }

  public int getPublicManListSize() {
    return (this.publicManList == null) ? 0 : this.publicManList.size();
  }

  public java.util.Iterator<com.xlkfinance.bms.rpc.customer.CusDTO> getPublicManListIterator() {
    return (this.publicManList == null) ? null : this.publicManList.iterator();
  }

  public void addToPublicManList(com.xlkfinance.bms.rpc.customer.CusDTO elem) {
    if (this.publicManList == null) {
      this.publicManList = new ArrayList<com.xlkfinance.bms.rpc.customer.CusDTO>();
    }
    this.publicManList.add(elem);
  }

  public List<com.xlkfinance.bms.rpc.customer.CusDTO> getPublicManList() {
    return this.publicManList;
  }

  public ProjectPartnerDto setPublicManList(List<com.xlkfinance.bms.rpc.customer.CusDTO> publicManList) {
    this.publicManList = publicManList;
    return this;
  }

  public void unsetPublicManList() {
    this.publicManList = null;
  }

  /** Returns true if field publicManList is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicManList() {
    return this.publicManList != null;
  }

  public void setPublicManListIsSet(boolean value) {
    if (!value) {
      this.publicManList = null;
    }
  }

  public int getTaskHistoryListSize() {
    return (this.taskHistoryList == null) ? 0 : this.taskHistoryList.size();
  }

  public java.util.Iterator<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto> getTaskHistoryListIterator() {
    return (this.taskHistoryList == null) ? null : this.taskHistoryList.iterator();
  }

  public void addToTaskHistoryList(com.xlkfinance.bms.rpc.workflow.TaskHistoryDto elem) {
    if (this.taskHistoryList == null) {
      this.taskHistoryList = new ArrayList<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto>();
    }
    this.taskHistoryList.add(elem);
  }

  public List<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto> getTaskHistoryList() {
    return this.taskHistoryList;
  }

  public ProjectPartnerDto setTaskHistoryList(List<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto> taskHistoryList) {
    this.taskHistoryList = taskHistoryList;
    return this;
  }

  public void unsetTaskHistoryList() {
    this.taskHistoryList = null;
  }

  /** Returns true if field taskHistoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskHistoryList() {
    return this.taskHistoryList != null;
  }

  public void setTaskHistoryListIsSet(boolean value) {
    if (!value) {
      this.taskHistoryList = null;
    }
  }

  public String getLoanEffeDate() {
    return this.loanEffeDate;
  }

  public ProjectPartnerDto setLoanEffeDate(String loanEffeDate) {
    this.loanEffeDate = loanEffeDate;
    return this;
  }

  public void unsetLoanEffeDate() {
    this.loanEffeDate = null;
  }

  /** Returns true if field loanEffeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanEffeDate() {
    return this.loanEffeDate != null;
  }

  public void setLoanEffeDateIsSet(boolean value) {
    if (!value) {
      this.loanEffeDate = null;
    }
  }

  public String getPartnerLoanDate() {
    return this.partnerLoanDate;
  }

  public ProjectPartnerDto setPartnerLoanDate(String partnerLoanDate) {
    this.partnerLoanDate = partnerLoanDate;
    return this;
  }

  public void unsetPartnerLoanDate() {
    this.partnerLoanDate = null;
  }

  /** Returns true if field partnerLoanDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerLoanDate() {
    return this.partnerLoanDate != null;
  }

  public void setPartnerLoanDateIsSet(boolean value) {
    if (!value) {
      this.partnerLoanDate = null;
    }
  }

  public String getPartnerLoanFile() {
    return this.partnerLoanFile;
  }

  public ProjectPartnerDto setPartnerLoanFile(String partnerLoanFile) {
    this.partnerLoanFile = partnerLoanFile;
    return this;
  }

  public void unsetPartnerLoanFile() {
    this.partnerLoanFile = null;
  }

  /** Returns true if field partnerLoanFile is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerLoanFile() {
    return this.partnerLoanFile != null;
  }

  public void setPartnerLoanFileIsSet(boolean value) {
    if (!value) {
      this.partnerLoanFile = null;
    }
  }

  public String getPartnerRealRefundDate() {
    return this.partnerRealRefundDate;
  }

  public ProjectPartnerDto setPartnerRealRefundDate(String partnerRealRefundDate) {
    this.partnerRealRefundDate = partnerRealRefundDate;
    return this;
  }

  public void unsetPartnerRealRefundDate() {
    this.partnerRealRefundDate = null;
  }

  /** Returns true if field partnerRealRefundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRealRefundDate() {
    return this.partnerRealRefundDate != null;
  }

  public void setPartnerRealRefundDateIsSet(boolean value) {
    if (!value) {
      this.partnerRealRefundDate = null;
    }
  }

  public String getPartnerRefundFile() {
    return this.partnerRefundFile;
  }

  public ProjectPartnerDto setPartnerRefundFile(String partnerRefundFile) {
    this.partnerRefundFile = partnerRefundFile;
    return this;
  }

  public void unsetPartnerRefundFile() {
    this.partnerRefundFile = null;
  }

  /** Returns true if field partnerRefundFile is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerRefundFile() {
    return this.partnerRefundFile != null;
  }

  public void setPartnerRefundFileIsSet(boolean value) {
    if (!value) {
      this.partnerRefundFile = null;
    }
  }

  public double getPartnerInterests() {
    return this.partnerInterests;
  }

  public ProjectPartnerDto setPartnerInterests(double partnerInterests) {
    this.partnerInterests = partnerInterests;
    setPartnerInterestsIsSet(true);
    return this;
  }

  public void unsetPartnerInterests() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERINTERESTS_ISSET_ID);
  }

  /** Returns true if field partnerInterests is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerInterests() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERINTERESTS_ISSET_ID);
  }

  public void setPartnerInterestsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERINTERESTS_ISSET_ID, value);
  }

  public String getRepaymentRepurchaseRemark() {
    return this.repaymentRepurchaseRemark;
  }

  public ProjectPartnerDto setRepaymentRepurchaseRemark(String repaymentRepurchaseRemark) {
    this.repaymentRepurchaseRemark = repaymentRepurchaseRemark;
    return this;
  }

  public void unsetRepaymentRepurchaseRemark() {
    this.repaymentRepurchaseRemark = null;
  }

  /** Returns true if field repaymentRepurchaseRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentRepurchaseRemark() {
    return this.repaymentRepurchaseRemark != null;
  }

  public void setRepaymentRepurchaseRemarkIsSet(boolean value) {
    if (!value) {
      this.repaymentRepurchaseRemark = null;
    }
  }

  public double getRefundLoanAmount() {
    return this.refundLoanAmount;
  }

  public ProjectPartnerDto setRefundLoanAmount(double refundLoanAmount) {
    this.refundLoanAmount = refundLoanAmount;
    setRefundLoanAmountIsSet(true);
    return this;
  }

  public void unsetRefundLoanAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDLOANAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundLoanAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundLoanAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDLOANAMOUNT_ISSET_ID);
  }

  public void setRefundLoanAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDLOANAMOUNT_ISSET_ID, value);
  }

  public double getRefundXifee() {
    return this.refundXifee;
  }

  public ProjectPartnerDto setRefundXifee(double refundXifee) {
    this.refundXifee = refundXifee;
    setRefundXifeeIsSet(true);
    return this;
  }

  public void unsetRefundXifee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDXIFEE_ISSET_ID);
  }

  /** Returns true if field refundXifee is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundXifee() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDXIFEE_ISSET_ID);
  }

  public void setRefundXifeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDXIFEE_ISSET_ID, value);
  }

  public String getXiFeeVoucherPath() {
    return this.xiFeeVoucherPath;
  }

  public ProjectPartnerDto setXiFeeVoucherPath(String xiFeeVoucherPath) {
    this.xiFeeVoucherPath = xiFeeVoucherPath;
    return this;
  }

  public void unsetXiFeeVoucherPath() {
    this.xiFeeVoucherPath = null;
  }

  /** Returns true if field xiFeeVoucherPath is set (has been assigned a value) and false otherwise */
  public boolean isSetXiFeeVoucherPath() {
    return this.xiFeeVoucherPath != null;
  }

  public void setXiFeeVoucherPathIsSet(boolean value) {
    if (!value) {
      this.xiFeeVoucherPath = null;
    }
  }

  public String getRefundDate() {
    return this.refundDate;
  }

  public ProjectPartnerDto setRefundDate(String refundDate) {
    this.refundDate = refundDate;
    return this;
  }

  public void unsetRefundDate() {
    this.refundDate = null;
  }

  /** Returns true if field refundDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDate() {
    return this.refundDate != null;
  }

  public void setRefundDateIsSet(boolean value) {
    if (!value) {
      this.refundDate = null;
    }
  }

  public int getBusinessCategory() {
    return this.businessCategory;
  }

  public ProjectPartnerDto setBusinessCategory(int businessCategory) {
    this.businessCategory = businessCategory;
    setBusinessCategoryIsSet(true);
    return this;
  }

  public void unsetBusinessCategory() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID);
  }

  /** Returns true if field businessCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCategory() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID);
  }

  public void setBusinessCategoryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSCATEGORY_ISSET_ID, value);
  }

  public String getBusinessCategoryStr() {
    return this.businessCategoryStr;
  }

  public ProjectPartnerDto setBusinessCategoryStr(String businessCategoryStr) {
    this.businessCategoryStr = businessCategoryStr;
    return this;
  }

  public void unsetBusinessCategoryStr() {
    this.businessCategoryStr = null;
  }

  /** Returns true if field businessCategoryStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCategoryStr() {
    return this.businessCategoryStr != null;
  }

  public void setBusinessCategoryStrIsSet(boolean value) {
    if (!value) {
      this.businessCategoryStr = null;
    }
  }

  public String getPayAcctNo() {
    return this.payAcctNo;
  }

  public ProjectPartnerDto setPayAcctNo(String payAcctNo) {
    this.payAcctNo = payAcctNo;
    return this;
  }

  public void unsetPayAcctNo() {
    this.payAcctNo = null;
  }

  /** Returns true if field payAcctNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPayAcctNo() {
    return this.payAcctNo != null;
  }

  public void setPayAcctNoIsSet(boolean value) {
    if (!value) {
      this.payAcctNo = null;
    }
  }

  public String getPayAcctName() {
    return this.payAcctName;
  }

  public ProjectPartnerDto setPayAcctName(String payAcctName) {
    this.payAcctName = payAcctName;
    return this;
  }

  public void unsetPayAcctName() {
    this.payAcctName = null;
  }

  /** Returns true if field payAcctName is set (has been assigned a value) and false otherwise */
  public boolean isSetPayAcctName() {
    return this.payAcctName != null;
  }

  public void setPayAcctNameIsSet(boolean value) {
    if (!value) {
      this.payAcctName = null;
    }
  }

  public String getPayBankName() {
    return this.payBankName;
  }

  public ProjectPartnerDto setPayBankName(String payBankName) {
    this.payBankName = payBankName;
    return this;
  }

  public void unsetPayBankName() {
    this.payBankName = null;
  }

  /** Returns true if field payBankName is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBankName() {
    return this.payBankName != null;
  }

  public void setPayBankNameIsSet(boolean value) {
    if (!value) {
      this.payBankName = null;
    }
  }

  public String getPayBankCode() {
    return this.payBankCode;
  }

  public ProjectPartnerDto setPayBankCode(String payBankCode) {
    this.payBankCode = payBankCode;
    return this;
  }

  public void unsetPayBankCode() {
    this.payBankCode = null;
  }

  /** Returns true if field payBankCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBankCode() {
    return this.payBankCode != null;
  }

  public void setPayBankCodeIsSet(boolean value) {
    if (!value) {
      this.payBankCode = null;
    }
  }

  public String getPayBankBranch() {
    return this.payBankBranch;
  }

  public ProjectPartnerDto setPayBankBranch(String payBankBranch) {
    this.payBankBranch = payBankBranch;
    return this;
  }

  public void unsetPayBankBranch() {
    this.payBankBranch = null;
  }

  /** Returns true if field payBankBranch is set (has been assigned a value) and false otherwise */
  public boolean isSetPayBankBranch() {
    return this.payBankBranch != null;
  }

  public void setPayBankBranchIsSet(boolean value) {
    if (!value) {
      this.payBankBranch = null;
    }
  }

  public String getPayProvinceCode() {
    return this.payProvinceCode;
  }

  public ProjectPartnerDto setPayProvinceCode(String payProvinceCode) {
    this.payProvinceCode = payProvinceCode;
    return this;
  }

  public void unsetPayProvinceCode() {
    this.payProvinceCode = null;
  }

  /** Returns true if field payProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayProvinceCode() {
    return this.payProvinceCode != null;
  }

  public void setPayProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.payProvinceCode = null;
    }
  }

  public String getPayCityCode() {
    return this.payCityCode;
  }

  public ProjectPartnerDto setPayCityCode(String payCityCode) {
    this.payCityCode = payCityCode;
    return this;
  }

  public void unsetPayCityCode() {
    this.payCityCode = null;
  }

  /** Returns true if field payCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPayCityCode() {
    return this.payCityCode != null;
  }

  public void setPayCityCodeIsSet(boolean value) {
    if (!value) {
      this.payCityCode = null;
    }
  }

  public int getAcctId() {
    return this.acctId;
  }

  public ProjectPartnerDto setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public double getConfirmLoanMoney() {
    return this.confirmLoanMoney;
  }

  public ProjectPartnerDto setConfirmLoanMoney(double confirmLoanMoney) {
    this.confirmLoanMoney = confirmLoanMoney;
    setConfirmLoanMoneyIsSet(true);
    return this;
  }

  public void unsetConfirmLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMLOANMONEY_ISSET_ID);
  }

  /** Returns true if field confirmLoanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMLOANMONEY_ISSET_ID);
  }

  public void setConfirmLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMLOANMONEY_ISSET_ID, value);
  }

  public int getConfirmLoanDays() {
    return this.confirmLoanDays;
  }

  public ProjectPartnerDto setConfirmLoanDays(int confirmLoanDays) {
    this.confirmLoanDays = confirmLoanDays;
    setConfirmLoanDaysIsSet(true);
    return this;
  }

  public void unsetConfirmLoanDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMLOANDAYS_ISSET_ID);
  }

  /** Returns true if field confirmLoanDays is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmLoanDays() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMLOANDAYS_ISSET_ID);
  }

  public void setConfirmLoanDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMLOANDAYS_ISSET_ID, value);
  }

  public String getHouseProvinceCode() {
    return this.houseProvinceCode;
  }

  public ProjectPartnerDto setHouseProvinceCode(String houseProvinceCode) {
    this.houseProvinceCode = houseProvinceCode;
    return this;
  }

  public void unsetHouseProvinceCode() {
    this.houseProvinceCode = null;
  }

  /** Returns true if field houseProvinceCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseProvinceCode() {
    return this.houseProvinceCode != null;
  }

  public void setHouseProvinceCodeIsSet(boolean value) {
    if (!value) {
      this.houseProvinceCode = null;
    }
  }

  public String getHouseCityCode() {
    return this.houseCityCode;
  }

  public ProjectPartnerDto setHouseCityCode(String houseCityCode) {
    this.houseCityCode = houseCityCode;
    return this;
  }

  public void unsetHouseCityCode() {
    this.houseCityCode = null;
  }

  /** Returns true if field houseCityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseCityCode() {
    return this.houseCityCode != null;
  }

  public void setHouseCityCodeIsSet(boolean value) {
    if (!value) {
      this.houseCityCode = null;
    }
  }

  public double getApproveMoney() {
    return this.approveMoney;
  }

  public ProjectPartnerDto setApproveMoney(double approveMoney) {
    this.approveMoney = approveMoney;
    setApproveMoneyIsSet(true);
    return this;
  }

  public void unsetApproveMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID);
  }

  /** Returns true if field approveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApproveMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID);
  }

  public void setApproveMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID, value);
  }

  public int getProjectSource() {
    return this.projectSource;
  }

  public ProjectPartnerDto setProjectSource(int projectSource) {
    this.projectSource = projectSource;
    setProjectSourceIsSet(true);
    return this;
  }

  public void unsetProjectSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  /** Returns true if field projectSource is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectSource() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID);
  }

  public void setProjectSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTSOURCE_ISSET_ID, value);
  }

  public int getEstateListSize() {
    return (this.estateList == null) ? 0 : this.estateList.size();
  }

  public java.util.Iterator<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> getEstateListIterator() {
    return (this.estateList == null) ? null : this.estateList.iterator();
  }

  public void addToEstateList(com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate elem) {
    if (this.estateList == null) {
      this.estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>();
    }
    this.estateList.add(elem);
  }

  public List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> getEstateList() {
    return this.estateList;
  }

  public ProjectPartnerDto setEstateList(List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate> estateList) {
    this.estateList = estateList;
    return this;
  }

  public void unsetEstateList() {
    this.estateList = null;
  }

  /** Returns true if field estateList is set (has been assigned a value) and false otherwise */
  public boolean isSetEstateList() {
    return this.estateList != null;
  }

  public void setEstateListIsSet(boolean value) {
    if (!value) {
      this.estateList = null;
    }
  }

  public com.xlkfinance.bms.rpc.beforeloan.ProjectProperty getProjectProperty() {
    return this.projectProperty;
  }

  public ProjectPartnerDto setProjectProperty(com.xlkfinance.bms.rpc.beforeloan.ProjectProperty projectProperty) {
    this.projectProperty = projectProperty;
    return this;
  }

  public void unsetProjectProperty() {
    this.projectProperty = null;
  }

  /** Returns true if field projectProperty is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectProperty() {
    return this.projectProperty != null;
  }

  public void setProjectPropertyIsSet(boolean value) {
    if (!value) {
      this.projectProperty = null;
    }
  }

  public String getPartnerOrderCode() {
    return this.partnerOrderCode;
  }

  public ProjectPartnerDto setPartnerOrderCode(String partnerOrderCode) {
    this.partnerOrderCode = partnerOrderCode;
    return this;
  }

  public void unsetPartnerOrderCode() {
    this.partnerOrderCode = null;
  }

  /** Returns true if field partnerOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerOrderCode() {
    return this.partnerOrderCode != null;
  }

  public void setPartnerOrderCodeIsSet(boolean value) {
    if (!value) {
      this.partnerOrderCode = null;
    }
  }

  public int getLoanPeriodLimit() {
    return this.loanPeriodLimit;
  }

  public ProjectPartnerDto setLoanPeriodLimit(int loanPeriodLimit) {
    this.loanPeriodLimit = loanPeriodLimit;
    setLoanPeriodLimitIsSet(true);
    return this;
  }

  public void unsetLoanPeriodLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANPERIODLIMIT_ISSET_ID);
  }

  /** Returns true if field loanPeriodLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPeriodLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANPERIODLIMIT_ISSET_ID);
  }

  public void setLoanPeriodLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANPERIODLIMIT_ISSET_ID, value);
  }

  public int getIsCreditLoan() {
    return this.isCreditLoan;
  }

  public ProjectPartnerDto setIsCreditLoan(int isCreditLoan) {
    this.isCreditLoan = isCreditLoan;
    setIsCreditLoanIsSet(true);
    return this;
  }

  public void unsetIsCreditLoan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCREDITLOAN_ISSET_ID);
  }

  /** Returns true if field isCreditLoan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCreditLoan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCREDITLOAN_ISSET_ID);
  }

  public void setIsCreditLoanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCREDITLOAN_ISSET_ID, value);
  }

  public String getPaymentBankPhone() {
    return this.paymentBankPhone;
  }

  public ProjectPartnerDto setPaymentBankPhone(String paymentBankPhone) {
    this.paymentBankPhone = paymentBankPhone;
    return this;
  }

  public void unsetPaymentBankPhone() {
    this.paymentBankPhone = null;
  }

  /** Returns true if field paymentBankPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBankPhone() {
    return this.paymentBankPhone != null;
  }

  public void setPaymentBankPhoneIsSet(boolean value) {
    if (!value) {
      this.paymentBankPhone = null;
    }
  }

  public String getPaymentBankLineNo() {
    return this.paymentBankLineNo;
  }

  public ProjectPartnerDto setPaymentBankLineNo(String paymentBankLineNo) {
    this.paymentBankLineNo = paymentBankLineNo;
    return this;
  }

  public void unsetPaymentBankLineNo() {
    this.paymentBankLineNo = null;
  }

  /** Returns true if field paymentBankLineNo is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentBankLineNo() {
    return this.paymentBankLineNo != null;
  }

  public void setPaymentBankLineNoIsSet(boolean value) {
    if (!value) {
      this.paymentBankLineNo = null;
    }
  }

  public double getRefundTotalAmount() {
    return this.refundTotalAmount;
  }

  public ProjectPartnerDto setRefundTotalAmount(double refundTotalAmount) {
    this.refundTotalAmount = refundTotalAmount;
    setRefundTotalAmountIsSet(true);
    return this;
  }

  public void unsetRefundTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDTOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundTotalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDTOTALAMOUNT_ISSET_ID);
  }

  public void setRefundTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDTOTALAMOUNT_ISSET_ID, value);
  }

  public double getRefundPenalty() {
    return this.refundPenalty;
  }

  public ProjectPartnerDto setRefundPenalty(double refundPenalty) {
    this.refundPenalty = refundPenalty;
    setRefundPenaltyIsSet(true);
    return this;
  }

  public void unsetRefundPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDPENALTY_ISSET_ID);
  }

  /** Returns true if field refundPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDPENALTY_ISSET_ID);
  }

  public void setRefundPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDPENALTY_ISSET_ID, value);
  }

  public double getRefundFine() {
    return this.refundFine;
  }

  public ProjectPartnerDto setRefundFine(double refundFine) {
    this.refundFine = refundFine;
    setRefundFineIsSet(true);
    return this;
  }

  public void unsetRefundFine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDFINE_ISSET_ID);
  }

  /** Returns true if field refundFine is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundFine() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDFINE_ISSET_ID);
  }

  public void setRefundFineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDFINE_ISSET_ID, value);
  }

  public double getRefundCompdinte() {
    return this.refundCompdinte;
  }

  public ProjectPartnerDto setRefundCompdinte(double refundCompdinte) {
    this.refundCompdinte = refundCompdinte;
    setRefundCompdinteIsSet(true);
    return this;
  }

  public void unsetRefundCompdinte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDCOMPDINTE_ISSET_ID);
  }

  /** Returns true if field refundCompdinte is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundCompdinte() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDCOMPDINTE_ISSET_ID);
  }

  public void setRefundCompdinteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDCOMPDINTE_ISSET_ID, value);
  }

  public String getPartnerPlatformOrderCode() {
    return this.partnerPlatformOrderCode;
  }

  public ProjectPartnerDto setPartnerPlatformOrderCode(String partnerPlatformOrderCode) {
    this.partnerPlatformOrderCode = partnerPlatformOrderCode;
    return this;
  }

  public void unsetPartnerPlatformOrderCode() {
    this.partnerPlatformOrderCode = null;
  }

  /** Returns true if field partnerPlatformOrderCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerPlatformOrderCode() {
    return this.partnerPlatformOrderCode != null;
  }

  public void setPartnerPlatformOrderCodeIsSet(boolean value) {
    if (!value) {
      this.partnerPlatformOrderCode = null;
    }
  }

  public com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure getProjectForeclosure() {
    return this.projectForeclosure;
  }

  public ProjectPartnerDto setProjectForeclosure(com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure projectForeclosure) {
    this.projectForeclosure = projectForeclosure;
    return this;
  }

  public void unsetProjectForeclosure() {
    this.projectForeclosure = null;
  }

  /** Returns true if field projectForeclosure is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectForeclosure() {
    return this.projectForeclosure != null;
  }

  public void setProjectForeclosureIsSet(boolean value) {
    if (!value) {
      this.projectForeclosure = null;
    }
  }

  public int getIsPartnerOpenAccount() {
    return this.isPartnerOpenAccount;
  }

  public ProjectPartnerDto setIsPartnerOpenAccount(int isPartnerOpenAccount) {
    this.isPartnerOpenAccount = isPartnerOpenAccount;
    setIsPartnerOpenAccountIsSet(true);
    return this;
  }

  public void unsetIsPartnerOpenAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISPARTNEROPENACCOUNT_ISSET_ID);
  }

  /** Returns true if field isPartnerOpenAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetIsPartnerOpenAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __ISPARTNEROPENACCOUNT_ISSET_ID);
  }

  public void setIsPartnerOpenAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISPARTNEROPENACCOUNT_ISSET_ID, value);
  }

  public int getPartnerPushAccount() {
    return this.partnerPushAccount;
  }

  public ProjectPartnerDto setPartnerPushAccount(int partnerPushAccount) {
    this.partnerPushAccount = partnerPushAccount;
    setPartnerPushAccountIsSet(true);
    return this;
  }

  public void unsetPartnerPushAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERPUSHACCOUNT_ISSET_ID);
  }

  /** Returns true if field partnerPushAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerPushAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERPUSHACCOUNT_ISSET_ID);
  }

  public void setPartnerPushAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERPUSHACCOUNT_ISSET_ID, value);
  }

  public double getPartnerGrossRate() {
    return this.partnerGrossRate;
  }

  public ProjectPartnerDto setPartnerGrossRate(double partnerGrossRate) {
    this.partnerGrossRate = partnerGrossRate;
    setPartnerGrossRateIsSet(true);
    return this;
  }

  public void unsetPartnerGrossRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERGROSSRATE_ISSET_ID);
  }

  /** Returns true if field partnerGrossRate is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerGrossRate() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERGROSSRATE_ISSET_ID);
  }

  public void setPartnerGrossRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERGROSSRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case FILE_IDS:
      if (value == null) {
        unsetFileIds();
      } else {
        setFileIds((List<Integer>)value);
      }
      break;

    case REQUEST_FILES:
      if (value == null) {
        unsetRequestFiles();
      } else {
        setRequestFiles((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case BUSINESS_TYPE:
      if (value == null) {
        unsetBusinessType();
      } else {
        setBusinessType((Integer)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case APPLY_MONEY:
      if (value == null) {
        unsetApplyMoney();
      } else {
        setApplyMoney((Double)value);
      }
      break;

    case APPLY_DATE:
      if (value == null) {
        unsetApplyDate();
      } else {
        setApplyDate((Integer)value);
      }
      break;

    case LOAN_DATE:
      if (value == null) {
        unsetLoanDate();
      } else {
        setLoanDate((String)value);
      }
      break;

    case PM_USER_NAME:
      if (value == null) {
        unsetPmUserName();
      } else {
        setPmUserName((String)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case BUSINESS_TYPE_STR:
      if (value == null) {
        unsetBusinessTypeStr();
      } else {
        setBusinessTypeStr((String)value);
      }
      break;

    case PARTNER_NO:
      if (value == null) {
        unsetPartnerNo();
      } else {
        setPartnerNo((String)value);
      }
      break;

    case APPROVAL_COMMENT:
      if (value == null) {
        unsetApprovalComment();
      } else {
        setApprovalComment((String)value);
      }
      break;

    case RE_APPLY_REASON:
      if (value == null) {
        unsetReApplyReason();
      } else {
        setReApplyReason((String)value);
      }
      break;

    case LOAN_JUSTICE_FILES:
      if (value == null) {
        unsetLoanJusticeFiles();
      } else {
        setLoanJusticeFiles((String)value);
      }
      break;

    case LOAN_BLANK_FILES:
      if (value == null) {
        unsetLoanBlankFiles();
      } else {
        setLoanBlankFiles((String)value);
      }
      break;

    case LOAN_OTHER_FILES:
      if (value == null) {
        unsetLoanOtherFiles();
      } else {
        setLoanOtherFiles((String)value);
      }
      break;

    case CONFIRM_LOAN_REASON:
      if (value == null) {
        unsetConfirmLoanReason();
      } else {
        setConfirmLoanReason((String)value);
      }
      break;

    case REPAYMENT_REPURCHASE_TYPE:
      if (value == null) {
        unsetRepaymentRepurchaseType();
      } else {
        setRepaymentRepurchaseType((Integer)value);
      }
      break;

    case REPAYMENT_VOUCHER_PATH:
      if (value == null) {
        unsetRepaymentVoucherPath();
      } else {
        setRepaymentVoucherPath((String)value);
      }
      break;

    case REPAYMENT_REPURCHASE_STATUS:
      if (value == null) {
        unsetRepaymentRepurchaseStatus();
      } else {
        setRepaymentRepurchaseStatus((String)value);
      }
      break;

    case APPLY_LOAN_DATE:
      if (value == null) {
        unsetApplyLoanDate();
      } else {
        setApplyLoanDate((String)value);
      }
      break;

    case LOAN_STATUS:
      if (value == null) {
        unsetLoanStatus();
      } else {
        setLoanStatus((Integer)value);
      }
      break;

    case LOAN_REMARK:
      if (value == null) {
        unsetLoanRemark();
      } else {
        setLoanRemark((String)value);
      }
      break;

    case CERT_TYPE:
      if (value == null) {
        unsetCertType();
      } else {
        setCertType((String)value);
      }
      break;

    case PAYMENT_BANK:
      if (value == null) {
        unsetPaymentBank();
      } else {
        setPaymentBank((String)value);
      }
      break;

    case PAYMENT_BANK_BRANCH:
      if (value == null) {
        unsetPaymentBankBranch();
      } else {
        setPaymentBankBranch((String)value);
      }
      break;

    case PAYMENT_ACCT_NAME:
      if (value == null) {
        unsetPaymentAcctName();
      } else {
        setPaymentAcctName((String)value);
      }
      break;

    case PAYMENT_ACCT_NO:
      if (value == null) {
        unsetPaymentAcctNo();
      } else {
        setPaymentAcctNo((String)value);
      }
      break;

    case PAYMENT_PROVINCE_CODE:
      if (value == null) {
        unsetPaymentProvinceCode();
      } else {
        setPaymentProvinceCode((String)value);
      }
      break;

    case PAYMENT_CITY_CODE:
      if (value == null) {
        unsetPaymentCityCode();
      } else {
        setPaymentCityCode((String)value);
      }
      break;

    case PAYMENT_ACCOUNT:
      if (value == null) {
        unsetPaymentAccount();
      } else {
        setPaymentAccount((String)value);
      }
      break;

    case PAYMENT_NAME:
      if (value == null) {
        unsetPaymentName();
      } else {
        setPaymentName((String)value);
      }
      break;

    case PM_CUSTOMER_NAME:
      if (value == null) {
        unsetPmCustomerName();
      } else {
        setPmCustomerName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((Integer)value);
      }
      break;

    case LIVE_ADDR:
      if (value == null) {
        unsetLiveAddr();
      } else {
        setLiveAddr((String)value);
      }
      break;

    case BUSINESS_CONTACTS:
      if (value == null) {
        unsetBusinessContacts();
      } else {
        setBusinessContacts((String)value);
      }
      break;

    case MANAGERS:
      if (value == null) {
        unsetManagers();
      } else {
        setManagers((String)value);
      }
      break;

    case OLD_BANK_NAME:
      if (value == null) {
        unsetOldBankName();
      } else {
        setOldBankName((String)value);
      }
      break;

    case OLD_LOAN_MONEY:
      if (value == null) {
        unsetOldLoanMoney();
      } else {
        setOldLoanMoney((Double)value);
      }
      break;

    case OLD_LOAN_PERSON:
      if (value == null) {
        unsetOldLoanPerson();
      } else {
        setOldLoanPerson((String)value);
      }
      break;

    case OLD_LOAN_PHONE:
      if (value == null) {
        unsetOldLoanPhone();
      } else {
        setOldLoanPhone((String)value);
      }
      break;

    case NEW_BANK_NAME:
      if (value == null) {
        unsetNewBankName();
      } else {
        setNewBankName((String)value);
      }
      break;

    case NEW_LOAN_MONEY:
      if (value == null) {
        unsetNewLoanMoney();
      } else {
        setNewLoanMoney((Double)value);
      }
      break;

    case NEW_LOAN_PERSON:
      if (value == null) {
        unsetNewLoanPerson();
      } else {
        setNewLoanPerson((String)value);
      }
      break;

    case NEW_LOAN_PHONE:
      if (value == null) {
        unsetNewLoanPhone();
      } else {
        setNewLoanPhone((String)value);
      }
      break;

    case PAYMENT_TYPE:
      if (value == null) {
        unsetPaymentType();
      } else {
        setPaymentType((Integer)value);
      }
      break;

    case ACCUMULATION_FUND_BANK:
      if (value == null) {
        unsetAccumulationFundBank();
      } else {
        setAccumulationFundBank((String)value);
      }
      break;

    case ACCUMULATION_FUND_MONEY:
      if (value == null) {
        unsetAccumulationFundMoney();
      } else {
        setAccumulationFundMoney((Double)value);
      }
      break;

    case SUPERVISE_DEPARTMENT:
      if (value == null) {
        unsetSuperviseDepartment();
      } else {
        setSuperviseDepartment((String)value);
      }
      break;

    case FUNDS_MONEY:
      if (value == null) {
        unsetFundsMoney();
      } else {
        setFundsMoney((Double)value);
      }
      break;

    case NOTARIZATION_DATE:
      if (value == null) {
        unsetNotarizationDate();
      } else {
        setNotarizationDate((String)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((Double)value);
      }
      break;

    case COST_MONEY:
      if (value == null) {
        unsetCostMoney();
      } else {
        setCostMoney((Double)value);
      }
      break;

    case TRANASCTION_MONEY:
      if (value == null) {
        unsetTranasctionMoney();
      } else {
        setTranasctionMoney((Double)value);
      }
      break;

    case HOUSE_PROPERTY_CARD:
      if (value == null) {
        unsetHousePropertyCard();
      } else {
        setHousePropertyCard((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case BUYER_CARD_NO:
      if (value == null) {
        unsetBuyerCardNo();
      } else {
        setBuyerCardNo((String)value);
      }
      break;

    case BUYER_ADDRESS:
      if (value == null) {
        unsetBuyerAddress();
      } else {
        setBuyerAddress((String)value);
      }
      break;

    case PROVINCE_CODE:
      if (value == null) {
        unsetProvinceCode();
      } else {
        setProvinceCode((String)value);
      }
      break;

    case CITY_CODE:
      if (value == null) {
        unsetCityCode();
      } else {
        setCityCode((String)value);
      }
      break;

    case PUBLIC_MAN_LIST:
      if (value == null) {
        unsetPublicManList();
      } else {
        setPublicManList((List<com.xlkfinance.bms.rpc.customer.CusDTO>)value);
      }
      break;

    case TASK_HISTORY_LIST:
      if (value == null) {
        unsetTaskHistoryList();
      } else {
        setTaskHistoryList((List<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto>)value);
      }
      break;

    case LOAN_EFFE_DATE:
      if (value == null) {
        unsetLoanEffeDate();
      } else {
        setLoanEffeDate((String)value);
      }
      break;

    case PARTNER_LOAN_DATE:
      if (value == null) {
        unsetPartnerLoanDate();
      } else {
        setPartnerLoanDate((String)value);
      }
      break;

    case PARTNER_LOAN_FILE:
      if (value == null) {
        unsetPartnerLoanFile();
      } else {
        setPartnerLoanFile((String)value);
      }
      break;

    case PARTNER_REAL_REFUND_DATE:
      if (value == null) {
        unsetPartnerRealRefundDate();
      } else {
        setPartnerRealRefundDate((String)value);
      }
      break;

    case PARTNER_REFUND_FILE:
      if (value == null) {
        unsetPartnerRefundFile();
      } else {
        setPartnerRefundFile((String)value);
      }
      break;

    case PARTNER_INTERESTS:
      if (value == null) {
        unsetPartnerInterests();
      } else {
        setPartnerInterests((Double)value);
      }
      break;

    case REPAYMENT_REPURCHASE_REMARK:
      if (value == null) {
        unsetRepaymentRepurchaseRemark();
      } else {
        setRepaymentRepurchaseRemark((String)value);
      }
      break;

    case REFUND_LOAN_AMOUNT:
      if (value == null) {
        unsetRefundLoanAmount();
      } else {
        setRefundLoanAmount((Double)value);
      }
      break;

    case REFUND_XIFEE:
      if (value == null) {
        unsetRefundXifee();
      } else {
        setRefundXifee((Double)value);
      }
      break;

    case XI_FEE_VOUCHER_PATH:
      if (value == null) {
        unsetXiFeeVoucherPath();
      } else {
        setXiFeeVoucherPath((String)value);
      }
      break;

    case REFUND_DATE:
      if (value == null) {
        unsetRefundDate();
      } else {
        setRefundDate((String)value);
      }
      break;

    case BUSINESS_CATEGORY:
      if (value == null) {
        unsetBusinessCategory();
      } else {
        setBusinessCategory((Integer)value);
      }
      break;

    case BUSINESS_CATEGORY_STR:
      if (value == null) {
        unsetBusinessCategoryStr();
      } else {
        setBusinessCategoryStr((String)value);
      }
      break;

    case PAY_ACCT_NO:
      if (value == null) {
        unsetPayAcctNo();
      } else {
        setPayAcctNo((String)value);
      }
      break;

    case PAY_ACCT_NAME:
      if (value == null) {
        unsetPayAcctName();
      } else {
        setPayAcctName((String)value);
      }
      break;

    case PAY_BANK_NAME:
      if (value == null) {
        unsetPayBankName();
      } else {
        setPayBankName((String)value);
      }
      break;

    case PAY_BANK_CODE:
      if (value == null) {
        unsetPayBankCode();
      } else {
        setPayBankCode((String)value);
      }
      break;

    case PAY_BANK_BRANCH:
      if (value == null) {
        unsetPayBankBranch();
      } else {
        setPayBankBranch((String)value);
      }
      break;

    case PAY_PROVINCE_CODE:
      if (value == null) {
        unsetPayProvinceCode();
      } else {
        setPayProvinceCode((String)value);
      }
      break;

    case PAY_CITY_CODE:
      if (value == null) {
        unsetPayCityCode();
      } else {
        setPayCityCode((String)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case CONFIRM_LOAN_MONEY:
      if (value == null) {
        unsetConfirmLoanMoney();
      } else {
        setConfirmLoanMoney((Double)value);
      }
      break;

    case CONFIRM_LOAN_DAYS:
      if (value == null) {
        unsetConfirmLoanDays();
      } else {
        setConfirmLoanDays((Integer)value);
      }
      break;

    case HOUSE_PROVINCE_CODE:
      if (value == null) {
        unsetHouseProvinceCode();
      } else {
        setHouseProvinceCode((String)value);
      }
      break;

    case HOUSE_CITY_CODE:
      if (value == null) {
        unsetHouseCityCode();
      } else {
        setHouseCityCode((String)value);
      }
      break;

    case APPROVE_MONEY:
      if (value == null) {
        unsetApproveMoney();
      } else {
        setApproveMoney((Double)value);
      }
      break;

    case PROJECT_SOURCE:
      if (value == null) {
        unsetProjectSource();
      } else {
        setProjectSource((Integer)value);
      }
      break;

    case ESTATE_LIST:
      if (value == null) {
        unsetEstateList();
      } else {
        setEstateList((List<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>)value);
      }
      break;

    case PROJECT_PROPERTY:
      if (value == null) {
        unsetProjectProperty();
      } else {
        setProjectProperty((com.xlkfinance.bms.rpc.beforeloan.ProjectProperty)value);
      }
      break;

    case PARTNER_ORDER_CODE:
      if (value == null) {
        unsetPartnerOrderCode();
      } else {
        setPartnerOrderCode((String)value);
      }
      break;

    case LOAN_PERIOD_LIMIT:
      if (value == null) {
        unsetLoanPeriodLimit();
      } else {
        setLoanPeriodLimit((Integer)value);
      }
      break;

    case IS_CREDIT_LOAN:
      if (value == null) {
        unsetIsCreditLoan();
      } else {
        setIsCreditLoan((Integer)value);
      }
      break;

    case PAYMENT_BANK_PHONE:
      if (value == null) {
        unsetPaymentBankPhone();
      } else {
        setPaymentBankPhone((String)value);
      }
      break;

    case PAYMENT_BANK_LINE_NO:
      if (value == null) {
        unsetPaymentBankLineNo();
      } else {
        setPaymentBankLineNo((String)value);
      }
      break;

    case REFUND_TOTAL_AMOUNT:
      if (value == null) {
        unsetRefundTotalAmount();
      } else {
        setRefundTotalAmount((Double)value);
      }
      break;

    case REFUND_PENALTY:
      if (value == null) {
        unsetRefundPenalty();
      } else {
        setRefundPenalty((Double)value);
      }
      break;

    case REFUND_FINE:
      if (value == null) {
        unsetRefundFine();
      } else {
        setRefundFine((Double)value);
      }
      break;

    case REFUND_COMPDINTE:
      if (value == null) {
        unsetRefundCompdinte();
      } else {
        setRefundCompdinte((Double)value);
      }
      break;

    case PARTNER_PLATFORM_ORDER_CODE:
      if (value == null) {
        unsetPartnerPlatformOrderCode();
      } else {
        setPartnerPlatformOrderCode((String)value);
      }
      break;

    case PROJECT_FORECLOSURE:
      if (value == null) {
        unsetProjectForeclosure();
      } else {
        setProjectForeclosure((com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure)value);
      }
      break;

    case IS_PARTNER_OPEN_ACCOUNT:
      if (value == null) {
        unsetIsPartnerOpenAccount();
      } else {
        setIsPartnerOpenAccount((Integer)value);
      }
      break;

    case PARTNER_PUSH_ACCOUNT:
      if (value == null) {
        unsetPartnerPushAccount();
      } else {
        setPartnerPushAccount((Integer)value);
      }
      break;

    case PARTNER_GROSS_RATE:
      if (value == null) {
        unsetPartnerGrossRate();
      } else {
        setPartnerGrossRate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_ID:
      return getLoanId();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case FILE_IDS:
      return getFileIds();

    case REQUEST_FILES:
      return getRequestFiles();

    case REMARK:
      return getRemark();

    case BUSINESS_TYPE:
      return Integer.valueOf(getBusinessType());

    case CITY:
      return getCity();

    case USER_NAME:
      return getUserName();

    case CARD_NO:
      return getCardNo();

    case PHONE:
      return getPhone();

    case APPLY_MONEY:
      return Double.valueOf(getApplyMoney());

    case APPLY_DATE:
      return Integer.valueOf(getApplyDate());

    case LOAN_DATE:
      return getLoanDate();

    case PM_USER_NAME:
      return getPmUserName();

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case BUSINESS_TYPE_STR:
      return getBusinessTypeStr();

    case PARTNER_NO:
      return getPartnerNo();

    case APPROVAL_COMMENT:
      return getApprovalComment();

    case RE_APPLY_REASON:
      return getReApplyReason();

    case LOAN_JUSTICE_FILES:
      return getLoanJusticeFiles();

    case LOAN_BLANK_FILES:
      return getLoanBlankFiles();

    case LOAN_OTHER_FILES:
      return getLoanOtherFiles();

    case CONFIRM_LOAN_REASON:
      return getConfirmLoanReason();

    case REPAYMENT_REPURCHASE_TYPE:
      return Integer.valueOf(getRepaymentRepurchaseType());

    case REPAYMENT_VOUCHER_PATH:
      return getRepaymentVoucherPath();

    case REPAYMENT_REPURCHASE_STATUS:
      return getRepaymentRepurchaseStatus();

    case APPLY_LOAN_DATE:
      return getApplyLoanDate();

    case LOAN_STATUS:
      return Integer.valueOf(getLoanStatus());

    case LOAN_REMARK:
      return getLoanRemark();

    case CERT_TYPE:
      return getCertType();

    case PAYMENT_BANK:
      return getPaymentBank();

    case PAYMENT_BANK_BRANCH:
      return getPaymentBankBranch();

    case PAYMENT_ACCT_NAME:
      return getPaymentAcctName();

    case PAYMENT_ACCT_NO:
      return getPaymentAcctNo();

    case PAYMENT_PROVINCE_CODE:
      return getPaymentProvinceCode();

    case PAYMENT_CITY_CODE:
      return getPaymentCityCode();

    case PAYMENT_ACCOUNT:
      return getPaymentAccount();

    case PAYMENT_NAME:
      return getPaymentName();

    case PM_CUSTOMER_NAME:
      return getPmCustomerName();

    case SEX:
      return Integer.valueOf(getSex());

    case LIVE_ADDR:
      return getLiveAddr();

    case BUSINESS_CONTACTS:
      return getBusinessContacts();

    case MANAGERS:
      return getManagers();

    case OLD_BANK_NAME:
      return getOldBankName();

    case OLD_LOAN_MONEY:
      return Double.valueOf(getOldLoanMoney());

    case OLD_LOAN_PERSON:
      return getOldLoanPerson();

    case OLD_LOAN_PHONE:
      return getOldLoanPhone();

    case NEW_BANK_NAME:
      return getNewBankName();

    case NEW_LOAN_MONEY:
      return Double.valueOf(getNewLoanMoney());

    case NEW_LOAN_PERSON:
      return getNewLoanPerson();

    case NEW_LOAN_PHONE:
      return getNewLoanPhone();

    case PAYMENT_TYPE:
      return Integer.valueOf(getPaymentType());

    case ACCUMULATION_FUND_BANK:
      return getAccumulationFundBank();

    case ACCUMULATION_FUND_MONEY:
      return Double.valueOf(getAccumulationFundMoney());

    case SUPERVISE_DEPARTMENT:
      return getSuperviseDepartment();

    case FUNDS_MONEY:
      return Double.valueOf(getFundsMoney());

    case NOTARIZATION_DATE:
      return getNotarizationDate();

    case HOUSE_NAME:
      return getHouseName();

    case AREA:
      return Double.valueOf(getArea());

    case COST_MONEY:
      return Double.valueOf(getCostMoney());

    case TRANASCTION_MONEY:
      return Double.valueOf(getTranasctionMoney());

    case HOUSE_PROPERTY_CARD:
      return getHousePropertyCard();

    case BUYER_NAME:
      return getBuyerName();

    case BUYER_CARD_NO:
      return getBuyerCardNo();

    case BUYER_ADDRESS:
      return getBuyerAddress();

    case PROVINCE_CODE:
      return getProvinceCode();

    case CITY_CODE:
      return getCityCode();

    case PUBLIC_MAN_LIST:
      return getPublicManList();

    case TASK_HISTORY_LIST:
      return getTaskHistoryList();

    case LOAN_EFFE_DATE:
      return getLoanEffeDate();

    case PARTNER_LOAN_DATE:
      return getPartnerLoanDate();

    case PARTNER_LOAN_FILE:
      return getPartnerLoanFile();

    case PARTNER_REAL_REFUND_DATE:
      return getPartnerRealRefundDate();

    case PARTNER_REFUND_FILE:
      return getPartnerRefundFile();

    case PARTNER_INTERESTS:
      return Double.valueOf(getPartnerInterests());

    case REPAYMENT_REPURCHASE_REMARK:
      return getRepaymentRepurchaseRemark();

    case REFUND_LOAN_AMOUNT:
      return Double.valueOf(getRefundLoanAmount());

    case REFUND_XIFEE:
      return Double.valueOf(getRefundXifee());

    case XI_FEE_VOUCHER_PATH:
      return getXiFeeVoucherPath();

    case REFUND_DATE:
      return getRefundDate();

    case BUSINESS_CATEGORY:
      return Integer.valueOf(getBusinessCategory());

    case BUSINESS_CATEGORY_STR:
      return getBusinessCategoryStr();

    case PAY_ACCT_NO:
      return getPayAcctNo();

    case PAY_ACCT_NAME:
      return getPayAcctName();

    case PAY_BANK_NAME:
      return getPayBankName();

    case PAY_BANK_CODE:
      return getPayBankCode();

    case PAY_BANK_BRANCH:
      return getPayBankBranch();

    case PAY_PROVINCE_CODE:
      return getPayProvinceCode();

    case PAY_CITY_CODE:
      return getPayCityCode();

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case CONFIRM_LOAN_MONEY:
      return Double.valueOf(getConfirmLoanMoney());

    case CONFIRM_LOAN_DAYS:
      return Integer.valueOf(getConfirmLoanDays());

    case HOUSE_PROVINCE_CODE:
      return getHouseProvinceCode();

    case HOUSE_CITY_CODE:
      return getHouseCityCode();

    case APPROVE_MONEY:
      return Double.valueOf(getApproveMoney());

    case PROJECT_SOURCE:
      return Integer.valueOf(getProjectSource());

    case ESTATE_LIST:
      return getEstateList();

    case PROJECT_PROPERTY:
      return getProjectProperty();

    case PARTNER_ORDER_CODE:
      return getPartnerOrderCode();

    case LOAN_PERIOD_LIMIT:
      return Integer.valueOf(getLoanPeriodLimit());

    case IS_CREDIT_LOAN:
      return Integer.valueOf(getIsCreditLoan());

    case PAYMENT_BANK_PHONE:
      return getPaymentBankPhone();

    case PAYMENT_BANK_LINE_NO:
      return getPaymentBankLineNo();

    case REFUND_TOTAL_AMOUNT:
      return Double.valueOf(getRefundTotalAmount());

    case REFUND_PENALTY:
      return Double.valueOf(getRefundPenalty());

    case REFUND_FINE:
      return Double.valueOf(getRefundFine());

    case REFUND_COMPDINTE:
      return Double.valueOf(getRefundCompdinte());

    case PARTNER_PLATFORM_ORDER_CODE:
      return getPartnerPlatformOrderCode();

    case PROJECT_FORECLOSURE:
      return getProjectForeclosure();

    case IS_PARTNER_OPEN_ACCOUNT:
      return Integer.valueOf(getIsPartnerOpenAccount());

    case PARTNER_PUSH_ACCOUNT:
      return Integer.valueOf(getPartnerPushAccount());

    case PARTNER_GROSS_RATE:
      return Double.valueOf(getPartnerGrossRate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_ID:
      return isSetLoanId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case FILE_IDS:
      return isSetFileIds();
    case REQUEST_FILES:
      return isSetRequestFiles();
    case REMARK:
      return isSetRemark();
    case BUSINESS_TYPE:
      return isSetBusinessType();
    case CITY:
      return isSetCity();
    case USER_NAME:
      return isSetUserName();
    case CARD_NO:
      return isSetCardNo();
    case PHONE:
      return isSetPhone();
    case APPLY_MONEY:
      return isSetApplyMoney();
    case APPLY_DATE:
      return isSetApplyDate();
    case LOAN_DATE:
      return isSetLoanDate();
    case PM_USER_NAME:
      return isSetPmUserName();
    case PM_USER_ID:
      return isSetPmUserId();
    case BUSINESS_TYPE_STR:
      return isSetBusinessTypeStr();
    case PARTNER_NO:
      return isSetPartnerNo();
    case APPROVAL_COMMENT:
      return isSetApprovalComment();
    case RE_APPLY_REASON:
      return isSetReApplyReason();
    case LOAN_JUSTICE_FILES:
      return isSetLoanJusticeFiles();
    case LOAN_BLANK_FILES:
      return isSetLoanBlankFiles();
    case LOAN_OTHER_FILES:
      return isSetLoanOtherFiles();
    case CONFIRM_LOAN_REASON:
      return isSetConfirmLoanReason();
    case REPAYMENT_REPURCHASE_TYPE:
      return isSetRepaymentRepurchaseType();
    case REPAYMENT_VOUCHER_PATH:
      return isSetRepaymentVoucherPath();
    case REPAYMENT_REPURCHASE_STATUS:
      return isSetRepaymentRepurchaseStatus();
    case APPLY_LOAN_DATE:
      return isSetApplyLoanDate();
    case LOAN_STATUS:
      return isSetLoanStatus();
    case LOAN_REMARK:
      return isSetLoanRemark();
    case CERT_TYPE:
      return isSetCertType();
    case PAYMENT_BANK:
      return isSetPaymentBank();
    case PAYMENT_BANK_BRANCH:
      return isSetPaymentBankBranch();
    case PAYMENT_ACCT_NAME:
      return isSetPaymentAcctName();
    case PAYMENT_ACCT_NO:
      return isSetPaymentAcctNo();
    case PAYMENT_PROVINCE_CODE:
      return isSetPaymentProvinceCode();
    case PAYMENT_CITY_CODE:
      return isSetPaymentCityCode();
    case PAYMENT_ACCOUNT:
      return isSetPaymentAccount();
    case PAYMENT_NAME:
      return isSetPaymentName();
    case PM_CUSTOMER_NAME:
      return isSetPmCustomerName();
    case SEX:
      return isSetSex();
    case LIVE_ADDR:
      return isSetLiveAddr();
    case BUSINESS_CONTACTS:
      return isSetBusinessContacts();
    case MANAGERS:
      return isSetManagers();
    case OLD_BANK_NAME:
      return isSetOldBankName();
    case OLD_LOAN_MONEY:
      return isSetOldLoanMoney();
    case OLD_LOAN_PERSON:
      return isSetOldLoanPerson();
    case OLD_LOAN_PHONE:
      return isSetOldLoanPhone();
    case NEW_BANK_NAME:
      return isSetNewBankName();
    case NEW_LOAN_MONEY:
      return isSetNewLoanMoney();
    case NEW_LOAN_PERSON:
      return isSetNewLoanPerson();
    case NEW_LOAN_PHONE:
      return isSetNewLoanPhone();
    case PAYMENT_TYPE:
      return isSetPaymentType();
    case ACCUMULATION_FUND_BANK:
      return isSetAccumulationFundBank();
    case ACCUMULATION_FUND_MONEY:
      return isSetAccumulationFundMoney();
    case SUPERVISE_DEPARTMENT:
      return isSetSuperviseDepartment();
    case FUNDS_MONEY:
      return isSetFundsMoney();
    case NOTARIZATION_DATE:
      return isSetNotarizationDate();
    case HOUSE_NAME:
      return isSetHouseName();
    case AREA:
      return isSetArea();
    case COST_MONEY:
      return isSetCostMoney();
    case TRANASCTION_MONEY:
      return isSetTranasctionMoney();
    case HOUSE_PROPERTY_CARD:
      return isSetHousePropertyCard();
    case BUYER_NAME:
      return isSetBuyerName();
    case BUYER_CARD_NO:
      return isSetBuyerCardNo();
    case BUYER_ADDRESS:
      return isSetBuyerAddress();
    case PROVINCE_CODE:
      return isSetProvinceCode();
    case CITY_CODE:
      return isSetCityCode();
    case PUBLIC_MAN_LIST:
      return isSetPublicManList();
    case TASK_HISTORY_LIST:
      return isSetTaskHistoryList();
    case LOAN_EFFE_DATE:
      return isSetLoanEffeDate();
    case PARTNER_LOAN_DATE:
      return isSetPartnerLoanDate();
    case PARTNER_LOAN_FILE:
      return isSetPartnerLoanFile();
    case PARTNER_REAL_REFUND_DATE:
      return isSetPartnerRealRefundDate();
    case PARTNER_REFUND_FILE:
      return isSetPartnerRefundFile();
    case PARTNER_INTERESTS:
      return isSetPartnerInterests();
    case REPAYMENT_REPURCHASE_REMARK:
      return isSetRepaymentRepurchaseRemark();
    case REFUND_LOAN_AMOUNT:
      return isSetRefundLoanAmount();
    case REFUND_XIFEE:
      return isSetRefundXifee();
    case XI_FEE_VOUCHER_PATH:
      return isSetXiFeeVoucherPath();
    case REFUND_DATE:
      return isSetRefundDate();
    case BUSINESS_CATEGORY:
      return isSetBusinessCategory();
    case BUSINESS_CATEGORY_STR:
      return isSetBusinessCategoryStr();
    case PAY_ACCT_NO:
      return isSetPayAcctNo();
    case PAY_ACCT_NAME:
      return isSetPayAcctName();
    case PAY_BANK_NAME:
      return isSetPayBankName();
    case PAY_BANK_CODE:
      return isSetPayBankCode();
    case PAY_BANK_BRANCH:
      return isSetPayBankBranch();
    case PAY_PROVINCE_CODE:
      return isSetPayProvinceCode();
    case PAY_CITY_CODE:
      return isSetPayCityCode();
    case ACCT_ID:
      return isSetAcctId();
    case CONFIRM_LOAN_MONEY:
      return isSetConfirmLoanMoney();
    case CONFIRM_LOAN_DAYS:
      return isSetConfirmLoanDays();
    case HOUSE_PROVINCE_CODE:
      return isSetHouseProvinceCode();
    case HOUSE_CITY_CODE:
      return isSetHouseCityCode();
    case APPROVE_MONEY:
      return isSetApproveMoney();
    case PROJECT_SOURCE:
      return isSetProjectSource();
    case ESTATE_LIST:
      return isSetEstateList();
    case PROJECT_PROPERTY:
      return isSetProjectProperty();
    case PARTNER_ORDER_CODE:
      return isSetPartnerOrderCode();
    case LOAN_PERIOD_LIMIT:
      return isSetLoanPeriodLimit();
    case IS_CREDIT_LOAN:
      return isSetIsCreditLoan();
    case PAYMENT_BANK_PHONE:
      return isSetPaymentBankPhone();
    case PAYMENT_BANK_LINE_NO:
      return isSetPaymentBankLineNo();
    case REFUND_TOTAL_AMOUNT:
      return isSetRefundTotalAmount();
    case REFUND_PENALTY:
      return isSetRefundPenalty();
    case REFUND_FINE:
      return isSetRefundFine();
    case REFUND_COMPDINTE:
      return isSetRefundCompdinte();
    case PARTNER_PLATFORM_ORDER_CODE:
      return isSetPartnerPlatformOrderCode();
    case PROJECT_FORECLOSURE:
      return isSetProjectForeclosure();
    case IS_PARTNER_OPEN_ACCOUNT:
      return isSetIsPartnerOpenAccount();
    case PARTNER_PUSH_ACCOUNT:
      return isSetPartnerPushAccount();
    case PARTNER_GROSS_RATE:
      return isSetPartnerGrossRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProjectPartnerDto)
      return this.equals((ProjectPartnerDto)that);
    return false;
  }

  public boolean equals(ProjectPartnerDto that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanId = true && this.isSetLoanId();
    boolean that_present_loanId = true && that.isSetLoanId();
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (!this.loanId.equals(that.loanId))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_fileIds = true && this.isSetFileIds();
    boolean that_present_fileIds = true && that.isSetFileIds();
    if (this_present_fileIds || that_present_fileIds) {
      if (!(this_present_fileIds && that_present_fileIds))
        return false;
      if (!this.fileIds.equals(that.fileIds))
        return false;
    }

    boolean this_present_requestFiles = true && this.isSetRequestFiles();
    boolean that_present_requestFiles = true && that.isSetRequestFiles();
    if (this_present_requestFiles || that_present_requestFiles) {
      if (!(this_present_requestFiles && that_present_requestFiles))
        return false;
      if (!this.requestFiles.equals(that.requestFiles))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_businessType = true;
    boolean that_present_businessType = true;
    if (this_present_businessType || that_present_businessType) {
      if (!(this_present_businessType && that_present_businessType))
        return false;
      if (this.businessType != that.businessType)
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_applyMoney = true;
    boolean that_present_applyMoney = true;
    if (this_present_applyMoney || that_present_applyMoney) {
      if (!(this_present_applyMoney && that_present_applyMoney))
        return false;
      if (this.applyMoney != that.applyMoney)
        return false;
    }

    boolean this_present_applyDate = true;
    boolean that_present_applyDate = true;
    if (this_present_applyDate || that_present_applyDate) {
      if (!(this_present_applyDate && that_present_applyDate))
        return false;
      if (this.applyDate != that.applyDate)
        return false;
    }

    boolean this_present_loanDate = true && this.isSetLoanDate();
    boolean that_present_loanDate = true && that.isSetLoanDate();
    if (this_present_loanDate || that_present_loanDate) {
      if (!(this_present_loanDate && that_present_loanDate))
        return false;
      if (!this.loanDate.equals(that.loanDate))
        return false;
    }

    boolean this_present_pmUserName = true && this.isSetPmUserName();
    boolean that_present_pmUserName = true && that.isSetPmUserName();
    if (this_present_pmUserName || that_present_pmUserName) {
      if (!(this_present_pmUserName && that_present_pmUserName))
        return false;
      if (!this.pmUserName.equals(that.pmUserName))
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_businessTypeStr = true && this.isSetBusinessTypeStr();
    boolean that_present_businessTypeStr = true && that.isSetBusinessTypeStr();
    if (this_present_businessTypeStr || that_present_businessTypeStr) {
      if (!(this_present_businessTypeStr && that_present_businessTypeStr))
        return false;
      if (!this.businessTypeStr.equals(that.businessTypeStr))
        return false;
    }

    boolean this_present_partnerNo = true && this.isSetPartnerNo();
    boolean that_present_partnerNo = true && that.isSetPartnerNo();
    if (this_present_partnerNo || that_present_partnerNo) {
      if (!(this_present_partnerNo && that_present_partnerNo))
        return false;
      if (!this.partnerNo.equals(that.partnerNo))
        return false;
    }

    boolean this_present_approvalComment = true && this.isSetApprovalComment();
    boolean that_present_approvalComment = true && that.isSetApprovalComment();
    if (this_present_approvalComment || that_present_approvalComment) {
      if (!(this_present_approvalComment && that_present_approvalComment))
        return false;
      if (!this.approvalComment.equals(that.approvalComment))
        return false;
    }

    boolean this_present_reApplyReason = true && this.isSetReApplyReason();
    boolean that_present_reApplyReason = true && that.isSetReApplyReason();
    if (this_present_reApplyReason || that_present_reApplyReason) {
      if (!(this_present_reApplyReason && that_present_reApplyReason))
        return false;
      if (!this.reApplyReason.equals(that.reApplyReason))
        return false;
    }

    boolean this_present_loanJusticeFiles = true && this.isSetLoanJusticeFiles();
    boolean that_present_loanJusticeFiles = true && that.isSetLoanJusticeFiles();
    if (this_present_loanJusticeFiles || that_present_loanJusticeFiles) {
      if (!(this_present_loanJusticeFiles && that_present_loanJusticeFiles))
        return false;
      if (!this.loanJusticeFiles.equals(that.loanJusticeFiles))
        return false;
    }

    boolean this_present_loanBlankFiles = true && this.isSetLoanBlankFiles();
    boolean that_present_loanBlankFiles = true && that.isSetLoanBlankFiles();
    if (this_present_loanBlankFiles || that_present_loanBlankFiles) {
      if (!(this_present_loanBlankFiles && that_present_loanBlankFiles))
        return false;
      if (!this.loanBlankFiles.equals(that.loanBlankFiles))
        return false;
    }

    boolean this_present_loanOtherFiles = true && this.isSetLoanOtherFiles();
    boolean that_present_loanOtherFiles = true && that.isSetLoanOtherFiles();
    if (this_present_loanOtherFiles || that_present_loanOtherFiles) {
      if (!(this_present_loanOtherFiles && that_present_loanOtherFiles))
        return false;
      if (!this.loanOtherFiles.equals(that.loanOtherFiles))
        return false;
    }

    boolean this_present_confirmLoanReason = true && this.isSetConfirmLoanReason();
    boolean that_present_confirmLoanReason = true && that.isSetConfirmLoanReason();
    if (this_present_confirmLoanReason || that_present_confirmLoanReason) {
      if (!(this_present_confirmLoanReason && that_present_confirmLoanReason))
        return false;
      if (!this.confirmLoanReason.equals(that.confirmLoanReason))
        return false;
    }

    boolean this_present_repaymentRepurchaseType = true;
    boolean that_present_repaymentRepurchaseType = true;
    if (this_present_repaymentRepurchaseType || that_present_repaymentRepurchaseType) {
      if (!(this_present_repaymentRepurchaseType && that_present_repaymentRepurchaseType))
        return false;
      if (this.repaymentRepurchaseType != that.repaymentRepurchaseType)
        return false;
    }

    boolean this_present_repaymentVoucherPath = true && this.isSetRepaymentVoucherPath();
    boolean that_present_repaymentVoucherPath = true && that.isSetRepaymentVoucherPath();
    if (this_present_repaymentVoucherPath || that_present_repaymentVoucherPath) {
      if (!(this_present_repaymentVoucherPath && that_present_repaymentVoucherPath))
        return false;
      if (!this.repaymentVoucherPath.equals(that.repaymentVoucherPath))
        return false;
    }

    boolean this_present_repaymentRepurchaseStatus = true && this.isSetRepaymentRepurchaseStatus();
    boolean that_present_repaymentRepurchaseStatus = true && that.isSetRepaymentRepurchaseStatus();
    if (this_present_repaymentRepurchaseStatus || that_present_repaymentRepurchaseStatus) {
      if (!(this_present_repaymentRepurchaseStatus && that_present_repaymentRepurchaseStatus))
        return false;
      if (!this.repaymentRepurchaseStatus.equals(that.repaymentRepurchaseStatus))
        return false;
    }

    boolean this_present_applyLoanDate = true && this.isSetApplyLoanDate();
    boolean that_present_applyLoanDate = true && that.isSetApplyLoanDate();
    if (this_present_applyLoanDate || that_present_applyLoanDate) {
      if (!(this_present_applyLoanDate && that_present_applyLoanDate))
        return false;
      if (!this.applyLoanDate.equals(that.applyLoanDate))
        return false;
    }

    boolean this_present_loanStatus = true;
    boolean that_present_loanStatus = true;
    if (this_present_loanStatus || that_present_loanStatus) {
      if (!(this_present_loanStatus && that_present_loanStatus))
        return false;
      if (this.loanStatus != that.loanStatus)
        return false;
    }

    boolean this_present_loanRemark = true && this.isSetLoanRemark();
    boolean that_present_loanRemark = true && that.isSetLoanRemark();
    if (this_present_loanRemark || that_present_loanRemark) {
      if (!(this_present_loanRemark && that_present_loanRemark))
        return false;
      if (!this.loanRemark.equals(that.loanRemark))
        return false;
    }

    boolean this_present_certType = true && this.isSetCertType();
    boolean that_present_certType = true && that.isSetCertType();
    if (this_present_certType || that_present_certType) {
      if (!(this_present_certType && that_present_certType))
        return false;
      if (!this.certType.equals(that.certType))
        return false;
    }

    boolean this_present_paymentBank = true && this.isSetPaymentBank();
    boolean that_present_paymentBank = true && that.isSetPaymentBank();
    if (this_present_paymentBank || that_present_paymentBank) {
      if (!(this_present_paymentBank && that_present_paymentBank))
        return false;
      if (!this.paymentBank.equals(that.paymentBank))
        return false;
    }

    boolean this_present_paymentBankBranch = true && this.isSetPaymentBankBranch();
    boolean that_present_paymentBankBranch = true && that.isSetPaymentBankBranch();
    if (this_present_paymentBankBranch || that_present_paymentBankBranch) {
      if (!(this_present_paymentBankBranch && that_present_paymentBankBranch))
        return false;
      if (!this.paymentBankBranch.equals(that.paymentBankBranch))
        return false;
    }

    boolean this_present_paymentAcctName = true && this.isSetPaymentAcctName();
    boolean that_present_paymentAcctName = true && that.isSetPaymentAcctName();
    if (this_present_paymentAcctName || that_present_paymentAcctName) {
      if (!(this_present_paymentAcctName && that_present_paymentAcctName))
        return false;
      if (!this.paymentAcctName.equals(that.paymentAcctName))
        return false;
    }

    boolean this_present_paymentAcctNo = true && this.isSetPaymentAcctNo();
    boolean that_present_paymentAcctNo = true && that.isSetPaymentAcctNo();
    if (this_present_paymentAcctNo || that_present_paymentAcctNo) {
      if (!(this_present_paymentAcctNo && that_present_paymentAcctNo))
        return false;
      if (!this.paymentAcctNo.equals(that.paymentAcctNo))
        return false;
    }

    boolean this_present_paymentProvinceCode = true && this.isSetPaymentProvinceCode();
    boolean that_present_paymentProvinceCode = true && that.isSetPaymentProvinceCode();
    if (this_present_paymentProvinceCode || that_present_paymentProvinceCode) {
      if (!(this_present_paymentProvinceCode && that_present_paymentProvinceCode))
        return false;
      if (!this.paymentProvinceCode.equals(that.paymentProvinceCode))
        return false;
    }

    boolean this_present_paymentCityCode = true && this.isSetPaymentCityCode();
    boolean that_present_paymentCityCode = true && that.isSetPaymentCityCode();
    if (this_present_paymentCityCode || that_present_paymentCityCode) {
      if (!(this_present_paymentCityCode && that_present_paymentCityCode))
        return false;
      if (!this.paymentCityCode.equals(that.paymentCityCode))
        return false;
    }

    boolean this_present_paymentAccount = true && this.isSetPaymentAccount();
    boolean that_present_paymentAccount = true && that.isSetPaymentAccount();
    if (this_present_paymentAccount || that_present_paymentAccount) {
      if (!(this_present_paymentAccount && that_present_paymentAccount))
        return false;
      if (!this.paymentAccount.equals(that.paymentAccount))
        return false;
    }

    boolean this_present_paymentName = true && this.isSetPaymentName();
    boolean that_present_paymentName = true && that.isSetPaymentName();
    if (this_present_paymentName || that_present_paymentName) {
      if (!(this_present_paymentName && that_present_paymentName))
        return false;
      if (!this.paymentName.equals(that.paymentName))
        return false;
    }

    boolean this_present_pmCustomerName = true && this.isSetPmCustomerName();
    boolean that_present_pmCustomerName = true && that.isSetPmCustomerName();
    if (this_present_pmCustomerName || that_present_pmCustomerName) {
      if (!(this_present_pmCustomerName && that_present_pmCustomerName))
        return false;
      if (!this.pmCustomerName.equals(that.pmCustomerName))
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_liveAddr = true && this.isSetLiveAddr();
    boolean that_present_liveAddr = true && that.isSetLiveAddr();
    if (this_present_liveAddr || that_present_liveAddr) {
      if (!(this_present_liveAddr && that_present_liveAddr))
        return false;
      if (!this.liveAddr.equals(that.liveAddr))
        return false;
    }

    boolean this_present_businessContacts = true && this.isSetBusinessContacts();
    boolean that_present_businessContacts = true && that.isSetBusinessContacts();
    if (this_present_businessContacts || that_present_businessContacts) {
      if (!(this_present_businessContacts && that_present_businessContacts))
        return false;
      if (!this.businessContacts.equals(that.businessContacts))
        return false;
    }

    boolean this_present_managers = true && this.isSetManagers();
    boolean that_present_managers = true && that.isSetManagers();
    if (this_present_managers || that_present_managers) {
      if (!(this_present_managers && that_present_managers))
        return false;
      if (!this.managers.equals(that.managers))
        return false;
    }

    boolean this_present_oldBankName = true && this.isSetOldBankName();
    boolean that_present_oldBankName = true && that.isSetOldBankName();
    if (this_present_oldBankName || that_present_oldBankName) {
      if (!(this_present_oldBankName && that_present_oldBankName))
        return false;
      if (!this.oldBankName.equals(that.oldBankName))
        return false;
    }

    boolean this_present_oldLoanMoney = true;
    boolean that_present_oldLoanMoney = true;
    if (this_present_oldLoanMoney || that_present_oldLoanMoney) {
      if (!(this_present_oldLoanMoney && that_present_oldLoanMoney))
        return false;
      if (this.oldLoanMoney != that.oldLoanMoney)
        return false;
    }

    boolean this_present_oldLoanPerson = true && this.isSetOldLoanPerson();
    boolean that_present_oldLoanPerson = true && that.isSetOldLoanPerson();
    if (this_present_oldLoanPerson || that_present_oldLoanPerson) {
      if (!(this_present_oldLoanPerson && that_present_oldLoanPerson))
        return false;
      if (!this.oldLoanPerson.equals(that.oldLoanPerson))
        return false;
    }

    boolean this_present_oldLoanPhone = true && this.isSetOldLoanPhone();
    boolean that_present_oldLoanPhone = true && that.isSetOldLoanPhone();
    if (this_present_oldLoanPhone || that_present_oldLoanPhone) {
      if (!(this_present_oldLoanPhone && that_present_oldLoanPhone))
        return false;
      if (!this.oldLoanPhone.equals(that.oldLoanPhone))
        return false;
    }

    boolean this_present_newBankName = true && this.isSetNewBankName();
    boolean that_present_newBankName = true && that.isSetNewBankName();
    if (this_present_newBankName || that_present_newBankName) {
      if (!(this_present_newBankName && that_present_newBankName))
        return false;
      if (!this.newBankName.equals(that.newBankName))
        return false;
    }

    boolean this_present_newLoanMoney = true;
    boolean that_present_newLoanMoney = true;
    if (this_present_newLoanMoney || that_present_newLoanMoney) {
      if (!(this_present_newLoanMoney && that_present_newLoanMoney))
        return false;
      if (this.newLoanMoney != that.newLoanMoney)
        return false;
    }

    boolean this_present_newLoanPerson = true && this.isSetNewLoanPerson();
    boolean that_present_newLoanPerson = true && that.isSetNewLoanPerson();
    if (this_present_newLoanPerson || that_present_newLoanPerson) {
      if (!(this_present_newLoanPerson && that_present_newLoanPerson))
        return false;
      if (!this.newLoanPerson.equals(that.newLoanPerson))
        return false;
    }

    boolean this_present_newLoanPhone = true && this.isSetNewLoanPhone();
    boolean that_present_newLoanPhone = true && that.isSetNewLoanPhone();
    if (this_present_newLoanPhone || that_present_newLoanPhone) {
      if (!(this_present_newLoanPhone && that_present_newLoanPhone))
        return false;
      if (!this.newLoanPhone.equals(that.newLoanPhone))
        return false;
    }

    boolean this_present_paymentType = true;
    boolean that_present_paymentType = true;
    if (this_present_paymentType || that_present_paymentType) {
      if (!(this_present_paymentType && that_present_paymentType))
        return false;
      if (this.paymentType != that.paymentType)
        return false;
    }

    boolean this_present_accumulationFundBank = true && this.isSetAccumulationFundBank();
    boolean that_present_accumulationFundBank = true && that.isSetAccumulationFundBank();
    if (this_present_accumulationFundBank || that_present_accumulationFundBank) {
      if (!(this_present_accumulationFundBank && that_present_accumulationFundBank))
        return false;
      if (!this.accumulationFundBank.equals(that.accumulationFundBank))
        return false;
    }

    boolean this_present_accumulationFundMoney = true;
    boolean that_present_accumulationFundMoney = true;
    if (this_present_accumulationFundMoney || that_present_accumulationFundMoney) {
      if (!(this_present_accumulationFundMoney && that_present_accumulationFundMoney))
        return false;
      if (this.accumulationFundMoney != that.accumulationFundMoney)
        return false;
    }

    boolean this_present_superviseDepartment = true && this.isSetSuperviseDepartment();
    boolean that_present_superviseDepartment = true && that.isSetSuperviseDepartment();
    if (this_present_superviseDepartment || that_present_superviseDepartment) {
      if (!(this_present_superviseDepartment && that_present_superviseDepartment))
        return false;
      if (!this.superviseDepartment.equals(that.superviseDepartment))
        return false;
    }

    boolean this_present_fundsMoney = true;
    boolean that_present_fundsMoney = true;
    if (this_present_fundsMoney || that_present_fundsMoney) {
      if (!(this_present_fundsMoney && that_present_fundsMoney))
        return false;
      if (this.fundsMoney != that.fundsMoney)
        return false;
    }

    boolean this_present_notarizationDate = true && this.isSetNotarizationDate();
    boolean that_present_notarizationDate = true && that.isSetNotarizationDate();
    if (this_present_notarizationDate || that_present_notarizationDate) {
      if (!(this_present_notarizationDate && that_present_notarizationDate))
        return false;
      if (!this.notarizationDate.equals(that.notarizationDate))
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_area = true;
    boolean that_present_area = true;
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (this.area != that.area)
        return false;
    }

    boolean this_present_costMoney = true;
    boolean that_present_costMoney = true;
    if (this_present_costMoney || that_present_costMoney) {
      if (!(this_present_costMoney && that_present_costMoney))
        return false;
      if (this.costMoney != that.costMoney)
        return false;
    }

    boolean this_present_tranasctionMoney = true;
    boolean that_present_tranasctionMoney = true;
    if (this_present_tranasctionMoney || that_present_tranasctionMoney) {
      if (!(this_present_tranasctionMoney && that_present_tranasctionMoney))
        return false;
      if (this.tranasctionMoney != that.tranasctionMoney)
        return false;
    }

    boolean this_present_housePropertyCard = true && this.isSetHousePropertyCard();
    boolean that_present_housePropertyCard = true && that.isSetHousePropertyCard();
    if (this_present_housePropertyCard || that_present_housePropertyCard) {
      if (!(this_present_housePropertyCard && that_present_housePropertyCard))
        return false;
      if (!this.housePropertyCard.equals(that.housePropertyCard))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_buyerCardNo = true && this.isSetBuyerCardNo();
    boolean that_present_buyerCardNo = true && that.isSetBuyerCardNo();
    if (this_present_buyerCardNo || that_present_buyerCardNo) {
      if (!(this_present_buyerCardNo && that_present_buyerCardNo))
        return false;
      if (!this.buyerCardNo.equals(that.buyerCardNo))
        return false;
    }

    boolean this_present_buyerAddress = true && this.isSetBuyerAddress();
    boolean that_present_buyerAddress = true && that.isSetBuyerAddress();
    if (this_present_buyerAddress || that_present_buyerAddress) {
      if (!(this_present_buyerAddress && that_present_buyerAddress))
        return false;
      if (!this.buyerAddress.equals(that.buyerAddress))
        return false;
    }

    boolean this_present_provinceCode = true && this.isSetProvinceCode();
    boolean that_present_provinceCode = true && that.isSetProvinceCode();
    if (this_present_provinceCode || that_present_provinceCode) {
      if (!(this_present_provinceCode && that_present_provinceCode))
        return false;
      if (!this.provinceCode.equals(that.provinceCode))
        return false;
    }

    boolean this_present_cityCode = true && this.isSetCityCode();
    boolean that_present_cityCode = true && that.isSetCityCode();
    if (this_present_cityCode || that_present_cityCode) {
      if (!(this_present_cityCode && that_present_cityCode))
        return false;
      if (!this.cityCode.equals(that.cityCode))
        return false;
    }

    boolean this_present_publicManList = true && this.isSetPublicManList();
    boolean that_present_publicManList = true && that.isSetPublicManList();
    if (this_present_publicManList || that_present_publicManList) {
      if (!(this_present_publicManList && that_present_publicManList))
        return false;
      if (!this.publicManList.equals(that.publicManList))
        return false;
    }

    boolean this_present_taskHistoryList = true && this.isSetTaskHistoryList();
    boolean that_present_taskHistoryList = true && that.isSetTaskHistoryList();
    if (this_present_taskHistoryList || that_present_taskHistoryList) {
      if (!(this_present_taskHistoryList && that_present_taskHistoryList))
        return false;
      if (!this.taskHistoryList.equals(that.taskHistoryList))
        return false;
    }

    boolean this_present_loanEffeDate = true && this.isSetLoanEffeDate();
    boolean that_present_loanEffeDate = true && that.isSetLoanEffeDate();
    if (this_present_loanEffeDate || that_present_loanEffeDate) {
      if (!(this_present_loanEffeDate && that_present_loanEffeDate))
        return false;
      if (!this.loanEffeDate.equals(that.loanEffeDate))
        return false;
    }

    boolean this_present_partnerLoanDate = true && this.isSetPartnerLoanDate();
    boolean that_present_partnerLoanDate = true && that.isSetPartnerLoanDate();
    if (this_present_partnerLoanDate || that_present_partnerLoanDate) {
      if (!(this_present_partnerLoanDate && that_present_partnerLoanDate))
        return false;
      if (!this.partnerLoanDate.equals(that.partnerLoanDate))
        return false;
    }

    boolean this_present_partnerLoanFile = true && this.isSetPartnerLoanFile();
    boolean that_present_partnerLoanFile = true && that.isSetPartnerLoanFile();
    if (this_present_partnerLoanFile || that_present_partnerLoanFile) {
      if (!(this_present_partnerLoanFile && that_present_partnerLoanFile))
        return false;
      if (!this.partnerLoanFile.equals(that.partnerLoanFile))
        return false;
    }

    boolean this_present_partnerRealRefundDate = true && this.isSetPartnerRealRefundDate();
    boolean that_present_partnerRealRefundDate = true && that.isSetPartnerRealRefundDate();
    if (this_present_partnerRealRefundDate || that_present_partnerRealRefundDate) {
      if (!(this_present_partnerRealRefundDate && that_present_partnerRealRefundDate))
        return false;
      if (!this.partnerRealRefundDate.equals(that.partnerRealRefundDate))
        return false;
    }

    boolean this_present_partnerRefundFile = true && this.isSetPartnerRefundFile();
    boolean that_present_partnerRefundFile = true && that.isSetPartnerRefundFile();
    if (this_present_partnerRefundFile || that_present_partnerRefundFile) {
      if (!(this_present_partnerRefundFile && that_present_partnerRefundFile))
        return false;
      if (!this.partnerRefundFile.equals(that.partnerRefundFile))
        return false;
    }

    boolean this_present_partnerInterests = true;
    boolean that_present_partnerInterests = true;
    if (this_present_partnerInterests || that_present_partnerInterests) {
      if (!(this_present_partnerInterests && that_present_partnerInterests))
        return false;
      if (this.partnerInterests != that.partnerInterests)
        return false;
    }

    boolean this_present_repaymentRepurchaseRemark = true && this.isSetRepaymentRepurchaseRemark();
    boolean that_present_repaymentRepurchaseRemark = true && that.isSetRepaymentRepurchaseRemark();
    if (this_present_repaymentRepurchaseRemark || that_present_repaymentRepurchaseRemark) {
      if (!(this_present_repaymentRepurchaseRemark && that_present_repaymentRepurchaseRemark))
        return false;
      if (!this.repaymentRepurchaseRemark.equals(that.repaymentRepurchaseRemark))
        return false;
    }

    boolean this_present_refundLoanAmount = true;
    boolean that_present_refundLoanAmount = true;
    if (this_present_refundLoanAmount || that_present_refundLoanAmount) {
      if (!(this_present_refundLoanAmount && that_present_refundLoanAmount))
        return false;
      if (this.refundLoanAmount != that.refundLoanAmount)
        return false;
    }

    boolean this_present_refundXifee = true;
    boolean that_present_refundXifee = true;
    if (this_present_refundXifee || that_present_refundXifee) {
      if (!(this_present_refundXifee && that_present_refundXifee))
        return false;
      if (this.refundXifee != that.refundXifee)
        return false;
    }

    boolean this_present_xiFeeVoucherPath = true && this.isSetXiFeeVoucherPath();
    boolean that_present_xiFeeVoucherPath = true && that.isSetXiFeeVoucherPath();
    if (this_present_xiFeeVoucherPath || that_present_xiFeeVoucherPath) {
      if (!(this_present_xiFeeVoucherPath && that_present_xiFeeVoucherPath))
        return false;
      if (!this.xiFeeVoucherPath.equals(that.xiFeeVoucherPath))
        return false;
    }

    boolean this_present_refundDate = true && this.isSetRefundDate();
    boolean that_present_refundDate = true && that.isSetRefundDate();
    if (this_present_refundDate || that_present_refundDate) {
      if (!(this_present_refundDate && that_present_refundDate))
        return false;
      if (!this.refundDate.equals(that.refundDate))
        return false;
    }

    boolean this_present_businessCategory = true;
    boolean that_present_businessCategory = true;
    if (this_present_businessCategory || that_present_businessCategory) {
      if (!(this_present_businessCategory && that_present_businessCategory))
        return false;
      if (this.businessCategory != that.businessCategory)
        return false;
    }

    boolean this_present_businessCategoryStr = true && this.isSetBusinessCategoryStr();
    boolean that_present_businessCategoryStr = true && that.isSetBusinessCategoryStr();
    if (this_present_businessCategoryStr || that_present_businessCategoryStr) {
      if (!(this_present_businessCategoryStr && that_present_businessCategoryStr))
        return false;
      if (!this.businessCategoryStr.equals(that.businessCategoryStr))
        return false;
    }

    boolean this_present_payAcctNo = true && this.isSetPayAcctNo();
    boolean that_present_payAcctNo = true && that.isSetPayAcctNo();
    if (this_present_payAcctNo || that_present_payAcctNo) {
      if (!(this_present_payAcctNo && that_present_payAcctNo))
        return false;
      if (!this.payAcctNo.equals(that.payAcctNo))
        return false;
    }

    boolean this_present_payAcctName = true && this.isSetPayAcctName();
    boolean that_present_payAcctName = true && that.isSetPayAcctName();
    if (this_present_payAcctName || that_present_payAcctName) {
      if (!(this_present_payAcctName && that_present_payAcctName))
        return false;
      if (!this.payAcctName.equals(that.payAcctName))
        return false;
    }

    boolean this_present_payBankName = true && this.isSetPayBankName();
    boolean that_present_payBankName = true && that.isSetPayBankName();
    if (this_present_payBankName || that_present_payBankName) {
      if (!(this_present_payBankName && that_present_payBankName))
        return false;
      if (!this.payBankName.equals(that.payBankName))
        return false;
    }

    boolean this_present_payBankCode = true && this.isSetPayBankCode();
    boolean that_present_payBankCode = true && that.isSetPayBankCode();
    if (this_present_payBankCode || that_present_payBankCode) {
      if (!(this_present_payBankCode && that_present_payBankCode))
        return false;
      if (!this.payBankCode.equals(that.payBankCode))
        return false;
    }

    boolean this_present_payBankBranch = true && this.isSetPayBankBranch();
    boolean that_present_payBankBranch = true && that.isSetPayBankBranch();
    if (this_present_payBankBranch || that_present_payBankBranch) {
      if (!(this_present_payBankBranch && that_present_payBankBranch))
        return false;
      if (!this.payBankBranch.equals(that.payBankBranch))
        return false;
    }

    boolean this_present_payProvinceCode = true && this.isSetPayProvinceCode();
    boolean that_present_payProvinceCode = true && that.isSetPayProvinceCode();
    if (this_present_payProvinceCode || that_present_payProvinceCode) {
      if (!(this_present_payProvinceCode && that_present_payProvinceCode))
        return false;
      if (!this.payProvinceCode.equals(that.payProvinceCode))
        return false;
    }

    boolean this_present_payCityCode = true && this.isSetPayCityCode();
    boolean that_present_payCityCode = true && that.isSetPayCityCode();
    if (this_present_payCityCode || that_present_payCityCode) {
      if (!(this_present_payCityCode && that_present_payCityCode))
        return false;
      if (!this.payCityCode.equals(that.payCityCode))
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_confirmLoanMoney = true;
    boolean that_present_confirmLoanMoney = true;
    if (this_present_confirmLoanMoney || that_present_confirmLoanMoney) {
      if (!(this_present_confirmLoanMoney && that_present_confirmLoanMoney))
        return false;
      if (this.confirmLoanMoney != that.confirmLoanMoney)
        return false;
    }

    boolean this_present_confirmLoanDays = true;
    boolean that_present_confirmLoanDays = true;
    if (this_present_confirmLoanDays || that_present_confirmLoanDays) {
      if (!(this_present_confirmLoanDays && that_present_confirmLoanDays))
        return false;
      if (this.confirmLoanDays != that.confirmLoanDays)
        return false;
    }

    boolean this_present_houseProvinceCode = true && this.isSetHouseProvinceCode();
    boolean that_present_houseProvinceCode = true && that.isSetHouseProvinceCode();
    if (this_present_houseProvinceCode || that_present_houseProvinceCode) {
      if (!(this_present_houseProvinceCode && that_present_houseProvinceCode))
        return false;
      if (!this.houseProvinceCode.equals(that.houseProvinceCode))
        return false;
    }

    boolean this_present_houseCityCode = true && this.isSetHouseCityCode();
    boolean that_present_houseCityCode = true && that.isSetHouseCityCode();
    if (this_present_houseCityCode || that_present_houseCityCode) {
      if (!(this_present_houseCityCode && that_present_houseCityCode))
        return false;
      if (!this.houseCityCode.equals(that.houseCityCode))
        return false;
    }

    boolean this_present_approveMoney = true;
    boolean that_present_approveMoney = true;
    if (this_present_approveMoney || that_present_approveMoney) {
      if (!(this_present_approveMoney && that_present_approveMoney))
        return false;
      if (this.approveMoney != that.approveMoney)
        return false;
    }

    boolean this_present_projectSource = true;
    boolean that_present_projectSource = true;
    if (this_present_projectSource || that_present_projectSource) {
      if (!(this_present_projectSource && that_present_projectSource))
        return false;
      if (this.projectSource != that.projectSource)
        return false;
    }

    boolean this_present_estateList = true && this.isSetEstateList();
    boolean that_present_estateList = true && that.isSetEstateList();
    if (this_present_estateList || that_present_estateList) {
      if (!(this_present_estateList && that_present_estateList))
        return false;
      if (!this.estateList.equals(that.estateList))
        return false;
    }

    boolean this_present_projectProperty = true && this.isSetProjectProperty();
    boolean that_present_projectProperty = true && that.isSetProjectProperty();
    if (this_present_projectProperty || that_present_projectProperty) {
      if (!(this_present_projectProperty && that_present_projectProperty))
        return false;
      if (!this.projectProperty.equals(that.projectProperty))
        return false;
    }

    boolean this_present_partnerOrderCode = true && this.isSetPartnerOrderCode();
    boolean that_present_partnerOrderCode = true && that.isSetPartnerOrderCode();
    if (this_present_partnerOrderCode || that_present_partnerOrderCode) {
      if (!(this_present_partnerOrderCode && that_present_partnerOrderCode))
        return false;
      if (!this.partnerOrderCode.equals(that.partnerOrderCode))
        return false;
    }

    boolean this_present_loanPeriodLimit = true;
    boolean that_present_loanPeriodLimit = true;
    if (this_present_loanPeriodLimit || that_present_loanPeriodLimit) {
      if (!(this_present_loanPeriodLimit && that_present_loanPeriodLimit))
        return false;
      if (this.loanPeriodLimit != that.loanPeriodLimit)
        return false;
    }

    boolean this_present_isCreditLoan = true;
    boolean that_present_isCreditLoan = true;
    if (this_present_isCreditLoan || that_present_isCreditLoan) {
      if (!(this_present_isCreditLoan && that_present_isCreditLoan))
        return false;
      if (this.isCreditLoan != that.isCreditLoan)
        return false;
    }

    boolean this_present_paymentBankPhone = true && this.isSetPaymentBankPhone();
    boolean that_present_paymentBankPhone = true && that.isSetPaymentBankPhone();
    if (this_present_paymentBankPhone || that_present_paymentBankPhone) {
      if (!(this_present_paymentBankPhone && that_present_paymentBankPhone))
        return false;
      if (!this.paymentBankPhone.equals(that.paymentBankPhone))
        return false;
    }

    boolean this_present_paymentBankLineNo = true && this.isSetPaymentBankLineNo();
    boolean that_present_paymentBankLineNo = true && that.isSetPaymentBankLineNo();
    if (this_present_paymentBankLineNo || that_present_paymentBankLineNo) {
      if (!(this_present_paymentBankLineNo && that_present_paymentBankLineNo))
        return false;
      if (!this.paymentBankLineNo.equals(that.paymentBankLineNo))
        return false;
    }

    boolean this_present_refundTotalAmount = true;
    boolean that_present_refundTotalAmount = true;
    if (this_present_refundTotalAmount || that_present_refundTotalAmount) {
      if (!(this_present_refundTotalAmount && that_present_refundTotalAmount))
        return false;
      if (this.refundTotalAmount != that.refundTotalAmount)
        return false;
    }

    boolean this_present_refundPenalty = true;
    boolean that_present_refundPenalty = true;
    if (this_present_refundPenalty || that_present_refundPenalty) {
      if (!(this_present_refundPenalty && that_present_refundPenalty))
        return false;
      if (this.refundPenalty != that.refundPenalty)
        return false;
    }

    boolean this_present_refundFine = true;
    boolean that_present_refundFine = true;
    if (this_present_refundFine || that_present_refundFine) {
      if (!(this_present_refundFine && that_present_refundFine))
        return false;
      if (this.refundFine != that.refundFine)
        return false;
    }

    boolean this_present_refundCompdinte = true;
    boolean that_present_refundCompdinte = true;
    if (this_present_refundCompdinte || that_present_refundCompdinte) {
      if (!(this_present_refundCompdinte && that_present_refundCompdinte))
        return false;
      if (this.refundCompdinte != that.refundCompdinte)
        return false;
    }

    boolean this_present_partnerPlatformOrderCode = true && this.isSetPartnerPlatformOrderCode();
    boolean that_present_partnerPlatformOrderCode = true && that.isSetPartnerPlatformOrderCode();
    if (this_present_partnerPlatformOrderCode || that_present_partnerPlatformOrderCode) {
      if (!(this_present_partnerPlatformOrderCode && that_present_partnerPlatformOrderCode))
        return false;
      if (!this.partnerPlatformOrderCode.equals(that.partnerPlatformOrderCode))
        return false;
    }

    boolean this_present_projectForeclosure = true && this.isSetProjectForeclosure();
    boolean that_present_projectForeclosure = true && that.isSetProjectForeclosure();
    if (this_present_projectForeclosure || that_present_projectForeclosure) {
      if (!(this_present_projectForeclosure && that_present_projectForeclosure))
        return false;
      if (!this.projectForeclosure.equals(that.projectForeclosure))
        return false;
    }

    boolean this_present_isPartnerOpenAccount = true;
    boolean that_present_isPartnerOpenAccount = true;
    if (this_present_isPartnerOpenAccount || that_present_isPartnerOpenAccount) {
      if (!(this_present_isPartnerOpenAccount && that_present_isPartnerOpenAccount))
        return false;
      if (this.isPartnerOpenAccount != that.isPartnerOpenAccount)
        return false;
    }

    boolean this_present_partnerPushAccount = true;
    boolean that_present_partnerPushAccount = true;
    if (this_present_partnerPushAccount || that_present_partnerPushAccount) {
      if (!(this_present_partnerPushAccount && that_present_partnerPushAccount))
        return false;
      if (this.partnerPushAccount != that.partnerPushAccount)
        return false;
    }

    boolean this_present_partnerGrossRate = true;
    boolean that_present_partnerGrossRate = true;
    if (this_present_partnerGrossRate || that_present_partnerGrossRate) {
      if (!(this_present_partnerGrossRate && that_present_partnerGrossRate))
        return false;
      if (this.partnerGrossRate != that.partnerGrossRate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanId = true && (isSetLoanId());
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_fileIds = true && (isSetFileIds());
    list.add(present_fileIds);
    if (present_fileIds)
      list.add(fileIds);

    boolean present_requestFiles = true && (isSetRequestFiles());
    list.add(present_requestFiles);
    if (present_requestFiles)
      list.add(requestFiles);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_businessType = true;
    list.add(present_businessType);
    if (present_businessType)
      list.add(businessType);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_cardNo = true && (isSetCardNo());
    list.add(present_cardNo);
    if (present_cardNo)
      list.add(cardNo);

    boolean present_phone = true && (isSetPhone());
    list.add(present_phone);
    if (present_phone)
      list.add(phone);

    boolean present_applyMoney = true;
    list.add(present_applyMoney);
    if (present_applyMoney)
      list.add(applyMoney);

    boolean present_applyDate = true;
    list.add(present_applyDate);
    if (present_applyDate)
      list.add(applyDate);

    boolean present_loanDate = true && (isSetLoanDate());
    list.add(present_loanDate);
    if (present_loanDate)
      list.add(loanDate);

    boolean present_pmUserName = true && (isSetPmUserName());
    list.add(present_pmUserName);
    if (present_pmUserName)
      list.add(pmUserName);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_businessTypeStr = true && (isSetBusinessTypeStr());
    list.add(present_businessTypeStr);
    if (present_businessTypeStr)
      list.add(businessTypeStr);

    boolean present_partnerNo = true && (isSetPartnerNo());
    list.add(present_partnerNo);
    if (present_partnerNo)
      list.add(partnerNo);

    boolean present_approvalComment = true && (isSetApprovalComment());
    list.add(present_approvalComment);
    if (present_approvalComment)
      list.add(approvalComment);

    boolean present_reApplyReason = true && (isSetReApplyReason());
    list.add(present_reApplyReason);
    if (present_reApplyReason)
      list.add(reApplyReason);

    boolean present_loanJusticeFiles = true && (isSetLoanJusticeFiles());
    list.add(present_loanJusticeFiles);
    if (present_loanJusticeFiles)
      list.add(loanJusticeFiles);

    boolean present_loanBlankFiles = true && (isSetLoanBlankFiles());
    list.add(present_loanBlankFiles);
    if (present_loanBlankFiles)
      list.add(loanBlankFiles);

    boolean present_loanOtherFiles = true && (isSetLoanOtherFiles());
    list.add(present_loanOtherFiles);
    if (present_loanOtherFiles)
      list.add(loanOtherFiles);

    boolean present_confirmLoanReason = true && (isSetConfirmLoanReason());
    list.add(present_confirmLoanReason);
    if (present_confirmLoanReason)
      list.add(confirmLoanReason);

    boolean present_repaymentRepurchaseType = true;
    list.add(present_repaymentRepurchaseType);
    if (present_repaymentRepurchaseType)
      list.add(repaymentRepurchaseType);

    boolean present_repaymentVoucherPath = true && (isSetRepaymentVoucherPath());
    list.add(present_repaymentVoucherPath);
    if (present_repaymentVoucherPath)
      list.add(repaymentVoucherPath);

    boolean present_repaymentRepurchaseStatus = true && (isSetRepaymentRepurchaseStatus());
    list.add(present_repaymentRepurchaseStatus);
    if (present_repaymentRepurchaseStatus)
      list.add(repaymentRepurchaseStatus);

    boolean present_applyLoanDate = true && (isSetApplyLoanDate());
    list.add(present_applyLoanDate);
    if (present_applyLoanDate)
      list.add(applyLoanDate);

    boolean present_loanStatus = true;
    list.add(present_loanStatus);
    if (present_loanStatus)
      list.add(loanStatus);

    boolean present_loanRemark = true && (isSetLoanRemark());
    list.add(present_loanRemark);
    if (present_loanRemark)
      list.add(loanRemark);

    boolean present_certType = true && (isSetCertType());
    list.add(present_certType);
    if (present_certType)
      list.add(certType);

    boolean present_paymentBank = true && (isSetPaymentBank());
    list.add(present_paymentBank);
    if (present_paymentBank)
      list.add(paymentBank);

    boolean present_paymentBankBranch = true && (isSetPaymentBankBranch());
    list.add(present_paymentBankBranch);
    if (present_paymentBankBranch)
      list.add(paymentBankBranch);

    boolean present_paymentAcctName = true && (isSetPaymentAcctName());
    list.add(present_paymentAcctName);
    if (present_paymentAcctName)
      list.add(paymentAcctName);

    boolean present_paymentAcctNo = true && (isSetPaymentAcctNo());
    list.add(present_paymentAcctNo);
    if (present_paymentAcctNo)
      list.add(paymentAcctNo);

    boolean present_paymentProvinceCode = true && (isSetPaymentProvinceCode());
    list.add(present_paymentProvinceCode);
    if (present_paymentProvinceCode)
      list.add(paymentProvinceCode);

    boolean present_paymentCityCode = true && (isSetPaymentCityCode());
    list.add(present_paymentCityCode);
    if (present_paymentCityCode)
      list.add(paymentCityCode);

    boolean present_paymentAccount = true && (isSetPaymentAccount());
    list.add(present_paymentAccount);
    if (present_paymentAccount)
      list.add(paymentAccount);

    boolean present_paymentName = true && (isSetPaymentName());
    list.add(present_paymentName);
    if (present_paymentName)
      list.add(paymentName);

    boolean present_pmCustomerName = true && (isSetPmCustomerName());
    list.add(present_pmCustomerName);
    if (present_pmCustomerName)
      list.add(pmCustomerName);

    boolean present_sex = true;
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_liveAddr = true && (isSetLiveAddr());
    list.add(present_liveAddr);
    if (present_liveAddr)
      list.add(liveAddr);

    boolean present_businessContacts = true && (isSetBusinessContacts());
    list.add(present_businessContacts);
    if (present_businessContacts)
      list.add(businessContacts);

    boolean present_managers = true && (isSetManagers());
    list.add(present_managers);
    if (present_managers)
      list.add(managers);

    boolean present_oldBankName = true && (isSetOldBankName());
    list.add(present_oldBankName);
    if (present_oldBankName)
      list.add(oldBankName);

    boolean present_oldLoanMoney = true;
    list.add(present_oldLoanMoney);
    if (present_oldLoanMoney)
      list.add(oldLoanMoney);

    boolean present_oldLoanPerson = true && (isSetOldLoanPerson());
    list.add(present_oldLoanPerson);
    if (present_oldLoanPerson)
      list.add(oldLoanPerson);

    boolean present_oldLoanPhone = true && (isSetOldLoanPhone());
    list.add(present_oldLoanPhone);
    if (present_oldLoanPhone)
      list.add(oldLoanPhone);

    boolean present_newBankName = true && (isSetNewBankName());
    list.add(present_newBankName);
    if (present_newBankName)
      list.add(newBankName);

    boolean present_newLoanMoney = true;
    list.add(present_newLoanMoney);
    if (present_newLoanMoney)
      list.add(newLoanMoney);

    boolean present_newLoanPerson = true && (isSetNewLoanPerson());
    list.add(present_newLoanPerson);
    if (present_newLoanPerson)
      list.add(newLoanPerson);

    boolean present_newLoanPhone = true && (isSetNewLoanPhone());
    list.add(present_newLoanPhone);
    if (present_newLoanPhone)
      list.add(newLoanPhone);

    boolean present_paymentType = true;
    list.add(present_paymentType);
    if (present_paymentType)
      list.add(paymentType);

    boolean present_accumulationFundBank = true && (isSetAccumulationFundBank());
    list.add(present_accumulationFundBank);
    if (present_accumulationFundBank)
      list.add(accumulationFundBank);

    boolean present_accumulationFundMoney = true;
    list.add(present_accumulationFundMoney);
    if (present_accumulationFundMoney)
      list.add(accumulationFundMoney);

    boolean present_superviseDepartment = true && (isSetSuperviseDepartment());
    list.add(present_superviseDepartment);
    if (present_superviseDepartment)
      list.add(superviseDepartment);

    boolean present_fundsMoney = true;
    list.add(present_fundsMoney);
    if (present_fundsMoney)
      list.add(fundsMoney);

    boolean present_notarizationDate = true && (isSetNotarizationDate());
    list.add(present_notarizationDate);
    if (present_notarizationDate)
      list.add(notarizationDate);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_area = true;
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_costMoney = true;
    list.add(present_costMoney);
    if (present_costMoney)
      list.add(costMoney);

    boolean present_tranasctionMoney = true;
    list.add(present_tranasctionMoney);
    if (present_tranasctionMoney)
      list.add(tranasctionMoney);

    boolean present_housePropertyCard = true && (isSetHousePropertyCard());
    list.add(present_housePropertyCard);
    if (present_housePropertyCard)
      list.add(housePropertyCard);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_buyerCardNo = true && (isSetBuyerCardNo());
    list.add(present_buyerCardNo);
    if (present_buyerCardNo)
      list.add(buyerCardNo);

    boolean present_buyerAddress = true && (isSetBuyerAddress());
    list.add(present_buyerAddress);
    if (present_buyerAddress)
      list.add(buyerAddress);

    boolean present_provinceCode = true && (isSetProvinceCode());
    list.add(present_provinceCode);
    if (present_provinceCode)
      list.add(provinceCode);

    boolean present_cityCode = true && (isSetCityCode());
    list.add(present_cityCode);
    if (present_cityCode)
      list.add(cityCode);

    boolean present_publicManList = true && (isSetPublicManList());
    list.add(present_publicManList);
    if (present_publicManList)
      list.add(publicManList);

    boolean present_taskHistoryList = true && (isSetTaskHistoryList());
    list.add(present_taskHistoryList);
    if (present_taskHistoryList)
      list.add(taskHistoryList);

    boolean present_loanEffeDate = true && (isSetLoanEffeDate());
    list.add(present_loanEffeDate);
    if (present_loanEffeDate)
      list.add(loanEffeDate);

    boolean present_partnerLoanDate = true && (isSetPartnerLoanDate());
    list.add(present_partnerLoanDate);
    if (present_partnerLoanDate)
      list.add(partnerLoanDate);

    boolean present_partnerLoanFile = true && (isSetPartnerLoanFile());
    list.add(present_partnerLoanFile);
    if (present_partnerLoanFile)
      list.add(partnerLoanFile);

    boolean present_partnerRealRefundDate = true && (isSetPartnerRealRefundDate());
    list.add(present_partnerRealRefundDate);
    if (present_partnerRealRefundDate)
      list.add(partnerRealRefundDate);

    boolean present_partnerRefundFile = true && (isSetPartnerRefundFile());
    list.add(present_partnerRefundFile);
    if (present_partnerRefundFile)
      list.add(partnerRefundFile);

    boolean present_partnerInterests = true;
    list.add(present_partnerInterests);
    if (present_partnerInterests)
      list.add(partnerInterests);

    boolean present_repaymentRepurchaseRemark = true && (isSetRepaymentRepurchaseRemark());
    list.add(present_repaymentRepurchaseRemark);
    if (present_repaymentRepurchaseRemark)
      list.add(repaymentRepurchaseRemark);

    boolean present_refundLoanAmount = true;
    list.add(present_refundLoanAmount);
    if (present_refundLoanAmount)
      list.add(refundLoanAmount);

    boolean present_refundXifee = true;
    list.add(present_refundXifee);
    if (present_refundXifee)
      list.add(refundXifee);

    boolean present_xiFeeVoucherPath = true && (isSetXiFeeVoucherPath());
    list.add(present_xiFeeVoucherPath);
    if (present_xiFeeVoucherPath)
      list.add(xiFeeVoucherPath);

    boolean present_refundDate = true && (isSetRefundDate());
    list.add(present_refundDate);
    if (present_refundDate)
      list.add(refundDate);

    boolean present_businessCategory = true;
    list.add(present_businessCategory);
    if (present_businessCategory)
      list.add(businessCategory);

    boolean present_businessCategoryStr = true && (isSetBusinessCategoryStr());
    list.add(present_businessCategoryStr);
    if (present_businessCategoryStr)
      list.add(businessCategoryStr);

    boolean present_payAcctNo = true && (isSetPayAcctNo());
    list.add(present_payAcctNo);
    if (present_payAcctNo)
      list.add(payAcctNo);

    boolean present_payAcctName = true && (isSetPayAcctName());
    list.add(present_payAcctName);
    if (present_payAcctName)
      list.add(payAcctName);

    boolean present_payBankName = true && (isSetPayBankName());
    list.add(present_payBankName);
    if (present_payBankName)
      list.add(payBankName);

    boolean present_payBankCode = true && (isSetPayBankCode());
    list.add(present_payBankCode);
    if (present_payBankCode)
      list.add(payBankCode);

    boolean present_payBankBranch = true && (isSetPayBankBranch());
    list.add(present_payBankBranch);
    if (present_payBankBranch)
      list.add(payBankBranch);

    boolean present_payProvinceCode = true && (isSetPayProvinceCode());
    list.add(present_payProvinceCode);
    if (present_payProvinceCode)
      list.add(payProvinceCode);

    boolean present_payCityCode = true && (isSetPayCityCode());
    list.add(present_payCityCode);
    if (present_payCityCode)
      list.add(payCityCode);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_confirmLoanMoney = true;
    list.add(present_confirmLoanMoney);
    if (present_confirmLoanMoney)
      list.add(confirmLoanMoney);

    boolean present_confirmLoanDays = true;
    list.add(present_confirmLoanDays);
    if (present_confirmLoanDays)
      list.add(confirmLoanDays);

    boolean present_houseProvinceCode = true && (isSetHouseProvinceCode());
    list.add(present_houseProvinceCode);
    if (present_houseProvinceCode)
      list.add(houseProvinceCode);

    boolean present_houseCityCode = true && (isSetHouseCityCode());
    list.add(present_houseCityCode);
    if (present_houseCityCode)
      list.add(houseCityCode);

    boolean present_approveMoney = true;
    list.add(present_approveMoney);
    if (present_approveMoney)
      list.add(approveMoney);

    boolean present_projectSource = true;
    list.add(present_projectSource);
    if (present_projectSource)
      list.add(projectSource);

    boolean present_estateList = true && (isSetEstateList());
    list.add(present_estateList);
    if (present_estateList)
      list.add(estateList);

    boolean present_projectProperty = true && (isSetProjectProperty());
    list.add(present_projectProperty);
    if (present_projectProperty)
      list.add(projectProperty);

    boolean present_partnerOrderCode = true && (isSetPartnerOrderCode());
    list.add(present_partnerOrderCode);
    if (present_partnerOrderCode)
      list.add(partnerOrderCode);

    boolean present_loanPeriodLimit = true;
    list.add(present_loanPeriodLimit);
    if (present_loanPeriodLimit)
      list.add(loanPeriodLimit);

    boolean present_isCreditLoan = true;
    list.add(present_isCreditLoan);
    if (present_isCreditLoan)
      list.add(isCreditLoan);

    boolean present_paymentBankPhone = true && (isSetPaymentBankPhone());
    list.add(present_paymentBankPhone);
    if (present_paymentBankPhone)
      list.add(paymentBankPhone);

    boolean present_paymentBankLineNo = true && (isSetPaymentBankLineNo());
    list.add(present_paymentBankLineNo);
    if (present_paymentBankLineNo)
      list.add(paymentBankLineNo);

    boolean present_refundTotalAmount = true;
    list.add(present_refundTotalAmount);
    if (present_refundTotalAmount)
      list.add(refundTotalAmount);

    boolean present_refundPenalty = true;
    list.add(present_refundPenalty);
    if (present_refundPenalty)
      list.add(refundPenalty);

    boolean present_refundFine = true;
    list.add(present_refundFine);
    if (present_refundFine)
      list.add(refundFine);

    boolean present_refundCompdinte = true;
    list.add(present_refundCompdinte);
    if (present_refundCompdinte)
      list.add(refundCompdinte);

    boolean present_partnerPlatformOrderCode = true && (isSetPartnerPlatformOrderCode());
    list.add(present_partnerPlatformOrderCode);
    if (present_partnerPlatformOrderCode)
      list.add(partnerPlatformOrderCode);

    boolean present_projectForeclosure = true && (isSetProjectForeclosure());
    list.add(present_projectForeclosure);
    if (present_projectForeclosure)
      list.add(projectForeclosure);

    boolean present_isPartnerOpenAccount = true;
    list.add(present_isPartnerOpenAccount);
    if (present_isPartnerOpenAccount)
      list.add(isPartnerOpenAccount);

    boolean present_partnerPushAccount = true;
    list.add(present_partnerPushAccount);
    if (present_partnerPushAccount)
      list.add(partnerPushAccount);

    boolean present_partnerGrossRate = true;
    list.add(present_partnerGrossRate);
    if (present_partnerGrossRate)
      list.add(partnerGrossRate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProjectPartnerDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileIds()).compareTo(other.isSetFileIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileIds, other.fileIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestFiles()).compareTo(other.isSetRequestFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestFiles, other.requestFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessType()).compareTo(other.isSetBusinessType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessType, other.businessType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(other.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, other.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyMoney()).compareTo(other.isSetApplyMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyMoney, other.applyMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyDate()).compareTo(other.isSetApplyDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyDate, other.applyDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanDate()).compareTo(other.isSetLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanDate, other.loanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserName()).compareTo(other.isSetPmUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserName, other.pmUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessTypeStr()).compareTo(other.isSetBusinessTypeStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessTypeStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessTypeStr, other.businessTypeStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerNo()).compareTo(other.isSetPartnerNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerNo, other.partnerNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalComment()).compareTo(other.isSetApprovalComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalComment, other.approvalComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReApplyReason()).compareTo(other.isSetReApplyReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReApplyReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reApplyReason, other.reApplyReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanJusticeFiles()).compareTo(other.isSetLoanJusticeFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanJusticeFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanJusticeFiles, other.loanJusticeFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanBlankFiles()).compareTo(other.isSetLoanBlankFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanBlankFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanBlankFiles, other.loanBlankFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanOtherFiles()).compareTo(other.isSetLoanOtherFiles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanOtherFiles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanOtherFiles, other.loanOtherFiles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanReason()).compareTo(other.isSetConfirmLoanReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanReason, other.confirmLoanReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseType()).compareTo(other.isSetRepaymentRepurchaseType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseType, other.repaymentRepurchaseType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentVoucherPath()).compareTo(other.isSetRepaymentVoucherPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentVoucherPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentVoucherPath, other.repaymentVoucherPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseStatus()).compareTo(other.isSetRepaymentRepurchaseStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseStatus, other.repaymentRepurchaseStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyLoanDate()).compareTo(other.isSetApplyLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyLoanDate, other.applyLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanStatus()).compareTo(other.isSetLoanStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanStatus, other.loanStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanRemark()).compareTo(other.isSetLoanRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanRemark, other.loanRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertType()).compareTo(other.isSetCertType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certType, other.certType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBank()).compareTo(other.isSetPaymentBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBank, other.paymentBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBankBranch()).compareTo(other.isSetPaymentBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBankBranch, other.paymentBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAcctName()).compareTo(other.isSetPaymentAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAcctName, other.paymentAcctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAcctNo()).compareTo(other.isSetPaymentAcctNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAcctNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAcctNo, other.paymentAcctNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentProvinceCode()).compareTo(other.isSetPaymentProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentProvinceCode, other.paymentProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentCityCode()).compareTo(other.isSetPaymentCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCityCode, other.paymentCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentAccount()).compareTo(other.isSetPaymentAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentAccount, other.paymentAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentName()).compareTo(other.isSetPaymentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentName, other.paymentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmCustomerName()).compareTo(other.isSetPmCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmCustomerName, other.pmCustomerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveAddr()).compareTo(other.isSetLiveAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveAddr, other.liveAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessContacts()).compareTo(other.isSetBusinessContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessContacts, other.businessContacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetManagers()).compareTo(other.isSetManagers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManagers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.managers, other.managers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldBankName()).compareTo(other.isSetOldBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldBankName, other.oldBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanMoney()).compareTo(other.isSetOldLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanMoney, other.oldLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanPerson()).compareTo(other.isSetOldLoanPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanPerson, other.oldLoanPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldLoanPhone()).compareTo(other.isSetOldLoanPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldLoanPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldLoanPhone, other.oldLoanPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewBankName()).compareTo(other.isSetNewBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBankName, other.newBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanMoney()).compareTo(other.isSetNewLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanMoney, other.newLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanPerson()).compareTo(other.isSetNewLoanPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanPerson, other.newLoanPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewLoanPhone()).compareTo(other.isSetNewLoanPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewLoanPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newLoanPhone, other.newLoanPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentType()).compareTo(other.isSetPaymentType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentType, other.paymentType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccumulationFundBank()).compareTo(other.isSetAccumulationFundBank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumulationFundBank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumulationFundBank, other.accumulationFundBank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccumulationFundMoney()).compareTo(other.isSetAccumulationFundMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumulationFundMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumulationFundMoney, other.accumulationFundMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperviseDepartment()).compareTo(other.isSetSuperviseDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperviseDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superviseDepartment, other.superviseDepartment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundsMoney()).compareTo(other.isSetFundsMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundsMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundsMoney, other.fundsMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationDate()).compareTo(other.isSetNotarizationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationDate, other.notarizationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostMoney()).compareTo(other.isSetCostMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costMoney, other.costMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTranasctionMoney()).compareTo(other.isSetTranasctionMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTranasctionMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tranasctionMoney, other.tranasctionMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHousePropertyCard()).compareTo(other.isSetHousePropertyCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHousePropertyCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.housePropertyCard, other.housePropertyCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerCardNo()).compareTo(other.isSetBuyerCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerCardNo, other.buyerCardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerAddress()).compareTo(other.isSetBuyerAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerAddress, other.buyerAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceCode()).compareTo(other.isSetProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provinceCode, other.provinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityCode()).compareTo(other.isSetCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityCode, other.cityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublicManList()).compareTo(other.isSetPublicManList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicManList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicManList, other.publicManList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskHistoryList()).compareTo(other.isSetTaskHistoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskHistoryList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskHistoryList, other.taskHistoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanEffeDate()).compareTo(other.isSetLoanEffeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanEffeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanEffeDate, other.loanEffeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerLoanDate()).compareTo(other.isSetPartnerLoanDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerLoanDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerLoanDate, other.partnerLoanDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerLoanFile()).compareTo(other.isSetPartnerLoanFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerLoanFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerLoanFile, other.partnerLoanFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRealRefundDate()).compareTo(other.isSetPartnerRealRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRealRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRealRefundDate, other.partnerRealRefundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerRefundFile()).compareTo(other.isSetPartnerRefundFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerRefundFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerRefundFile, other.partnerRefundFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerInterests()).compareTo(other.isSetPartnerInterests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerInterests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerInterests, other.partnerInterests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentRepurchaseRemark()).compareTo(other.isSetRepaymentRepurchaseRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentRepurchaseRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentRepurchaseRemark, other.repaymentRepurchaseRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundLoanAmount()).compareTo(other.isSetRefundLoanAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundLoanAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundLoanAmount, other.refundLoanAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundXifee()).compareTo(other.isSetRefundXifee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundXifee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundXifee, other.refundXifee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXiFeeVoucherPath()).compareTo(other.isSetXiFeeVoucherPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXiFeeVoucherPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xiFeeVoucherPath, other.xiFeeVoucherPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDate()).compareTo(other.isSetRefundDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDate, other.refundDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCategory()).compareTo(other.isSetBusinessCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCategory, other.businessCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCategoryStr()).compareTo(other.isSetBusinessCategoryStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCategoryStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCategoryStr, other.businessCategoryStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAcctNo()).compareTo(other.isSetPayAcctNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAcctNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAcctNo, other.payAcctNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayAcctName()).compareTo(other.isSetPayAcctName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayAcctName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payAcctName, other.payAcctName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBankName()).compareTo(other.isSetPayBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBankName, other.payBankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBankCode()).compareTo(other.isSetPayBankCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBankCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBankCode, other.payBankCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayBankBranch()).compareTo(other.isSetPayBankBranch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayBankBranch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payBankBranch, other.payBankBranch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayProvinceCode()).compareTo(other.isSetPayProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payProvinceCode, other.payProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayCityCode()).compareTo(other.isSetPayCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payCityCode, other.payCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanMoney()).compareTo(other.isSetConfirmLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanMoney, other.confirmLoanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmLoanDays()).compareTo(other.isSetConfirmLoanDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmLoanDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmLoanDays, other.confirmLoanDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseProvinceCode()).compareTo(other.isSetHouseProvinceCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseProvinceCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseProvinceCode, other.houseProvinceCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseCityCode()).compareTo(other.isSetHouseCityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseCityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseCityCode, other.houseCityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproveMoney()).compareTo(other.isSetApproveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approveMoney, other.approveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectSource()).compareTo(other.isSetProjectSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectSource, other.projectSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstateList()).compareTo(other.isSetEstateList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstateList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estateList, other.estateList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectProperty()).compareTo(other.isSetProjectProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectProperty, other.projectProperty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerOrderCode()).compareTo(other.isSetPartnerOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerOrderCode, other.partnerOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPeriodLimit()).compareTo(other.isSetLoanPeriodLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPeriodLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPeriodLimit, other.loanPeriodLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCreditLoan()).compareTo(other.isSetIsCreditLoan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCreditLoan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCreditLoan, other.isCreditLoan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBankPhone()).compareTo(other.isSetPaymentBankPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBankPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBankPhone, other.paymentBankPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPaymentBankLineNo()).compareTo(other.isSetPaymentBankLineNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentBankLineNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentBankLineNo, other.paymentBankLineNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundTotalAmount()).compareTo(other.isSetRefundTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundTotalAmount, other.refundTotalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundPenalty()).compareTo(other.isSetRefundPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundPenalty, other.refundPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundFine()).compareTo(other.isSetRefundFine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundFine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundFine, other.refundFine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundCompdinte()).compareTo(other.isSetRefundCompdinte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundCompdinte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundCompdinte, other.refundCompdinte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerPlatformOrderCode()).compareTo(other.isSetPartnerPlatformOrderCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerPlatformOrderCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerPlatformOrderCode, other.partnerPlatformOrderCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectForeclosure()).compareTo(other.isSetProjectForeclosure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectForeclosure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectForeclosure, other.projectForeclosure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsPartnerOpenAccount()).compareTo(other.isSetIsPartnerOpenAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsPartnerOpenAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPartnerOpenAccount, other.isPartnerOpenAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerPushAccount()).compareTo(other.isSetPartnerPushAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerPushAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerPushAccount, other.partnerPushAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerGrossRate()).compareTo(other.isSetPartnerGrossRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerGrossRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerGrossRate, other.partnerGrossRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProjectPartnerDto(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    if (this.loanId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileIds:");
    if (this.fileIds == null) {
      sb.append("null");
    } else {
      sb.append(this.fileIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestFiles:");
    if (this.requestFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.requestFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessType:");
    sb.append(this.businessType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyMoney:");
    sb.append(this.applyMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyDate:");
    sb.append(this.applyDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanDate:");
    if (this.loanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserName:");
    if (this.pmUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessTypeStr:");
    if (this.businessTypeStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessTypeStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerNo:");
    if (this.partnerNo == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalComment:");
    if (this.approvalComment == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalComment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reApplyReason:");
    if (this.reApplyReason == null) {
      sb.append("null");
    } else {
      sb.append(this.reApplyReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanJusticeFiles:");
    if (this.loanJusticeFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.loanJusticeFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanBlankFiles:");
    if (this.loanBlankFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.loanBlankFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanOtherFiles:");
    if (this.loanOtherFiles == null) {
      sb.append("null");
    } else {
      sb.append(this.loanOtherFiles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanReason:");
    if (this.confirmLoanReason == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmLoanReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseType:");
    sb.append(this.repaymentRepurchaseType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentVoucherPath:");
    if (this.repaymentVoucherPath == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentVoucherPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseStatus:");
    if (this.repaymentRepurchaseStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentRepurchaseStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyLoanDate:");
    if (this.applyLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.applyLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanStatus:");
    sb.append(this.loanStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanRemark:");
    if (this.loanRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.loanRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certType:");
    if (this.certType == null) {
      sb.append("null");
    } else {
      sb.append(this.certType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBank:");
    if (this.paymentBank == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBankBranch:");
    if (this.paymentBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAcctName:");
    if (this.paymentAcctName == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAcctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAcctNo:");
    if (this.paymentAcctNo == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAcctNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentProvinceCode:");
    if (this.paymentProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentCityCode:");
    if (this.paymentCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentAccount:");
    if (this.paymentAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentName:");
    if (this.paymentName == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmCustomerName:");
    if (this.pmCustomerName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmCustomerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveAddr:");
    if (this.liveAddr == null) {
      sb.append("null");
    } else {
      sb.append(this.liveAddr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessContacts:");
    if (this.businessContacts == null) {
      sb.append("null");
    } else {
      sb.append(this.businessContacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("managers:");
    if (this.managers == null) {
      sb.append("null");
    } else {
      sb.append(this.managers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldBankName:");
    if (this.oldBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.oldBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanMoney:");
    sb.append(this.oldLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanPerson:");
    if (this.oldLoanPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldLoanPhone:");
    if (this.oldLoanPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.oldLoanPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newBankName:");
    if (this.newBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.newBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanMoney:");
    sb.append(this.newLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanPerson:");
    if (this.newLoanPerson == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanPerson);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newLoanPhone:");
    if (this.newLoanPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.newLoanPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentType:");
    sb.append(this.paymentType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumulationFundBank:");
    if (this.accumulationFundBank == null) {
      sb.append("null");
    } else {
      sb.append(this.accumulationFundBank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumulationFundMoney:");
    sb.append(this.accumulationFundMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superviseDepartment:");
    if (this.superviseDepartment == null) {
      sb.append("null");
    } else {
      sb.append(this.superviseDepartment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundsMoney:");
    sb.append(this.fundsMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationDate:");
    if (this.notarizationDate == null) {
      sb.append("null");
    } else {
      sb.append(this.notarizationDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    sb.append(this.area);
    first = false;
    if (!first) sb.append(", ");
    sb.append("costMoney:");
    sb.append(this.costMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tranasctionMoney:");
    sb.append(this.tranasctionMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("housePropertyCard:");
    if (this.housePropertyCard == null) {
      sb.append("null");
    } else {
      sb.append(this.housePropertyCard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerCardNo:");
    if (this.buyerCardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerCardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerAddress:");
    if (this.buyerAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("provinceCode:");
    if (this.provinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.provinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityCode:");
    if (this.cityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.cityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicManList:");
    if (this.publicManList == null) {
      sb.append("null");
    } else {
      sb.append(this.publicManList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskHistoryList:");
    if (this.taskHistoryList == null) {
      sb.append("null");
    } else {
      sb.append(this.taskHistoryList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanEffeDate:");
    if (this.loanEffeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.loanEffeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerLoanDate:");
    if (this.partnerLoanDate == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerLoanDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerLoanFile:");
    if (this.partnerLoanFile == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerLoanFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRealRefundDate:");
    if (this.partnerRealRefundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerRealRefundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerRefundFile:");
    if (this.partnerRefundFile == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerRefundFile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerInterests:");
    sb.append(this.partnerInterests);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentRepurchaseRemark:");
    if (this.repaymentRepurchaseRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentRepurchaseRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundLoanAmount:");
    sb.append(this.refundLoanAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundXifee:");
    sb.append(this.refundXifee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xiFeeVoucherPath:");
    if (this.xiFeeVoucherPath == null) {
      sb.append("null");
    } else {
      sb.append(this.xiFeeVoucherPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDate:");
    if (this.refundDate == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCategory:");
    sb.append(this.businessCategory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCategoryStr:");
    if (this.businessCategoryStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessCategoryStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAcctNo:");
    if (this.payAcctNo == null) {
      sb.append("null");
    } else {
      sb.append(this.payAcctNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payAcctName:");
    if (this.payAcctName == null) {
      sb.append("null");
    } else {
      sb.append(this.payAcctName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBankName:");
    if (this.payBankName == null) {
      sb.append("null");
    } else {
      sb.append(this.payBankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBankCode:");
    if (this.payBankCode == null) {
      sb.append("null");
    } else {
      sb.append(this.payBankCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payBankBranch:");
    if (this.payBankBranch == null) {
      sb.append("null");
    } else {
      sb.append(this.payBankBranch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payProvinceCode:");
    if (this.payProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.payProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payCityCode:");
    if (this.payCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.payCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanMoney:");
    sb.append(this.confirmLoanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmLoanDays:");
    sb.append(this.confirmLoanDays);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseProvinceCode:");
    if (this.houseProvinceCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseProvinceCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseCityCode:");
    if (this.houseCityCode == null) {
      sb.append("null");
    } else {
      sb.append(this.houseCityCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approveMoney:");
    sb.append(this.approveMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectSource:");
    sb.append(this.projectSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estateList:");
    if (this.estateList == null) {
      sb.append("null");
    } else {
      sb.append(this.estateList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectProperty:");
    if (this.projectProperty == null) {
      sb.append("null");
    } else {
      sb.append(this.projectProperty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerOrderCode:");
    if (this.partnerOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPeriodLimit:");
    sb.append(this.loanPeriodLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCreditLoan:");
    sb.append(this.isCreditLoan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBankPhone:");
    if (this.paymentBankPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBankPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paymentBankLineNo:");
    if (this.paymentBankLineNo == null) {
      sb.append("null");
    } else {
      sb.append(this.paymentBankLineNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundTotalAmount:");
    sb.append(this.refundTotalAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundPenalty:");
    sb.append(this.refundPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundFine:");
    sb.append(this.refundFine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundCompdinte:");
    sb.append(this.refundCompdinte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerPlatformOrderCode:");
    if (this.partnerPlatformOrderCode == null) {
      sb.append("null");
    } else {
      sb.append(this.partnerPlatformOrderCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectForeclosure:");
    if (this.projectForeclosure == null) {
      sb.append("null");
    } else {
      sb.append(this.projectForeclosure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isPartnerOpenAccount:");
    sb.append(this.isPartnerOpenAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerPushAccount:");
    sb.append(this.partnerPushAccount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerGrossRate:");
    sb.append(this.partnerGrossRate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (projectProperty != null) {
      projectProperty.validate();
    }
    if (projectForeclosure != null) {
      projectForeclosure.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProjectPartnerDtoStandardSchemeFactory implements SchemeFactory {
    public ProjectPartnerDtoStandardScheme getScheme() {
      return new ProjectPartnerDtoStandardScheme();
    }
  }

  private static class ProjectPartnerDtoStandardScheme extends StandardScheme<ProjectPartnerDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProjectPartnerDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanId = iprot.readString();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.fileIds = new ArrayList<Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.fileIds.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setFileIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REQUEST_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestFiles = iprot.readString();
              struct.setRequestFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BUSINESS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessType = iprot.readI32();
              struct.setBusinessTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APPLY_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applyMoney = iprot.readDouble();
              struct.setApplyMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // APPLY_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyDate = iprot.readI32();
              struct.setApplyDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanDate = iprot.readString();
              struct.setLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmUserName = iprot.readString();
              struct.setPmUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BUSINESS_TYPE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessTypeStr = iprot.readString();
              struct.setBusinessTypeStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PARTNER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerNo = iprot.readString();
              struct.setPartnerNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // APPROVAL_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalComment = iprot.readString();
              struct.setApprovalCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RE_APPLY_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reApplyReason = iprot.readString();
              struct.setReApplyReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // LOAN_JUSTICE_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanJusticeFiles = iprot.readString();
              struct.setLoanJusticeFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // LOAN_BLANK_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanBlankFiles = iprot.readString();
              struct.setLoanBlankFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // LOAN_OTHER_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanOtherFiles = iprot.readString();
              struct.setLoanOtherFilesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CONFIRM_LOAN_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmLoanReason = iprot.readString();
              struct.setConfirmLoanReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // REPAYMENT_REPURCHASE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentRepurchaseType = iprot.readI32();
              struct.setRepaymentRepurchaseTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // REPAYMENT_VOUCHER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentVoucherPath = iprot.readString();
              struct.setRepaymentVoucherPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // REPAYMENT_REPURCHASE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentRepurchaseStatus = iprot.readString();
              struct.setRepaymentRepurchaseStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // APPLY_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyLoanDate = iprot.readString();
              struct.setApplyLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // LOAN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanStatus = iprot.readI32();
              struct.setLoanStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // LOAN_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanRemark = iprot.readString();
              struct.setLoanRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // CERT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certType = iprot.readString();
              struct.setCertTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // PAYMENT_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBank = iprot.readString();
              struct.setPaymentBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // PAYMENT_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBankBranch = iprot.readString();
              struct.setPaymentBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // PAYMENT_ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAcctName = iprot.readString();
              struct.setPaymentAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // PAYMENT_ACCT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAcctNo = iprot.readString();
              struct.setPaymentAcctNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // PAYMENT_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentProvinceCode = iprot.readString();
              struct.setPaymentProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // PAYMENT_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentCityCode = iprot.readString();
              struct.setPaymentCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // PAYMENT_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentAccount = iprot.readString();
              struct.setPaymentAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PAYMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentName = iprot.readString();
              struct.setPaymentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PM_CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmCustomerName = iprot.readString();
              struct.setPmCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // LIVE_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveAddr = iprot.readString();
              struct.setLiveAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // BUSINESS_CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessContacts = iprot.readString();
              struct.setBusinessContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // MANAGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.managers = iprot.readString();
              struct.setManagersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // OLD_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldBankName = iprot.readString();
              struct.setOldBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // OLD_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.oldLoanMoney = iprot.readDouble();
              struct.setOldLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // OLD_LOAN_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanPerson = iprot.readString();
              struct.setOldLoanPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // OLD_LOAN_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldLoanPhone = iprot.readString();
              struct.setOldLoanPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // NEW_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newBankName = iprot.readString();
              struct.setNewBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // NEW_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.newLoanMoney = iprot.readDouble();
              struct.setNewLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // NEW_LOAN_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanPerson = iprot.readString();
              struct.setNewLoanPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // NEW_LOAN_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newLoanPhone = iprot.readString();
              struct.setNewLoanPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // PAYMENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.paymentType = iprot.readI32();
              struct.setPaymentTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // ACCUMULATION_FUND_BANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accumulationFundBank = iprot.readString();
              struct.setAccumulationFundBankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // ACCUMULATION_FUND_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.accumulationFundMoney = iprot.readDouble();
              struct.setAccumulationFundMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // SUPERVISE_DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.superviseDepartment = iprot.readString();
              struct.setSuperviseDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // FUNDS_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fundsMoney = iprot.readDouble();
              struct.setFundsMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // NOTARIZATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notarizationDate = iprot.readString();
              struct.setNotarizationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.area = iprot.readDouble();
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // COST_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.costMoney = iprot.readDouble();
              struct.setCostMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // TRANASCTION_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tranasctionMoney = iprot.readDouble();
              struct.setTranasctionMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // HOUSE_PROPERTY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.housePropertyCard = iprot.readString();
              struct.setHousePropertyCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // BUYER_CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerCardNo = iprot.readString();
              struct.setBuyerCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // BUYER_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerAddress = iprot.readString();
              struct.setBuyerAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.provinceCode = iprot.readString();
              struct.setProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityCode = iprot.readString();
              struct.setCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // PUBLIC_MAN_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.publicManList = new ArrayList<com.xlkfinance.bms.rpc.customer.CusDTO>(_list35.size);
                com.xlkfinance.bms.rpc.customer.CusDTO _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new com.xlkfinance.bms.rpc.customer.CusDTO();
                  _elem36.read(iprot);
                  struct.publicManList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setPublicManListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // TASK_HISTORY_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.taskHistoryList = new ArrayList<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto>(_list38.size);
                com.xlkfinance.bms.rpc.workflow.TaskHistoryDto _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new com.xlkfinance.bms.rpc.workflow.TaskHistoryDto();
                  _elem39.read(iprot);
                  struct.taskHistoryList.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setTaskHistoryListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // LOAN_EFFE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanEffeDate = iprot.readString();
              struct.setLoanEffeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // PARTNER_LOAN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerLoanDate = iprot.readString();
              struct.setPartnerLoanDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // PARTNER_LOAN_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerLoanFile = iprot.readString();
              struct.setPartnerLoanFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // PARTNER_REAL_REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerRealRefundDate = iprot.readString();
              struct.setPartnerRealRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // PARTNER_REFUND_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerRefundFile = iprot.readString();
              struct.setPartnerRefundFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // PARTNER_INTERESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.partnerInterests = iprot.readDouble();
              struct.setPartnerInterestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // REPAYMENT_REPURCHASE_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentRepurchaseRemark = iprot.readString();
              struct.setRepaymentRepurchaseRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // REFUND_LOAN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundLoanAmount = iprot.readDouble();
              struct.setRefundLoanAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 82: // REFUND_XIFEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundXifee = iprot.readDouble();
              struct.setRefundXifeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 83: // XI_FEE_VOUCHER_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xiFeeVoucherPath = iprot.readString();
              struct.setXiFeeVoucherPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 84: // REFUND_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundDate = iprot.readString();
              struct.setRefundDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // BUSINESS_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessCategory = iprot.readI32();
              struct.setBusinessCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // BUSINESS_CATEGORY_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessCategoryStr = iprot.readString();
              struct.setBusinessCategoryStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // PAY_ACCT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payAcctNo = iprot.readString();
              struct.setPayAcctNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // PAY_ACCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payAcctName = iprot.readString();
              struct.setPayAcctNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // PAY_BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBankName = iprot.readString();
              struct.setPayBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 90: // PAY_BANK_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBankCode = iprot.readString();
              struct.setPayBankCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 91: // PAY_BANK_BRANCH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payBankBranch = iprot.readString();
              struct.setPayBankBranchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 92: // PAY_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payProvinceCode = iprot.readString();
              struct.setPayProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 93: // PAY_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payCityCode = iprot.readString();
              struct.setPayCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 94: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 95: // CONFIRM_LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confirmLoanMoney = iprot.readDouble();
              struct.setConfirmLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 96: // CONFIRM_LOAN_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.confirmLoanDays = iprot.readI32();
              struct.setConfirmLoanDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 97: // HOUSE_PROVINCE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseProvinceCode = iprot.readString();
              struct.setHouseProvinceCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 98: // HOUSE_CITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseCityCode = iprot.readString();
              struct.setHouseCityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 99: // APPROVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.approveMoney = iprot.readDouble();
              struct.setApproveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // PROJECT_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectSource = iprot.readI32();
              struct.setProjectSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // ESTATE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>(_list41.size);
                com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = new com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate();
                  _elem42.read(iprot);
                  struct.estateList.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setEstateListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // PROJECT_PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectProperty = new com.xlkfinance.bms.rpc.beforeloan.ProjectProperty();
              struct.projectProperty.read(iprot);
              struct.setProjectPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // PARTNER_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerOrderCode = iprot.readString();
              struct.setPartnerOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // LOAN_PERIOD_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanPeriodLimit = iprot.readI32();
              struct.setLoanPeriodLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // IS_CREDIT_LOAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isCreditLoan = iprot.readI32();
              struct.setIsCreditLoanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // PAYMENT_BANK_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBankPhone = iprot.readString();
              struct.setPaymentBankPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // PAYMENT_BANK_LINE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentBankLineNo = iprot.readString();
              struct.setPaymentBankLineNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // REFUND_TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundTotalAmount = iprot.readDouble();
              struct.setRefundTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // REFUND_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundPenalty = iprot.readDouble();
              struct.setRefundPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // REFUND_FINE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundFine = iprot.readDouble();
              struct.setRefundFineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // REFUND_COMPDINTE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.refundCompdinte = iprot.readDouble();
              struct.setRefundCompdinteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // PARTNER_PLATFORM_ORDER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partnerPlatformOrderCode = iprot.readString();
              struct.setPartnerPlatformOrderCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // PROJECT_FORECLOSURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.projectForeclosure = new com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure();
              struct.projectForeclosure.read(iprot);
              struct.setProjectForeclosureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // IS_PARTNER_OPEN_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isPartnerOpenAccount = iprot.readI32();
              struct.setIsPartnerOpenAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 115: // PARTNER_PUSH_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerPushAccount = iprot.readI32();
              struct.setPartnerPushAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 116: // PARTNER_GROSS_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.partnerGrossRate = iprot.readDouble();
              struct.setPartnerGrossRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProjectPartnerDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.loanId != null) {
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeString(struct.loanId);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.fileIds != null) {
        oprot.writeFieldBegin(FILE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fileIds.size()));
          for (int _iter44 : struct.fileIds)
          {
            oprot.writeI32(_iter44);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.requestFiles != null) {
        oprot.writeFieldBegin(REQUEST_FILES_FIELD_DESC);
        oprot.writeString(struct.requestFiles);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.businessType);
      oprot.writeFieldEnd();
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.applyMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_DATE_FIELD_DESC);
      oprot.writeI32(struct.applyDate);
      oprot.writeFieldEnd();
      if (struct.loanDate != null) {
        oprot.writeFieldBegin(LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.loanDate);
        oprot.writeFieldEnd();
      }
      if (struct.pmUserName != null) {
        oprot.writeFieldBegin(PM_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      if (struct.businessTypeStr != null) {
        oprot.writeFieldBegin(BUSINESS_TYPE_STR_FIELD_DESC);
        oprot.writeString(struct.businessTypeStr);
        oprot.writeFieldEnd();
      }
      if (struct.partnerNo != null) {
        oprot.writeFieldBegin(PARTNER_NO_FIELD_DESC);
        oprot.writeString(struct.partnerNo);
        oprot.writeFieldEnd();
      }
      if (struct.approvalComment != null) {
        oprot.writeFieldBegin(APPROVAL_COMMENT_FIELD_DESC);
        oprot.writeString(struct.approvalComment);
        oprot.writeFieldEnd();
      }
      if (struct.reApplyReason != null) {
        oprot.writeFieldBegin(RE_APPLY_REASON_FIELD_DESC);
        oprot.writeString(struct.reApplyReason);
        oprot.writeFieldEnd();
      }
      if (struct.loanJusticeFiles != null) {
        oprot.writeFieldBegin(LOAN_JUSTICE_FILES_FIELD_DESC);
        oprot.writeString(struct.loanJusticeFiles);
        oprot.writeFieldEnd();
      }
      if (struct.loanBlankFiles != null) {
        oprot.writeFieldBegin(LOAN_BLANK_FILES_FIELD_DESC);
        oprot.writeString(struct.loanBlankFiles);
        oprot.writeFieldEnd();
      }
      if (struct.loanOtherFiles != null) {
        oprot.writeFieldBegin(LOAN_OTHER_FILES_FIELD_DESC);
        oprot.writeString(struct.loanOtherFiles);
        oprot.writeFieldEnd();
      }
      if (struct.confirmLoanReason != null) {
        oprot.writeFieldBegin(CONFIRM_LOAN_REASON_FIELD_DESC);
        oprot.writeString(struct.confirmLoanReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_REPURCHASE_TYPE_FIELD_DESC);
      oprot.writeI32(struct.repaymentRepurchaseType);
      oprot.writeFieldEnd();
      if (struct.repaymentVoucherPath != null) {
        oprot.writeFieldBegin(REPAYMENT_VOUCHER_PATH_FIELD_DESC);
        oprot.writeString(struct.repaymentVoucherPath);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentRepurchaseStatus != null) {
        oprot.writeFieldBegin(REPAYMENT_REPURCHASE_STATUS_FIELD_DESC);
        oprot.writeString(struct.repaymentRepurchaseStatus);
        oprot.writeFieldEnd();
      }
      if (struct.applyLoanDate != null) {
        oprot.writeFieldBegin(APPLY_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.applyLoanDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_STATUS_FIELD_DESC);
      oprot.writeI32(struct.loanStatus);
      oprot.writeFieldEnd();
      if (struct.loanRemark != null) {
        oprot.writeFieldBegin(LOAN_REMARK_FIELD_DESC);
        oprot.writeString(struct.loanRemark);
        oprot.writeFieldEnd();
      }
      if (struct.certType != null) {
        oprot.writeFieldBegin(CERT_TYPE_FIELD_DESC);
        oprot.writeString(struct.certType);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBank != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_FIELD_DESC);
        oprot.writeString(struct.paymentBank);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBankBranch != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.paymentBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAcctName != null) {
        oprot.writeFieldBegin(PAYMENT_ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.paymentAcctName);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAcctNo != null) {
        oprot.writeFieldBegin(PAYMENT_ACCT_NO_FIELD_DESC);
        oprot.writeString(struct.paymentAcctNo);
        oprot.writeFieldEnd();
      }
      if (struct.paymentProvinceCode != null) {
        oprot.writeFieldBegin(PAYMENT_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.paymentProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.paymentCityCode != null) {
        oprot.writeFieldBegin(PAYMENT_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.paymentCityCode);
        oprot.writeFieldEnd();
      }
      if (struct.paymentAccount != null) {
        oprot.writeFieldBegin(PAYMENT_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.paymentAccount);
        oprot.writeFieldEnd();
      }
      if (struct.paymentName != null) {
        oprot.writeFieldBegin(PAYMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.paymentName);
        oprot.writeFieldEnd();
      }
      if (struct.pmCustomerName != null) {
        oprot.writeFieldBegin(PM_CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.pmCustomerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      if (struct.liveAddr != null) {
        oprot.writeFieldBegin(LIVE_ADDR_FIELD_DESC);
        oprot.writeString(struct.liveAddr);
        oprot.writeFieldEnd();
      }
      if (struct.businessContacts != null) {
        oprot.writeFieldBegin(BUSINESS_CONTACTS_FIELD_DESC);
        oprot.writeString(struct.businessContacts);
        oprot.writeFieldEnd();
      }
      if (struct.managers != null) {
        oprot.writeFieldBegin(MANAGERS_FIELD_DESC);
        oprot.writeString(struct.managers);
        oprot.writeFieldEnd();
      }
      if (struct.oldBankName != null) {
        oprot.writeFieldBegin(OLD_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.oldBankName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OLD_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.oldLoanMoney);
      oprot.writeFieldEnd();
      if (struct.oldLoanPerson != null) {
        oprot.writeFieldBegin(OLD_LOAN_PERSON_FIELD_DESC);
        oprot.writeString(struct.oldLoanPerson);
        oprot.writeFieldEnd();
      }
      if (struct.oldLoanPhone != null) {
        oprot.writeFieldBegin(OLD_LOAN_PHONE_FIELD_DESC);
        oprot.writeString(struct.oldLoanPhone);
        oprot.writeFieldEnd();
      }
      if (struct.newBankName != null) {
        oprot.writeFieldBegin(NEW_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.newBankName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEW_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.newLoanMoney);
      oprot.writeFieldEnd();
      if (struct.newLoanPerson != null) {
        oprot.writeFieldBegin(NEW_LOAN_PERSON_FIELD_DESC);
        oprot.writeString(struct.newLoanPerson);
        oprot.writeFieldEnd();
      }
      if (struct.newLoanPhone != null) {
        oprot.writeFieldBegin(NEW_LOAN_PHONE_FIELD_DESC);
        oprot.writeString(struct.newLoanPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAYMENT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.paymentType);
      oprot.writeFieldEnd();
      if (struct.accumulationFundBank != null) {
        oprot.writeFieldBegin(ACCUMULATION_FUND_BANK_FIELD_DESC);
        oprot.writeString(struct.accumulationFundBank);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCUMULATION_FUND_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.accumulationFundMoney);
      oprot.writeFieldEnd();
      if (struct.superviseDepartment != null) {
        oprot.writeFieldBegin(SUPERVISE_DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.superviseDepartment);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FUNDS_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.fundsMoney);
      oprot.writeFieldEnd();
      if (struct.notarizationDate != null) {
        oprot.writeFieldBegin(NOTARIZATION_DATE_FIELD_DESC);
        oprot.writeString(struct.notarizationDate);
        oprot.writeFieldEnd();
      }
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREA_FIELD_DESC);
      oprot.writeDouble(struct.area);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COST_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.costMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANASCTION_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.tranasctionMoney);
      oprot.writeFieldEnd();
      if (struct.housePropertyCard != null) {
        oprot.writeFieldBegin(HOUSE_PROPERTY_CARD_FIELD_DESC);
        oprot.writeString(struct.housePropertyCard);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerCardNo != null) {
        oprot.writeFieldBegin(BUYER_CARD_NO_FIELD_DESC);
        oprot.writeString(struct.buyerCardNo);
        oprot.writeFieldEnd();
      }
      if (struct.buyerAddress != null) {
        oprot.writeFieldBegin(BUYER_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.buyerAddress);
        oprot.writeFieldEnd();
      }
      if (struct.provinceCode != null) {
        oprot.writeFieldBegin(PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.provinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.cityCode != null) {
        oprot.writeFieldBegin(CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.cityCode);
        oprot.writeFieldEnd();
      }
      if (struct.publicManList != null) {
        oprot.writeFieldBegin(PUBLIC_MAN_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.publicManList.size()));
          for (com.xlkfinance.bms.rpc.customer.CusDTO _iter45 : struct.publicManList)
          {
            _iter45.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.taskHistoryList != null) {
        oprot.writeFieldBegin(TASK_HISTORY_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskHistoryList.size()));
          for (com.xlkfinance.bms.rpc.workflow.TaskHistoryDto _iter46 : struct.taskHistoryList)
          {
            _iter46.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.loanEffeDate != null) {
        oprot.writeFieldBegin(LOAN_EFFE_DATE_FIELD_DESC);
        oprot.writeString(struct.loanEffeDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerLoanDate != null) {
        oprot.writeFieldBegin(PARTNER_LOAN_DATE_FIELD_DESC);
        oprot.writeString(struct.partnerLoanDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerLoanFile != null) {
        oprot.writeFieldBegin(PARTNER_LOAN_FILE_FIELD_DESC);
        oprot.writeString(struct.partnerLoanFile);
        oprot.writeFieldEnd();
      }
      if (struct.partnerRealRefundDate != null) {
        oprot.writeFieldBegin(PARTNER_REAL_REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.partnerRealRefundDate);
        oprot.writeFieldEnd();
      }
      if (struct.partnerRefundFile != null) {
        oprot.writeFieldBegin(PARTNER_REFUND_FILE_FIELD_DESC);
        oprot.writeString(struct.partnerRefundFile);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTNER_INTERESTS_FIELD_DESC);
      oprot.writeDouble(struct.partnerInterests);
      oprot.writeFieldEnd();
      if (struct.repaymentRepurchaseRemark != null) {
        oprot.writeFieldBegin(REPAYMENT_REPURCHASE_REMARK_FIELD_DESC);
        oprot.writeString(struct.repaymentRepurchaseRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_LOAN_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.refundLoanAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_XIFEE_FIELD_DESC);
      oprot.writeDouble(struct.refundXifee);
      oprot.writeFieldEnd();
      if (struct.xiFeeVoucherPath != null) {
        oprot.writeFieldBegin(XI_FEE_VOUCHER_PATH_FIELD_DESC);
        oprot.writeString(struct.xiFeeVoucherPath);
        oprot.writeFieldEnd();
      }
      if (struct.refundDate != null) {
        oprot.writeFieldBegin(REFUND_DATE_FIELD_DESC);
        oprot.writeString(struct.refundDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_CATEGORY_FIELD_DESC);
      oprot.writeI32(struct.businessCategory);
      oprot.writeFieldEnd();
      if (struct.businessCategoryStr != null) {
        oprot.writeFieldBegin(BUSINESS_CATEGORY_STR_FIELD_DESC);
        oprot.writeString(struct.businessCategoryStr);
        oprot.writeFieldEnd();
      }
      if (struct.payAcctNo != null) {
        oprot.writeFieldBegin(PAY_ACCT_NO_FIELD_DESC);
        oprot.writeString(struct.payAcctNo);
        oprot.writeFieldEnd();
      }
      if (struct.payAcctName != null) {
        oprot.writeFieldBegin(PAY_ACCT_NAME_FIELD_DESC);
        oprot.writeString(struct.payAcctName);
        oprot.writeFieldEnd();
      }
      if (struct.payBankName != null) {
        oprot.writeFieldBegin(PAY_BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.payBankName);
        oprot.writeFieldEnd();
      }
      if (struct.payBankCode != null) {
        oprot.writeFieldBegin(PAY_BANK_CODE_FIELD_DESC);
        oprot.writeString(struct.payBankCode);
        oprot.writeFieldEnd();
      }
      if (struct.payBankBranch != null) {
        oprot.writeFieldBegin(PAY_BANK_BRANCH_FIELD_DESC);
        oprot.writeString(struct.payBankBranch);
        oprot.writeFieldEnd();
      }
      if (struct.payProvinceCode != null) {
        oprot.writeFieldBegin(PAY_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.payProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.payCityCode != null) {
        oprot.writeFieldBegin(PAY_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.payCityCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.confirmLoanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONFIRM_LOAN_DAYS_FIELD_DESC);
      oprot.writeI32(struct.confirmLoanDays);
      oprot.writeFieldEnd();
      if (struct.houseProvinceCode != null) {
        oprot.writeFieldBegin(HOUSE_PROVINCE_CODE_FIELD_DESC);
        oprot.writeString(struct.houseProvinceCode);
        oprot.writeFieldEnd();
      }
      if (struct.houseCityCode != null) {
        oprot.writeFieldBegin(HOUSE_CITY_CODE_FIELD_DESC);
        oprot.writeString(struct.houseCityCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPROVE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.approveMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.projectSource);
      oprot.writeFieldEnd();
      if (struct.estateList != null) {
        oprot.writeFieldBegin(ESTATE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.estateList.size()));
          for (com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _iter47 : struct.estateList)
          {
            _iter47.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.projectProperty != null) {
        oprot.writeFieldBegin(PROJECT_PROPERTY_FIELD_DESC);
        struct.projectProperty.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.partnerOrderCode != null) {
        oprot.writeFieldBegin(PARTNER_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.partnerOrderCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOAN_PERIOD_LIMIT_FIELD_DESC);
      oprot.writeI32(struct.loanPeriodLimit);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CREDIT_LOAN_FIELD_DESC);
      oprot.writeI32(struct.isCreditLoan);
      oprot.writeFieldEnd();
      if (struct.paymentBankPhone != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_PHONE_FIELD_DESC);
        oprot.writeString(struct.paymentBankPhone);
        oprot.writeFieldEnd();
      }
      if (struct.paymentBankLineNo != null) {
        oprot.writeFieldBegin(PAYMENT_BANK_LINE_NO_FIELD_DESC);
        oprot.writeString(struct.paymentBankLineNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_TOTAL_AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.refundTotalAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.refundPenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_FINE_FIELD_DESC);
      oprot.writeDouble(struct.refundFine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REFUND_COMPDINTE_FIELD_DESC);
      oprot.writeDouble(struct.refundCompdinte);
      oprot.writeFieldEnd();
      if (struct.partnerPlatformOrderCode != null) {
        oprot.writeFieldBegin(PARTNER_PLATFORM_ORDER_CODE_FIELD_DESC);
        oprot.writeString(struct.partnerPlatformOrderCode);
        oprot.writeFieldEnd();
      }
      if (struct.projectForeclosure != null) {
        oprot.writeFieldBegin(PROJECT_FORECLOSURE_FIELD_DESC);
        struct.projectForeclosure.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_PARTNER_OPEN_ACCOUNT_FIELD_DESC);
      oprot.writeI32(struct.isPartnerOpenAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_PUSH_ACCOUNT_FIELD_DESC);
      oprot.writeI32(struct.partnerPushAccount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_GROSS_RATE_FIELD_DESC);
      oprot.writeDouble(struct.partnerGrossRate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProjectPartnerDtoTupleSchemeFactory implements SchemeFactory {
    public ProjectPartnerDtoTupleScheme getScheme() {
      return new ProjectPartnerDtoTupleScheme();
    }
  }

  private static class ProjectPartnerDtoTupleScheme extends TupleScheme<ProjectPartnerDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProjectPartnerDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetLoanId()) {
        optionals.set(2);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(3);
      }
      if (struct.isSetProjectName()) {
        optionals.set(4);
      }
      if (struct.isSetFileIds()) {
        optionals.set(5);
      }
      if (struct.isSetRequestFiles()) {
        optionals.set(6);
      }
      if (struct.isSetRemark()) {
        optionals.set(7);
      }
      if (struct.isSetBusinessType()) {
        optionals.set(8);
      }
      if (struct.isSetCity()) {
        optionals.set(9);
      }
      if (struct.isSetUserName()) {
        optionals.set(10);
      }
      if (struct.isSetCardNo()) {
        optionals.set(11);
      }
      if (struct.isSetPhone()) {
        optionals.set(12);
      }
      if (struct.isSetApplyMoney()) {
        optionals.set(13);
      }
      if (struct.isSetApplyDate()) {
        optionals.set(14);
      }
      if (struct.isSetLoanDate()) {
        optionals.set(15);
      }
      if (struct.isSetPmUserName()) {
        optionals.set(16);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(17);
      }
      if (struct.isSetBusinessTypeStr()) {
        optionals.set(18);
      }
      if (struct.isSetPartnerNo()) {
        optionals.set(19);
      }
      if (struct.isSetApprovalComment()) {
        optionals.set(20);
      }
      if (struct.isSetReApplyReason()) {
        optionals.set(21);
      }
      if (struct.isSetLoanJusticeFiles()) {
        optionals.set(22);
      }
      if (struct.isSetLoanBlankFiles()) {
        optionals.set(23);
      }
      if (struct.isSetLoanOtherFiles()) {
        optionals.set(24);
      }
      if (struct.isSetConfirmLoanReason()) {
        optionals.set(25);
      }
      if (struct.isSetRepaymentRepurchaseType()) {
        optionals.set(26);
      }
      if (struct.isSetRepaymentVoucherPath()) {
        optionals.set(27);
      }
      if (struct.isSetRepaymentRepurchaseStatus()) {
        optionals.set(28);
      }
      if (struct.isSetApplyLoanDate()) {
        optionals.set(29);
      }
      if (struct.isSetLoanStatus()) {
        optionals.set(30);
      }
      if (struct.isSetLoanRemark()) {
        optionals.set(31);
      }
      if (struct.isSetCertType()) {
        optionals.set(32);
      }
      if (struct.isSetPaymentBank()) {
        optionals.set(33);
      }
      if (struct.isSetPaymentBankBranch()) {
        optionals.set(34);
      }
      if (struct.isSetPaymentAcctName()) {
        optionals.set(35);
      }
      if (struct.isSetPaymentAcctNo()) {
        optionals.set(36);
      }
      if (struct.isSetPaymentProvinceCode()) {
        optionals.set(37);
      }
      if (struct.isSetPaymentCityCode()) {
        optionals.set(38);
      }
      if (struct.isSetPaymentAccount()) {
        optionals.set(39);
      }
      if (struct.isSetPaymentName()) {
        optionals.set(40);
      }
      if (struct.isSetPmCustomerName()) {
        optionals.set(41);
      }
      if (struct.isSetSex()) {
        optionals.set(42);
      }
      if (struct.isSetLiveAddr()) {
        optionals.set(43);
      }
      if (struct.isSetBusinessContacts()) {
        optionals.set(44);
      }
      if (struct.isSetManagers()) {
        optionals.set(45);
      }
      if (struct.isSetOldBankName()) {
        optionals.set(46);
      }
      if (struct.isSetOldLoanMoney()) {
        optionals.set(47);
      }
      if (struct.isSetOldLoanPerson()) {
        optionals.set(48);
      }
      if (struct.isSetOldLoanPhone()) {
        optionals.set(49);
      }
      if (struct.isSetNewBankName()) {
        optionals.set(50);
      }
      if (struct.isSetNewLoanMoney()) {
        optionals.set(51);
      }
      if (struct.isSetNewLoanPerson()) {
        optionals.set(52);
      }
      if (struct.isSetNewLoanPhone()) {
        optionals.set(53);
      }
      if (struct.isSetPaymentType()) {
        optionals.set(54);
      }
      if (struct.isSetAccumulationFundBank()) {
        optionals.set(55);
      }
      if (struct.isSetAccumulationFundMoney()) {
        optionals.set(56);
      }
      if (struct.isSetSuperviseDepartment()) {
        optionals.set(57);
      }
      if (struct.isSetFundsMoney()) {
        optionals.set(58);
      }
      if (struct.isSetNotarizationDate()) {
        optionals.set(59);
      }
      if (struct.isSetHouseName()) {
        optionals.set(60);
      }
      if (struct.isSetArea()) {
        optionals.set(61);
      }
      if (struct.isSetCostMoney()) {
        optionals.set(62);
      }
      if (struct.isSetTranasctionMoney()) {
        optionals.set(63);
      }
      if (struct.isSetHousePropertyCard()) {
        optionals.set(64);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(65);
      }
      if (struct.isSetBuyerCardNo()) {
        optionals.set(66);
      }
      if (struct.isSetBuyerAddress()) {
        optionals.set(67);
      }
      if (struct.isSetProvinceCode()) {
        optionals.set(68);
      }
      if (struct.isSetCityCode()) {
        optionals.set(69);
      }
      if (struct.isSetPublicManList()) {
        optionals.set(70);
      }
      if (struct.isSetTaskHistoryList()) {
        optionals.set(71);
      }
      if (struct.isSetLoanEffeDate()) {
        optionals.set(72);
      }
      if (struct.isSetPartnerLoanDate()) {
        optionals.set(73);
      }
      if (struct.isSetPartnerLoanFile()) {
        optionals.set(74);
      }
      if (struct.isSetPartnerRealRefundDate()) {
        optionals.set(75);
      }
      if (struct.isSetPartnerRefundFile()) {
        optionals.set(76);
      }
      if (struct.isSetPartnerInterests()) {
        optionals.set(77);
      }
      if (struct.isSetRepaymentRepurchaseRemark()) {
        optionals.set(78);
      }
      if (struct.isSetRefundLoanAmount()) {
        optionals.set(79);
      }
      if (struct.isSetRefundXifee()) {
        optionals.set(80);
      }
      if (struct.isSetXiFeeVoucherPath()) {
        optionals.set(81);
      }
      if (struct.isSetRefundDate()) {
        optionals.set(82);
      }
      if (struct.isSetBusinessCategory()) {
        optionals.set(83);
      }
      if (struct.isSetBusinessCategoryStr()) {
        optionals.set(84);
      }
      if (struct.isSetPayAcctNo()) {
        optionals.set(85);
      }
      if (struct.isSetPayAcctName()) {
        optionals.set(86);
      }
      if (struct.isSetPayBankName()) {
        optionals.set(87);
      }
      if (struct.isSetPayBankCode()) {
        optionals.set(88);
      }
      if (struct.isSetPayBankBranch()) {
        optionals.set(89);
      }
      if (struct.isSetPayProvinceCode()) {
        optionals.set(90);
      }
      if (struct.isSetPayCityCode()) {
        optionals.set(91);
      }
      if (struct.isSetAcctId()) {
        optionals.set(92);
      }
      if (struct.isSetConfirmLoanMoney()) {
        optionals.set(93);
      }
      if (struct.isSetConfirmLoanDays()) {
        optionals.set(94);
      }
      if (struct.isSetHouseProvinceCode()) {
        optionals.set(95);
      }
      if (struct.isSetHouseCityCode()) {
        optionals.set(96);
      }
      if (struct.isSetApproveMoney()) {
        optionals.set(97);
      }
      if (struct.isSetProjectSource()) {
        optionals.set(98);
      }
      if (struct.isSetEstateList()) {
        optionals.set(99);
      }
      if (struct.isSetProjectProperty()) {
        optionals.set(100);
      }
      if (struct.isSetPartnerOrderCode()) {
        optionals.set(101);
      }
      if (struct.isSetLoanPeriodLimit()) {
        optionals.set(102);
      }
      if (struct.isSetIsCreditLoan()) {
        optionals.set(103);
      }
      if (struct.isSetPaymentBankPhone()) {
        optionals.set(104);
      }
      if (struct.isSetPaymentBankLineNo()) {
        optionals.set(105);
      }
      if (struct.isSetRefundTotalAmount()) {
        optionals.set(106);
      }
      if (struct.isSetRefundPenalty()) {
        optionals.set(107);
      }
      if (struct.isSetRefundFine()) {
        optionals.set(108);
      }
      if (struct.isSetRefundCompdinte()) {
        optionals.set(109);
      }
      if (struct.isSetPartnerPlatformOrderCode()) {
        optionals.set(110);
      }
      if (struct.isSetProjectForeclosure()) {
        optionals.set(111);
      }
      if (struct.isSetIsPartnerOpenAccount()) {
        optionals.set(112);
      }
      if (struct.isSetPartnerPushAccount()) {
        optionals.set(113);
      }
      if (struct.isSetPartnerGrossRate()) {
        optionals.set(114);
      }
      oprot.writeBitSet(optionals, 115);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeString(struct.loanId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetFileIds()) {
        {
          oprot.writeI32(struct.fileIds.size());
          for (int _iter48 : struct.fileIds)
          {
            oprot.writeI32(_iter48);
          }
        }
      }
      if (struct.isSetRequestFiles()) {
        oprot.writeString(struct.requestFiles);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetBusinessType()) {
        oprot.writeI32(struct.businessType);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetCardNo()) {
        oprot.writeString(struct.cardNo);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetApplyMoney()) {
        oprot.writeDouble(struct.applyMoney);
      }
      if (struct.isSetApplyDate()) {
        oprot.writeI32(struct.applyDate);
      }
      if (struct.isSetLoanDate()) {
        oprot.writeString(struct.loanDate);
      }
      if (struct.isSetPmUserName()) {
        oprot.writeString(struct.pmUserName);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetBusinessTypeStr()) {
        oprot.writeString(struct.businessTypeStr);
      }
      if (struct.isSetPartnerNo()) {
        oprot.writeString(struct.partnerNo);
      }
      if (struct.isSetApprovalComment()) {
        oprot.writeString(struct.approvalComment);
      }
      if (struct.isSetReApplyReason()) {
        oprot.writeString(struct.reApplyReason);
      }
      if (struct.isSetLoanJusticeFiles()) {
        oprot.writeString(struct.loanJusticeFiles);
      }
      if (struct.isSetLoanBlankFiles()) {
        oprot.writeString(struct.loanBlankFiles);
      }
      if (struct.isSetLoanOtherFiles()) {
        oprot.writeString(struct.loanOtherFiles);
      }
      if (struct.isSetConfirmLoanReason()) {
        oprot.writeString(struct.confirmLoanReason);
      }
      if (struct.isSetRepaymentRepurchaseType()) {
        oprot.writeI32(struct.repaymentRepurchaseType);
      }
      if (struct.isSetRepaymentVoucherPath()) {
        oprot.writeString(struct.repaymentVoucherPath);
      }
      if (struct.isSetRepaymentRepurchaseStatus()) {
        oprot.writeString(struct.repaymentRepurchaseStatus);
      }
      if (struct.isSetApplyLoanDate()) {
        oprot.writeString(struct.applyLoanDate);
      }
      if (struct.isSetLoanStatus()) {
        oprot.writeI32(struct.loanStatus);
      }
      if (struct.isSetLoanRemark()) {
        oprot.writeString(struct.loanRemark);
      }
      if (struct.isSetCertType()) {
        oprot.writeString(struct.certType);
      }
      if (struct.isSetPaymentBank()) {
        oprot.writeString(struct.paymentBank);
      }
      if (struct.isSetPaymentBankBranch()) {
        oprot.writeString(struct.paymentBankBranch);
      }
      if (struct.isSetPaymentAcctName()) {
        oprot.writeString(struct.paymentAcctName);
      }
      if (struct.isSetPaymentAcctNo()) {
        oprot.writeString(struct.paymentAcctNo);
      }
      if (struct.isSetPaymentProvinceCode()) {
        oprot.writeString(struct.paymentProvinceCode);
      }
      if (struct.isSetPaymentCityCode()) {
        oprot.writeString(struct.paymentCityCode);
      }
      if (struct.isSetPaymentAccount()) {
        oprot.writeString(struct.paymentAccount);
      }
      if (struct.isSetPaymentName()) {
        oprot.writeString(struct.paymentName);
      }
      if (struct.isSetPmCustomerName()) {
        oprot.writeString(struct.pmCustomerName);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetLiveAddr()) {
        oprot.writeString(struct.liveAddr);
      }
      if (struct.isSetBusinessContacts()) {
        oprot.writeString(struct.businessContacts);
      }
      if (struct.isSetManagers()) {
        oprot.writeString(struct.managers);
      }
      if (struct.isSetOldBankName()) {
        oprot.writeString(struct.oldBankName);
      }
      if (struct.isSetOldLoanMoney()) {
        oprot.writeDouble(struct.oldLoanMoney);
      }
      if (struct.isSetOldLoanPerson()) {
        oprot.writeString(struct.oldLoanPerson);
      }
      if (struct.isSetOldLoanPhone()) {
        oprot.writeString(struct.oldLoanPhone);
      }
      if (struct.isSetNewBankName()) {
        oprot.writeString(struct.newBankName);
      }
      if (struct.isSetNewLoanMoney()) {
        oprot.writeDouble(struct.newLoanMoney);
      }
      if (struct.isSetNewLoanPerson()) {
        oprot.writeString(struct.newLoanPerson);
      }
      if (struct.isSetNewLoanPhone()) {
        oprot.writeString(struct.newLoanPhone);
      }
      if (struct.isSetPaymentType()) {
        oprot.writeI32(struct.paymentType);
      }
      if (struct.isSetAccumulationFundBank()) {
        oprot.writeString(struct.accumulationFundBank);
      }
      if (struct.isSetAccumulationFundMoney()) {
        oprot.writeDouble(struct.accumulationFundMoney);
      }
      if (struct.isSetSuperviseDepartment()) {
        oprot.writeString(struct.superviseDepartment);
      }
      if (struct.isSetFundsMoney()) {
        oprot.writeDouble(struct.fundsMoney);
      }
      if (struct.isSetNotarizationDate()) {
        oprot.writeString(struct.notarizationDate);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetArea()) {
        oprot.writeDouble(struct.area);
      }
      if (struct.isSetCostMoney()) {
        oprot.writeDouble(struct.costMoney);
      }
      if (struct.isSetTranasctionMoney()) {
        oprot.writeDouble(struct.tranasctionMoney);
      }
      if (struct.isSetHousePropertyCard()) {
        oprot.writeString(struct.housePropertyCard);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetBuyerCardNo()) {
        oprot.writeString(struct.buyerCardNo);
      }
      if (struct.isSetBuyerAddress()) {
        oprot.writeString(struct.buyerAddress);
      }
      if (struct.isSetProvinceCode()) {
        oprot.writeString(struct.provinceCode);
      }
      if (struct.isSetCityCode()) {
        oprot.writeString(struct.cityCode);
      }
      if (struct.isSetPublicManList()) {
        {
          oprot.writeI32(struct.publicManList.size());
          for (com.xlkfinance.bms.rpc.customer.CusDTO _iter49 : struct.publicManList)
          {
            _iter49.write(oprot);
          }
        }
      }
      if (struct.isSetTaskHistoryList()) {
        {
          oprot.writeI32(struct.taskHistoryList.size());
          for (com.xlkfinance.bms.rpc.workflow.TaskHistoryDto _iter50 : struct.taskHistoryList)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetLoanEffeDate()) {
        oprot.writeString(struct.loanEffeDate);
      }
      if (struct.isSetPartnerLoanDate()) {
        oprot.writeString(struct.partnerLoanDate);
      }
      if (struct.isSetPartnerLoanFile()) {
        oprot.writeString(struct.partnerLoanFile);
      }
      if (struct.isSetPartnerRealRefundDate()) {
        oprot.writeString(struct.partnerRealRefundDate);
      }
      if (struct.isSetPartnerRefundFile()) {
        oprot.writeString(struct.partnerRefundFile);
      }
      if (struct.isSetPartnerInterests()) {
        oprot.writeDouble(struct.partnerInterests);
      }
      if (struct.isSetRepaymentRepurchaseRemark()) {
        oprot.writeString(struct.repaymentRepurchaseRemark);
      }
      if (struct.isSetRefundLoanAmount()) {
        oprot.writeDouble(struct.refundLoanAmount);
      }
      if (struct.isSetRefundXifee()) {
        oprot.writeDouble(struct.refundXifee);
      }
      if (struct.isSetXiFeeVoucherPath()) {
        oprot.writeString(struct.xiFeeVoucherPath);
      }
      if (struct.isSetRefundDate()) {
        oprot.writeString(struct.refundDate);
      }
      if (struct.isSetBusinessCategory()) {
        oprot.writeI32(struct.businessCategory);
      }
      if (struct.isSetBusinessCategoryStr()) {
        oprot.writeString(struct.businessCategoryStr);
      }
      if (struct.isSetPayAcctNo()) {
        oprot.writeString(struct.payAcctNo);
      }
      if (struct.isSetPayAcctName()) {
        oprot.writeString(struct.payAcctName);
      }
      if (struct.isSetPayBankName()) {
        oprot.writeString(struct.payBankName);
      }
      if (struct.isSetPayBankCode()) {
        oprot.writeString(struct.payBankCode);
      }
      if (struct.isSetPayBankBranch()) {
        oprot.writeString(struct.payBankBranch);
      }
      if (struct.isSetPayProvinceCode()) {
        oprot.writeString(struct.payProvinceCode);
      }
      if (struct.isSetPayCityCode()) {
        oprot.writeString(struct.payCityCode);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetConfirmLoanMoney()) {
        oprot.writeDouble(struct.confirmLoanMoney);
      }
      if (struct.isSetConfirmLoanDays()) {
        oprot.writeI32(struct.confirmLoanDays);
      }
      if (struct.isSetHouseProvinceCode()) {
        oprot.writeString(struct.houseProvinceCode);
      }
      if (struct.isSetHouseCityCode()) {
        oprot.writeString(struct.houseCityCode);
      }
      if (struct.isSetApproveMoney()) {
        oprot.writeDouble(struct.approveMoney);
      }
      if (struct.isSetProjectSource()) {
        oprot.writeI32(struct.projectSource);
      }
      if (struct.isSetEstateList()) {
        {
          oprot.writeI32(struct.estateList.size());
          for (com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _iter51 : struct.estateList)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetProjectProperty()) {
        struct.projectProperty.write(oprot);
      }
      if (struct.isSetPartnerOrderCode()) {
        oprot.writeString(struct.partnerOrderCode);
      }
      if (struct.isSetLoanPeriodLimit()) {
        oprot.writeI32(struct.loanPeriodLimit);
      }
      if (struct.isSetIsCreditLoan()) {
        oprot.writeI32(struct.isCreditLoan);
      }
      if (struct.isSetPaymentBankPhone()) {
        oprot.writeString(struct.paymentBankPhone);
      }
      if (struct.isSetPaymentBankLineNo()) {
        oprot.writeString(struct.paymentBankLineNo);
      }
      if (struct.isSetRefundTotalAmount()) {
        oprot.writeDouble(struct.refundTotalAmount);
      }
      if (struct.isSetRefundPenalty()) {
        oprot.writeDouble(struct.refundPenalty);
      }
      if (struct.isSetRefundFine()) {
        oprot.writeDouble(struct.refundFine);
      }
      if (struct.isSetRefundCompdinte()) {
        oprot.writeDouble(struct.refundCompdinte);
      }
      if (struct.isSetPartnerPlatformOrderCode()) {
        oprot.writeString(struct.partnerPlatformOrderCode);
      }
      if (struct.isSetProjectForeclosure()) {
        struct.projectForeclosure.write(oprot);
      }
      if (struct.isSetIsPartnerOpenAccount()) {
        oprot.writeI32(struct.isPartnerOpenAccount);
      }
      if (struct.isSetPartnerPushAccount()) {
        oprot.writeI32(struct.partnerPushAccount);
      }
      if (struct.isSetPartnerGrossRate()) {
        oprot.writeDouble(struct.partnerGrossRate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProjectPartnerDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(115);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanId = iprot.readString();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(4)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fileIds = new ArrayList<Integer>(_list52.size);
          int _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readI32();
            struct.fileIds.add(_elem53);
          }
        }
        struct.setFileIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.requestFiles = iprot.readString();
        struct.setRequestFilesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.businessType = iprot.readI32();
        struct.setBusinessTypeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cardNo = iprot.readString();
        struct.setCardNoIsSet(true);
      }
      if (incoming.get(12)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(13)) {
        struct.applyMoney = iprot.readDouble();
        struct.setApplyMoneyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.applyDate = iprot.readI32();
        struct.setApplyDateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanDate = iprot.readString();
        struct.setLoanDateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pmUserName = iprot.readString();
        struct.setPmUserNameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.businessTypeStr = iprot.readString();
        struct.setBusinessTypeStrIsSet(true);
      }
      if (incoming.get(19)) {
        struct.partnerNo = iprot.readString();
        struct.setPartnerNoIsSet(true);
      }
      if (incoming.get(20)) {
        struct.approvalComment = iprot.readString();
        struct.setApprovalCommentIsSet(true);
      }
      if (incoming.get(21)) {
        struct.reApplyReason = iprot.readString();
        struct.setReApplyReasonIsSet(true);
      }
      if (incoming.get(22)) {
        struct.loanJusticeFiles = iprot.readString();
        struct.setLoanJusticeFilesIsSet(true);
      }
      if (incoming.get(23)) {
        struct.loanBlankFiles = iprot.readString();
        struct.setLoanBlankFilesIsSet(true);
      }
      if (incoming.get(24)) {
        struct.loanOtherFiles = iprot.readString();
        struct.setLoanOtherFilesIsSet(true);
      }
      if (incoming.get(25)) {
        struct.confirmLoanReason = iprot.readString();
        struct.setConfirmLoanReasonIsSet(true);
      }
      if (incoming.get(26)) {
        struct.repaymentRepurchaseType = iprot.readI32();
        struct.setRepaymentRepurchaseTypeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.repaymentVoucherPath = iprot.readString();
        struct.setRepaymentVoucherPathIsSet(true);
      }
      if (incoming.get(28)) {
        struct.repaymentRepurchaseStatus = iprot.readString();
        struct.setRepaymentRepurchaseStatusIsSet(true);
      }
      if (incoming.get(29)) {
        struct.applyLoanDate = iprot.readString();
        struct.setApplyLoanDateIsSet(true);
      }
      if (incoming.get(30)) {
        struct.loanStatus = iprot.readI32();
        struct.setLoanStatusIsSet(true);
      }
      if (incoming.get(31)) {
        struct.loanRemark = iprot.readString();
        struct.setLoanRemarkIsSet(true);
      }
      if (incoming.get(32)) {
        struct.certType = iprot.readString();
        struct.setCertTypeIsSet(true);
      }
      if (incoming.get(33)) {
        struct.paymentBank = iprot.readString();
        struct.setPaymentBankIsSet(true);
      }
      if (incoming.get(34)) {
        struct.paymentBankBranch = iprot.readString();
        struct.setPaymentBankBranchIsSet(true);
      }
      if (incoming.get(35)) {
        struct.paymentAcctName = iprot.readString();
        struct.setPaymentAcctNameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.paymentAcctNo = iprot.readString();
        struct.setPaymentAcctNoIsSet(true);
      }
      if (incoming.get(37)) {
        struct.paymentProvinceCode = iprot.readString();
        struct.setPaymentProvinceCodeIsSet(true);
      }
      if (incoming.get(38)) {
        struct.paymentCityCode = iprot.readString();
        struct.setPaymentCityCodeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.paymentAccount = iprot.readString();
        struct.setPaymentAccountIsSet(true);
      }
      if (incoming.get(40)) {
        struct.paymentName = iprot.readString();
        struct.setPaymentNameIsSet(true);
      }
      if (incoming.get(41)) {
        struct.pmCustomerName = iprot.readString();
        struct.setPmCustomerNameIsSet(true);
      }
      if (incoming.get(42)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(43)) {
        struct.liveAddr = iprot.readString();
        struct.setLiveAddrIsSet(true);
      }
      if (incoming.get(44)) {
        struct.businessContacts = iprot.readString();
        struct.setBusinessContactsIsSet(true);
      }
      if (incoming.get(45)) {
        struct.managers = iprot.readString();
        struct.setManagersIsSet(true);
      }
      if (incoming.get(46)) {
        struct.oldBankName = iprot.readString();
        struct.setOldBankNameIsSet(true);
      }
      if (incoming.get(47)) {
        struct.oldLoanMoney = iprot.readDouble();
        struct.setOldLoanMoneyIsSet(true);
      }
      if (incoming.get(48)) {
        struct.oldLoanPerson = iprot.readString();
        struct.setOldLoanPersonIsSet(true);
      }
      if (incoming.get(49)) {
        struct.oldLoanPhone = iprot.readString();
        struct.setOldLoanPhoneIsSet(true);
      }
      if (incoming.get(50)) {
        struct.newBankName = iprot.readString();
        struct.setNewBankNameIsSet(true);
      }
      if (incoming.get(51)) {
        struct.newLoanMoney = iprot.readDouble();
        struct.setNewLoanMoneyIsSet(true);
      }
      if (incoming.get(52)) {
        struct.newLoanPerson = iprot.readString();
        struct.setNewLoanPersonIsSet(true);
      }
      if (incoming.get(53)) {
        struct.newLoanPhone = iprot.readString();
        struct.setNewLoanPhoneIsSet(true);
      }
      if (incoming.get(54)) {
        struct.paymentType = iprot.readI32();
        struct.setPaymentTypeIsSet(true);
      }
      if (incoming.get(55)) {
        struct.accumulationFundBank = iprot.readString();
        struct.setAccumulationFundBankIsSet(true);
      }
      if (incoming.get(56)) {
        struct.accumulationFundMoney = iprot.readDouble();
        struct.setAccumulationFundMoneyIsSet(true);
      }
      if (incoming.get(57)) {
        struct.superviseDepartment = iprot.readString();
        struct.setSuperviseDepartmentIsSet(true);
      }
      if (incoming.get(58)) {
        struct.fundsMoney = iprot.readDouble();
        struct.setFundsMoneyIsSet(true);
      }
      if (incoming.get(59)) {
        struct.notarizationDate = iprot.readString();
        struct.setNotarizationDateIsSet(true);
      }
      if (incoming.get(60)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(61)) {
        struct.area = iprot.readDouble();
        struct.setAreaIsSet(true);
      }
      if (incoming.get(62)) {
        struct.costMoney = iprot.readDouble();
        struct.setCostMoneyIsSet(true);
      }
      if (incoming.get(63)) {
        struct.tranasctionMoney = iprot.readDouble();
        struct.setTranasctionMoneyIsSet(true);
      }
      if (incoming.get(64)) {
        struct.housePropertyCard = iprot.readString();
        struct.setHousePropertyCardIsSet(true);
      }
      if (incoming.get(65)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(66)) {
        struct.buyerCardNo = iprot.readString();
        struct.setBuyerCardNoIsSet(true);
      }
      if (incoming.get(67)) {
        struct.buyerAddress = iprot.readString();
        struct.setBuyerAddressIsSet(true);
      }
      if (incoming.get(68)) {
        struct.provinceCode = iprot.readString();
        struct.setProvinceCodeIsSet(true);
      }
      if (incoming.get(69)) {
        struct.cityCode = iprot.readString();
        struct.setCityCodeIsSet(true);
      }
      if (incoming.get(70)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.publicManList = new ArrayList<com.xlkfinance.bms.rpc.customer.CusDTO>(_list55.size);
          com.xlkfinance.bms.rpc.customer.CusDTO _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = new com.xlkfinance.bms.rpc.customer.CusDTO();
            _elem56.read(iprot);
            struct.publicManList.add(_elem56);
          }
        }
        struct.setPublicManListIsSet(true);
      }
      if (incoming.get(71)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskHistoryList = new ArrayList<com.xlkfinance.bms.rpc.workflow.TaskHistoryDto>(_list58.size);
          com.xlkfinance.bms.rpc.workflow.TaskHistoryDto _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new com.xlkfinance.bms.rpc.workflow.TaskHistoryDto();
            _elem59.read(iprot);
            struct.taskHistoryList.add(_elem59);
          }
        }
        struct.setTaskHistoryListIsSet(true);
      }
      if (incoming.get(72)) {
        struct.loanEffeDate = iprot.readString();
        struct.setLoanEffeDateIsSet(true);
      }
      if (incoming.get(73)) {
        struct.partnerLoanDate = iprot.readString();
        struct.setPartnerLoanDateIsSet(true);
      }
      if (incoming.get(74)) {
        struct.partnerLoanFile = iprot.readString();
        struct.setPartnerLoanFileIsSet(true);
      }
      if (incoming.get(75)) {
        struct.partnerRealRefundDate = iprot.readString();
        struct.setPartnerRealRefundDateIsSet(true);
      }
      if (incoming.get(76)) {
        struct.partnerRefundFile = iprot.readString();
        struct.setPartnerRefundFileIsSet(true);
      }
      if (incoming.get(77)) {
        struct.partnerInterests = iprot.readDouble();
        struct.setPartnerInterestsIsSet(true);
      }
      if (incoming.get(78)) {
        struct.repaymentRepurchaseRemark = iprot.readString();
        struct.setRepaymentRepurchaseRemarkIsSet(true);
      }
      if (incoming.get(79)) {
        struct.refundLoanAmount = iprot.readDouble();
        struct.setRefundLoanAmountIsSet(true);
      }
      if (incoming.get(80)) {
        struct.refundXifee = iprot.readDouble();
        struct.setRefundXifeeIsSet(true);
      }
      if (incoming.get(81)) {
        struct.xiFeeVoucherPath = iprot.readString();
        struct.setXiFeeVoucherPathIsSet(true);
      }
      if (incoming.get(82)) {
        struct.refundDate = iprot.readString();
        struct.setRefundDateIsSet(true);
      }
      if (incoming.get(83)) {
        struct.businessCategory = iprot.readI32();
        struct.setBusinessCategoryIsSet(true);
      }
      if (incoming.get(84)) {
        struct.businessCategoryStr = iprot.readString();
        struct.setBusinessCategoryStrIsSet(true);
      }
      if (incoming.get(85)) {
        struct.payAcctNo = iprot.readString();
        struct.setPayAcctNoIsSet(true);
      }
      if (incoming.get(86)) {
        struct.payAcctName = iprot.readString();
        struct.setPayAcctNameIsSet(true);
      }
      if (incoming.get(87)) {
        struct.payBankName = iprot.readString();
        struct.setPayBankNameIsSet(true);
      }
      if (incoming.get(88)) {
        struct.payBankCode = iprot.readString();
        struct.setPayBankCodeIsSet(true);
      }
      if (incoming.get(89)) {
        struct.payBankBranch = iprot.readString();
        struct.setPayBankBranchIsSet(true);
      }
      if (incoming.get(90)) {
        struct.payProvinceCode = iprot.readString();
        struct.setPayProvinceCodeIsSet(true);
      }
      if (incoming.get(91)) {
        struct.payCityCode = iprot.readString();
        struct.setPayCityCodeIsSet(true);
      }
      if (incoming.get(92)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(93)) {
        struct.confirmLoanMoney = iprot.readDouble();
        struct.setConfirmLoanMoneyIsSet(true);
      }
      if (incoming.get(94)) {
        struct.confirmLoanDays = iprot.readI32();
        struct.setConfirmLoanDaysIsSet(true);
      }
      if (incoming.get(95)) {
        struct.houseProvinceCode = iprot.readString();
        struct.setHouseProvinceCodeIsSet(true);
      }
      if (incoming.get(96)) {
        struct.houseCityCode = iprot.readString();
        struct.setHouseCityCodeIsSet(true);
      }
      if (incoming.get(97)) {
        struct.approveMoney = iprot.readDouble();
        struct.setApproveMoneyIsSet(true);
      }
      if (incoming.get(98)) {
        struct.projectSource = iprot.readI32();
        struct.setProjectSourceIsSet(true);
      }
      if (incoming.get(99)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.estateList = new ArrayList<com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate>(_list61.size);
          com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new com.xlkfinance.bms.rpc.beforeloan.BizProjectEstate();
            _elem62.read(iprot);
            struct.estateList.add(_elem62);
          }
        }
        struct.setEstateListIsSet(true);
      }
      if (incoming.get(100)) {
        struct.projectProperty = new com.xlkfinance.bms.rpc.beforeloan.ProjectProperty();
        struct.projectProperty.read(iprot);
        struct.setProjectPropertyIsSet(true);
      }
      if (incoming.get(101)) {
        struct.partnerOrderCode = iprot.readString();
        struct.setPartnerOrderCodeIsSet(true);
      }
      if (incoming.get(102)) {
        struct.loanPeriodLimit = iprot.readI32();
        struct.setLoanPeriodLimitIsSet(true);
      }
      if (incoming.get(103)) {
        struct.isCreditLoan = iprot.readI32();
        struct.setIsCreditLoanIsSet(true);
      }
      if (incoming.get(104)) {
        struct.paymentBankPhone = iprot.readString();
        struct.setPaymentBankPhoneIsSet(true);
      }
      if (incoming.get(105)) {
        struct.paymentBankLineNo = iprot.readString();
        struct.setPaymentBankLineNoIsSet(true);
      }
      if (incoming.get(106)) {
        struct.refundTotalAmount = iprot.readDouble();
        struct.setRefundTotalAmountIsSet(true);
      }
      if (incoming.get(107)) {
        struct.refundPenalty = iprot.readDouble();
        struct.setRefundPenaltyIsSet(true);
      }
      if (incoming.get(108)) {
        struct.refundFine = iprot.readDouble();
        struct.setRefundFineIsSet(true);
      }
      if (incoming.get(109)) {
        struct.refundCompdinte = iprot.readDouble();
        struct.setRefundCompdinteIsSet(true);
      }
      if (incoming.get(110)) {
        struct.partnerPlatformOrderCode = iprot.readString();
        struct.setPartnerPlatformOrderCodeIsSet(true);
      }
      if (incoming.get(111)) {
        struct.projectForeclosure = new com.xlkfinance.bms.rpc.beforeloan.ProjectForeclosure();
        struct.projectForeclosure.read(iprot);
        struct.setProjectForeclosureIsSet(true);
      }
      if (incoming.get(112)) {
        struct.isPartnerOpenAccount = iprot.readI32();
        struct.setIsPartnerOpenAccountIsSet(true);
      }
      if (incoming.get(113)) {
        struct.partnerPushAccount = iprot.readI32();
        struct.setPartnerPushAccountIsSet(true);
      }
      if (incoming.get(114)) {
        struct.partnerGrossRate = iprot.readDouble();
        struct.setPartnerGrossRateIsSet(true);
      }
    }
  }

}


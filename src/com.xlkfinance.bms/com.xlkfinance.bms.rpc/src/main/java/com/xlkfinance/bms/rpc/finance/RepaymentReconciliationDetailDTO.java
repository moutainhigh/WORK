/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class RepaymentReconciliationDetailDTO implements org.apache.thrift.TBase<RepaymentReconciliationDetailDTO, RepaymentReconciliationDetailDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentReconciliationDetailDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentReconciliationDetailDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPAYMENT_RECONCILIATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentReconciliationId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DETAIL_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("detailTypeName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BANK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("bankId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOTAL_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("createUser", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentReconciliationDetailDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentReconciliationDetailDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int repaymentReconciliationId; // required
  public int detailType; // required
  public double reconciliationAmt; // required
  public int status; // required
  public String description; // required
  public String detailTypeName; // required
  public int bankId; // required
  public double totalAmt; // required
  public String createUser; // required
  public String createDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REPAYMENT_RECONCILIATION_ID((short)2, "repaymentReconciliationId"),
    DETAIL_TYPE((short)3, "detailType"),
    RECONCILIATION_AMT((short)4, "reconciliationAmt"),
    STATUS((short)5, "status"),
    DESCRIPTION((short)6, "description"),
    DETAIL_TYPE_NAME((short)7, "detailTypeName"),
    BANK_ID((short)8, "bankId"),
    TOTAL_AMT((short)9, "totalAmt"),
    CREATE_USER((short)10, "createUser"),
    CREATE_DATE((short)11, "createDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REPAYMENT_RECONCILIATION_ID
          return REPAYMENT_RECONCILIATION_ID;
        case 3: // DETAIL_TYPE
          return DETAIL_TYPE;
        case 4: // RECONCILIATION_AMT
          return RECONCILIATION_AMT;
        case 5: // STATUS
          return STATUS;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // DETAIL_TYPE_NAME
          return DETAIL_TYPE_NAME;
        case 8: // BANK_ID
          return BANK_ID;
        case 9: // TOTAL_AMT
          return TOTAL_AMT;
        case 10: // CREATE_USER
          return CREATE_USER;
        case 11: // CREATE_DATE
          return CREATE_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REPAYMENTRECONCILIATIONID_ISSET_ID = 1;
  private static final int __DETAILTYPE_ISSET_ID = 2;
  private static final int __RECONCILIATIONAMT_ISSET_ID = 3;
  private static final int __STATUS_ISSET_ID = 4;
  private static final int __BANKID_ISSET_ID = 5;
  private static final int __TOTALAMT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPAYMENT_RECONCILIATION_ID, new org.apache.thrift.meta_data.FieldMetaData("repaymentReconciliationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DETAIL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("detailType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECONCILIATION_AMT, new org.apache.thrift.meta_data.FieldMetaData("reconciliationAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("detailTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BANK_ID, new org.apache.thrift.meta_data.FieldMetaData("bankId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_AMT, new org.apache.thrift.meta_data.FieldMetaData("totalAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_USER, new org.apache.thrift.meta_data.FieldMetaData("createUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentReconciliationDetailDTO.class, metaDataMap);
  }

  public RepaymentReconciliationDetailDTO() {
  }

  public RepaymentReconciliationDetailDTO(
    int pid,
    int repaymentReconciliationId,
    int detailType,
    double reconciliationAmt,
    int status,
    String description,
    String detailTypeName,
    int bankId,
    double totalAmt,
    String createUser,
    String createDate)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.repaymentReconciliationId = repaymentReconciliationId;
    setRepaymentReconciliationIdIsSet(true);
    this.detailType = detailType;
    setDetailTypeIsSet(true);
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.description = description;
    this.detailTypeName = detailTypeName;
    this.bankId = bankId;
    setBankIdIsSet(true);
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    this.createUser = createUser;
    this.createDate = createDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentReconciliationDetailDTO(RepaymentReconciliationDetailDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.repaymentReconciliationId = other.repaymentReconciliationId;
    this.detailType = other.detailType;
    this.reconciliationAmt = other.reconciliationAmt;
    this.status = other.status;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetDetailTypeName()) {
      this.detailTypeName = other.detailTypeName;
    }
    this.bankId = other.bankId;
    this.totalAmt = other.totalAmt;
    if (other.isSetCreateUser()) {
      this.createUser = other.createUser;
    }
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
  }

  public RepaymentReconciliationDetailDTO deepCopy() {
    return new RepaymentReconciliationDetailDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setRepaymentReconciliationIdIsSet(false);
    this.repaymentReconciliationId = 0;
    setDetailTypeIsSet(false);
    this.detailType = 0;
    setReconciliationAmtIsSet(false);
    this.reconciliationAmt = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    this.description = null;
    this.detailTypeName = null;
    setBankIdIsSet(false);
    this.bankId = 0;
    setTotalAmtIsSet(false);
    this.totalAmt = 0.0;
    this.createUser = null;
    this.createDate = null;
  }

  public int getPid() {
    return this.pid;
  }

  public RepaymentReconciliationDetailDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRepaymentReconciliationId() {
    return this.repaymentReconciliationId;
  }

  public RepaymentReconciliationDetailDTO setRepaymentReconciliationId(int repaymentReconciliationId) {
    this.repaymentReconciliationId = repaymentReconciliationId;
    setRepaymentReconciliationIdIsSet(true);
    return this;
  }

  public void unsetRepaymentReconciliationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTRECONCILIATIONID_ISSET_ID);
  }

  /** Returns true if field repaymentReconciliationId is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentReconciliationId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTRECONCILIATIONID_ISSET_ID);
  }

  public void setRepaymentReconciliationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTRECONCILIATIONID_ISSET_ID, value);
  }

  public int getDetailType() {
    return this.detailType;
  }

  public RepaymentReconciliationDetailDTO setDetailType(int detailType) {
    this.detailType = detailType;
    setDetailTypeIsSet(true);
    return this;
  }

  public void unsetDetailType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  /** Returns true if field detailType is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailType() {
    return EncodingUtils.testBit(__isset_bitfield, __DETAILTYPE_ISSET_ID);
  }

  public void setDetailTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DETAILTYPE_ISSET_ID, value);
  }

  public double getReconciliationAmt() {
    return this.reconciliationAmt;
  }

  public RepaymentReconciliationDetailDTO setReconciliationAmt(double reconciliationAmt) {
    this.reconciliationAmt = reconciliationAmt;
    setReconciliationAmtIsSet(true);
    return this;
  }

  public void unsetReconciliationAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  /** Returns true if field reconciliationAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID);
  }

  public void setReconciliationAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONAMT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public RepaymentReconciliationDetailDTO setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public RepaymentReconciliationDetailDTO setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getDetailTypeName() {
    return this.detailTypeName;
  }

  public RepaymentReconciliationDetailDTO setDetailTypeName(String detailTypeName) {
    this.detailTypeName = detailTypeName;
    return this;
  }

  public void unsetDetailTypeName() {
    this.detailTypeName = null;
  }

  /** Returns true if field detailTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailTypeName() {
    return this.detailTypeName != null;
  }

  public void setDetailTypeNameIsSet(boolean value) {
    if (!value) {
      this.detailTypeName = null;
    }
  }

  public int getBankId() {
    return this.bankId;
  }

  public RepaymentReconciliationDetailDTO setBankId(int bankId) {
    this.bankId = bankId;
    setBankIdIsSet(true);
    return this;
  }

  public void unsetBankId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BANKID_ISSET_ID);
  }

  /** Returns true if field bankId is set (has been assigned a value) and false otherwise */
  public boolean isSetBankId() {
    return EncodingUtils.testBit(__isset_bitfield, __BANKID_ISSET_ID);
  }

  public void setBankIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BANKID_ISSET_ID, value);
  }

  public double getTotalAmt() {
    return this.totalAmt;
  }

  public RepaymentReconciliationDetailDTO setTotalAmt(double totalAmt) {
    this.totalAmt = totalAmt;
    setTotalAmtIsSet(true);
    return this;
  }

  public void unsetTotalAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  /** Returns true if field totalAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMT_ISSET_ID);
  }

  public void setTotalAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMT_ISSET_ID, value);
  }

  public String getCreateUser() {
    return this.createUser;
  }

  public RepaymentReconciliationDetailDTO setCreateUser(String createUser) {
    this.createUser = createUser;
    return this;
  }

  public void unsetCreateUser() {
    this.createUser = null;
  }

  /** Returns true if field createUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateUser() {
    return this.createUser != null;
  }

  public void setCreateUserIsSet(boolean value) {
    if (!value) {
      this.createUser = null;
    }
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public RepaymentReconciliationDetailDTO setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REPAYMENT_RECONCILIATION_ID:
      if (value == null) {
        unsetRepaymentReconciliationId();
      } else {
        setRepaymentReconciliationId((Integer)value);
      }
      break;

    case DETAIL_TYPE:
      if (value == null) {
        unsetDetailType();
      } else {
        setDetailType((Integer)value);
      }
      break;

    case RECONCILIATION_AMT:
      if (value == null) {
        unsetReconciliationAmt();
      } else {
        setReconciliationAmt((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case DETAIL_TYPE_NAME:
      if (value == null) {
        unsetDetailTypeName();
      } else {
        setDetailTypeName((String)value);
      }
      break;

    case BANK_ID:
      if (value == null) {
        unsetBankId();
      } else {
        setBankId((Integer)value);
      }
      break;

    case TOTAL_AMT:
      if (value == null) {
        unsetTotalAmt();
      } else {
        setTotalAmt((Double)value);
      }
      break;

    case CREATE_USER:
      if (value == null) {
        unsetCreateUser();
      } else {
        setCreateUser((String)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REPAYMENT_RECONCILIATION_ID:
      return Integer.valueOf(getRepaymentReconciliationId());

    case DETAIL_TYPE:
      return Integer.valueOf(getDetailType());

    case RECONCILIATION_AMT:
      return Double.valueOf(getReconciliationAmt());

    case STATUS:
      return Integer.valueOf(getStatus());

    case DESCRIPTION:
      return getDescription();

    case DETAIL_TYPE_NAME:
      return getDetailTypeName();

    case BANK_ID:
      return Integer.valueOf(getBankId());

    case TOTAL_AMT:
      return Double.valueOf(getTotalAmt());

    case CREATE_USER:
      return getCreateUser();

    case CREATE_DATE:
      return getCreateDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REPAYMENT_RECONCILIATION_ID:
      return isSetRepaymentReconciliationId();
    case DETAIL_TYPE:
      return isSetDetailType();
    case RECONCILIATION_AMT:
      return isSetReconciliationAmt();
    case STATUS:
      return isSetStatus();
    case DESCRIPTION:
      return isSetDescription();
    case DETAIL_TYPE_NAME:
      return isSetDetailTypeName();
    case BANK_ID:
      return isSetBankId();
    case TOTAL_AMT:
      return isSetTotalAmt();
    case CREATE_USER:
      return isSetCreateUser();
    case CREATE_DATE:
      return isSetCreateDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentReconciliationDetailDTO)
      return this.equals((RepaymentReconciliationDetailDTO)that);
    return false;
  }

  public boolean equals(RepaymentReconciliationDetailDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_repaymentReconciliationId = true;
    boolean that_present_repaymentReconciliationId = true;
    if (this_present_repaymentReconciliationId || that_present_repaymentReconciliationId) {
      if (!(this_present_repaymentReconciliationId && that_present_repaymentReconciliationId))
        return false;
      if (this.repaymentReconciliationId != that.repaymentReconciliationId)
        return false;
    }

    boolean this_present_detailType = true;
    boolean that_present_detailType = true;
    if (this_present_detailType || that_present_detailType) {
      if (!(this_present_detailType && that_present_detailType))
        return false;
      if (this.detailType != that.detailType)
        return false;
    }

    boolean this_present_reconciliationAmt = true;
    boolean that_present_reconciliationAmt = true;
    if (this_present_reconciliationAmt || that_present_reconciliationAmt) {
      if (!(this_present_reconciliationAmt && that_present_reconciliationAmt))
        return false;
      if (this.reconciliationAmt != that.reconciliationAmt)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_detailTypeName = true && this.isSetDetailTypeName();
    boolean that_present_detailTypeName = true && that.isSetDetailTypeName();
    if (this_present_detailTypeName || that_present_detailTypeName) {
      if (!(this_present_detailTypeName && that_present_detailTypeName))
        return false;
      if (!this.detailTypeName.equals(that.detailTypeName))
        return false;
    }

    boolean this_present_bankId = true;
    boolean that_present_bankId = true;
    if (this_present_bankId || that_present_bankId) {
      if (!(this_present_bankId && that_present_bankId))
        return false;
      if (this.bankId != that.bankId)
        return false;
    }

    boolean this_present_totalAmt = true;
    boolean that_present_totalAmt = true;
    if (this_present_totalAmt || that_present_totalAmt) {
      if (!(this_present_totalAmt && that_present_totalAmt))
        return false;
      if (this.totalAmt != that.totalAmt)
        return false;
    }

    boolean this_present_createUser = true && this.isSetCreateUser();
    boolean that_present_createUser = true && that.isSetCreateUser();
    if (this_present_createUser || that_present_createUser) {
      if (!(this_present_createUser && that_present_createUser))
        return false;
      if (!this.createUser.equals(that.createUser))
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_repaymentReconciliationId = true;
    list.add(present_repaymentReconciliationId);
    if (present_repaymentReconciliationId)
      list.add(repaymentReconciliationId);

    boolean present_detailType = true;
    list.add(present_detailType);
    if (present_detailType)
      list.add(detailType);

    boolean present_reconciliationAmt = true;
    list.add(present_reconciliationAmt);
    if (present_reconciliationAmt)
      list.add(reconciliationAmt);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_detailTypeName = true && (isSetDetailTypeName());
    list.add(present_detailTypeName);
    if (present_detailTypeName)
      list.add(detailTypeName);

    boolean present_bankId = true;
    list.add(present_bankId);
    if (present_bankId)
      list.add(bankId);

    boolean present_totalAmt = true;
    list.add(present_totalAmt);
    if (present_totalAmt)
      list.add(totalAmt);

    boolean present_createUser = true && (isSetCreateUser());
    list.add(present_createUser);
    if (present_createUser)
      list.add(createUser);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentReconciliationDetailDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentReconciliationId()).compareTo(other.isSetRepaymentReconciliationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentReconciliationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentReconciliationId, other.repaymentReconciliationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailType()).compareTo(other.isSetDetailType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailType, other.detailType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationAmt()).compareTo(other.isSetReconciliationAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationAmt, other.reconciliationAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailTypeName()).compareTo(other.isSetDetailTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailTypeName, other.detailTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankId()).compareTo(other.isSetBankId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankId, other.bankId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmt()).compareTo(other.isSetTotalAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmt, other.totalAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateUser()).compareTo(other.isSetCreateUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createUser, other.createUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentReconciliationDetailDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentReconciliationId:");
    sb.append(this.repaymentReconciliationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailType:");
    sb.append(this.detailType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationAmt:");
    sb.append(this.reconciliationAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailTypeName:");
    if (this.detailTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.detailTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankId:");
    sb.append(this.bankId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalAmt:");
    sb.append(this.totalAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createUser:");
    if (this.createUser == null) {
      sb.append("null");
    } else {
      sb.append(this.createUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentReconciliationDetailDTOStandardSchemeFactory implements SchemeFactory {
    public RepaymentReconciliationDetailDTOStandardScheme getScheme() {
      return new RepaymentReconciliationDetailDTOStandardScheme();
    }
  }

  private static class RepaymentReconciliationDetailDTOStandardScheme extends StandardScheme<RepaymentReconciliationDetailDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentReconciliationDetailDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPAYMENT_RECONCILIATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.repaymentReconciliationId = iprot.readI32();
              struct.setRepaymentReconciliationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DETAIL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.detailType = iprot.readI32();
              struct.setDetailTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RECONCILIATION_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.reconciliationAmt = iprot.readDouble();
              struct.setReconciliationAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DETAIL_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailTypeName = iprot.readString();
              struct.setDetailTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bankId = iprot.readI32();
              struct.setBankIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOTAL_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmt = iprot.readDouble();
              struct.setTotalAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createUser = iprot.readString();
              struct.setCreateUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentReconciliationDetailDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPAYMENT_RECONCILIATION_ID_FIELD_DESC);
      oprot.writeI32(struct.repaymentReconciliationId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DETAIL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.detailType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONCILIATION_AMT_FIELD_DESC);
      oprot.writeDouble(struct.reconciliationAmt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.detailTypeName != null) {
        oprot.writeFieldBegin(DETAIL_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.detailTypeName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BANK_ID_FIELD_DESC);
      oprot.writeI32(struct.bankId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_AMT_FIELD_DESC);
      oprot.writeDouble(struct.totalAmt);
      oprot.writeFieldEnd();
      if (struct.createUser != null) {
        oprot.writeFieldBegin(CREATE_USER_FIELD_DESC);
        oprot.writeString(struct.createUser);
        oprot.writeFieldEnd();
      }
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentReconciliationDetailDTOTupleSchemeFactory implements SchemeFactory {
    public RepaymentReconciliationDetailDTOTupleScheme getScheme() {
      return new RepaymentReconciliationDetailDTOTupleScheme();
    }
  }

  private static class RepaymentReconciliationDetailDTOTupleScheme extends TupleScheme<RepaymentReconciliationDetailDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentReconciliationDetailDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetRepaymentReconciliationId()) {
        optionals.set(1);
      }
      if (struct.isSetDetailType()) {
        optionals.set(2);
      }
      if (struct.isSetReconciliationAmt()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      if (struct.isSetDetailTypeName()) {
        optionals.set(6);
      }
      if (struct.isSetBankId()) {
        optionals.set(7);
      }
      if (struct.isSetTotalAmt()) {
        optionals.set(8);
      }
      if (struct.isSetCreateUser()) {
        optionals.set(9);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRepaymentReconciliationId()) {
        oprot.writeI32(struct.repaymentReconciliationId);
      }
      if (struct.isSetDetailType()) {
        oprot.writeI32(struct.detailType);
      }
      if (struct.isSetReconciliationAmt()) {
        oprot.writeDouble(struct.reconciliationAmt);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetDetailTypeName()) {
        oprot.writeString(struct.detailTypeName);
      }
      if (struct.isSetBankId()) {
        oprot.writeI32(struct.bankId);
      }
      if (struct.isSetTotalAmt()) {
        oprot.writeDouble(struct.totalAmt);
      }
      if (struct.isSetCreateUser()) {
        oprot.writeString(struct.createUser);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentReconciliationDetailDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.repaymentReconciliationId = iprot.readI32();
        struct.setRepaymentReconciliationIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.detailType = iprot.readI32();
        struct.setDetailTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reconciliationAmt = iprot.readDouble();
        struct.setReconciliationAmtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.detailTypeName = iprot.readString();
        struct.setDetailTypeNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.bankId = iprot.readI32();
        struct.setBankIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.totalAmt = iprot.readDouble();
        struct.setTotalAmtIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createUser = iprot.readString();
        struct.setCreateUserIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.partner;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-14")
public class PartnerApprovalRecord implements org.apache.thrift.TBase<PartnerApprovalRecord, PartnerApprovalRecord._Fields>, java.io.Serializable, Cloneable, Comparable<PartnerApprovalRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PartnerApprovalRecord");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("partnerId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APPROVAL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalStatus", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField APPROVE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("approveMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField APPROVAL_COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalComment", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField APPROVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("approvalTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SUBMIT_APPROVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("submitApprovalTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField RE_APPLY_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reApplyReason", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IS_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("isNotify", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField NOTIFY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyType", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField QUERY_IS_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("queryIsNotify", org.apache.thrift.protocol.TType.I32, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PartnerApprovalRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PartnerApprovalRecordTupleSchemeFactory());
  }

  public int pid; // required
  public int partnerId; // required
  public String loanId; // required
  public int approvalStatus; // required
  public double approveMoney; // required
  public String approvalComment; // required
  public String approvalTime; // required
  public String submitApprovalTime; // required
  public String projectNumber; // required
  public String projectName; // required
  public String reApplyReason; // required
  public int isNotify; // required
  public int notifyType; // required
  public int queryIsNotify; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PARTNER_ID((short)2, "partnerId"),
    LOAN_ID((short)3, "loanId"),
    APPROVAL_STATUS((short)4, "approvalStatus"),
    APPROVE_MONEY((short)5, "approveMoney"),
    APPROVAL_COMMENT((short)6, "approvalComment"),
    APPROVAL_TIME((short)7, "approvalTime"),
    SUBMIT_APPROVAL_TIME((short)8, "submitApprovalTime"),
    PROJECT_NUMBER((short)9, "projectNumber"),
    PROJECT_NAME((short)10, "projectName"),
    RE_APPLY_REASON((short)11, "reApplyReason"),
    IS_NOTIFY((short)12, "isNotify"),
    NOTIFY_TYPE((short)13, "notifyType"),
    QUERY_IS_NOTIFY((short)14, "queryIsNotify");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PARTNER_ID
          return PARTNER_ID;
        case 3: // LOAN_ID
          return LOAN_ID;
        case 4: // APPROVAL_STATUS
          return APPROVAL_STATUS;
        case 5: // APPROVE_MONEY
          return APPROVE_MONEY;
        case 6: // APPROVAL_COMMENT
          return APPROVAL_COMMENT;
        case 7: // APPROVAL_TIME
          return APPROVAL_TIME;
        case 8: // SUBMIT_APPROVAL_TIME
          return SUBMIT_APPROVAL_TIME;
        case 9: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 10: // PROJECT_NAME
          return PROJECT_NAME;
        case 11: // RE_APPLY_REASON
          return RE_APPLY_REASON;
        case 12: // IS_NOTIFY
          return IS_NOTIFY;
        case 13: // NOTIFY_TYPE
          return NOTIFY_TYPE;
        case 14: // QUERY_IS_NOTIFY
          return QUERY_IS_NOTIFY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PARTNERID_ISSET_ID = 1;
  private static final int __APPROVALSTATUS_ISSET_ID = 2;
  private static final int __APPROVEMONEY_ISSET_ID = 3;
  private static final int __ISNOTIFY_ISSET_ID = 4;
  private static final int __NOTIFYTYPE_ISSET_ID = 5;
  private static final int __QUERYISNOTIFY_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PARTNER_ID, new org.apache.thrift.meta_data.FieldMetaData("partnerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("approvalStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APPROVE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("approveMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.APPROVAL_COMMENT, new org.apache.thrift.meta_data.FieldMetaData("approvalComment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPROVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("approvalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBMIT_APPROVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("submitApprovalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RE_APPLY_REASON, new org.apache.thrift.meta_data.FieldMetaData("reApplyReason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("isNotify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTIFY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("notifyType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_IS_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("queryIsNotify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PartnerApprovalRecord.class, metaDataMap);
  }

  public PartnerApprovalRecord() {
  }

  public PartnerApprovalRecord(
    int pid,
    int partnerId,
    String loanId,
    int approvalStatus,
    double approveMoney,
    String approvalComment,
    String approvalTime,
    String submitApprovalTime,
    String projectNumber,
    String projectName,
    String reApplyReason,
    int isNotify,
    int notifyType,
    int queryIsNotify)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    this.loanId = loanId;
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    this.approveMoney = approveMoney;
    setApproveMoneyIsSet(true);
    this.approvalComment = approvalComment;
    this.approvalTime = approvalTime;
    this.submitApprovalTime = submitApprovalTime;
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.reApplyReason = reApplyReason;
    this.isNotify = isNotify;
    setIsNotifyIsSet(true);
    this.notifyType = notifyType;
    setNotifyTypeIsSet(true);
    this.queryIsNotify = queryIsNotify;
    setQueryIsNotifyIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PartnerApprovalRecord(PartnerApprovalRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.partnerId = other.partnerId;
    if (other.isSetLoanId()) {
      this.loanId = other.loanId;
    }
    this.approvalStatus = other.approvalStatus;
    this.approveMoney = other.approveMoney;
    if (other.isSetApprovalComment()) {
      this.approvalComment = other.approvalComment;
    }
    if (other.isSetApprovalTime()) {
      this.approvalTime = other.approvalTime;
    }
    if (other.isSetSubmitApprovalTime()) {
      this.submitApprovalTime = other.submitApprovalTime;
    }
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    if (other.isSetReApplyReason()) {
      this.reApplyReason = other.reApplyReason;
    }
    this.isNotify = other.isNotify;
    this.notifyType = other.notifyType;
    this.queryIsNotify = other.queryIsNotify;
  }

  public PartnerApprovalRecord deepCopy() {
    return new PartnerApprovalRecord(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setPartnerIdIsSet(false);
    this.partnerId = 0;
    this.loanId = null;
    setApprovalStatusIsSet(false);
    this.approvalStatus = 0;
    setApproveMoneyIsSet(false);
    this.approveMoney = 0.0;
    this.approvalComment = null;
    this.approvalTime = null;
    this.submitApprovalTime = null;
    this.projectNumber = null;
    this.projectName = null;
    this.reApplyReason = null;
    setIsNotifyIsSet(false);
    this.isNotify = 0;
    setNotifyTypeIsSet(false);
    this.notifyType = 0;
    setQueryIsNotifyIsSet(false);
    this.queryIsNotify = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public PartnerApprovalRecord setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getPartnerId() {
    return this.partnerId;
  }

  public PartnerApprovalRecord setPartnerId(int partnerId) {
    this.partnerId = partnerId;
    setPartnerIdIsSet(true);
    return this;
  }

  public void unsetPartnerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTNERID_ISSET_ID);
  }

  /** Returns true if field partnerId is set (has been assigned a value) and false otherwise */
  public boolean isSetPartnerId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTNERID_ISSET_ID);
  }

  public void setPartnerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTNERID_ISSET_ID, value);
  }

  public String getLoanId() {
    return this.loanId;
  }

  public PartnerApprovalRecord setLoanId(String loanId) {
    this.loanId = loanId;
    return this;
  }

  public void unsetLoanId() {
    this.loanId = null;
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return this.loanId != null;
  }

  public void setLoanIdIsSet(boolean value) {
    if (!value) {
      this.loanId = null;
    }
  }

  public int getApprovalStatus() {
    return this.approvalStatus;
  }

  public PartnerApprovalRecord setApprovalStatus(int approvalStatus) {
    this.approvalStatus = approvalStatus;
    setApprovalStatusIsSet(true);
    return this;
  }

  public void unsetApprovalStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  /** Returns true if field approvalStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID);
  }

  public void setApprovalStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVALSTATUS_ISSET_ID, value);
  }

  public double getApproveMoney() {
    return this.approveMoney;
  }

  public PartnerApprovalRecord setApproveMoney(double approveMoney) {
    this.approveMoney = approveMoney;
    setApproveMoneyIsSet(true);
    return this;
  }

  public void unsetApproveMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID);
  }

  /** Returns true if field approveMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetApproveMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID);
  }

  public void setApproveMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPROVEMONEY_ISSET_ID, value);
  }

  public String getApprovalComment() {
    return this.approvalComment;
  }

  public PartnerApprovalRecord setApprovalComment(String approvalComment) {
    this.approvalComment = approvalComment;
    return this;
  }

  public void unsetApprovalComment() {
    this.approvalComment = null;
  }

  /** Returns true if field approvalComment is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalComment() {
    return this.approvalComment != null;
  }

  public void setApprovalCommentIsSet(boolean value) {
    if (!value) {
      this.approvalComment = null;
    }
  }

  public String getApprovalTime() {
    return this.approvalTime;
  }

  public PartnerApprovalRecord setApprovalTime(String approvalTime) {
    this.approvalTime = approvalTime;
    return this;
  }

  public void unsetApprovalTime() {
    this.approvalTime = null;
  }

  /** Returns true if field approvalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovalTime() {
    return this.approvalTime != null;
  }

  public void setApprovalTimeIsSet(boolean value) {
    if (!value) {
      this.approvalTime = null;
    }
  }

  public String getSubmitApprovalTime() {
    return this.submitApprovalTime;
  }

  public PartnerApprovalRecord setSubmitApprovalTime(String submitApprovalTime) {
    this.submitApprovalTime = submitApprovalTime;
    return this;
  }

  public void unsetSubmitApprovalTime() {
    this.submitApprovalTime = null;
  }

  /** Returns true if field submitApprovalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSubmitApprovalTime() {
    return this.submitApprovalTime != null;
  }

  public void setSubmitApprovalTimeIsSet(boolean value) {
    if (!value) {
      this.submitApprovalTime = null;
    }
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public PartnerApprovalRecord setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public PartnerApprovalRecord setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public String getReApplyReason() {
    return this.reApplyReason;
  }

  public PartnerApprovalRecord setReApplyReason(String reApplyReason) {
    this.reApplyReason = reApplyReason;
    return this;
  }

  public void unsetReApplyReason() {
    this.reApplyReason = null;
  }

  /** Returns true if field reApplyReason is set (has been assigned a value) and false otherwise */
  public boolean isSetReApplyReason() {
    return this.reApplyReason != null;
  }

  public void setReApplyReasonIsSet(boolean value) {
    if (!value) {
      this.reApplyReason = null;
    }
  }

  public int getIsNotify() {
    return this.isNotify;
  }

  public PartnerApprovalRecord setIsNotify(int isNotify) {
    this.isNotify = isNotify;
    setIsNotifyIsSet(true);
    return this;
  }

  public void unsetIsNotify() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNOTIFY_ISSET_ID);
  }

  /** Returns true if field isNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNotify() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNOTIFY_ISSET_ID);
  }

  public void setIsNotifyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNOTIFY_ISSET_ID, value);
  }

  public int getNotifyType() {
    return this.notifyType;
  }

  public PartnerApprovalRecord setNotifyType(int notifyType) {
    this.notifyType = notifyType;
    setNotifyTypeIsSet(true);
    return this;
  }

  public void unsetNotifyType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID);
  }

  /** Returns true if field notifyType is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyType() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID);
  }

  public void setNotifyTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTIFYTYPE_ISSET_ID, value);
  }

  public int getQueryIsNotify() {
    return this.queryIsNotify;
  }

  public PartnerApprovalRecord setQueryIsNotify(int queryIsNotify) {
    this.queryIsNotify = queryIsNotify;
    setQueryIsNotifyIsSet(true);
    return this;
  }

  public void unsetQueryIsNotify() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYISNOTIFY_ISSET_ID);
  }

  /** Returns true if field queryIsNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryIsNotify() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYISNOTIFY_ISSET_ID);
  }

  public void setQueryIsNotifyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYISNOTIFY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PARTNER_ID:
      if (value == null) {
        unsetPartnerId();
      } else {
        setPartnerId((Integer)value);
      }
      break;

    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((String)value);
      }
      break;

    case APPROVAL_STATUS:
      if (value == null) {
        unsetApprovalStatus();
      } else {
        setApprovalStatus((Integer)value);
      }
      break;

    case APPROVE_MONEY:
      if (value == null) {
        unsetApproveMoney();
      } else {
        setApproveMoney((Double)value);
      }
      break;

    case APPROVAL_COMMENT:
      if (value == null) {
        unsetApprovalComment();
      } else {
        setApprovalComment((String)value);
      }
      break;

    case APPROVAL_TIME:
      if (value == null) {
        unsetApprovalTime();
      } else {
        setApprovalTime((String)value);
      }
      break;

    case SUBMIT_APPROVAL_TIME:
      if (value == null) {
        unsetSubmitApprovalTime();
      } else {
        setSubmitApprovalTime((String)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case RE_APPLY_REASON:
      if (value == null) {
        unsetReApplyReason();
      } else {
        setReApplyReason((String)value);
      }
      break;

    case IS_NOTIFY:
      if (value == null) {
        unsetIsNotify();
      } else {
        setIsNotify((Integer)value);
      }
      break;

    case NOTIFY_TYPE:
      if (value == null) {
        unsetNotifyType();
      } else {
        setNotifyType((Integer)value);
      }
      break;

    case QUERY_IS_NOTIFY:
      if (value == null) {
        unsetQueryIsNotify();
      } else {
        setQueryIsNotify((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PARTNER_ID:
      return Integer.valueOf(getPartnerId());

    case LOAN_ID:
      return getLoanId();

    case APPROVAL_STATUS:
      return Integer.valueOf(getApprovalStatus());

    case APPROVE_MONEY:
      return Double.valueOf(getApproveMoney());

    case APPROVAL_COMMENT:
      return getApprovalComment();

    case APPROVAL_TIME:
      return getApprovalTime();

    case SUBMIT_APPROVAL_TIME:
      return getSubmitApprovalTime();

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case RE_APPLY_REASON:
      return getReApplyReason();

    case IS_NOTIFY:
      return Integer.valueOf(getIsNotify());

    case NOTIFY_TYPE:
      return Integer.valueOf(getNotifyType());

    case QUERY_IS_NOTIFY:
      return Integer.valueOf(getQueryIsNotify());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PARTNER_ID:
      return isSetPartnerId();
    case LOAN_ID:
      return isSetLoanId();
    case APPROVAL_STATUS:
      return isSetApprovalStatus();
    case APPROVE_MONEY:
      return isSetApproveMoney();
    case APPROVAL_COMMENT:
      return isSetApprovalComment();
    case APPROVAL_TIME:
      return isSetApprovalTime();
    case SUBMIT_APPROVAL_TIME:
      return isSetSubmitApprovalTime();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case RE_APPLY_REASON:
      return isSetReApplyReason();
    case IS_NOTIFY:
      return isSetIsNotify();
    case NOTIFY_TYPE:
      return isSetNotifyType();
    case QUERY_IS_NOTIFY:
      return isSetQueryIsNotify();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PartnerApprovalRecord)
      return this.equals((PartnerApprovalRecord)that);
    return false;
  }

  public boolean equals(PartnerApprovalRecord that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_partnerId = true;
    boolean that_present_partnerId = true;
    if (this_present_partnerId || that_present_partnerId) {
      if (!(this_present_partnerId && that_present_partnerId))
        return false;
      if (this.partnerId != that.partnerId)
        return false;
    }

    boolean this_present_loanId = true && this.isSetLoanId();
    boolean that_present_loanId = true && that.isSetLoanId();
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (!this.loanId.equals(that.loanId))
        return false;
    }

    boolean this_present_approvalStatus = true;
    boolean that_present_approvalStatus = true;
    if (this_present_approvalStatus || that_present_approvalStatus) {
      if (!(this_present_approvalStatus && that_present_approvalStatus))
        return false;
      if (this.approvalStatus != that.approvalStatus)
        return false;
    }

    boolean this_present_approveMoney = true;
    boolean that_present_approveMoney = true;
    if (this_present_approveMoney || that_present_approveMoney) {
      if (!(this_present_approveMoney && that_present_approveMoney))
        return false;
      if (this.approveMoney != that.approveMoney)
        return false;
    }

    boolean this_present_approvalComment = true && this.isSetApprovalComment();
    boolean that_present_approvalComment = true && that.isSetApprovalComment();
    if (this_present_approvalComment || that_present_approvalComment) {
      if (!(this_present_approvalComment && that_present_approvalComment))
        return false;
      if (!this.approvalComment.equals(that.approvalComment))
        return false;
    }

    boolean this_present_approvalTime = true && this.isSetApprovalTime();
    boolean that_present_approvalTime = true && that.isSetApprovalTime();
    if (this_present_approvalTime || that_present_approvalTime) {
      if (!(this_present_approvalTime && that_present_approvalTime))
        return false;
      if (!this.approvalTime.equals(that.approvalTime))
        return false;
    }

    boolean this_present_submitApprovalTime = true && this.isSetSubmitApprovalTime();
    boolean that_present_submitApprovalTime = true && that.isSetSubmitApprovalTime();
    if (this_present_submitApprovalTime || that_present_submitApprovalTime) {
      if (!(this_present_submitApprovalTime && that_present_submitApprovalTime))
        return false;
      if (!this.submitApprovalTime.equals(that.submitApprovalTime))
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_reApplyReason = true && this.isSetReApplyReason();
    boolean that_present_reApplyReason = true && that.isSetReApplyReason();
    if (this_present_reApplyReason || that_present_reApplyReason) {
      if (!(this_present_reApplyReason && that_present_reApplyReason))
        return false;
      if (!this.reApplyReason.equals(that.reApplyReason))
        return false;
    }

    boolean this_present_isNotify = true;
    boolean that_present_isNotify = true;
    if (this_present_isNotify || that_present_isNotify) {
      if (!(this_present_isNotify && that_present_isNotify))
        return false;
      if (this.isNotify != that.isNotify)
        return false;
    }

    boolean this_present_notifyType = true;
    boolean that_present_notifyType = true;
    if (this_present_notifyType || that_present_notifyType) {
      if (!(this_present_notifyType && that_present_notifyType))
        return false;
      if (this.notifyType != that.notifyType)
        return false;
    }

    boolean this_present_queryIsNotify = true;
    boolean that_present_queryIsNotify = true;
    if (this_present_queryIsNotify || that_present_queryIsNotify) {
      if (!(this_present_queryIsNotify && that_present_queryIsNotify))
        return false;
      if (this.queryIsNotify != that.queryIsNotify)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_partnerId = true;
    list.add(present_partnerId);
    if (present_partnerId)
      list.add(partnerId);

    boolean present_loanId = true && (isSetLoanId());
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_approvalStatus = true;
    list.add(present_approvalStatus);
    if (present_approvalStatus)
      list.add(approvalStatus);

    boolean present_approveMoney = true;
    list.add(present_approveMoney);
    if (present_approveMoney)
      list.add(approveMoney);

    boolean present_approvalComment = true && (isSetApprovalComment());
    list.add(present_approvalComment);
    if (present_approvalComment)
      list.add(approvalComment);

    boolean present_approvalTime = true && (isSetApprovalTime());
    list.add(present_approvalTime);
    if (present_approvalTime)
      list.add(approvalTime);

    boolean present_submitApprovalTime = true && (isSetSubmitApprovalTime());
    list.add(present_submitApprovalTime);
    if (present_submitApprovalTime)
      list.add(submitApprovalTime);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_reApplyReason = true && (isSetReApplyReason());
    list.add(present_reApplyReason);
    if (present_reApplyReason)
      list.add(reApplyReason);

    boolean present_isNotify = true;
    list.add(present_isNotify);
    if (present_isNotify)
      list.add(isNotify);

    boolean present_notifyType = true;
    list.add(present_notifyType);
    if (present_notifyType)
      list.add(notifyType);

    boolean present_queryIsNotify = true;
    list.add(present_queryIsNotify);
    if (present_queryIsNotify)
      list.add(queryIsNotify);

    return list.hashCode();
  }

  @Override
  public int compareTo(PartnerApprovalRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartnerId()).compareTo(other.isSetPartnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partnerId, other.partnerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalStatus()).compareTo(other.isSetApprovalStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalStatus, other.approvalStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApproveMoney()).compareTo(other.isSetApproveMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApproveMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approveMoney, other.approveMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalComment()).compareTo(other.isSetApprovalComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalComment, other.approvalComment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApprovalTime()).compareTo(other.isSetApprovalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvalTime, other.approvalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubmitApprovalTime()).compareTo(other.isSetSubmitApprovalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubmitApprovalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.submitApprovalTime, other.submitApprovalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReApplyReason()).compareTo(other.isSetReApplyReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReApplyReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reApplyReason, other.reApplyReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNotify()).compareTo(other.isSetIsNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isNotify, other.isNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyType()).compareTo(other.isSetNotifyType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyType, other.notifyType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryIsNotify()).compareTo(other.isSetQueryIsNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryIsNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryIsNotify, other.queryIsNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PartnerApprovalRecord(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partnerId:");
    sb.append(this.partnerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanId:");
    if (this.loanId == null) {
      sb.append("null");
    } else {
      sb.append(this.loanId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalStatus:");
    sb.append(this.approvalStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approveMoney:");
    sb.append(this.approveMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalComment:");
    if (this.approvalComment == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalComment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("approvalTime:");
    if (this.approvalTime == null) {
      sb.append("null");
    } else {
      sb.append(this.approvalTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("submitApprovalTime:");
    if (this.submitApprovalTime == null) {
      sb.append("null");
    } else {
      sb.append(this.submitApprovalTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reApplyReason:");
    if (this.reApplyReason == null) {
      sb.append("null");
    } else {
      sb.append(this.reApplyReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNotify:");
    sb.append(this.isNotify);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notifyType:");
    sb.append(this.notifyType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryIsNotify:");
    sb.append(this.queryIsNotify);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PartnerApprovalRecordStandardSchemeFactory implements SchemeFactory {
    public PartnerApprovalRecordStandardScheme getScheme() {
      return new PartnerApprovalRecordStandardScheme();
    }
  }

  private static class PartnerApprovalRecordStandardScheme extends StandardScheme<PartnerApprovalRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PartnerApprovalRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partnerId = iprot.readI32();
              struct.setPartnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loanId = iprot.readString();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPROVAL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.approvalStatus = iprot.readI32();
              struct.setApprovalStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPROVE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.approveMoney = iprot.readDouble();
              struct.setApproveMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APPROVAL_COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalComment = iprot.readString();
              struct.setApprovalCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // APPROVAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.approvalTime = iprot.readString();
              struct.setApprovalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUBMIT_APPROVAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.submitApprovalTime = iprot.readString();
              struct.setSubmitApprovalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RE_APPLY_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reApplyReason = iprot.readString();
              struct.setReApplyReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IS_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isNotify = iprot.readI32();
              struct.setIsNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOTIFY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notifyType = iprot.readI32();
              struct.setNotifyTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // QUERY_IS_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryIsNotify = iprot.readI32();
              struct.setQueryIsNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PartnerApprovalRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTNER_ID_FIELD_DESC);
      oprot.writeI32(struct.partnerId);
      oprot.writeFieldEnd();
      if (struct.loanId != null) {
        oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
        oprot.writeString(struct.loanId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPROVAL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.approvalStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPROVE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.approveMoney);
      oprot.writeFieldEnd();
      if (struct.approvalComment != null) {
        oprot.writeFieldBegin(APPROVAL_COMMENT_FIELD_DESC);
        oprot.writeString(struct.approvalComment);
        oprot.writeFieldEnd();
      }
      if (struct.approvalTime != null) {
        oprot.writeFieldBegin(APPROVAL_TIME_FIELD_DESC);
        oprot.writeString(struct.approvalTime);
        oprot.writeFieldEnd();
      }
      if (struct.submitApprovalTime != null) {
        oprot.writeFieldBegin(SUBMIT_APPROVAL_TIME_FIELD_DESC);
        oprot.writeString(struct.submitApprovalTime);
        oprot.writeFieldEnd();
      }
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      if (struct.reApplyReason != null) {
        oprot.writeFieldBegin(RE_APPLY_REASON_FIELD_DESC);
        oprot.writeString(struct.reApplyReason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_NOTIFY_FIELD_DESC);
      oprot.writeI32(struct.isNotify);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFY_TYPE_FIELD_DESC);
      oprot.writeI32(struct.notifyType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUERY_IS_NOTIFY_FIELD_DESC);
      oprot.writeI32(struct.queryIsNotify);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PartnerApprovalRecordTupleSchemeFactory implements SchemeFactory {
    public PartnerApprovalRecordTupleScheme getScheme() {
      return new PartnerApprovalRecordTupleScheme();
    }
  }

  private static class PartnerApprovalRecordTupleScheme extends TupleScheme<PartnerApprovalRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PartnerApprovalRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetPartnerId()) {
        optionals.set(1);
      }
      if (struct.isSetLoanId()) {
        optionals.set(2);
      }
      if (struct.isSetApprovalStatus()) {
        optionals.set(3);
      }
      if (struct.isSetApproveMoney()) {
        optionals.set(4);
      }
      if (struct.isSetApprovalComment()) {
        optionals.set(5);
      }
      if (struct.isSetApprovalTime()) {
        optionals.set(6);
      }
      if (struct.isSetSubmitApprovalTime()) {
        optionals.set(7);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(8);
      }
      if (struct.isSetProjectName()) {
        optionals.set(9);
      }
      if (struct.isSetReApplyReason()) {
        optionals.set(10);
      }
      if (struct.isSetIsNotify()) {
        optionals.set(11);
      }
      if (struct.isSetNotifyType()) {
        optionals.set(12);
      }
      if (struct.isSetQueryIsNotify()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetPartnerId()) {
        oprot.writeI32(struct.partnerId);
      }
      if (struct.isSetLoanId()) {
        oprot.writeString(struct.loanId);
      }
      if (struct.isSetApprovalStatus()) {
        oprot.writeI32(struct.approvalStatus);
      }
      if (struct.isSetApproveMoney()) {
        oprot.writeDouble(struct.approveMoney);
      }
      if (struct.isSetApprovalComment()) {
        oprot.writeString(struct.approvalComment);
      }
      if (struct.isSetApprovalTime()) {
        oprot.writeString(struct.approvalTime);
      }
      if (struct.isSetSubmitApprovalTime()) {
        oprot.writeString(struct.submitApprovalTime);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetReApplyReason()) {
        oprot.writeString(struct.reApplyReason);
      }
      if (struct.isSetIsNotify()) {
        oprot.writeI32(struct.isNotify);
      }
      if (struct.isSetNotifyType()) {
        oprot.writeI32(struct.notifyType);
      }
      if (struct.isSetQueryIsNotify()) {
        oprot.writeI32(struct.queryIsNotify);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PartnerApprovalRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.partnerId = iprot.readI32();
        struct.setPartnerIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanId = iprot.readString();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.approvalStatus = iprot.readI32();
        struct.setApprovalStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.approveMoney = iprot.readDouble();
        struct.setApproveMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.approvalComment = iprot.readString();
        struct.setApprovalCommentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.approvalTime = iprot.readString();
        struct.setApprovalTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.submitApprovalTime = iprot.readString();
        struct.setSubmitApprovalTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(9)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reApplyReason = iprot.readString();
        struct.setReApplyReasonIsSet(true);
      }
      if (incoming.get(11)) {
        struct.isNotify = iprot.readI32();
        struct.setIsNotifyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.notifyType = iprot.readI32();
        struct.setNotifyTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.queryIsNotify = iprot.readI32();
        struct.setQueryIsNotifyIsSet(true);
      }
    }
  }

}


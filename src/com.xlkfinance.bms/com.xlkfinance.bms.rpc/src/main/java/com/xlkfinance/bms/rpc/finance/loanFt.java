/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class loanFt implements org.apache.thrift.TBase<loanFt, loanFt._Fields>, java.io.Serializable, Cloneable, Comparable<loanFt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loanFt");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TENDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tenderType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FT_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("ftAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField FT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ftDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FT_BANK_ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftBankAcctId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new loanFtStandardSchemeFactory());
    schemes.put(TupleScheme.class, new loanFtTupleSchemeFactory());
  }

  public int pid; // required
  public int refId; // required
  public String ftType; // required
  public String tenderType; // required
  public double ftAmt; // required
  public String ftDate; // required
  public int ftBankAcctId; // required
  public int ftUserId; // required
  public int status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REF_ID((short)2, "refId"),
    FT_TYPE((short)3, "ftType"),
    TENDER_TYPE((short)4, "tenderType"),
    FT_AMT((short)5, "ftAmt"),
    FT_DATE((short)6, "ftDate"),
    FT_BANK_ACCT_ID((short)7, "ftBankAcctId"),
    FT_USER_ID((short)8, "ftUserId"),
    STATUS((short)9, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REF_ID
          return REF_ID;
        case 3: // FT_TYPE
          return FT_TYPE;
        case 4: // TENDER_TYPE
          return TENDER_TYPE;
        case 5: // FT_AMT
          return FT_AMT;
        case 6: // FT_DATE
          return FT_DATE;
        case 7: // FT_BANK_ACCT_ID
          return FT_BANK_ACCT_ID;
        case 8: // FT_USER_ID
          return FT_USER_ID;
        case 9: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REFID_ISSET_ID = 1;
  private static final int __FTAMT_ISSET_ID = 2;
  private static final int __FTBANKACCTID_ISSET_ID = 3;
  private static final int __FTUSERID_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ftType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tenderType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_AMT, new org.apache.thrift.meta_data.FieldMetaData("ftAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FT_DATE, new org.apache.thrift.meta_data.FieldMetaData("ftDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_BANK_ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("ftBankAcctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("ftUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loanFt.class, metaDataMap);
  }

  public loanFt() {
  }

  public loanFt(
    int pid,
    int refId,
    String ftType,
    String tenderType,
    double ftAmt,
    String ftDate,
    int ftBankAcctId,
    int ftUserId,
    int status)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.ftType = ftType;
    this.tenderType = tenderType;
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    this.ftDate = ftDate;
    this.ftBankAcctId = ftBankAcctId;
    setFtBankAcctIdIsSet(true);
    this.ftUserId = ftUserId;
    setFtUserIdIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public loanFt(loanFt other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.refId = other.refId;
    if (other.isSetFtType()) {
      this.ftType = other.ftType;
    }
    if (other.isSetTenderType()) {
      this.tenderType = other.tenderType;
    }
    this.ftAmt = other.ftAmt;
    if (other.isSetFtDate()) {
      this.ftDate = other.ftDate;
    }
    this.ftBankAcctId = other.ftBankAcctId;
    this.ftUserId = other.ftUserId;
    this.status = other.status;
  }

  public loanFt deepCopy() {
    return new loanFt(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    this.ftType = null;
    this.tenderType = null;
    setFtAmtIsSet(false);
    this.ftAmt = 0.0;
    this.ftDate = null;
    setFtBankAcctIdIsSet(false);
    this.ftBankAcctId = 0;
    setFtUserIdIsSet(false);
    this.ftUserId = 0;
    setStatusIsSet(false);
    this.status = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public loanFt setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public loanFt setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public String getFtType() {
    return this.ftType;
  }

  public loanFt setFtType(String ftType) {
    this.ftType = ftType;
    return this;
  }

  public void unsetFtType() {
    this.ftType = null;
  }

  /** Returns true if field ftType is set (has been assigned a value) and false otherwise */
  public boolean isSetFtType() {
    return this.ftType != null;
  }

  public void setFtTypeIsSet(boolean value) {
    if (!value) {
      this.ftType = null;
    }
  }

  public String getTenderType() {
    return this.tenderType;
  }

  public loanFt setTenderType(String tenderType) {
    this.tenderType = tenderType;
    return this;
  }

  public void unsetTenderType() {
    this.tenderType = null;
  }

  /** Returns true if field tenderType is set (has been assigned a value) and false otherwise */
  public boolean isSetTenderType() {
    return this.tenderType != null;
  }

  public void setTenderTypeIsSet(boolean value) {
    if (!value) {
      this.tenderType = null;
    }
  }

  public double getFtAmt() {
    return this.ftAmt;
  }

  public loanFt setFtAmt(double ftAmt) {
    this.ftAmt = ftAmt;
    setFtAmtIsSet(true);
    return this;
  }

  public void unsetFtAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  /** Returns true if field ftAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetFtAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __FTAMT_ISSET_ID);
  }

  public void setFtAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTAMT_ISSET_ID, value);
  }

  public String getFtDate() {
    return this.ftDate;
  }

  public loanFt setFtDate(String ftDate) {
    this.ftDate = ftDate;
    return this;
  }

  public void unsetFtDate() {
    this.ftDate = null;
  }

  /** Returns true if field ftDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFtDate() {
    return this.ftDate != null;
  }

  public void setFtDateIsSet(boolean value) {
    if (!value) {
      this.ftDate = null;
    }
  }

  public int getFtBankAcctId() {
    return this.ftBankAcctId;
  }

  public loanFt setFtBankAcctId(int ftBankAcctId) {
    this.ftBankAcctId = ftBankAcctId;
    setFtBankAcctIdIsSet(true);
    return this;
  }

  public void unsetFtBankAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTBANKACCTID_ISSET_ID);
  }

  /** Returns true if field ftBankAcctId is set (has been assigned a value) and false otherwise */
  public boolean isSetFtBankAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __FTBANKACCTID_ISSET_ID);
  }

  public void setFtBankAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTBANKACCTID_ISSET_ID, value);
  }

  public int getFtUserId() {
    return this.ftUserId;
  }

  public loanFt setFtUserId(int ftUserId) {
    this.ftUserId = ftUserId;
    setFtUserIdIsSet(true);
    return this;
  }

  public void unsetFtUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FTUSERID_ISSET_ID);
  }

  /** Returns true if field ftUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetFtUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __FTUSERID_ISSET_ID);
  }

  public void setFtUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FTUSERID_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public loanFt setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFtType();
      } else {
        setFtType((String)value);
      }
      break;

    case TENDER_TYPE:
      if (value == null) {
        unsetTenderType();
      } else {
        setTenderType((String)value);
      }
      break;

    case FT_AMT:
      if (value == null) {
        unsetFtAmt();
      } else {
        setFtAmt((Double)value);
      }
      break;

    case FT_DATE:
      if (value == null) {
        unsetFtDate();
      } else {
        setFtDate((String)value);
      }
      break;

    case FT_BANK_ACCT_ID:
      if (value == null) {
        unsetFtBankAcctId();
      } else {
        setFtBankAcctId((Integer)value);
      }
      break;

    case FT_USER_ID:
      if (value == null) {
        unsetFtUserId();
      } else {
        setFtUserId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case FT_TYPE:
      return getFtType();

    case TENDER_TYPE:
      return getTenderType();

    case FT_AMT:
      return Double.valueOf(getFtAmt());

    case FT_DATE:
      return getFtDate();

    case FT_BANK_ACCT_ID:
      return Integer.valueOf(getFtBankAcctId());

    case FT_USER_ID:
      return Integer.valueOf(getFtUserId());

    case STATUS:
      return Integer.valueOf(getStatus());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REF_ID:
      return isSetRefId();
    case FT_TYPE:
      return isSetFtType();
    case TENDER_TYPE:
      return isSetTenderType();
    case FT_AMT:
      return isSetFtAmt();
    case FT_DATE:
      return isSetFtDate();
    case FT_BANK_ACCT_ID:
      return isSetFtBankAcctId();
    case FT_USER_ID:
      return isSetFtUserId();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof loanFt)
      return this.equals((loanFt)that);
    return false;
  }

  public boolean equals(loanFt that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_ftType = true && this.isSetFtType();
    boolean that_present_ftType = true && that.isSetFtType();
    if (this_present_ftType || that_present_ftType) {
      if (!(this_present_ftType && that_present_ftType))
        return false;
      if (!this.ftType.equals(that.ftType))
        return false;
    }

    boolean this_present_tenderType = true && this.isSetTenderType();
    boolean that_present_tenderType = true && that.isSetTenderType();
    if (this_present_tenderType || that_present_tenderType) {
      if (!(this_present_tenderType && that_present_tenderType))
        return false;
      if (!this.tenderType.equals(that.tenderType))
        return false;
    }

    boolean this_present_ftAmt = true;
    boolean that_present_ftAmt = true;
    if (this_present_ftAmt || that_present_ftAmt) {
      if (!(this_present_ftAmt && that_present_ftAmt))
        return false;
      if (this.ftAmt != that.ftAmt)
        return false;
    }

    boolean this_present_ftDate = true && this.isSetFtDate();
    boolean that_present_ftDate = true && that.isSetFtDate();
    if (this_present_ftDate || that_present_ftDate) {
      if (!(this_present_ftDate && that_present_ftDate))
        return false;
      if (!this.ftDate.equals(that.ftDate))
        return false;
    }

    boolean this_present_ftBankAcctId = true;
    boolean that_present_ftBankAcctId = true;
    if (this_present_ftBankAcctId || that_present_ftBankAcctId) {
      if (!(this_present_ftBankAcctId && that_present_ftBankAcctId))
        return false;
      if (this.ftBankAcctId != that.ftBankAcctId)
        return false;
    }

    boolean this_present_ftUserId = true;
    boolean that_present_ftUserId = true;
    if (this_present_ftUserId || that_present_ftUserId) {
      if (!(this_present_ftUserId && that_present_ftUserId))
        return false;
      if (this.ftUserId != that.ftUserId)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_ftType = true && (isSetFtType());
    list.add(present_ftType);
    if (present_ftType)
      list.add(ftType);

    boolean present_tenderType = true && (isSetTenderType());
    list.add(present_tenderType);
    if (present_tenderType)
      list.add(tenderType);

    boolean present_ftAmt = true;
    list.add(present_ftAmt);
    if (present_ftAmt)
      list.add(ftAmt);

    boolean present_ftDate = true && (isSetFtDate());
    list.add(present_ftDate);
    if (present_ftDate)
      list.add(ftDate);

    boolean present_ftBankAcctId = true;
    list.add(present_ftBankAcctId);
    if (present_ftBankAcctId)
      list.add(ftBankAcctId);

    boolean present_ftUserId = true;
    list.add(present_ftUserId);
    if (present_ftUserId)
      list.add(ftUserId);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(loanFt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtType()).compareTo(other.isSetFtType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftType, other.ftType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTenderType()).compareTo(other.isSetTenderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenderType, other.tenderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtAmt()).compareTo(other.isSetFtAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftAmt, other.ftAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtDate()).compareTo(other.isSetFtDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftDate, other.ftDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtBankAcctId()).compareTo(other.isSetFtBankAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtBankAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftBankAcctId, other.ftBankAcctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFtUserId()).compareTo(other.isSetFtUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftUserId, other.ftUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("loanFt(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftType:");
    if (this.ftType == null) {
      sb.append("null");
    } else {
      sb.append(this.ftType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenderType:");
    if (this.tenderType == null) {
      sb.append("null");
    } else {
      sb.append(this.tenderType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftAmt:");
    sb.append(this.ftAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftDate:");
    if (this.ftDate == null) {
      sb.append("null");
    } else {
      sb.append(this.ftDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftBankAcctId:");
    sb.append(this.ftBankAcctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftUserId:");
    sb.append(this.ftUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class loanFtStandardSchemeFactory implements SchemeFactory {
    public loanFtStandardScheme getScheme() {
      return new loanFtStandardScheme();
    }
  }

  private static class loanFtStandardScheme extends StandardScheme<loanFt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, loanFt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftType = iprot.readString();
              struct.setFtTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TENDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenderType = iprot.readString();
              struct.setTenderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FT_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.ftAmt = iprot.readDouble();
              struct.setFtAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ftDate = iprot.readString();
              struct.setFtDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FT_BANK_ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftBankAcctId = iprot.readI32();
              struct.setFtBankAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftUserId = iprot.readI32();
              struct.setFtUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, loanFt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      if (struct.ftType != null) {
        oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
        oprot.writeString(struct.ftType);
        oprot.writeFieldEnd();
      }
      if (struct.tenderType != null) {
        oprot.writeFieldBegin(TENDER_TYPE_FIELD_DESC);
        oprot.writeString(struct.tenderType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_AMT_FIELD_DESC);
      oprot.writeDouble(struct.ftAmt);
      oprot.writeFieldEnd();
      if (struct.ftDate != null) {
        oprot.writeFieldBegin(FT_DATE_FIELD_DESC);
        oprot.writeString(struct.ftDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_BANK_ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.ftBankAcctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.ftUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class loanFtTupleSchemeFactory implements SchemeFactory {
    public loanFtTupleScheme getScheme() {
      return new loanFtTupleScheme();
    }
  }

  private static class loanFtTupleScheme extends TupleScheme<loanFt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, loanFt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetRefId()) {
        optionals.set(1);
      }
      if (struct.isSetFtType()) {
        optionals.set(2);
      }
      if (struct.isSetTenderType()) {
        optionals.set(3);
      }
      if (struct.isSetFtAmt()) {
        optionals.set(4);
      }
      if (struct.isSetFtDate()) {
        optionals.set(5);
      }
      if (struct.isSetFtBankAcctId()) {
        optionals.set(6);
      }
      if (struct.isSetFtUserId()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetFtType()) {
        oprot.writeString(struct.ftType);
      }
      if (struct.isSetTenderType()) {
        oprot.writeString(struct.tenderType);
      }
      if (struct.isSetFtAmt()) {
        oprot.writeDouble(struct.ftAmt);
      }
      if (struct.isSetFtDate()) {
        oprot.writeString(struct.ftDate);
      }
      if (struct.isSetFtBankAcctId()) {
        oprot.writeI32(struct.ftBankAcctId);
      }
      if (struct.isSetFtUserId()) {
        oprot.writeI32(struct.ftUserId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, loanFt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ftType = iprot.readString();
        struct.setFtTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tenderType = iprot.readString();
        struct.setTenderTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ftAmt = iprot.readDouble();
        struct.setFtAmtIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ftDate = iprot.readString();
        struct.setFtDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ftBankAcctId = iprot.readI32();
        struct.setFtBankAcctIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ftUserId = iprot.readI32();
        struct.setFtUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class ApplyFinanceHandleDTO implements org.apache.thrift.TBase<ApplyFinanceHandleDTO, ApplyFinanceHandleDTO._Fields>, java.io.Serializable, Cloneable, Comparable<ApplyFinanceHandleDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplyFinanceHandleDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FINANCE_HANDLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("financeHandleId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REC_PRO_FIELD_DESC = new org.apache.thrift.protocol.TField("recPro", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REC_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("recMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccount", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REC_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("recDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("resource", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)13);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("poundage", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField BROKERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerage", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("interest", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField REC_PRO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("recProList", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField RESOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceStr", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField RESOURCE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField RESOURCE2_FIELD_DESC = new org.apache.thrift.protocol.TField("resource2", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField RESOURCE_STR2_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceStr2", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField RESOURCE_MONEY2_FIELD_DESC = new org.apache.thrift.protocol.TField("resourceMoney2", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField APPLY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("applyStatus", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField FUND_MANAGER_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("fundManagerRemark", org.apache.thrift.protocol.TType.STRING, (short)29);
  private static final org.apache.thrift.protocol.TField FINANCE_DIRECTOR_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("financeDirectorRemark", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField FEE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField PROJECT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectType", org.apache.thrift.protocol.TType.I32, (short)32);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplyFinanceHandleDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplyFinanceHandleDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int financeHandleId; // required
  public int recPro; // required
  public double recMoney; // required
  public String recAccount; // required
  public String recDate; // required
  public String resource; // required
  public String operator; // required
  public String remark; // required
  public int createrId; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public double poundage; // required
  public double brokerage; // required
  public double interest; // required
  public int projectId; // required
  public List<Integer> recProList; // required
  public double extensionFee; // required
  public String updateDate; // required
  public String resourceStr; // required
  public double resourceMoney; // required
  public String resource2; // required
  public String resourceStr2; // required
  public double resourceMoney2; // required
  public int applyStatus; // required
  public String fundManagerRemark; // required
  public String financeDirectorRemark; // required
  public double feeRate; // required
  public int projectType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    FINANCE_HANDLE_ID((short)2, "financeHandleId"),
    REC_PRO((short)5, "recPro"),
    REC_MONEY((short)6, "recMoney"),
    REC_ACCOUNT((short)7, "recAccount"),
    REC_DATE((short)8, "recDate"),
    RESOURCE((short)9, "resource"),
    OPERATOR((short)10, "operator"),
    REMARK((short)11, "remark"),
    CREATER_ID((short)12, "createrId"),
    USER_IDS((short)13, "userIds"),
    PAGE((short)14, "page"),
    ROWS((short)15, "rows"),
    POUNDAGE((short)16, "poundage"),
    BROKERAGE((short)17, "brokerage"),
    INTEREST((short)18, "interest"),
    PROJECT_ID((short)19, "projectId"),
    REC_PRO_LIST((short)20, "recProList"),
    EXTENSION_FEE((short)21, "extensionFee"),
    UPDATE_DATE((short)22, "updateDate"),
    RESOURCE_STR((short)23, "resourceStr"),
    RESOURCE_MONEY((short)24, "resourceMoney"),
    RESOURCE2((short)25, "resource2"),
    RESOURCE_STR2((short)26, "resourceStr2"),
    RESOURCE_MONEY2((short)27, "resourceMoney2"),
    APPLY_STATUS((short)28, "applyStatus"),
    FUND_MANAGER_REMARK((short)29, "fundManagerRemark"),
    FINANCE_DIRECTOR_REMARK((short)30, "financeDirectorRemark"),
    FEE_RATE((short)31, "feeRate"),
    PROJECT_TYPE((short)32, "projectType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // FINANCE_HANDLE_ID
          return FINANCE_HANDLE_ID;
        case 5: // REC_PRO
          return REC_PRO;
        case 6: // REC_MONEY
          return REC_MONEY;
        case 7: // REC_ACCOUNT
          return REC_ACCOUNT;
        case 8: // REC_DATE
          return REC_DATE;
        case 9: // RESOURCE
          return RESOURCE;
        case 10: // OPERATOR
          return OPERATOR;
        case 11: // REMARK
          return REMARK;
        case 12: // CREATER_ID
          return CREATER_ID;
        case 13: // USER_IDS
          return USER_IDS;
        case 14: // PAGE
          return PAGE;
        case 15: // ROWS
          return ROWS;
        case 16: // POUNDAGE
          return POUNDAGE;
        case 17: // BROKERAGE
          return BROKERAGE;
        case 18: // INTEREST
          return INTEREST;
        case 19: // PROJECT_ID
          return PROJECT_ID;
        case 20: // REC_PRO_LIST
          return REC_PRO_LIST;
        case 21: // EXTENSION_FEE
          return EXTENSION_FEE;
        case 22: // UPDATE_DATE
          return UPDATE_DATE;
        case 23: // RESOURCE_STR
          return RESOURCE_STR;
        case 24: // RESOURCE_MONEY
          return RESOURCE_MONEY;
        case 25: // RESOURCE2
          return RESOURCE2;
        case 26: // RESOURCE_STR2
          return RESOURCE_STR2;
        case 27: // RESOURCE_MONEY2
          return RESOURCE_MONEY2;
        case 28: // APPLY_STATUS
          return APPLY_STATUS;
        case 29: // FUND_MANAGER_REMARK
          return FUND_MANAGER_REMARK;
        case 30: // FINANCE_DIRECTOR_REMARK
          return FINANCE_DIRECTOR_REMARK;
        case 31: // FEE_RATE
          return FEE_RATE;
        case 32: // PROJECT_TYPE
          return PROJECT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __FINANCEHANDLEID_ISSET_ID = 1;
  private static final int __RECPRO_ISSET_ID = 2;
  private static final int __RECMONEY_ISSET_ID = 3;
  private static final int __CREATERID_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __POUNDAGE_ISSET_ID = 7;
  private static final int __BROKERAGE_ISSET_ID = 8;
  private static final int __INTEREST_ISSET_ID = 9;
  private static final int __PROJECTID_ISSET_ID = 10;
  private static final int __EXTENSIONFEE_ISSET_ID = 11;
  private static final int __RESOURCEMONEY_ISSET_ID = 12;
  private static final int __RESOURCEMONEY2_ISSET_ID = 13;
  private static final int __APPLYSTATUS_ISSET_ID = 14;
  private static final int __FEERATE_ISSET_ID = 15;
  private static final int __PROJECTTYPE_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FINANCE_HANDLE_ID, new org.apache.thrift.meta_data.FieldMetaData("financeHandleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_PRO, new org.apache.thrift.meta_data.FieldMetaData("recPro", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_MONEY, new org.apache.thrift.meta_data.FieldMetaData("recMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REC_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("recAccount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_DATE, new org.apache.thrift.meta_data.FieldMetaData("recDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("resource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("poundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BROKERAGE, new org.apache.thrift.meta_data.FieldMetaData("brokerage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INTEREST, new org.apache.thrift.meta_data.FieldMetaData("interest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_PRO_LIST, new org.apache.thrift.meta_data.FieldMetaData("recProList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("resourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("resourceMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RESOURCE2, new org.apache.thrift.meta_data.FieldMetaData("resource2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_STR2, new org.apache.thrift.meta_data.FieldMetaData("resourceStr2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOURCE_MONEY2, new org.apache.thrift.meta_data.FieldMetaData("resourceMoney2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.APPLY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("applyStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FUND_MANAGER_REMARK, new org.apache.thrift.meta_data.FieldMetaData("fundManagerRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FINANCE_DIRECTOR_REMARK, new org.apache.thrift.meta_data.FieldMetaData("financeDirectorRemark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEE_RATE, new org.apache.thrift.meta_data.FieldMetaData("feeRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PROJECT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("projectType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplyFinanceHandleDTO.class, metaDataMap);
  }

  public ApplyFinanceHandleDTO() {
    this.page = 1;

    this.rows = 1000;

  }

  public ApplyFinanceHandleDTO(
    int pid,
    int financeHandleId,
    int recPro,
    double recMoney,
    String recAccount,
    String recDate,
    String resource,
    String operator,
    String remark,
    int createrId,
    List<Integer> userIds,
    int page,
    int rows,
    double poundage,
    double brokerage,
    double interest,
    int projectId,
    List<Integer> recProList,
    double extensionFee,
    String updateDate,
    String resourceStr,
    double resourceMoney,
    String resource2,
    String resourceStr2,
    double resourceMoney2,
    int applyStatus,
    String fundManagerRemark,
    String financeDirectorRemark,
    double feeRate,
    int projectType)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.financeHandleId = financeHandleId;
    setFinanceHandleIdIsSet(true);
    this.recPro = recPro;
    setRecProIsSet(true);
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    this.recAccount = recAccount;
    this.recDate = recDate;
    this.resource = resource;
    this.operator = operator;
    this.remark = remark;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.poundage = poundage;
    setPoundageIsSet(true);
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    this.interest = interest;
    setInterestIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.recProList = recProList;
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    this.updateDate = updateDate;
    this.resourceStr = resourceStr;
    this.resourceMoney = resourceMoney;
    setResourceMoneyIsSet(true);
    this.resource2 = resource2;
    this.resourceStr2 = resourceStr2;
    this.resourceMoney2 = resourceMoney2;
    setResourceMoney2IsSet(true);
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    this.fundManagerRemark = fundManagerRemark;
    this.financeDirectorRemark = financeDirectorRemark;
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    this.projectType = projectType;
    setProjectTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplyFinanceHandleDTO(ApplyFinanceHandleDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.financeHandleId = other.financeHandleId;
    this.recPro = other.recPro;
    this.recMoney = other.recMoney;
    if (other.isSetRecAccount()) {
      this.recAccount = other.recAccount;
    }
    if (other.isSetRecDate()) {
      this.recDate = other.recDate;
    }
    if (other.isSetResource()) {
      this.resource = other.resource;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.createrId = other.createrId;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    this.poundage = other.poundage;
    this.brokerage = other.brokerage;
    this.interest = other.interest;
    this.projectId = other.projectId;
    if (other.isSetRecProList()) {
      List<Integer> __this__recProList = new ArrayList<Integer>(other.recProList);
      this.recProList = __this__recProList;
    }
    this.extensionFee = other.extensionFee;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetResourceStr()) {
      this.resourceStr = other.resourceStr;
    }
    this.resourceMoney = other.resourceMoney;
    if (other.isSetResource2()) {
      this.resource2 = other.resource2;
    }
    if (other.isSetResourceStr2()) {
      this.resourceStr2 = other.resourceStr2;
    }
    this.resourceMoney2 = other.resourceMoney2;
    this.applyStatus = other.applyStatus;
    if (other.isSetFundManagerRemark()) {
      this.fundManagerRemark = other.fundManagerRemark;
    }
    if (other.isSetFinanceDirectorRemark()) {
      this.financeDirectorRemark = other.financeDirectorRemark;
    }
    this.feeRate = other.feeRate;
    this.projectType = other.projectType;
  }

  public ApplyFinanceHandleDTO deepCopy() {
    return new ApplyFinanceHandleDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setFinanceHandleIdIsSet(false);
    this.financeHandleId = 0;
    setRecProIsSet(false);
    this.recPro = 0;
    setRecMoneyIsSet(false);
    this.recMoney = 0.0;
    this.recAccount = null;
    this.recDate = null;
    this.resource = null;
    this.operator = null;
    this.remark = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    this.userIds = null;
    this.page = 1;

    this.rows = 1000;

    setPoundageIsSet(false);
    this.poundage = 0.0;
    setBrokerageIsSet(false);
    this.brokerage = 0.0;
    setInterestIsSet(false);
    this.interest = 0.0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.recProList = null;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
    this.updateDate = null;
    this.resourceStr = null;
    setResourceMoneyIsSet(false);
    this.resourceMoney = 0.0;
    this.resource2 = null;
    this.resourceStr2 = null;
    setResourceMoney2IsSet(false);
    this.resourceMoney2 = 0.0;
    setApplyStatusIsSet(false);
    this.applyStatus = 0;
    this.fundManagerRemark = null;
    this.financeDirectorRemark = null;
    setFeeRateIsSet(false);
    this.feeRate = 0.0;
    setProjectTypeIsSet(false);
    this.projectType = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public ApplyFinanceHandleDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getFinanceHandleId() {
    return this.financeHandleId;
  }

  public ApplyFinanceHandleDTO setFinanceHandleId(int financeHandleId) {
    this.financeHandleId = financeHandleId;
    setFinanceHandleIdIsSet(true);
    return this;
  }

  public void unsetFinanceHandleId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINANCEHANDLEID_ISSET_ID);
  }

  /** Returns true if field financeHandleId is set (has been assigned a value) and false otherwise */
  public boolean isSetFinanceHandleId() {
    return EncodingUtils.testBit(__isset_bitfield, __FINANCEHANDLEID_ISSET_ID);
  }

  public void setFinanceHandleIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINANCEHANDLEID_ISSET_ID, value);
  }

  public int getRecPro() {
    return this.recPro;
  }

  public ApplyFinanceHandleDTO setRecPro(int recPro) {
    this.recPro = recPro;
    setRecProIsSet(true);
    return this;
  }

  public void unsetRecPro() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECPRO_ISSET_ID);
  }

  /** Returns true if field recPro is set (has been assigned a value) and false otherwise */
  public boolean isSetRecPro() {
    return EncodingUtils.testBit(__isset_bitfield, __RECPRO_ISSET_ID);
  }

  public void setRecProIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECPRO_ISSET_ID, value);
  }

  public double getRecMoney() {
    return this.recMoney;
  }

  public ApplyFinanceHandleDTO setRecMoney(double recMoney) {
    this.recMoney = recMoney;
    setRecMoneyIsSet(true);
    return this;
  }

  public void unsetRecMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  /** Returns true if field recMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRecMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECMONEY_ISSET_ID);
  }

  public void setRecMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECMONEY_ISSET_ID, value);
  }

  public String getRecAccount() {
    return this.recAccount;
  }

  public ApplyFinanceHandleDTO setRecAccount(String recAccount) {
    this.recAccount = recAccount;
    return this;
  }

  public void unsetRecAccount() {
    this.recAccount = null;
  }

  /** Returns true if field recAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccount() {
    return this.recAccount != null;
  }

  public void setRecAccountIsSet(boolean value) {
    if (!value) {
      this.recAccount = null;
    }
  }

  public String getRecDate() {
    return this.recDate;
  }

  public ApplyFinanceHandleDTO setRecDate(String recDate) {
    this.recDate = recDate;
    return this;
  }

  public void unsetRecDate() {
    this.recDate = null;
  }

  /** Returns true if field recDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRecDate() {
    return this.recDate != null;
  }

  public void setRecDateIsSet(boolean value) {
    if (!value) {
      this.recDate = null;
    }
  }

  public String getResource() {
    return this.resource;
  }

  public ApplyFinanceHandleDTO setResource(String resource) {
    this.resource = resource;
    return this;
  }

  public void unsetResource() {
    this.resource = null;
  }

  /** Returns true if field resource is set (has been assigned a value) and false otherwise */
  public boolean isSetResource() {
    return this.resource != null;
  }

  public void setResourceIsSet(boolean value) {
    if (!value) {
      this.resource = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public ApplyFinanceHandleDTO setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public ApplyFinanceHandleDTO setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public ApplyFinanceHandleDTO setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public ApplyFinanceHandleDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public ApplyFinanceHandleDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public ApplyFinanceHandleDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public double getPoundage() {
    return this.poundage;
  }

  public ApplyFinanceHandleDTO setPoundage(double poundage) {
    this.poundage = poundage;
    setPoundageIsSet(true);
    return this;
  }

  public void unsetPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  /** Returns true if field poundage is set (has been assigned a value) and false otherwise */
  public boolean isSetPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __POUNDAGE_ISSET_ID);
  }

  public void setPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POUNDAGE_ISSET_ID, value);
  }

  public double getBrokerage() {
    return this.brokerage;
  }

  public ApplyFinanceHandleDTO setBrokerage(double brokerage) {
    this.brokerage = brokerage;
    setBrokerageIsSet(true);
    return this;
  }

  public void unsetBrokerage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  /** Returns true if field brokerage is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerage() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERAGE_ISSET_ID);
  }

  public void setBrokerageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERAGE_ISSET_ID, value);
  }

  public double getInterest() {
    return this.interest;
  }

  public ApplyFinanceHandleDTO setInterest(double interest) {
    this.interest = interest;
    setInterestIsSet(true);
    return this;
  }

  public void unsetInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  /** Returns true if field interest is set (has been assigned a value) and false otherwise */
  public boolean isSetInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __INTEREST_ISSET_ID);
  }

  public void setInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTEREST_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public ApplyFinanceHandleDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getRecProListSize() {
    return (this.recProList == null) ? 0 : this.recProList.size();
  }

  public java.util.Iterator<Integer> getRecProListIterator() {
    return (this.recProList == null) ? null : this.recProList.iterator();
  }

  public void addToRecProList(int elem) {
    if (this.recProList == null) {
      this.recProList = new ArrayList<Integer>();
    }
    this.recProList.add(elem);
  }

  public List<Integer> getRecProList() {
    return this.recProList;
  }

  public ApplyFinanceHandleDTO setRecProList(List<Integer> recProList) {
    this.recProList = recProList;
    return this;
  }

  public void unsetRecProList() {
    this.recProList = null;
  }

  /** Returns true if field recProList is set (has been assigned a value) and false otherwise */
  public boolean isSetRecProList() {
    return this.recProList != null;
  }

  public void setRecProListIsSet(boolean value) {
    if (!value) {
      this.recProList = null;
    }
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public ApplyFinanceHandleDTO setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public ApplyFinanceHandleDTO setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getResourceStr() {
    return this.resourceStr;
  }

  public ApplyFinanceHandleDTO setResourceStr(String resourceStr) {
    this.resourceStr = resourceStr;
    return this;
  }

  public void unsetResourceStr() {
    this.resourceStr = null;
  }

  /** Returns true if field resourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceStr() {
    return this.resourceStr != null;
  }

  public void setResourceStrIsSet(boolean value) {
    if (!value) {
      this.resourceStr = null;
    }
  }

  public double getResourceMoney() {
    return this.resourceMoney;
  }

  public ApplyFinanceHandleDTO setResourceMoney(double resourceMoney) {
    this.resourceMoney = resourceMoney;
    setResourceMoneyIsSet(true);
    return this;
  }

  public void unsetResourceMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEMONEY_ISSET_ID);
  }

  /** Returns true if field resourceMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEMONEY_ISSET_ID);
  }

  public void setResourceMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEMONEY_ISSET_ID, value);
  }

  public String getResource2() {
    return this.resource2;
  }

  public ApplyFinanceHandleDTO setResource2(String resource2) {
    this.resource2 = resource2;
    return this;
  }

  public void unsetResource2() {
    this.resource2 = null;
  }

  /** Returns true if field resource2 is set (has been assigned a value) and false otherwise */
  public boolean isSetResource2() {
    return this.resource2 != null;
  }

  public void setResource2IsSet(boolean value) {
    if (!value) {
      this.resource2 = null;
    }
  }

  public String getResourceStr2() {
    return this.resourceStr2;
  }

  public ApplyFinanceHandleDTO setResourceStr2(String resourceStr2) {
    this.resourceStr2 = resourceStr2;
    return this;
  }

  public void unsetResourceStr2() {
    this.resourceStr2 = null;
  }

  /** Returns true if field resourceStr2 is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceStr2() {
    return this.resourceStr2 != null;
  }

  public void setResourceStr2IsSet(boolean value) {
    if (!value) {
      this.resourceStr2 = null;
    }
  }

  public double getResourceMoney2() {
    return this.resourceMoney2;
  }

  public ApplyFinanceHandleDTO setResourceMoney2(double resourceMoney2) {
    this.resourceMoney2 = resourceMoney2;
    setResourceMoney2IsSet(true);
    return this;
  }

  public void unsetResourceMoney2() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOURCEMONEY2_ISSET_ID);
  }

  /** Returns true if field resourceMoney2 is set (has been assigned a value) and false otherwise */
  public boolean isSetResourceMoney2() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOURCEMONEY2_ISSET_ID);
  }

  public void setResourceMoney2IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOURCEMONEY2_ISSET_ID, value);
  }

  public int getApplyStatus() {
    return this.applyStatus;
  }

  public ApplyFinanceHandleDTO setApplyStatus(int applyStatus) {
    this.applyStatus = applyStatus;
    setApplyStatusIsSet(true);
    return this;
  }

  public void unsetApplyStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  /** Returns true if field applyStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID);
  }

  public void setApplyStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPLYSTATUS_ISSET_ID, value);
  }

  public String getFundManagerRemark() {
    return this.fundManagerRemark;
  }

  public ApplyFinanceHandleDTO setFundManagerRemark(String fundManagerRemark) {
    this.fundManagerRemark = fundManagerRemark;
    return this;
  }

  public void unsetFundManagerRemark() {
    this.fundManagerRemark = null;
  }

  /** Returns true if field fundManagerRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetFundManagerRemark() {
    return this.fundManagerRemark != null;
  }

  public void setFundManagerRemarkIsSet(boolean value) {
    if (!value) {
      this.fundManagerRemark = null;
    }
  }

  public String getFinanceDirectorRemark() {
    return this.financeDirectorRemark;
  }

  public ApplyFinanceHandleDTO setFinanceDirectorRemark(String financeDirectorRemark) {
    this.financeDirectorRemark = financeDirectorRemark;
    return this;
  }

  public void unsetFinanceDirectorRemark() {
    this.financeDirectorRemark = null;
  }

  /** Returns true if field financeDirectorRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetFinanceDirectorRemark() {
    return this.financeDirectorRemark != null;
  }

  public void setFinanceDirectorRemarkIsSet(boolean value) {
    if (!value) {
      this.financeDirectorRemark = null;
    }
  }

  public double getFeeRate() {
    return this.feeRate;
  }

  public ApplyFinanceHandleDTO setFeeRate(double feeRate) {
    this.feeRate = feeRate;
    setFeeRateIsSet(true);
    return this;
  }

  public void unsetFeeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  /** Returns true if field feeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __FEERATE_ISSET_ID);
  }

  public void setFeeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FEERATE_ISSET_ID, value);
  }

  public int getProjectType() {
    return this.projectType;
  }

  public ApplyFinanceHandleDTO setProjectType(int projectType) {
    this.projectType = projectType;
    setProjectTypeIsSet(true);
    return this;
  }

  public void unsetProjectType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  /** Returns true if field projectType is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectType() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID);
  }

  public void setProjectTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTTYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case FINANCE_HANDLE_ID:
      if (value == null) {
        unsetFinanceHandleId();
      } else {
        setFinanceHandleId((Integer)value);
      }
      break;

    case REC_PRO:
      if (value == null) {
        unsetRecPro();
      } else {
        setRecPro((Integer)value);
      }
      break;

    case REC_MONEY:
      if (value == null) {
        unsetRecMoney();
      } else {
        setRecMoney((Double)value);
      }
      break;

    case REC_ACCOUNT:
      if (value == null) {
        unsetRecAccount();
      } else {
        setRecAccount((String)value);
      }
      break;

    case REC_DATE:
      if (value == null) {
        unsetRecDate();
      } else {
        setRecDate((String)value);
      }
      break;

    case RESOURCE:
      if (value == null) {
        unsetResource();
      } else {
        setResource((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case POUNDAGE:
      if (value == null) {
        unsetPoundage();
      } else {
        setPoundage((Double)value);
      }
      break;

    case BROKERAGE:
      if (value == null) {
        unsetBrokerage();
      } else {
        setBrokerage((Double)value);
      }
      break;

    case INTEREST:
      if (value == null) {
        unsetInterest();
      } else {
        setInterest((Double)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case REC_PRO_LIST:
      if (value == null) {
        unsetRecProList();
      } else {
        setRecProList((List<Integer>)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case RESOURCE_STR:
      if (value == null) {
        unsetResourceStr();
      } else {
        setResourceStr((String)value);
      }
      break;

    case RESOURCE_MONEY:
      if (value == null) {
        unsetResourceMoney();
      } else {
        setResourceMoney((Double)value);
      }
      break;

    case RESOURCE2:
      if (value == null) {
        unsetResource2();
      } else {
        setResource2((String)value);
      }
      break;

    case RESOURCE_STR2:
      if (value == null) {
        unsetResourceStr2();
      } else {
        setResourceStr2((String)value);
      }
      break;

    case RESOURCE_MONEY2:
      if (value == null) {
        unsetResourceMoney2();
      } else {
        setResourceMoney2((Double)value);
      }
      break;

    case APPLY_STATUS:
      if (value == null) {
        unsetApplyStatus();
      } else {
        setApplyStatus((Integer)value);
      }
      break;

    case FUND_MANAGER_REMARK:
      if (value == null) {
        unsetFundManagerRemark();
      } else {
        setFundManagerRemark((String)value);
      }
      break;

    case FINANCE_DIRECTOR_REMARK:
      if (value == null) {
        unsetFinanceDirectorRemark();
      } else {
        setFinanceDirectorRemark((String)value);
      }
      break;

    case FEE_RATE:
      if (value == null) {
        unsetFeeRate();
      } else {
        setFeeRate((Double)value);
      }
      break;

    case PROJECT_TYPE:
      if (value == null) {
        unsetProjectType();
      } else {
        setProjectType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case FINANCE_HANDLE_ID:
      return Integer.valueOf(getFinanceHandleId());

    case REC_PRO:
      return Integer.valueOf(getRecPro());

    case REC_MONEY:
      return Double.valueOf(getRecMoney());

    case REC_ACCOUNT:
      return getRecAccount();

    case REC_DATE:
      return getRecDate();

    case RESOURCE:
      return getResource();

    case OPERATOR:
      return getOperator();

    case REMARK:
      return getRemark();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case POUNDAGE:
      return Double.valueOf(getPoundage());

    case BROKERAGE:
      return Double.valueOf(getBrokerage());

    case INTEREST:
      return Double.valueOf(getInterest());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case REC_PRO_LIST:
      return getRecProList();

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    case UPDATE_DATE:
      return getUpdateDate();

    case RESOURCE_STR:
      return getResourceStr();

    case RESOURCE_MONEY:
      return Double.valueOf(getResourceMoney());

    case RESOURCE2:
      return getResource2();

    case RESOURCE_STR2:
      return getResourceStr2();

    case RESOURCE_MONEY2:
      return Double.valueOf(getResourceMoney2());

    case APPLY_STATUS:
      return Integer.valueOf(getApplyStatus());

    case FUND_MANAGER_REMARK:
      return getFundManagerRemark();

    case FINANCE_DIRECTOR_REMARK:
      return getFinanceDirectorRemark();

    case FEE_RATE:
      return Double.valueOf(getFeeRate());

    case PROJECT_TYPE:
      return Integer.valueOf(getProjectType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case FINANCE_HANDLE_ID:
      return isSetFinanceHandleId();
    case REC_PRO:
      return isSetRecPro();
    case REC_MONEY:
      return isSetRecMoney();
    case REC_ACCOUNT:
      return isSetRecAccount();
    case REC_DATE:
      return isSetRecDate();
    case RESOURCE:
      return isSetResource();
    case OPERATOR:
      return isSetOperator();
    case REMARK:
      return isSetRemark();
    case CREATER_ID:
      return isSetCreaterId();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case POUNDAGE:
      return isSetPoundage();
    case BROKERAGE:
      return isSetBrokerage();
    case INTEREST:
      return isSetInterest();
    case PROJECT_ID:
      return isSetProjectId();
    case REC_PRO_LIST:
      return isSetRecProList();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case RESOURCE_STR:
      return isSetResourceStr();
    case RESOURCE_MONEY:
      return isSetResourceMoney();
    case RESOURCE2:
      return isSetResource2();
    case RESOURCE_STR2:
      return isSetResourceStr2();
    case RESOURCE_MONEY2:
      return isSetResourceMoney2();
    case APPLY_STATUS:
      return isSetApplyStatus();
    case FUND_MANAGER_REMARK:
      return isSetFundManagerRemark();
    case FINANCE_DIRECTOR_REMARK:
      return isSetFinanceDirectorRemark();
    case FEE_RATE:
      return isSetFeeRate();
    case PROJECT_TYPE:
      return isSetProjectType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplyFinanceHandleDTO)
      return this.equals((ApplyFinanceHandleDTO)that);
    return false;
  }

  public boolean equals(ApplyFinanceHandleDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_financeHandleId = true;
    boolean that_present_financeHandleId = true;
    if (this_present_financeHandleId || that_present_financeHandleId) {
      if (!(this_present_financeHandleId && that_present_financeHandleId))
        return false;
      if (this.financeHandleId != that.financeHandleId)
        return false;
    }

    boolean this_present_recPro = true;
    boolean that_present_recPro = true;
    if (this_present_recPro || that_present_recPro) {
      if (!(this_present_recPro && that_present_recPro))
        return false;
      if (this.recPro != that.recPro)
        return false;
    }

    boolean this_present_recMoney = true;
    boolean that_present_recMoney = true;
    if (this_present_recMoney || that_present_recMoney) {
      if (!(this_present_recMoney && that_present_recMoney))
        return false;
      if (this.recMoney != that.recMoney)
        return false;
    }

    boolean this_present_recAccount = true && this.isSetRecAccount();
    boolean that_present_recAccount = true && that.isSetRecAccount();
    if (this_present_recAccount || that_present_recAccount) {
      if (!(this_present_recAccount && that_present_recAccount))
        return false;
      if (!this.recAccount.equals(that.recAccount))
        return false;
    }

    boolean this_present_recDate = true && this.isSetRecDate();
    boolean that_present_recDate = true && that.isSetRecDate();
    if (this_present_recDate || that_present_recDate) {
      if (!(this_present_recDate && that_present_recDate))
        return false;
      if (!this.recDate.equals(that.recDate))
        return false;
    }

    boolean this_present_resource = true && this.isSetResource();
    boolean that_present_resource = true && that.isSetResource();
    if (this_present_resource || that_present_resource) {
      if (!(this_present_resource && that_present_resource))
        return false;
      if (!this.resource.equals(that.resource))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_poundage = true;
    boolean that_present_poundage = true;
    if (this_present_poundage || that_present_poundage) {
      if (!(this_present_poundage && that_present_poundage))
        return false;
      if (this.poundage != that.poundage)
        return false;
    }

    boolean this_present_brokerage = true;
    boolean that_present_brokerage = true;
    if (this_present_brokerage || that_present_brokerage) {
      if (!(this_present_brokerage && that_present_brokerage))
        return false;
      if (this.brokerage != that.brokerage)
        return false;
    }

    boolean this_present_interest = true;
    boolean that_present_interest = true;
    if (this_present_interest || that_present_interest) {
      if (!(this_present_interest && that_present_interest))
        return false;
      if (this.interest != that.interest)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_recProList = true && this.isSetRecProList();
    boolean that_present_recProList = true && that.isSetRecProList();
    if (this_present_recProList || that_present_recProList) {
      if (!(this_present_recProList && that_present_recProList))
        return false;
      if (!this.recProList.equals(that.recProList))
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_resourceStr = true && this.isSetResourceStr();
    boolean that_present_resourceStr = true && that.isSetResourceStr();
    if (this_present_resourceStr || that_present_resourceStr) {
      if (!(this_present_resourceStr && that_present_resourceStr))
        return false;
      if (!this.resourceStr.equals(that.resourceStr))
        return false;
    }

    boolean this_present_resourceMoney = true;
    boolean that_present_resourceMoney = true;
    if (this_present_resourceMoney || that_present_resourceMoney) {
      if (!(this_present_resourceMoney && that_present_resourceMoney))
        return false;
      if (this.resourceMoney != that.resourceMoney)
        return false;
    }

    boolean this_present_resource2 = true && this.isSetResource2();
    boolean that_present_resource2 = true && that.isSetResource2();
    if (this_present_resource2 || that_present_resource2) {
      if (!(this_present_resource2 && that_present_resource2))
        return false;
      if (!this.resource2.equals(that.resource2))
        return false;
    }

    boolean this_present_resourceStr2 = true && this.isSetResourceStr2();
    boolean that_present_resourceStr2 = true && that.isSetResourceStr2();
    if (this_present_resourceStr2 || that_present_resourceStr2) {
      if (!(this_present_resourceStr2 && that_present_resourceStr2))
        return false;
      if (!this.resourceStr2.equals(that.resourceStr2))
        return false;
    }

    boolean this_present_resourceMoney2 = true;
    boolean that_present_resourceMoney2 = true;
    if (this_present_resourceMoney2 || that_present_resourceMoney2) {
      if (!(this_present_resourceMoney2 && that_present_resourceMoney2))
        return false;
      if (this.resourceMoney2 != that.resourceMoney2)
        return false;
    }

    boolean this_present_applyStatus = true;
    boolean that_present_applyStatus = true;
    if (this_present_applyStatus || that_present_applyStatus) {
      if (!(this_present_applyStatus && that_present_applyStatus))
        return false;
      if (this.applyStatus != that.applyStatus)
        return false;
    }

    boolean this_present_fundManagerRemark = true && this.isSetFundManagerRemark();
    boolean that_present_fundManagerRemark = true && that.isSetFundManagerRemark();
    if (this_present_fundManagerRemark || that_present_fundManagerRemark) {
      if (!(this_present_fundManagerRemark && that_present_fundManagerRemark))
        return false;
      if (!this.fundManagerRemark.equals(that.fundManagerRemark))
        return false;
    }

    boolean this_present_financeDirectorRemark = true && this.isSetFinanceDirectorRemark();
    boolean that_present_financeDirectorRemark = true && that.isSetFinanceDirectorRemark();
    if (this_present_financeDirectorRemark || that_present_financeDirectorRemark) {
      if (!(this_present_financeDirectorRemark && that_present_financeDirectorRemark))
        return false;
      if (!this.financeDirectorRemark.equals(that.financeDirectorRemark))
        return false;
    }

    boolean this_present_feeRate = true;
    boolean that_present_feeRate = true;
    if (this_present_feeRate || that_present_feeRate) {
      if (!(this_present_feeRate && that_present_feeRate))
        return false;
      if (this.feeRate != that.feeRate)
        return false;
    }

    boolean this_present_projectType = true;
    boolean that_present_projectType = true;
    if (this_present_projectType || that_present_projectType) {
      if (!(this_present_projectType && that_present_projectType))
        return false;
      if (this.projectType != that.projectType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_financeHandleId = true;
    list.add(present_financeHandleId);
    if (present_financeHandleId)
      list.add(financeHandleId);

    boolean present_recPro = true;
    list.add(present_recPro);
    if (present_recPro)
      list.add(recPro);

    boolean present_recMoney = true;
    list.add(present_recMoney);
    if (present_recMoney)
      list.add(recMoney);

    boolean present_recAccount = true && (isSetRecAccount());
    list.add(present_recAccount);
    if (present_recAccount)
      list.add(recAccount);

    boolean present_recDate = true && (isSetRecDate());
    list.add(present_recDate);
    if (present_recDate)
      list.add(recDate);

    boolean present_resource = true && (isSetResource());
    list.add(present_resource);
    if (present_resource)
      list.add(resource);

    boolean present_operator = true && (isSetOperator());
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_poundage = true;
    list.add(present_poundage);
    if (present_poundage)
      list.add(poundage);

    boolean present_brokerage = true;
    list.add(present_brokerage);
    if (present_brokerage)
      list.add(brokerage);

    boolean present_interest = true;
    list.add(present_interest);
    if (present_interest)
      list.add(interest);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_recProList = true && (isSetRecProList());
    list.add(present_recProList);
    if (present_recProList)
      list.add(recProList);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_resourceStr = true && (isSetResourceStr());
    list.add(present_resourceStr);
    if (present_resourceStr)
      list.add(resourceStr);

    boolean present_resourceMoney = true;
    list.add(present_resourceMoney);
    if (present_resourceMoney)
      list.add(resourceMoney);

    boolean present_resource2 = true && (isSetResource2());
    list.add(present_resource2);
    if (present_resource2)
      list.add(resource2);

    boolean present_resourceStr2 = true && (isSetResourceStr2());
    list.add(present_resourceStr2);
    if (present_resourceStr2)
      list.add(resourceStr2);

    boolean present_resourceMoney2 = true;
    list.add(present_resourceMoney2);
    if (present_resourceMoney2)
      list.add(resourceMoney2);

    boolean present_applyStatus = true;
    list.add(present_applyStatus);
    if (present_applyStatus)
      list.add(applyStatus);

    boolean present_fundManagerRemark = true && (isSetFundManagerRemark());
    list.add(present_fundManagerRemark);
    if (present_fundManagerRemark)
      list.add(fundManagerRemark);

    boolean present_financeDirectorRemark = true && (isSetFinanceDirectorRemark());
    list.add(present_financeDirectorRemark);
    if (present_financeDirectorRemark)
      list.add(financeDirectorRemark);

    boolean present_feeRate = true;
    list.add(present_feeRate);
    if (present_feeRate)
      list.add(feeRate);

    boolean present_projectType = true;
    list.add(present_projectType);
    if (present_projectType)
      list.add(projectType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ApplyFinanceHandleDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinanceHandleId()).compareTo(other.isSetFinanceHandleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinanceHandleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeHandleId, other.financeHandleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecPro()).compareTo(other.isSetRecPro());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecPro()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recPro, other.recPro);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecMoney()).compareTo(other.isSetRecMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recMoney, other.recMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccount()).compareTo(other.isSetRecAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccount, other.recAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecDate()).compareTo(other.isSetRecDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recDate, other.recDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource()).compareTo(other.isSetResource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource, other.resource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoundage()).compareTo(other.isSetPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poundage, other.poundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerage()).compareTo(other.isSetBrokerage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerage, other.brokerage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterest()).compareTo(other.isSetInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interest, other.interest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecProList()).compareTo(other.isSetRecProList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecProList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recProList, other.recProList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceStr()).compareTo(other.isSetResourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceStr, other.resourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceMoney()).compareTo(other.isSetResourceMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceMoney, other.resourceMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResource2()).compareTo(other.isSetResource2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResource2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resource2, other.resource2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceStr2()).compareTo(other.isSetResourceStr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceStr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceStr2, other.resourceStr2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResourceMoney2()).compareTo(other.isSetResourceMoney2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResourceMoney2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resourceMoney2, other.resourceMoney2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApplyStatus()).compareTo(other.isSetApplyStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyStatus, other.applyStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFundManagerRemark()).compareTo(other.isSetFundManagerRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFundManagerRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fundManagerRemark, other.fundManagerRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinanceDirectorRemark()).compareTo(other.isSetFinanceDirectorRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinanceDirectorRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.financeDirectorRemark, other.financeDirectorRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeeRate()).compareTo(other.isSetFeeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feeRate, other.feeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectType()).compareTo(other.isSetProjectType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectType, other.projectType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplyFinanceHandleDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("financeHandleId:");
    sb.append(this.financeHandleId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recPro:");
    sb.append(this.recPro);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recMoney:");
    sb.append(this.recMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccount:");
    if (this.recAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recDate:");
    if (this.recDate == null) {
      sb.append("null");
    } else {
      sb.append(this.recDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resource:");
    if (this.resource == null) {
      sb.append("null");
    } else {
      sb.append(this.resource);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    if (this.operator == null) {
      sb.append("null");
    } else {
      sb.append(this.operator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("poundage:");
    sb.append(this.poundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brokerage:");
    sb.append(this.brokerage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interest:");
    sb.append(this.interest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recProList:");
    if (this.recProList == null) {
      sb.append("null");
    } else {
      sb.append(this.recProList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceStr:");
    if (this.resourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceMoney:");
    sb.append(this.resourceMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resource2:");
    if (this.resource2 == null) {
      sb.append("null");
    } else {
      sb.append(this.resource2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceStr2:");
    if (this.resourceStr2 == null) {
      sb.append("null");
    } else {
      sb.append(this.resourceStr2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resourceMoney2:");
    sb.append(this.resourceMoney2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyStatus:");
    sb.append(this.applyStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fundManagerRemark:");
    if (this.fundManagerRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.fundManagerRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("financeDirectorRemark:");
    if (this.financeDirectorRemark == null) {
      sb.append("null");
    } else {
      sb.append(this.financeDirectorRemark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feeRate:");
    sb.append(this.feeRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectType:");
    sb.append(this.projectType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplyFinanceHandleDTOStandardSchemeFactory implements SchemeFactory {
    public ApplyFinanceHandleDTOStandardScheme getScheme() {
      return new ApplyFinanceHandleDTOStandardScheme();
    }
  }

  private static class ApplyFinanceHandleDTOStandardScheme extends StandardScheme<ApplyFinanceHandleDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplyFinanceHandleDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINANCE_HANDLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.financeHandleId = iprot.readI32();
              struct.setFinanceHandleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REC_PRO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recPro = iprot.readI32();
              struct.setRecProIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.recMoney = iprot.readDouble();
              struct.setRecMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REC_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccount = iprot.readString();
              struct.setRecAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REC_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recDate = iprot.readString();
              struct.setRecDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RESOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resource = iprot.readString();
              struct.setResourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.userIds.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.poundage = iprot.readDouble();
              struct.setPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BROKERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.brokerage = iprot.readDouble();
              struct.setBrokerageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.interest = iprot.readDouble();
              struct.setInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REC_PRO_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.recProList = new ArrayList<Integer>(_list35.size);
                int _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readI32();
                  struct.recProList.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setRecProListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // RESOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceStr = iprot.readString();
              struct.setResourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RESOURCE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.resourceMoney = iprot.readDouble();
              struct.setResourceMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RESOURCE2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resource2 = iprot.readString();
              struct.setResource2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // RESOURCE_STR2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourceStr2 = iprot.readString();
              struct.setResourceStr2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // RESOURCE_MONEY2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.resourceMoney2 = iprot.readDouble();
              struct.setResourceMoney2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // APPLY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.applyStatus = iprot.readI32();
              struct.setApplyStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // FUND_MANAGER_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fundManagerRemark = iprot.readString();
              struct.setFundManagerRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // FINANCE_DIRECTOR_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.financeDirectorRemark = iprot.readString();
              struct.setFinanceDirectorRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // FEE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feeRate = iprot.readDouble();
              struct.setFeeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // PROJECT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectType = iprot.readI32();
              struct.setProjectTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplyFinanceHandleDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINANCE_HANDLE_ID_FIELD_DESC);
      oprot.writeI32(struct.financeHandleId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_PRO_FIELD_DESC);
      oprot.writeI32(struct.recPro);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.recMoney);
      oprot.writeFieldEnd();
      if (struct.recAccount != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_FIELD_DESC);
        oprot.writeString(struct.recAccount);
        oprot.writeFieldEnd();
      }
      if (struct.recDate != null) {
        oprot.writeFieldBegin(REC_DATE_FIELD_DESC);
        oprot.writeString(struct.recDate);
        oprot.writeFieldEnd();
      }
      if (struct.resource != null) {
        oprot.writeFieldBegin(RESOURCE_FIELD_DESC);
        oprot.writeString(struct.resource);
        oprot.writeFieldEnd();
      }
      if (struct.operator != null) {
        oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
        oprot.writeString(struct.operator);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter38 : struct.userIds)
          {
            oprot.writeI32(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.poundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BROKERAGE_FIELD_DESC);
      oprot.writeDouble(struct.brokerage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.interest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.recProList != null) {
        oprot.writeFieldBegin(REC_PRO_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.recProList.size()));
          for (int _iter39 : struct.recProList)
          {
            oprot.writeI32(_iter39);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.resourceStr != null) {
        oprot.writeFieldBegin(RESOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.resourceStr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESOURCE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.resourceMoney);
      oprot.writeFieldEnd();
      if (struct.resource2 != null) {
        oprot.writeFieldBegin(RESOURCE2_FIELD_DESC);
        oprot.writeString(struct.resource2);
        oprot.writeFieldEnd();
      }
      if (struct.resourceStr2 != null) {
        oprot.writeFieldBegin(RESOURCE_STR2_FIELD_DESC);
        oprot.writeString(struct.resourceStr2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESOURCE_MONEY2_FIELD_DESC);
      oprot.writeDouble(struct.resourceMoney2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(APPLY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.applyStatus);
      oprot.writeFieldEnd();
      if (struct.fundManagerRemark != null) {
        oprot.writeFieldBegin(FUND_MANAGER_REMARK_FIELD_DESC);
        oprot.writeString(struct.fundManagerRemark);
        oprot.writeFieldEnd();
      }
      if (struct.financeDirectorRemark != null) {
        oprot.writeFieldBegin(FINANCE_DIRECTOR_REMARK_FIELD_DESC);
        oprot.writeString(struct.financeDirectorRemark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FEE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.feeRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.projectType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplyFinanceHandleDTOTupleSchemeFactory implements SchemeFactory {
    public ApplyFinanceHandleDTOTupleScheme getScheme() {
      return new ApplyFinanceHandleDTOTupleScheme();
    }
  }

  private static class ApplyFinanceHandleDTOTupleScheme extends TupleScheme<ApplyFinanceHandleDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplyFinanceHandleDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetFinanceHandleId()) {
        optionals.set(1);
      }
      if (struct.isSetRecPro()) {
        optionals.set(2);
      }
      if (struct.isSetRecMoney()) {
        optionals.set(3);
      }
      if (struct.isSetRecAccount()) {
        optionals.set(4);
      }
      if (struct.isSetRecDate()) {
        optionals.set(5);
      }
      if (struct.isSetResource()) {
        optionals.set(6);
      }
      if (struct.isSetOperator()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(9);
      }
      if (struct.isSetUserIds()) {
        optionals.set(10);
      }
      if (struct.isSetPage()) {
        optionals.set(11);
      }
      if (struct.isSetRows()) {
        optionals.set(12);
      }
      if (struct.isSetPoundage()) {
        optionals.set(13);
      }
      if (struct.isSetBrokerage()) {
        optionals.set(14);
      }
      if (struct.isSetInterest()) {
        optionals.set(15);
      }
      if (struct.isSetProjectId()) {
        optionals.set(16);
      }
      if (struct.isSetRecProList()) {
        optionals.set(17);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(18);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(19);
      }
      if (struct.isSetResourceStr()) {
        optionals.set(20);
      }
      if (struct.isSetResourceMoney()) {
        optionals.set(21);
      }
      if (struct.isSetResource2()) {
        optionals.set(22);
      }
      if (struct.isSetResourceStr2()) {
        optionals.set(23);
      }
      if (struct.isSetResourceMoney2()) {
        optionals.set(24);
      }
      if (struct.isSetApplyStatus()) {
        optionals.set(25);
      }
      if (struct.isSetFundManagerRemark()) {
        optionals.set(26);
      }
      if (struct.isSetFinanceDirectorRemark()) {
        optionals.set(27);
      }
      if (struct.isSetFeeRate()) {
        optionals.set(28);
      }
      if (struct.isSetProjectType()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetFinanceHandleId()) {
        oprot.writeI32(struct.financeHandleId);
      }
      if (struct.isSetRecPro()) {
        oprot.writeI32(struct.recPro);
      }
      if (struct.isSetRecMoney()) {
        oprot.writeDouble(struct.recMoney);
      }
      if (struct.isSetRecAccount()) {
        oprot.writeString(struct.recAccount);
      }
      if (struct.isSetRecDate()) {
        oprot.writeString(struct.recDate);
      }
      if (struct.isSetResource()) {
        oprot.writeString(struct.resource);
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter40 : struct.userIds)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPoundage()) {
        oprot.writeDouble(struct.poundage);
      }
      if (struct.isSetBrokerage()) {
        oprot.writeDouble(struct.brokerage);
      }
      if (struct.isSetInterest()) {
        oprot.writeDouble(struct.interest);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetRecProList()) {
        {
          oprot.writeI32(struct.recProList.size());
          for (int _iter41 : struct.recProList)
          {
            oprot.writeI32(_iter41);
          }
        }
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetResourceStr()) {
        oprot.writeString(struct.resourceStr);
      }
      if (struct.isSetResourceMoney()) {
        oprot.writeDouble(struct.resourceMoney);
      }
      if (struct.isSetResource2()) {
        oprot.writeString(struct.resource2);
      }
      if (struct.isSetResourceStr2()) {
        oprot.writeString(struct.resourceStr2);
      }
      if (struct.isSetResourceMoney2()) {
        oprot.writeDouble(struct.resourceMoney2);
      }
      if (struct.isSetApplyStatus()) {
        oprot.writeI32(struct.applyStatus);
      }
      if (struct.isSetFundManagerRemark()) {
        oprot.writeString(struct.fundManagerRemark);
      }
      if (struct.isSetFinanceDirectorRemark()) {
        oprot.writeString(struct.financeDirectorRemark);
      }
      if (struct.isSetFeeRate()) {
        oprot.writeDouble(struct.feeRate);
      }
      if (struct.isSetProjectType()) {
        oprot.writeI32(struct.projectType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplyFinanceHandleDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.financeHandleId = iprot.readI32();
        struct.setFinanceHandleIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.recPro = iprot.readI32();
        struct.setRecProIsSet(true);
      }
      if (incoming.get(3)) {
        struct.recMoney = iprot.readDouble();
        struct.setRecMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.recAccount = iprot.readString();
        struct.setRecAccountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recDate = iprot.readString();
        struct.setRecDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.resource = iprot.readString();
        struct.setResourceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list42.size);
          int _elem43;
          for (int _i44 = 0; _i44 < _list42.size; ++_i44)
          {
            _elem43 = iprot.readI32();
            struct.userIds.add(_elem43);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(12)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(13)) {
        struct.poundage = iprot.readDouble();
        struct.setPoundageIsSet(true);
      }
      if (incoming.get(14)) {
        struct.brokerage = iprot.readDouble();
        struct.setBrokerageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.interest = iprot.readDouble();
        struct.setInterestIsSet(true);
      }
      if (incoming.get(16)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.recProList = new ArrayList<Integer>(_list45.size);
          int _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = iprot.readI32();
            struct.recProList.add(_elem46);
          }
        }
        struct.setRecProListIsSet(true);
      }
      if (incoming.get(18)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.resourceStr = iprot.readString();
        struct.setResourceStrIsSet(true);
      }
      if (incoming.get(21)) {
        struct.resourceMoney = iprot.readDouble();
        struct.setResourceMoneyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.resource2 = iprot.readString();
        struct.setResource2IsSet(true);
      }
      if (incoming.get(23)) {
        struct.resourceStr2 = iprot.readString();
        struct.setResourceStr2IsSet(true);
      }
      if (incoming.get(24)) {
        struct.resourceMoney2 = iprot.readDouble();
        struct.setResourceMoney2IsSet(true);
      }
      if (incoming.get(25)) {
        struct.applyStatus = iprot.readI32();
        struct.setApplyStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.fundManagerRemark = iprot.readString();
        struct.setFundManagerRemarkIsSet(true);
      }
      if (incoming.get(27)) {
        struct.financeDirectorRemark = iprot.readString();
        struct.setFinanceDirectorRemarkIsSet(true);
      }
      if (incoming.get(28)) {
        struct.feeRate = iprot.readDouble();
        struct.setFeeRateIsSet(true);
      }
      if (incoming.get(29)) {
        struct.projectType = iprot.readI32();
        struct.setProjectTypeIsSet(true);
      }
    }
  }

}


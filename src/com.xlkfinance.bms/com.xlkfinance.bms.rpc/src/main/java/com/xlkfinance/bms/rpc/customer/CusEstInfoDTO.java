/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusEstInfoDTO implements org.apache.thrift.TBase<CusEstInfoDTO, CusEstInfoDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusEstInfoDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusEstInfoDTO");

  private static final org.apache.thrift.protocol.TField CUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EST_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("estPerson", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TEMPLATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("templateId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EST_LV_FIELD_DESC = new org.apache.thrift.protocol.TField("estLv", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EST_START_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("estStartScore", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EST_END_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("estEndScore", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField START_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("startScore", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField END_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("endScore", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cusId", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusEstInfoDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusEstInfoDTOTupleSchemeFactory());
  }

  public String cusName; // required
  public int cusType; // required
  public int estPerson; // required
  public int templateId; // required
  public String estLv; // required
  public int estStartScore; // required
  public int estEndScore; // required
  public int startScore; // required
  public int endScore; // required
  public int cusId; // required
  public int page; // required
  public int rows; // required
  public List<Integer> userIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUS_NAME((short)1, "cusName"),
    CUS_TYPE((short)2, "cusType"),
    EST_PERSON((short)3, "estPerson"),
    TEMPLATE_ID((short)4, "templateId"),
    EST_LV((short)5, "estLv"),
    EST_START_SCORE((short)6, "estStartScore"),
    EST_END_SCORE((short)7, "estEndScore"),
    START_SCORE((short)8, "startScore"),
    END_SCORE((short)9, "endScore"),
    CUS_ID((short)10, "cusId"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows"),
    USER_IDS((short)13, "userIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUS_NAME
          return CUS_NAME;
        case 2: // CUS_TYPE
          return CUS_TYPE;
        case 3: // EST_PERSON
          return EST_PERSON;
        case 4: // TEMPLATE_ID
          return TEMPLATE_ID;
        case 5: // EST_LV
          return EST_LV;
        case 6: // EST_START_SCORE
          return EST_START_SCORE;
        case 7: // EST_END_SCORE
          return EST_END_SCORE;
        case 8: // START_SCORE
          return START_SCORE;
        case 9: // END_SCORE
          return END_SCORE;
        case 10: // CUS_ID
          return CUS_ID;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        case 13: // USER_IDS
          return USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CUSTYPE_ISSET_ID = 0;
  private static final int __ESTPERSON_ISSET_ID = 1;
  private static final int __TEMPLATEID_ISSET_ID = 2;
  private static final int __ESTSTARTSCORE_ISSET_ID = 3;
  private static final int __ESTENDSCORE_ISSET_ID = 4;
  private static final int __STARTSCORE_ISSET_ID = 5;
  private static final int __ENDSCORE_ISSET_ID = 6;
  private static final int __CUSID_ISSET_ID = 7;
  private static final int __PAGE_ISSET_ID = 8;
  private static final int __ROWS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cusType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EST_PERSON, new org.apache.thrift.meta_data.FieldMetaData("estPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEMPLATE_ID, new org.apache.thrift.meta_data.FieldMetaData("templateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EST_LV, new org.apache.thrift.meta_data.FieldMetaData("estLv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EST_START_SCORE, new org.apache.thrift.meta_data.FieldMetaData("estStartScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EST_END_SCORE, new org.apache.thrift.meta_data.FieldMetaData("estEndScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_SCORE, new org.apache.thrift.meta_data.FieldMetaData("startScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.END_SCORE, new org.apache.thrift.meta_data.FieldMetaData("endScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_ID, new org.apache.thrift.meta_data.FieldMetaData("cusId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusEstInfoDTO.class, metaDataMap);
  }

  public CusEstInfoDTO() {
  }

  public CusEstInfoDTO(
    String cusName,
    int cusType,
    int estPerson,
    int templateId,
    String estLv,
    int estStartScore,
    int estEndScore,
    int startScore,
    int endScore,
    int cusId,
    int page,
    int rows,
    List<Integer> userIds)
  {
    this();
    this.cusName = cusName;
    this.cusType = cusType;
    setCusTypeIsSet(true);
    this.estPerson = estPerson;
    setEstPersonIsSet(true);
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    this.estLv = estLv;
    this.estStartScore = estStartScore;
    setEstStartScoreIsSet(true);
    this.estEndScore = estEndScore;
    setEstEndScoreIsSet(true);
    this.startScore = startScore;
    setStartScoreIsSet(true);
    this.endScore = endScore;
    setEndScoreIsSet(true);
    this.cusId = cusId;
    setCusIdIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.userIds = userIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusEstInfoDTO(CusEstInfoDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCusName()) {
      this.cusName = other.cusName;
    }
    this.cusType = other.cusType;
    this.estPerson = other.estPerson;
    this.templateId = other.templateId;
    if (other.isSetEstLv()) {
      this.estLv = other.estLv;
    }
    this.estStartScore = other.estStartScore;
    this.estEndScore = other.estEndScore;
    this.startScore = other.startScore;
    this.endScore = other.endScore;
    this.cusId = other.cusId;
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
  }

  public CusEstInfoDTO deepCopy() {
    return new CusEstInfoDTO(this);
  }

  @Override
  public void clear() {
    this.cusName = null;
    setCusTypeIsSet(false);
    this.cusType = 0;
    setEstPersonIsSet(false);
    this.estPerson = 0;
    setTemplateIdIsSet(false);
    this.templateId = 0;
    this.estLv = null;
    setEstStartScoreIsSet(false);
    this.estStartScore = 0;
    setEstEndScoreIsSet(false);
    this.estEndScore = 0;
    setStartScoreIsSet(false);
    this.startScore = 0;
    setEndScoreIsSet(false);
    this.endScore = 0;
    setCusIdIsSet(false);
    this.cusId = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.userIds = null;
  }

  public String getCusName() {
    return this.cusName;
  }

  public CusEstInfoDTO setCusName(String cusName) {
    this.cusName = cusName;
    return this;
  }

  public void unsetCusName() {
    this.cusName = null;
  }

  /** Returns true if field cusName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusName() {
    return this.cusName != null;
  }

  public void setCusNameIsSet(boolean value) {
    if (!value) {
      this.cusName = null;
    }
  }

  public int getCusType() {
    return this.cusType;
  }

  public CusEstInfoDTO setCusType(int cusType) {
    this.cusType = cusType;
    setCusTypeIsSet(true);
    return this;
  }

  public void unsetCusType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  /** Returns true if field cusType is set (has been assigned a value) and false otherwise */
  public boolean isSetCusType() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSTYPE_ISSET_ID);
  }

  public void setCusTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSTYPE_ISSET_ID, value);
  }

  public int getEstPerson() {
    return this.estPerson;
  }

  public CusEstInfoDTO setEstPerson(int estPerson) {
    this.estPerson = estPerson;
    setEstPersonIsSet(true);
    return this;
  }

  public void unsetEstPerson() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTPERSON_ISSET_ID);
  }

  /** Returns true if field estPerson is set (has been assigned a value) and false otherwise */
  public boolean isSetEstPerson() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTPERSON_ISSET_ID);
  }

  public void setEstPersonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTPERSON_ISSET_ID, value);
  }

  public int getTemplateId() {
    return this.templateId;
  }

  public CusEstInfoDTO setTemplateId(int templateId) {
    this.templateId = templateId;
    setTemplateIdIsSet(true);
    return this;
  }

  public void unsetTemplateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  /** Returns true if field templateId is set (has been assigned a value) and false otherwise */
  public boolean isSetTemplateId() {
    return EncodingUtils.testBit(__isset_bitfield, __TEMPLATEID_ISSET_ID);
  }

  public void setTemplateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TEMPLATEID_ISSET_ID, value);
  }

  public String getEstLv() {
    return this.estLv;
  }

  public CusEstInfoDTO setEstLv(String estLv) {
    this.estLv = estLv;
    return this;
  }

  public void unsetEstLv() {
    this.estLv = null;
  }

  /** Returns true if field estLv is set (has been assigned a value) and false otherwise */
  public boolean isSetEstLv() {
    return this.estLv != null;
  }

  public void setEstLvIsSet(boolean value) {
    if (!value) {
      this.estLv = null;
    }
  }

  public int getEstStartScore() {
    return this.estStartScore;
  }

  public CusEstInfoDTO setEstStartScore(int estStartScore) {
    this.estStartScore = estStartScore;
    setEstStartScoreIsSet(true);
    return this;
  }

  public void unsetEstStartScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTSTARTSCORE_ISSET_ID);
  }

  /** Returns true if field estStartScore is set (has been assigned a value) and false otherwise */
  public boolean isSetEstStartScore() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTSTARTSCORE_ISSET_ID);
  }

  public void setEstStartScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTSTARTSCORE_ISSET_ID, value);
  }

  public int getEstEndScore() {
    return this.estEndScore;
  }

  public CusEstInfoDTO setEstEndScore(int estEndScore) {
    this.estEndScore = estEndScore;
    setEstEndScoreIsSet(true);
    return this;
  }

  public void unsetEstEndScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ESTENDSCORE_ISSET_ID);
  }

  /** Returns true if field estEndScore is set (has been assigned a value) and false otherwise */
  public boolean isSetEstEndScore() {
    return EncodingUtils.testBit(__isset_bitfield, __ESTENDSCORE_ISSET_ID);
  }

  public void setEstEndScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ESTENDSCORE_ISSET_ID, value);
  }

  public int getStartScore() {
    return this.startScore;
  }

  public CusEstInfoDTO setStartScore(int startScore) {
    this.startScore = startScore;
    setStartScoreIsSet(true);
    return this;
  }

  public void unsetStartScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTSCORE_ISSET_ID);
  }

  /** Returns true if field startScore is set (has been assigned a value) and false otherwise */
  public boolean isSetStartScore() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTSCORE_ISSET_ID);
  }

  public void setStartScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTSCORE_ISSET_ID, value);
  }

  public int getEndScore() {
    return this.endScore;
  }

  public CusEstInfoDTO setEndScore(int endScore) {
    this.endScore = endScore;
    setEndScoreIsSet(true);
    return this;
  }

  public void unsetEndScore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDSCORE_ISSET_ID);
  }

  /** Returns true if field endScore is set (has been assigned a value) and false otherwise */
  public boolean isSetEndScore() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDSCORE_ISSET_ID);
  }

  public void setEndScoreIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDSCORE_ISSET_ID, value);
  }

  public int getCusId() {
    return this.cusId;
  }

  public CusEstInfoDTO setCusId(int cusId) {
    this.cusId = cusId;
    setCusIdIsSet(true);
    return this;
  }

  public void unsetCusId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSID_ISSET_ID);
  }

  /** Returns true if field cusId is set (has been assigned a value) and false otherwise */
  public boolean isSetCusId() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSID_ISSET_ID);
  }

  public void setCusIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSID_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusEstInfoDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusEstInfoDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CusEstInfoDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CUS_NAME:
      if (value == null) {
        unsetCusName();
      } else {
        setCusName((String)value);
      }
      break;

    case CUS_TYPE:
      if (value == null) {
        unsetCusType();
      } else {
        setCusType((Integer)value);
      }
      break;

    case EST_PERSON:
      if (value == null) {
        unsetEstPerson();
      } else {
        setEstPerson((Integer)value);
      }
      break;

    case TEMPLATE_ID:
      if (value == null) {
        unsetTemplateId();
      } else {
        setTemplateId((Integer)value);
      }
      break;

    case EST_LV:
      if (value == null) {
        unsetEstLv();
      } else {
        setEstLv((String)value);
      }
      break;

    case EST_START_SCORE:
      if (value == null) {
        unsetEstStartScore();
      } else {
        setEstStartScore((Integer)value);
      }
      break;

    case EST_END_SCORE:
      if (value == null) {
        unsetEstEndScore();
      } else {
        setEstEndScore((Integer)value);
      }
      break;

    case START_SCORE:
      if (value == null) {
        unsetStartScore();
      } else {
        setStartScore((Integer)value);
      }
      break;

    case END_SCORE:
      if (value == null) {
        unsetEndScore();
      } else {
        setEndScore((Integer)value);
      }
      break;

    case CUS_ID:
      if (value == null) {
        unsetCusId();
      } else {
        setCusId((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUS_NAME:
      return getCusName();

    case CUS_TYPE:
      return Integer.valueOf(getCusType());

    case EST_PERSON:
      return Integer.valueOf(getEstPerson());

    case TEMPLATE_ID:
      return Integer.valueOf(getTemplateId());

    case EST_LV:
      return getEstLv();

    case EST_START_SCORE:
      return Integer.valueOf(getEstStartScore());

    case EST_END_SCORE:
      return Integer.valueOf(getEstEndScore());

    case START_SCORE:
      return Integer.valueOf(getStartScore());

    case END_SCORE:
      return Integer.valueOf(getEndScore());

    case CUS_ID:
      return Integer.valueOf(getCusId());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case USER_IDS:
      return getUserIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUS_NAME:
      return isSetCusName();
    case CUS_TYPE:
      return isSetCusType();
    case EST_PERSON:
      return isSetEstPerson();
    case TEMPLATE_ID:
      return isSetTemplateId();
    case EST_LV:
      return isSetEstLv();
    case EST_START_SCORE:
      return isSetEstStartScore();
    case EST_END_SCORE:
      return isSetEstEndScore();
    case START_SCORE:
      return isSetStartScore();
    case END_SCORE:
      return isSetEndScore();
    case CUS_ID:
      return isSetCusId();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case USER_IDS:
      return isSetUserIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusEstInfoDTO)
      return this.equals((CusEstInfoDTO)that);
    return false;
  }

  public boolean equals(CusEstInfoDTO that) {
    if (that == null)
      return false;

    boolean this_present_cusName = true && this.isSetCusName();
    boolean that_present_cusName = true && that.isSetCusName();
    if (this_present_cusName || that_present_cusName) {
      if (!(this_present_cusName && that_present_cusName))
        return false;
      if (!this.cusName.equals(that.cusName))
        return false;
    }

    boolean this_present_cusType = true;
    boolean that_present_cusType = true;
    if (this_present_cusType || that_present_cusType) {
      if (!(this_present_cusType && that_present_cusType))
        return false;
      if (this.cusType != that.cusType)
        return false;
    }

    boolean this_present_estPerson = true;
    boolean that_present_estPerson = true;
    if (this_present_estPerson || that_present_estPerson) {
      if (!(this_present_estPerson && that_present_estPerson))
        return false;
      if (this.estPerson != that.estPerson)
        return false;
    }

    boolean this_present_templateId = true;
    boolean that_present_templateId = true;
    if (this_present_templateId || that_present_templateId) {
      if (!(this_present_templateId && that_present_templateId))
        return false;
      if (this.templateId != that.templateId)
        return false;
    }

    boolean this_present_estLv = true && this.isSetEstLv();
    boolean that_present_estLv = true && that.isSetEstLv();
    if (this_present_estLv || that_present_estLv) {
      if (!(this_present_estLv && that_present_estLv))
        return false;
      if (!this.estLv.equals(that.estLv))
        return false;
    }

    boolean this_present_estStartScore = true;
    boolean that_present_estStartScore = true;
    if (this_present_estStartScore || that_present_estStartScore) {
      if (!(this_present_estStartScore && that_present_estStartScore))
        return false;
      if (this.estStartScore != that.estStartScore)
        return false;
    }

    boolean this_present_estEndScore = true;
    boolean that_present_estEndScore = true;
    if (this_present_estEndScore || that_present_estEndScore) {
      if (!(this_present_estEndScore && that_present_estEndScore))
        return false;
      if (this.estEndScore != that.estEndScore)
        return false;
    }

    boolean this_present_startScore = true;
    boolean that_present_startScore = true;
    if (this_present_startScore || that_present_startScore) {
      if (!(this_present_startScore && that_present_startScore))
        return false;
      if (this.startScore != that.startScore)
        return false;
    }

    boolean this_present_endScore = true;
    boolean that_present_endScore = true;
    if (this_present_endScore || that_present_endScore) {
      if (!(this_present_endScore && that_present_endScore))
        return false;
      if (this.endScore != that.endScore)
        return false;
    }

    boolean this_present_cusId = true;
    boolean that_present_cusId = true;
    if (this_present_cusId || that_present_cusId) {
      if (!(this_present_cusId && that_present_cusId))
        return false;
      if (this.cusId != that.cusId)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_cusName = true && (isSetCusName());
    list.add(present_cusName);
    if (present_cusName)
      list.add(cusName);

    boolean present_cusType = true;
    list.add(present_cusType);
    if (present_cusType)
      list.add(cusType);

    boolean present_estPerson = true;
    list.add(present_estPerson);
    if (present_estPerson)
      list.add(estPerson);

    boolean present_templateId = true;
    list.add(present_templateId);
    if (present_templateId)
      list.add(templateId);

    boolean present_estLv = true && (isSetEstLv());
    list.add(present_estLv);
    if (present_estLv)
      list.add(estLv);

    boolean present_estStartScore = true;
    list.add(present_estStartScore);
    if (present_estStartScore)
      list.add(estStartScore);

    boolean present_estEndScore = true;
    list.add(present_estEndScore);
    if (present_estEndScore)
      list.add(estEndScore);

    boolean present_startScore = true;
    list.add(present_startScore);
    if (present_startScore)
      list.add(startScore);

    boolean present_endScore = true;
    list.add(present_endScore);
    if (present_endScore)
      list.add(endScore);

    boolean present_cusId = true;
    list.add(present_cusId);
    if (present_cusId)
      list.add(cusId);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusEstInfoDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCusName()).compareTo(other.isSetCusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusName, other.cusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusType()).compareTo(other.isSetCusType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusType, other.cusType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstPerson()).compareTo(other.isSetEstPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estPerson, other.estPerson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemplateId()).compareTo(other.isSetTemplateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemplateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.templateId, other.templateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstLv()).compareTo(other.isSetEstLv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstLv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estLv, other.estLv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstStartScore()).compareTo(other.isSetEstStartScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstStartScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estStartScore, other.estStartScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstEndScore()).compareTo(other.isSetEstEndScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstEndScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estEndScore, other.estEndScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartScore()).compareTo(other.isSetStartScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startScore, other.startScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndScore()).compareTo(other.isSetEndScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endScore, other.endScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusId()).compareTo(other.isSetCusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusId, other.cusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusEstInfoDTO(");
    boolean first = true;

    sb.append("cusName:");
    if (this.cusName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusType:");
    sb.append(this.cusType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estPerson:");
    sb.append(this.estPerson);
    first = false;
    if (!first) sb.append(", ");
    sb.append("templateId:");
    sb.append(this.templateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estLv:");
    if (this.estLv == null) {
      sb.append("null");
    } else {
      sb.append(this.estLv);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("estStartScore:");
    sb.append(this.estStartScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("estEndScore:");
    sb.append(this.estEndScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startScore:");
    sb.append(this.startScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endScore:");
    sb.append(this.endScore);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusId:");
    sb.append(this.cusId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusEstInfoDTOStandardSchemeFactory implements SchemeFactory {
    public CusEstInfoDTOStandardScheme getScheme() {
      return new CusEstInfoDTOStandardScheme();
    }
  }

  private static class CusEstInfoDTOStandardScheme extends StandardScheme<CusEstInfoDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusEstInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusName = iprot.readString();
              struct.setCusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusType = iprot.readI32();
              struct.setCusTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EST_PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estPerson = iprot.readI32();
              struct.setEstPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEMPLATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.templateId = iprot.readI32();
              struct.setTemplateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EST_LV
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.estLv = iprot.readString();
              struct.setEstLvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EST_START_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estStartScore = iprot.readI32();
              struct.setEstStartScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EST_END_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estEndScore = iprot.readI32();
              struct.setEstEndScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.startScore = iprot.readI32();
              struct.setStartScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.endScore = iprot.readI32();
              struct.setEndScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusId = iprot.readI32();
              struct.setCusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list176.size);
                int _elem177;
                for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                {
                  _elem177 = iprot.readI32();
                  struct.userIds.add(_elem177);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusEstInfoDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cusName != null) {
        oprot.writeFieldBegin(CUS_NAME_FIELD_DESC);
        oprot.writeString(struct.cusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_TYPE_FIELD_DESC);
      oprot.writeI32(struct.cusType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EST_PERSON_FIELD_DESC);
      oprot.writeI32(struct.estPerson);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEMPLATE_ID_FIELD_DESC);
      oprot.writeI32(struct.templateId);
      oprot.writeFieldEnd();
      if (struct.estLv != null) {
        oprot.writeFieldBegin(EST_LV_FIELD_DESC);
        oprot.writeString(struct.estLv);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EST_START_SCORE_FIELD_DESC);
      oprot.writeI32(struct.estStartScore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EST_END_SCORE_FIELD_DESC);
      oprot.writeI32(struct.estEndScore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_SCORE_FIELD_DESC);
      oprot.writeI32(struct.startScore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_SCORE_FIELD_DESC);
      oprot.writeI32(struct.endScore);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CUS_ID_FIELD_DESC);
      oprot.writeI32(struct.cusId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter179 : struct.userIds)
          {
            oprot.writeI32(_iter179);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusEstInfoDTOTupleSchemeFactory implements SchemeFactory {
    public CusEstInfoDTOTupleScheme getScheme() {
      return new CusEstInfoDTOTupleScheme();
    }
  }

  private static class CusEstInfoDTOTupleScheme extends TupleScheme<CusEstInfoDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusEstInfoDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCusName()) {
        optionals.set(0);
      }
      if (struct.isSetCusType()) {
        optionals.set(1);
      }
      if (struct.isSetEstPerson()) {
        optionals.set(2);
      }
      if (struct.isSetTemplateId()) {
        optionals.set(3);
      }
      if (struct.isSetEstLv()) {
        optionals.set(4);
      }
      if (struct.isSetEstStartScore()) {
        optionals.set(5);
      }
      if (struct.isSetEstEndScore()) {
        optionals.set(6);
      }
      if (struct.isSetStartScore()) {
        optionals.set(7);
      }
      if (struct.isSetEndScore()) {
        optionals.set(8);
      }
      if (struct.isSetCusId()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      if (struct.isSetUserIds()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetCusName()) {
        oprot.writeString(struct.cusName);
      }
      if (struct.isSetCusType()) {
        oprot.writeI32(struct.cusType);
      }
      if (struct.isSetEstPerson()) {
        oprot.writeI32(struct.estPerson);
      }
      if (struct.isSetTemplateId()) {
        oprot.writeI32(struct.templateId);
      }
      if (struct.isSetEstLv()) {
        oprot.writeString(struct.estLv);
      }
      if (struct.isSetEstStartScore()) {
        oprot.writeI32(struct.estStartScore);
      }
      if (struct.isSetEstEndScore()) {
        oprot.writeI32(struct.estEndScore);
      }
      if (struct.isSetStartScore()) {
        oprot.writeI32(struct.startScore);
      }
      if (struct.isSetEndScore()) {
        oprot.writeI32(struct.endScore);
      }
      if (struct.isSetCusId()) {
        oprot.writeI32(struct.cusId);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter180 : struct.userIds)
          {
            oprot.writeI32(_iter180);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusEstInfoDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.cusName = iprot.readString();
        struct.setCusNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusType = iprot.readI32();
        struct.setCusTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.estPerson = iprot.readI32();
        struct.setEstPersonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.templateId = iprot.readI32();
        struct.setTemplateIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.estLv = iprot.readString();
        struct.setEstLvIsSet(true);
      }
      if (incoming.get(5)) {
        struct.estStartScore = iprot.readI32();
        struct.setEstStartScoreIsSet(true);
      }
      if (incoming.get(6)) {
        struct.estEndScore = iprot.readI32();
        struct.setEstEndScoreIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startScore = iprot.readI32();
        struct.setStartScoreIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endScore = iprot.readI32();
        struct.setEndScoreIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cusId = iprot.readI32();
        struct.setCusIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list181.size);
          int _elem182;
          for (int _i183 = 0; _i183 < _list181.size; ++_i183)
          {
            _elem182 = iprot.readI32();
            struct.userIds.add(_elem182);
          }
        }
        struct.setUserIdsIsSet(true);
      }
    }
  }

}


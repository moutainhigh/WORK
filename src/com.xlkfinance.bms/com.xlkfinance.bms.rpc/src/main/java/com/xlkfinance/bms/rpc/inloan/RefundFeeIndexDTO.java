/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class RefundFeeIndexDTO implements org.apache.thrift.TBase<RefundFeeIndexDTO, RefundFeeIndexDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RefundFeeIndexDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundFeeIndexDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROJECT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("projectNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("projectName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BIZ_APPLY_HANDLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("bizApplyHandleStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField REC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("recStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BACK_FEE_APPLY_HANDLE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("backFeeApplyHandleStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CANCEL_GUARANTEE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelGuaranteeDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CUSTOMER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("customerName", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OLD_HOME_FIELD_DESC = new org.apache.thrift.protocol.TField("oldHome", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PROJECT_PASS_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("projectPassDate", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LOAN_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("loanMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField REQUEST_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestDate", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField BACK_FEE_APPLY_HANDLE_STATUS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("backFeeApplyHandleStatusList", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField CONFIRM_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)22);
  private static final org.apache.thrift.protocol.TField IS_CONFIRM_FIELD_DESC = new org.apache.thrift.protocol.TField("isConfirm", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField CONFIRM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmDate", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField RETURN_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("returnFee", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField HOUSE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("houseName", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField BUYER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("buyerName", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField SELLER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("sellerName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField IS_CHECHAN_FIELD_DESC = new org.apache.thrift.protocol.TField("isChechan", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField PM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pmUserId", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceNo", org.apache.thrift.protocol.TType.I32, (short)34);
  private static final org.apache.thrift.protocol.TField BUSINESS_CATELOG_FIELD_DESC = new org.apache.thrift.protocol.TField("businessCatelog", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)36);
  private static final org.apache.thrift.protocol.TField PM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pmName", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField REC_ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("recAccountName", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField GUARANTEE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("guaranteeFee", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField RECE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("receMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)40);
  private static final org.apache.thrift.protocol.TField FIN_POUNDAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("finPoundage", org.apache.thrift.protocol.TType.DOUBLE, (short)41);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSource", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("innerOrOut", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField INNER_OR_OUT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("InnerOrOutName", org.apache.thrift.protocol.TType.STRING, (short)44);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceName", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField BIZ_APPLY_HANDLE_STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bizApplyHandleStatusName", org.apache.thrift.protocol.TType.STRING, (short)46);
  private static final org.apache.thrift.protocol.TField BACK_FEE_APPLY_HANDLE_STATUS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("backFeeApplyHandleStatusName", org.apache.thrift.protocol.TType.STRING, (short)47);
  private static final org.apache.thrift.protocol.TField FORECLOSURE_FLOOR_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("foreclosureFloorMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)48);
  private static final org.apache.thrift.protocol.TField FIN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("finInterest", org.apache.thrift.protocol.TType.DOUBLE, (short)49);
  private static final org.apache.thrift.protocol.TField BANK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bankName", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField BATCH_REFUND_FEE_MAIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("batchRefundFeeMainId", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField BATCH_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("batchName", org.apache.thrift.protocol.TType.STRING, (short)52);
  private static final org.apache.thrift.protocol.TField BUSINESS_SOURCE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("businessSourceStr", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDate", org.apache.thrift.protocol.TType.STRING, (short)54);
  private static final org.apache.thrift.protocol.TField REPAYMENT_DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentDateEnd", org.apache.thrift.protocol.TType.STRING, (short)55);
  private static final org.apache.thrift.protocol.TField REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)56);
  private static final org.apache.thrift.protocol.TField NOT_REPAYMENT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("notRepaymentMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)57);
  private static final org.apache.thrift.protocol.TField EXTENSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("extensionFee", org.apache.thrift.protocol.TType.DOUBLE, (short)58);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundFeeIndexDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundFeeIndexDTOTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public String projectNumber; // required
  public String projectName; // required
  public int bizApplyHandleStatus; // required
  public int recStatus; // required
  public int backFeeApplyHandleStatus; // required
  public String cancelGuaranteeDate; // required
  public List<Integer> userIds; // required
  public int page; // required
  public int rows; // required
  public String customerName; // required
  public String oldHome; // required
  public String projectPassDate; // required
  public int type; // required
  public double loanMoney; // required
  public int productType; // required
  public int productId; // required
  public String productName; // required
  public String requestDate; // required
  public List<Integer> backFeeApplyHandleStatusList; // required
  public double confirmMoney; // required
  public int isConfirm; // required
  public String confirmDate; // required
  public double returnFee; // required
  public String houseName; // required
  public String buyerName; // required
  public String sellerName; // required
  public int isChechan; // required
  public int pmUserId; // required
  public int orgId; // required
  public String startDate; // required
  public String endDate; // required
  public int businessSourceNo; // required
  public int businessCatelog; // required
  public String orgName; // required
  public String pmName; // required
  public String recAccountName; // required
  public double guaranteeFee; // required
  public double receMoney; // required
  public double finPoundage; // required
  public int businessSource; // required
  public int innerOrOut; // required
  public String InnerOrOutName; // required
  public String businessSourceName; // required
  public String bizApplyHandleStatusName; // required
  public String backFeeApplyHandleStatusName; // required
  public double foreclosureFloorMoney; // required
  public double finInterest; // required
  public String bankName; // required
  public int batchRefundFeeMainId; // required
  public String batchName; // required
  public String businessSourceStr; // required
  public String repaymentDate; // required
  public String repaymentDateEnd; // required
  public double repaymentMoney; // required
  public double notRepaymentMoney; // required
  public double extensionFee; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    PROJECT_NUMBER((short)3, "projectNumber"),
    PROJECT_NAME((short)4, "projectName"),
    BIZ_APPLY_HANDLE_STATUS((short)5, "bizApplyHandleStatus"),
    REC_STATUS((short)6, "recStatus"),
    BACK_FEE_APPLY_HANDLE_STATUS((short)7, "backFeeApplyHandleStatus"),
    CANCEL_GUARANTEE_DATE((short)8, "cancelGuaranteeDate"),
    USER_IDS((short)9, "userIds"),
    PAGE((short)10, "page"),
    ROWS((short)11, "rows"),
    CUSTOMER_NAME((short)12, "customerName"),
    OLD_HOME((short)13, "oldHome"),
    PROJECT_PASS_DATE((short)14, "projectPassDate"),
    TYPE((short)15, "type"),
    LOAN_MONEY((short)16, "loanMoney"),
    PRODUCT_TYPE((short)17, "productType"),
    PRODUCT_ID((short)18, "productId"),
    PRODUCT_NAME((short)19, "productName"),
    REQUEST_DATE((short)20, "requestDate"),
    BACK_FEE_APPLY_HANDLE_STATUS_LIST((short)21, "backFeeApplyHandleStatusList"),
    CONFIRM_MONEY((short)22, "confirmMoney"),
    IS_CONFIRM((short)23, "isConfirm"),
    CONFIRM_DATE((short)24, "confirmDate"),
    RETURN_FEE((short)25, "returnFee"),
    HOUSE_NAME((short)26, "houseName"),
    BUYER_NAME((short)27, "buyerName"),
    SELLER_NAME((short)28, "sellerName"),
    IS_CHECHAN((short)29, "isChechan"),
    PM_USER_ID((short)30, "pmUserId"),
    ORG_ID((short)31, "orgId"),
    START_DATE((short)32, "startDate"),
    END_DATE((short)33, "endDate"),
    BUSINESS_SOURCE_NO((short)34, "businessSourceNo"),
    BUSINESS_CATELOG((short)35, "businessCatelog"),
    ORG_NAME((short)36, "orgName"),
    PM_NAME((short)37, "pmName"),
    REC_ACCOUNT_NAME((short)38, "recAccountName"),
    GUARANTEE_FEE((short)39, "guaranteeFee"),
    RECE_MONEY((short)40, "receMoney"),
    FIN_POUNDAGE((short)41, "finPoundage"),
    BUSINESS_SOURCE((short)42, "businessSource"),
    INNER_OR_OUT((short)43, "innerOrOut"),
    INNER_OR_OUT_NAME((short)44, "InnerOrOutName"),
    BUSINESS_SOURCE_NAME((short)45, "businessSourceName"),
    BIZ_APPLY_HANDLE_STATUS_NAME((short)46, "bizApplyHandleStatusName"),
    BACK_FEE_APPLY_HANDLE_STATUS_NAME((short)47, "backFeeApplyHandleStatusName"),
    FORECLOSURE_FLOOR_MONEY((short)48, "foreclosureFloorMoney"),
    FIN_INTEREST((short)49, "finInterest"),
    BANK_NAME((short)50, "bankName"),
    BATCH_REFUND_FEE_MAIN_ID((short)51, "batchRefundFeeMainId"),
    BATCH_NAME((short)52, "batchName"),
    BUSINESS_SOURCE_STR((short)53, "businessSourceStr"),
    REPAYMENT_DATE((short)54, "repaymentDate"),
    REPAYMENT_DATE_END((short)55, "repaymentDateEnd"),
    REPAYMENT_MONEY((short)56, "repaymentMoney"),
    NOT_REPAYMENT_MONEY((short)57, "notRepaymentMoney"),
    EXTENSION_FEE((short)58, "extensionFee");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // PROJECT_NUMBER
          return PROJECT_NUMBER;
        case 4: // PROJECT_NAME
          return PROJECT_NAME;
        case 5: // BIZ_APPLY_HANDLE_STATUS
          return BIZ_APPLY_HANDLE_STATUS;
        case 6: // REC_STATUS
          return REC_STATUS;
        case 7: // BACK_FEE_APPLY_HANDLE_STATUS
          return BACK_FEE_APPLY_HANDLE_STATUS;
        case 8: // CANCEL_GUARANTEE_DATE
          return CANCEL_GUARANTEE_DATE;
        case 9: // USER_IDS
          return USER_IDS;
        case 10: // PAGE
          return PAGE;
        case 11: // ROWS
          return ROWS;
        case 12: // CUSTOMER_NAME
          return CUSTOMER_NAME;
        case 13: // OLD_HOME
          return OLD_HOME;
        case 14: // PROJECT_PASS_DATE
          return PROJECT_PASS_DATE;
        case 15: // TYPE
          return TYPE;
        case 16: // LOAN_MONEY
          return LOAN_MONEY;
        case 17: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 18: // PRODUCT_ID
          return PRODUCT_ID;
        case 19: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 20: // REQUEST_DATE
          return REQUEST_DATE;
        case 21: // BACK_FEE_APPLY_HANDLE_STATUS_LIST
          return BACK_FEE_APPLY_HANDLE_STATUS_LIST;
        case 22: // CONFIRM_MONEY
          return CONFIRM_MONEY;
        case 23: // IS_CONFIRM
          return IS_CONFIRM;
        case 24: // CONFIRM_DATE
          return CONFIRM_DATE;
        case 25: // RETURN_FEE
          return RETURN_FEE;
        case 26: // HOUSE_NAME
          return HOUSE_NAME;
        case 27: // BUYER_NAME
          return BUYER_NAME;
        case 28: // SELLER_NAME
          return SELLER_NAME;
        case 29: // IS_CHECHAN
          return IS_CHECHAN;
        case 30: // PM_USER_ID
          return PM_USER_ID;
        case 31: // ORG_ID
          return ORG_ID;
        case 32: // START_DATE
          return START_DATE;
        case 33: // END_DATE
          return END_DATE;
        case 34: // BUSINESS_SOURCE_NO
          return BUSINESS_SOURCE_NO;
        case 35: // BUSINESS_CATELOG
          return BUSINESS_CATELOG;
        case 36: // ORG_NAME
          return ORG_NAME;
        case 37: // PM_NAME
          return PM_NAME;
        case 38: // REC_ACCOUNT_NAME
          return REC_ACCOUNT_NAME;
        case 39: // GUARANTEE_FEE
          return GUARANTEE_FEE;
        case 40: // RECE_MONEY
          return RECE_MONEY;
        case 41: // FIN_POUNDAGE
          return FIN_POUNDAGE;
        case 42: // BUSINESS_SOURCE
          return BUSINESS_SOURCE;
        case 43: // INNER_OR_OUT
          return INNER_OR_OUT;
        case 44: // INNER_OR_OUT_NAME
          return INNER_OR_OUT_NAME;
        case 45: // BUSINESS_SOURCE_NAME
          return BUSINESS_SOURCE_NAME;
        case 46: // BIZ_APPLY_HANDLE_STATUS_NAME
          return BIZ_APPLY_HANDLE_STATUS_NAME;
        case 47: // BACK_FEE_APPLY_HANDLE_STATUS_NAME
          return BACK_FEE_APPLY_HANDLE_STATUS_NAME;
        case 48: // FORECLOSURE_FLOOR_MONEY
          return FORECLOSURE_FLOOR_MONEY;
        case 49: // FIN_INTEREST
          return FIN_INTEREST;
        case 50: // BANK_NAME
          return BANK_NAME;
        case 51: // BATCH_REFUND_FEE_MAIN_ID
          return BATCH_REFUND_FEE_MAIN_ID;
        case 52: // BATCH_NAME
          return BATCH_NAME;
        case 53: // BUSINESS_SOURCE_STR
          return BUSINESS_SOURCE_STR;
        case 54: // REPAYMENT_DATE
          return REPAYMENT_DATE;
        case 55: // REPAYMENT_DATE_END
          return REPAYMENT_DATE_END;
        case 56: // REPAYMENT_MONEY
          return REPAYMENT_MONEY;
        case 57: // NOT_REPAYMENT_MONEY
          return NOT_REPAYMENT_MONEY;
        case 58: // EXTENSION_FEE
          return EXTENSION_FEE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __BIZAPPLYHANDLESTATUS_ISSET_ID = 2;
  private static final int __RECSTATUS_ISSET_ID = 3;
  private static final int __BACKFEEAPPLYHANDLESTATUS_ISSET_ID = 4;
  private static final int __PAGE_ISSET_ID = 5;
  private static final int __ROWS_ISSET_ID = 6;
  private static final int __TYPE_ISSET_ID = 7;
  private static final int __LOANMONEY_ISSET_ID = 8;
  private static final int __PRODUCTTYPE_ISSET_ID = 9;
  private static final int __PRODUCTID_ISSET_ID = 10;
  private static final int __CONFIRMMONEY_ISSET_ID = 11;
  private static final int __ISCONFIRM_ISSET_ID = 12;
  private static final int __RETURNFEE_ISSET_ID = 13;
  private static final int __ISCHECHAN_ISSET_ID = 14;
  private static final int __PMUSERID_ISSET_ID = 15;
  private static final int __ORGID_ISSET_ID = 16;
  private static final int __BUSINESSSOURCENO_ISSET_ID = 17;
  private static final int __BUSINESSCATELOG_ISSET_ID = 18;
  private static final int __GUARANTEEFEE_ISSET_ID = 19;
  private static final int __RECEMONEY_ISSET_ID = 20;
  private static final int __FINPOUNDAGE_ISSET_ID = 21;
  private static final int __BUSINESSSOURCE_ISSET_ID = 22;
  private static final int __INNEROROUT_ISSET_ID = 23;
  private static final int __FORECLOSUREFLOORMONEY_ISSET_ID = 24;
  private static final int __FININTEREST_ISSET_ID = 25;
  private static final int __BATCHREFUNDFEEMAINID_ISSET_ID = 26;
  private static final int __REPAYMENTMONEY_ISSET_ID = 27;
  private static final int __NOTREPAYMENTMONEY_ISSET_ID = 28;
  private static final int __EXTENSIONFEE_ISSET_ID = 29;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("projectNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_NAME, new org.apache.thrift.meta_data.FieldMetaData("projectName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZ_APPLY_HANDLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("bizApplyHandleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("recStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BACK_FEE_APPLY_HANDLE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("backFeeApplyHandleStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCEL_GUARANTEE_DATE, new org.apache.thrift.meta_data.FieldMetaData("cancelGuaranteeDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUSTOMER_NAME, new org.apache.thrift.meta_data.FieldMetaData("customerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_HOME, new org.apache.thrift.meta_data.FieldMetaData("oldHome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT_PASS_DATE, new org.apache.thrift.meta_data.FieldMetaData("projectPassDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_MONEY, new org.apache.thrift.meta_data.FieldMetaData("loanMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DATE, new org.apache.thrift.meta_data.FieldMetaData("requestDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK_FEE_APPLY_HANDLE_STATUS_LIST, new org.apache.thrift.meta_data.FieldMetaData("backFeeApplyHandleStatusList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CONFIRM_MONEY, new org.apache.thrift.meta_data.FieldMetaData("confirmMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.IS_CONFIRM, new org.apache.thrift.meta_data.FieldMetaData("isConfirm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIRM_DATE, new org.apache.thrift.meta_data.FieldMetaData("confirmDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETURN_FEE, new org.apache.thrift.meta_data.FieldMetaData("returnFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HOUSE_NAME, new org.apache.thrift.meta_data.FieldMetaData("houseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYER_NAME, new org.apache.thrift.meta_data.FieldMetaData("buyerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER_NAME, new org.apache.thrift.meta_data.FieldMetaData("sellerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_CHECHAN, new org.apache.thrift.meta_data.FieldMetaData("isChechan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("pmUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NO, new org.apache.thrift.meta_data.FieldMetaData("businessSourceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BUSINESS_CATELOG, new org.apache.thrift.meta_data.FieldMetaData("businessCatelog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PM_NAME, new org.apache.thrift.meta_data.FieldMetaData("pmName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REC_ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("recAccountName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GUARANTEE_FEE, new org.apache.thrift.meta_data.FieldMetaData("guaranteeFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("receMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIN_POUNDAGE, new org.apache.thrift.meta_data.FieldMetaData("finPoundage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BUSINESS_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("businessSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INNER_OR_OUT, new org.apache.thrift.meta_data.FieldMetaData("innerOrOut", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INNER_OR_OUT_NAME, new org.apache.thrift.meta_data.FieldMetaData("InnerOrOutName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_NAME, new org.apache.thrift.meta_data.FieldMetaData("businessSourceName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIZ_APPLY_HANDLE_STATUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("bizApplyHandleStatusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACK_FEE_APPLY_HANDLE_STATUS_NAME, new org.apache.thrift.meta_data.FieldMetaData("backFeeApplyHandleStatusName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORECLOSURE_FLOOR_MONEY, new org.apache.thrift.meta_data.FieldMetaData("foreclosureFloorMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FIN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("finInterest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BANK_NAME, new org.apache.thrift.meta_data.FieldMetaData("bankName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_REFUND_FEE_MAIN_ID, new org.apache.thrift.meta_data.FieldMetaData("batchRefundFeeMainId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BATCH_NAME, new org.apache.thrift.meta_data.FieldMetaData("batchName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_SOURCE_STR, new org.apache.thrift.meta_data.FieldMetaData("businessSourceStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("repaymentDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_DATE_END, new org.apache.thrift.meta_data.FieldMetaData("repaymentDateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("repaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOT_REPAYMENT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("notRepaymentMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXTENSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("extensionFee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundFeeIndexDTO.class, metaDataMap);
  }

  public RefundFeeIndexDTO() {
    this.page = 1;

    this.rows = 10;

  }

  public RefundFeeIndexDTO(
    int pid,
    int projectId,
    String projectNumber,
    String projectName,
    int bizApplyHandleStatus,
    int recStatus,
    int backFeeApplyHandleStatus,
    String cancelGuaranteeDate,
    List<Integer> userIds,
    int page,
    int rows,
    String customerName,
    String oldHome,
    String projectPassDate,
    int type,
    double loanMoney,
    int productType,
    int productId,
    String productName,
    String requestDate,
    List<Integer> backFeeApplyHandleStatusList,
    double confirmMoney,
    int isConfirm,
    String confirmDate,
    double returnFee,
    String houseName,
    String buyerName,
    String sellerName,
    int isChechan,
    int pmUserId,
    int orgId,
    String startDate,
    String endDate,
    int businessSourceNo,
    int businessCatelog,
    String orgName,
    String pmName,
    String recAccountName,
    double guaranteeFee,
    double receMoney,
    double finPoundage,
    int businessSource,
    int innerOrOut,
    String InnerOrOutName,
    String businessSourceName,
    String bizApplyHandleStatusName,
    String backFeeApplyHandleStatusName,
    double foreclosureFloorMoney,
    double finInterest,
    String bankName,
    int batchRefundFeeMainId,
    String batchName,
    String businessSourceStr,
    String repaymentDate,
    String repaymentDateEnd,
    double repaymentMoney,
    double notRepaymentMoney,
    double extensionFee)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.projectNumber = projectNumber;
    this.projectName = projectName;
    this.bizApplyHandleStatus = bizApplyHandleStatus;
    setBizApplyHandleStatusIsSet(true);
    this.recStatus = recStatus;
    setRecStatusIsSet(true);
    this.backFeeApplyHandleStatus = backFeeApplyHandleStatus;
    setBackFeeApplyHandleStatusIsSet(true);
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    this.userIds = userIds;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.customerName = customerName;
    this.oldHome = oldHome;
    this.projectPassDate = projectPassDate;
    this.type = type;
    setTypeIsSet(true);
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    this.productType = productType;
    setProductTypeIsSet(true);
    this.productId = productId;
    setProductIdIsSet(true);
    this.productName = productName;
    this.requestDate = requestDate;
    this.backFeeApplyHandleStatusList = backFeeApplyHandleStatusList;
    this.confirmMoney = confirmMoney;
    setConfirmMoneyIsSet(true);
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    this.confirmDate = confirmDate;
    this.returnFee = returnFee;
    setReturnFeeIsSet(true);
    this.houseName = houseName;
    this.buyerName = buyerName;
    this.sellerName = sellerName;
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    this.orgId = orgId;
    setOrgIdIsSet(true);
    this.startDate = startDate;
    this.endDate = endDate;
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    this.businessCatelog = businessCatelog;
    setBusinessCatelogIsSet(true);
    this.orgName = orgName;
    this.pmName = pmName;
    this.recAccountName = recAccountName;
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    this.receMoney = receMoney;
    setReceMoneyIsSet(true);
    this.finPoundage = finPoundage;
    setFinPoundageIsSet(true);
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    this.InnerOrOutName = InnerOrOutName;
    this.businessSourceName = businessSourceName;
    this.bizApplyHandleStatusName = bizApplyHandleStatusName;
    this.backFeeApplyHandleStatusName = backFeeApplyHandleStatusName;
    this.foreclosureFloorMoney = foreclosureFloorMoney;
    setForeclosureFloorMoneyIsSet(true);
    this.finInterest = finInterest;
    setFinInterestIsSet(true);
    this.bankName = bankName;
    this.batchRefundFeeMainId = batchRefundFeeMainId;
    setBatchRefundFeeMainIdIsSet(true);
    this.batchName = batchName;
    this.businessSourceStr = businessSourceStr;
    this.repaymentDate = repaymentDate;
    this.repaymentDateEnd = repaymentDateEnd;
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    this.notRepaymentMoney = notRepaymentMoney;
    setNotRepaymentMoneyIsSet(true);
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundFeeIndexDTO(RefundFeeIndexDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    if (other.isSetProjectNumber()) {
      this.projectNumber = other.projectNumber;
    }
    if (other.isSetProjectName()) {
      this.projectName = other.projectName;
    }
    this.bizApplyHandleStatus = other.bizApplyHandleStatus;
    this.recStatus = other.recStatus;
    this.backFeeApplyHandleStatus = other.backFeeApplyHandleStatus;
    if (other.isSetCancelGuaranteeDate()) {
      this.cancelGuaranteeDate = other.cancelGuaranteeDate;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetCustomerName()) {
      this.customerName = other.customerName;
    }
    if (other.isSetOldHome()) {
      this.oldHome = other.oldHome;
    }
    if (other.isSetProjectPassDate()) {
      this.projectPassDate = other.projectPassDate;
    }
    this.type = other.type;
    this.loanMoney = other.loanMoney;
    this.productType = other.productType;
    this.productId = other.productId;
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetRequestDate()) {
      this.requestDate = other.requestDate;
    }
    if (other.isSetBackFeeApplyHandleStatusList()) {
      List<Integer> __this__backFeeApplyHandleStatusList = new ArrayList<Integer>(other.backFeeApplyHandleStatusList);
      this.backFeeApplyHandleStatusList = __this__backFeeApplyHandleStatusList;
    }
    this.confirmMoney = other.confirmMoney;
    this.isConfirm = other.isConfirm;
    if (other.isSetConfirmDate()) {
      this.confirmDate = other.confirmDate;
    }
    this.returnFee = other.returnFee;
    if (other.isSetHouseName()) {
      this.houseName = other.houseName;
    }
    if (other.isSetBuyerName()) {
      this.buyerName = other.buyerName;
    }
    if (other.isSetSellerName()) {
      this.sellerName = other.sellerName;
    }
    this.isChechan = other.isChechan;
    this.pmUserId = other.pmUserId;
    this.orgId = other.orgId;
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    this.businessSourceNo = other.businessSourceNo;
    this.businessCatelog = other.businessCatelog;
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    if (other.isSetPmName()) {
      this.pmName = other.pmName;
    }
    if (other.isSetRecAccountName()) {
      this.recAccountName = other.recAccountName;
    }
    this.guaranteeFee = other.guaranteeFee;
    this.receMoney = other.receMoney;
    this.finPoundage = other.finPoundage;
    this.businessSource = other.businessSource;
    this.innerOrOut = other.innerOrOut;
    if (other.isSetInnerOrOutName()) {
      this.InnerOrOutName = other.InnerOrOutName;
    }
    if (other.isSetBusinessSourceName()) {
      this.businessSourceName = other.businessSourceName;
    }
    if (other.isSetBizApplyHandleStatusName()) {
      this.bizApplyHandleStatusName = other.bizApplyHandleStatusName;
    }
    if (other.isSetBackFeeApplyHandleStatusName()) {
      this.backFeeApplyHandleStatusName = other.backFeeApplyHandleStatusName;
    }
    this.foreclosureFloorMoney = other.foreclosureFloorMoney;
    this.finInterest = other.finInterest;
    if (other.isSetBankName()) {
      this.bankName = other.bankName;
    }
    this.batchRefundFeeMainId = other.batchRefundFeeMainId;
    if (other.isSetBatchName()) {
      this.batchName = other.batchName;
    }
    if (other.isSetBusinessSourceStr()) {
      this.businessSourceStr = other.businessSourceStr;
    }
    if (other.isSetRepaymentDate()) {
      this.repaymentDate = other.repaymentDate;
    }
    if (other.isSetRepaymentDateEnd()) {
      this.repaymentDateEnd = other.repaymentDateEnd;
    }
    this.repaymentMoney = other.repaymentMoney;
    this.notRepaymentMoney = other.notRepaymentMoney;
    this.extensionFee = other.extensionFee;
  }

  public RefundFeeIndexDTO deepCopy() {
    return new RefundFeeIndexDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.projectNumber = null;
    this.projectName = null;
    setBizApplyHandleStatusIsSet(false);
    this.bizApplyHandleStatus = 0;
    setRecStatusIsSet(false);
    this.recStatus = 0;
    setBackFeeApplyHandleStatusIsSet(false);
    this.backFeeApplyHandleStatus = 0;
    this.cancelGuaranteeDate = null;
    this.userIds = null;
    this.page = 1;

    this.rows = 10;

    this.customerName = null;
    this.oldHome = null;
    this.projectPassDate = null;
    setTypeIsSet(false);
    this.type = 0;
    setLoanMoneyIsSet(false);
    this.loanMoney = 0.0;
    setProductTypeIsSet(false);
    this.productType = 0;
    setProductIdIsSet(false);
    this.productId = 0;
    this.productName = null;
    this.requestDate = null;
    this.backFeeApplyHandleStatusList = null;
    setConfirmMoneyIsSet(false);
    this.confirmMoney = 0.0;
    setIsConfirmIsSet(false);
    this.isConfirm = 0;
    this.confirmDate = null;
    setReturnFeeIsSet(false);
    this.returnFee = 0.0;
    this.houseName = null;
    this.buyerName = null;
    this.sellerName = null;
    setIsChechanIsSet(false);
    this.isChechan = 0;
    setPmUserIdIsSet(false);
    this.pmUserId = 0;
    setOrgIdIsSet(false);
    this.orgId = 0;
    this.startDate = null;
    this.endDate = null;
    setBusinessSourceNoIsSet(false);
    this.businessSourceNo = 0;
    setBusinessCatelogIsSet(false);
    this.businessCatelog = 0;
    this.orgName = null;
    this.pmName = null;
    this.recAccountName = null;
    setGuaranteeFeeIsSet(false);
    this.guaranteeFee = 0.0;
    setReceMoneyIsSet(false);
    this.receMoney = 0.0;
    setFinPoundageIsSet(false);
    this.finPoundage = 0.0;
    setBusinessSourceIsSet(false);
    this.businessSource = 0;
    setInnerOrOutIsSet(false);
    this.innerOrOut = 0;
    this.InnerOrOutName = null;
    this.businessSourceName = null;
    this.bizApplyHandleStatusName = null;
    this.backFeeApplyHandleStatusName = null;
    setForeclosureFloorMoneyIsSet(false);
    this.foreclosureFloorMoney = 0.0;
    setFinInterestIsSet(false);
    this.finInterest = 0.0;
    this.bankName = null;
    setBatchRefundFeeMainIdIsSet(false);
    this.batchRefundFeeMainId = 0;
    this.batchName = null;
    this.businessSourceStr = null;
    this.repaymentDate = null;
    this.repaymentDateEnd = null;
    setRepaymentMoneyIsSet(false);
    this.repaymentMoney = 0.0;
    setNotRepaymentMoneyIsSet(false);
    this.notRepaymentMoney = 0.0;
    setExtensionFeeIsSet(false);
    this.extensionFee = 0.0;
  }

  public int getPid() {
    return this.pid;
  }

  public RefundFeeIndexDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public RefundFeeIndexDTO setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public String getProjectNumber() {
    return this.projectNumber;
  }

  public RefundFeeIndexDTO setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  public void unsetProjectNumber() {
    this.projectNumber = null;
  }

  /** Returns true if field projectNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectNumber() {
    return this.projectNumber != null;
  }

  public void setProjectNumberIsSet(boolean value) {
    if (!value) {
      this.projectNumber = null;
    }
  }

  public String getProjectName() {
    return this.projectName;
  }

  public RefundFeeIndexDTO setProjectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  public void unsetProjectName() {
    this.projectName = null;
  }

  /** Returns true if field projectName is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectName() {
    return this.projectName != null;
  }

  public void setProjectNameIsSet(boolean value) {
    if (!value) {
      this.projectName = null;
    }
  }

  public int getBizApplyHandleStatus() {
    return this.bizApplyHandleStatus;
  }

  public RefundFeeIndexDTO setBizApplyHandleStatus(int bizApplyHandleStatus) {
    this.bizApplyHandleStatus = bizApplyHandleStatus;
    setBizApplyHandleStatusIsSet(true);
    return this;
  }

  public void unsetBizApplyHandleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BIZAPPLYHANDLESTATUS_ISSET_ID);
  }

  /** Returns true if field bizApplyHandleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBizApplyHandleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __BIZAPPLYHANDLESTATUS_ISSET_ID);
  }

  public void setBizApplyHandleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BIZAPPLYHANDLESTATUS_ISSET_ID, value);
  }

  public int getRecStatus() {
    return this.recStatus;
  }

  public RefundFeeIndexDTO setRecStatus(int recStatus) {
    this.recStatus = recStatus;
    setRecStatusIsSet(true);
    return this;
  }

  public void unsetRecStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECSTATUS_ISSET_ID);
  }

  /** Returns true if field recStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetRecStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RECSTATUS_ISSET_ID);
  }

  public void setRecStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECSTATUS_ISSET_ID, value);
  }

  public int getBackFeeApplyHandleStatus() {
    return this.backFeeApplyHandleStatus;
  }

  public RefundFeeIndexDTO setBackFeeApplyHandleStatus(int backFeeApplyHandleStatus) {
    this.backFeeApplyHandleStatus = backFeeApplyHandleStatus;
    setBackFeeApplyHandleStatusIsSet(true);
    return this;
  }

  public void unsetBackFeeApplyHandleStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACKFEEAPPLYHANDLESTATUS_ISSET_ID);
  }

  /** Returns true if field backFeeApplyHandleStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBackFeeApplyHandleStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __BACKFEEAPPLYHANDLESTATUS_ISSET_ID);
  }

  public void setBackFeeApplyHandleStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACKFEEAPPLYHANDLESTATUS_ISSET_ID, value);
  }

  public String getCancelGuaranteeDate() {
    return this.cancelGuaranteeDate;
  }

  public RefundFeeIndexDTO setCancelGuaranteeDate(String cancelGuaranteeDate) {
    this.cancelGuaranteeDate = cancelGuaranteeDate;
    return this;
  }

  public void unsetCancelGuaranteeDate() {
    this.cancelGuaranteeDate = null;
  }

  /** Returns true if field cancelGuaranteeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelGuaranteeDate() {
    return this.cancelGuaranteeDate != null;
  }

  public void setCancelGuaranteeDateIsSet(boolean value) {
    if (!value) {
      this.cancelGuaranteeDate = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public RefundFeeIndexDTO setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public RefundFeeIndexDTO setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public RefundFeeIndexDTO setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getCustomerName() {
    return this.customerName;
  }

  public RefundFeeIndexDTO setCustomerName(String customerName) {
    this.customerName = customerName;
    return this;
  }

  public void unsetCustomerName() {
    this.customerName = null;
  }

  /** Returns true if field customerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerName() {
    return this.customerName != null;
  }

  public void setCustomerNameIsSet(boolean value) {
    if (!value) {
      this.customerName = null;
    }
  }

  public String getOldHome() {
    return this.oldHome;
  }

  public RefundFeeIndexDTO setOldHome(String oldHome) {
    this.oldHome = oldHome;
    return this;
  }

  public void unsetOldHome() {
    this.oldHome = null;
  }

  /** Returns true if field oldHome is set (has been assigned a value) and false otherwise */
  public boolean isSetOldHome() {
    return this.oldHome != null;
  }

  public void setOldHomeIsSet(boolean value) {
    if (!value) {
      this.oldHome = null;
    }
  }

  public String getProjectPassDate() {
    return this.projectPassDate;
  }

  public RefundFeeIndexDTO setProjectPassDate(String projectPassDate) {
    this.projectPassDate = projectPassDate;
    return this;
  }

  public void unsetProjectPassDate() {
    this.projectPassDate = null;
  }

  /** Returns true if field projectPassDate is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectPassDate() {
    return this.projectPassDate != null;
  }

  public void setProjectPassDateIsSet(boolean value) {
    if (!value) {
      this.projectPassDate = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public RefundFeeIndexDTO setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public double getLoanMoney() {
    return this.loanMoney;
  }

  public RefundFeeIndexDTO setLoanMoney(double loanMoney) {
    this.loanMoney = loanMoney;
    setLoanMoneyIsSet(true);
    return this;
  }

  public void unsetLoanMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  /** Returns true if field loanMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANMONEY_ISSET_ID);
  }

  public void setLoanMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANMONEY_ISSET_ID, value);
  }

  public int getProductType() {
    return this.productType;
  }

  public RefundFeeIndexDTO setProductType(int productType) {
    this.productType = productType;
    setProductTypeIsSet(true);
    return this;
  }

  public void unsetProductType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID);
  }

  public void setProductTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTTYPE_ISSET_ID, value);
  }

  public int getProductId() {
    return this.productId;
  }

  public RefundFeeIndexDTO setProductId(int productId) {
    this.productId = productId;
    setProductIdIsSet(true);
    return this;
  }

  public void unsetProductId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTID_ISSET_ID);
  }

  public void setProductIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTID_ISSET_ID, value);
  }

  public String getProductName() {
    return this.productName;
  }

  public RefundFeeIndexDTO setProductName(String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public String getRequestDate() {
    return this.requestDate;
  }

  public RefundFeeIndexDTO setRequestDate(String requestDate) {
    this.requestDate = requestDate;
    return this;
  }

  public void unsetRequestDate() {
    this.requestDate = null;
  }

  /** Returns true if field requestDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestDate() {
    return this.requestDate != null;
  }

  public void setRequestDateIsSet(boolean value) {
    if (!value) {
      this.requestDate = null;
    }
  }

  public int getBackFeeApplyHandleStatusListSize() {
    return (this.backFeeApplyHandleStatusList == null) ? 0 : this.backFeeApplyHandleStatusList.size();
  }

  public java.util.Iterator<Integer> getBackFeeApplyHandleStatusListIterator() {
    return (this.backFeeApplyHandleStatusList == null) ? null : this.backFeeApplyHandleStatusList.iterator();
  }

  public void addToBackFeeApplyHandleStatusList(int elem) {
    if (this.backFeeApplyHandleStatusList == null) {
      this.backFeeApplyHandleStatusList = new ArrayList<Integer>();
    }
    this.backFeeApplyHandleStatusList.add(elem);
  }

  public List<Integer> getBackFeeApplyHandleStatusList() {
    return this.backFeeApplyHandleStatusList;
  }

  public RefundFeeIndexDTO setBackFeeApplyHandleStatusList(List<Integer> backFeeApplyHandleStatusList) {
    this.backFeeApplyHandleStatusList = backFeeApplyHandleStatusList;
    return this;
  }

  public void unsetBackFeeApplyHandleStatusList() {
    this.backFeeApplyHandleStatusList = null;
  }

  /** Returns true if field backFeeApplyHandleStatusList is set (has been assigned a value) and false otherwise */
  public boolean isSetBackFeeApplyHandleStatusList() {
    return this.backFeeApplyHandleStatusList != null;
  }

  public void setBackFeeApplyHandleStatusListIsSet(boolean value) {
    if (!value) {
      this.backFeeApplyHandleStatusList = null;
    }
  }

  public double getConfirmMoney() {
    return this.confirmMoney;
  }

  public RefundFeeIndexDTO setConfirmMoney(double confirmMoney) {
    this.confirmMoney = confirmMoney;
    setConfirmMoneyIsSet(true);
    return this;
  }

  public void unsetConfirmMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID);
  }

  /** Returns true if field confirmMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID);
  }

  public void setConfirmMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIRMMONEY_ISSET_ID, value);
  }

  public int getIsConfirm() {
    return this.isConfirm;
  }

  public RefundFeeIndexDTO setIsConfirm(int isConfirm) {
    this.isConfirm = isConfirm;
    setIsConfirmIsSet(true);
    return this;
  }

  public void unsetIsConfirm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  /** Returns true if field isConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetIsConfirm() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCONFIRM_ISSET_ID);
  }

  public void setIsConfirmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCONFIRM_ISSET_ID, value);
  }

  public String getConfirmDate() {
    return this.confirmDate;
  }

  public RefundFeeIndexDTO setConfirmDate(String confirmDate) {
    this.confirmDate = confirmDate;
    return this;
  }

  public void unsetConfirmDate() {
    this.confirmDate = null;
  }

  /** Returns true if field confirmDate is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirmDate() {
    return this.confirmDate != null;
  }

  public void setConfirmDateIsSet(boolean value) {
    if (!value) {
      this.confirmDate = null;
    }
  }

  public double getReturnFee() {
    return this.returnFee;
  }

  public RefundFeeIndexDTO setReturnFee(double returnFee) {
    this.returnFee = returnFee;
    setReturnFeeIsSet(true);
    return this;
  }

  public void unsetReturnFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETURNFEE_ISSET_ID);
  }

  /** Returns true if field returnFee is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFee() {
    return EncodingUtils.testBit(__isset_bitfield, __RETURNFEE_ISSET_ID);
  }

  public void setReturnFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETURNFEE_ISSET_ID, value);
  }

  public String getHouseName() {
    return this.houseName;
  }

  public RefundFeeIndexDTO setHouseName(String houseName) {
    this.houseName = houseName;
    return this;
  }

  public void unsetHouseName() {
    this.houseName = null;
  }

  /** Returns true if field houseName is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseName() {
    return this.houseName != null;
  }

  public void setHouseNameIsSet(boolean value) {
    if (!value) {
      this.houseName = null;
    }
  }

  public String getBuyerName() {
    return this.buyerName;
  }

  public RefundFeeIndexDTO setBuyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  public void unsetBuyerName() {
    this.buyerName = null;
  }

  /** Returns true if field buyerName is set (has been assigned a value) and false otherwise */
  public boolean isSetBuyerName() {
    return this.buyerName != null;
  }

  public void setBuyerNameIsSet(boolean value) {
    if (!value) {
      this.buyerName = null;
    }
  }

  public String getSellerName() {
    return this.sellerName;
  }

  public RefundFeeIndexDTO setSellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  public void unsetSellerName() {
    this.sellerName = null;
  }

  /** Returns true if field sellerName is set (has been assigned a value) and false otherwise */
  public boolean isSetSellerName() {
    return this.sellerName != null;
  }

  public void setSellerNameIsSet(boolean value) {
    if (!value) {
      this.sellerName = null;
    }
  }

  public int getIsChechan() {
    return this.isChechan;
  }

  public RefundFeeIndexDTO setIsChechan(int isChechan) {
    this.isChechan = isChechan;
    setIsChechanIsSet(true);
    return this;
  }

  public void unsetIsChechan() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  /** Returns true if field isChechan is set (has been assigned a value) and false otherwise */
  public boolean isSetIsChechan() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECHAN_ISSET_ID);
  }

  public void setIsChechanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECHAN_ISSET_ID, value);
  }

  public int getPmUserId() {
    return this.pmUserId;
  }

  public RefundFeeIndexDTO setPmUserId(int pmUserId) {
    this.pmUserId = pmUserId;
    setPmUserIdIsSet(true);
    return this;
  }

  public void unsetPmUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  /** Returns true if field pmUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetPmUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __PMUSERID_ISSET_ID);
  }

  public void setPmUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PMUSERID_ISSET_ID, value);
  }

  public int getOrgId() {
    return this.orgId;
  }

  public RefundFeeIndexDTO setOrgId(int orgId) {
    this.orgId = orgId;
    setOrgIdIsSet(true);
    return this;
  }

  public void unsetOrgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORGID_ISSET_ID);
  }

  public void setOrgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORGID_ISSET_ID, value);
  }

  public String getStartDate() {
    return this.startDate;
  }

  public RefundFeeIndexDTO setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public RefundFeeIndexDTO setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public int getBusinessSourceNo() {
    return this.businessSourceNo;
  }

  public RefundFeeIndexDTO setBusinessSourceNo(int businessSourceNo) {
    this.businessSourceNo = businessSourceNo;
    setBusinessSourceNoIsSet(true);
    return this;
  }

  public void unsetBusinessSourceNo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID);
  }

  /** Returns true if field businessSourceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceNo() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID);
  }

  public void setBusinessSourceNoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCENO_ISSET_ID, value);
  }

  public int getBusinessCatelog() {
    return this.businessCatelog;
  }

  public RefundFeeIndexDTO setBusinessCatelog(int businessCatelog) {
    this.businessCatelog = businessCatelog;
    setBusinessCatelogIsSet(true);
    return this;
  }

  public void unsetBusinessCatelog() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSCATELOG_ISSET_ID);
  }

  /** Returns true if field businessCatelog is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessCatelog() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSCATELOG_ISSET_ID);
  }

  public void setBusinessCatelogIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSCATELOG_ISSET_ID, value);
  }

  public String getOrgName() {
    return this.orgName;
  }

  public RefundFeeIndexDTO setOrgName(String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  public String getPmName() {
    return this.pmName;
  }

  public RefundFeeIndexDTO setPmName(String pmName) {
    this.pmName = pmName;
    return this;
  }

  public void unsetPmName() {
    this.pmName = null;
  }

  /** Returns true if field pmName is set (has been assigned a value) and false otherwise */
  public boolean isSetPmName() {
    return this.pmName != null;
  }

  public void setPmNameIsSet(boolean value) {
    if (!value) {
      this.pmName = null;
    }
  }

  public String getRecAccountName() {
    return this.recAccountName;
  }

  public RefundFeeIndexDTO setRecAccountName(String recAccountName) {
    this.recAccountName = recAccountName;
    return this;
  }

  public void unsetRecAccountName() {
    this.recAccountName = null;
  }

  /** Returns true if field recAccountName is set (has been assigned a value) and false otherwise */
  public boolean isSetRecAccountName() {
    return this.recAccountName != null;
  }

  public void setRecAccountNameIsSet(boolean value) {
    if (!value) {
      this.recAccountName = null;
    }
  }

  public double getGuaranteeFee() {
    return this.guaranteeFee;
  }

  public RefundFeeIndexDTO setGuaranteeFee(double guaranteeFee) {
    this.guaranteeFee = guaranteeFee;
    setGuaranteeFeeIsSet(true);
    return this;
  }

  public void unsetGuaranteeFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  /** Returns true if field guaranteeFee is set (has been assigned a value) and false otherwise */
  public boolean isSetGuaranteeFee() {
    return EncodingUtils.testBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID);
  }

  public void setGuaranteeFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GUARANTEEFEE_ISSET_ID, value);
  }

  public double getReceMoney() {
    return this.receMoney;
  }

  public RefundFeeIndexDTO setReceMoney(double receMoney) {
    this.receMoney = receMoney;
    setReceMoneyIsSet(true);
    return this;
  }

  public void unsetReceMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEMONEY_ISSET_ID);
  }

  /** Returns true if field receMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetReceMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEMONEY_ISSET_ID);
  }

  public void setReceMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEMONEY_ISSET_ID, value);
  }

  public double getFinPoundage() {
    return this.finPoundage;
  }

  public RefundFeeIndexDTO setFinPoundage(double finPoundage) {
    this.finPoundage = finPoundage;
    setFinPoundageIsSet(true);
    return this;
  }

  public void unsetFinPoundage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINPOUNDAGE_ISSET_ID);
  }

  /** Returns true if field finPoundage is set (has been assigned a value) and false otherwise */
  public boolean isSetFinPoundage() {
    return EncodingUtils.testBit(__isset_bitfield, __FINPOUNDAGE_ISSET_ID);
  }

  public void setFinPoundageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINPOUNDAGE_ISSET_ID, value);
  }

  public int getBusinessSource() {
    return this.businessSource;
  }

  public RefundFeeIndexDTO setBusinessSource(int businessSource) {
    this.businessSource = businessSource;
    setBusinessSourceIsSet(true);
    return this;
  }

  public void unsetBusinessSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  /** Returns true if field businessSource is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSource() {
    return EncodingUtils.testBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID);
  }

  public void setBusinessSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BUSINESSSOURCE_ISSET_ID, value);
  }

  public int getInnerOrOut() {
    return this.innerOrOut;
  }

  public RefundFeeIndexDTO setInnerOrOut(int innerOrOut) {
    this.innerOrOut = innerOrOut;
    setInnerOrOutIsSet(true);
    return this;
  }

  public void unsetInnerOrOut() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  /** Returns true if field innerOrOut is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOut() {
    return EncodingUtils.testBit(__isset_bitfield, __INNEROROUT_ISSET_ID);
  }

  public void setInnerOrOutIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INNEROROUT_ISSET_ID, value);
  }

  public String getInnerOrOutName() {
    return this.InnerOrOutName;
  }

  public RefundFeeIndexDTO setInnerOrOutName(String InnerOrOutName) {
    this.InnerOrOutName = InnerOrOutName;
    return this;
  }

  public void unsetInnerOrOutName() {
    this.InnerOrOutName = null;
  }

  /** Returns true if field InnerOrOutName is set (has been assigned a value) and false otherwise */
  public boolean isSetInnerOrOutName() {
    return this.InnerOrOutName != null;
  }

  public void setInnerOrOutNameIsSet(boolean value) {
    if (!value) {
      this.InnerOrOutName = null;
    }
  }

  public String getBusinessSourceName() {
    return this.businessSourceName;
  }

  public RefundFeeIndexDTO setBusinessSourceName(String businessSourceName) {
    this.businessSourceName = businessSourceName;
    return this;
  }

  public void unsetBusinessSourceName() {
    this.businessSourceName = null;
  }

  /** Returns true if field businessSourceName is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceName() {
    return this.businessSourceName != null;
  }

  public void setBusinessSourceNameIsSet(boolean value) {
    if (!value) {
      this.businessSourceName = null;
    }
  }

  public String getBizApplyHandleStatusName() {
    return this.bizApplyHandleStatusName;
  }

  public RefundFeeIndexDTO setBizApplyHandleStatusName(String bizApplyHandleStatusName) {
    this.bizApplyHandleStatusName = bizApplyHandleStatusName;
    return this;
  }

  public void unsetBizApplyHandleStatusName() {
    this.bizApplyHandleStatusName = null;
  }

  /** Returns true if field bizApplyHandleStatusName is set (has been assigned a value) and false otherwise */
  public boolean isSetBizApplyHandleStatusName() {
    return this.bizApplyHandleStatusName != null;
  }

  public void setBizApplyHandleStatusNameIsSet(boolean value) {
    if (!value) {
      this.bizApplyHandleStatusName = null;
    }
  }

  public String getBackFeeApplyHandleStatusName() {
    return this.backFeeApplyHandleStatusName;
  }

  public RefundFeeIndexDTO setBackFeeApplyHandleStatusName(String backFeeApplyHandleStatusName) {
    this.backFeeApplyHandleStatusName = backFeeApplyHandleStatusName;
    return this;
  }

  public void unsetBackFeeApplyHandleStatusName() {
    this.backFeeApplyHandleStatusName = null;
  }

  /** Returns true if field backFeeApplyHandleStatusName is set (has been assigned a value) and false otherwise */
  public boolean isSetBackFeeApplyHandleStatusName() {
    return this.backFeeApplyHandleStatusName != null;
  }

  public void setBackFeeApplyHandleStatusNameIsSet(boolean value) {
    if (!value) {
      this.backFeeApplyHandleStatusName = null;
    }
  }

  public double getForeclosureFloorMoney() {
    return this.foreclosureFloorMoney;
  }

  public RefundFeeIndexDTO setForeclosureFloorMoney(double foreclosureFloorMoney) {
    this.foreclosureFloorMoney = foreclosureFloorMoney;
    setForeclosureFloorMoneyIsSet(true);
    return this;
  }

  public void unsetForeclosureFloorMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORECLOSUREFLOORMONEY_ISSET_ID);
  }

  /** Returns true if field foreclosureFloorMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetForeclosureFloorMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __FORECLOSUREFLOORMONEY_ISSET_ID);
  }

  public void setForeclosureFloorMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORECLOSUREFLOORMONEY_ISSET_ID, value);
  }

  public double getFinInterest() {
    return this.finInterest;
  }

  public RefundFeeIndexDTO setFinInterest(double finInterest) {
    this.finInterest = finInterest;
    setFinInterestIsSet(true);
    return this;
  }

  public void unsetFinInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FININTEREST_ISSET_ID);
  }

  /** Returns true if field finInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetFinInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __FININTEREST_ISSET_ID);
  }

  public void setFinInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FININTEREST_ISSET_ID, value);
  }

  public String getBankName() {
    return this.bankName;
  }

  public RefundFeeIndexDTO setBankName(String bankName) {
    this.bankName = bankName;
    return this;
  }

  public void unsetBankName() {
    this.bankName = null;
  }

  /** Returns true if field bankName is set (has been assigned a value) and false otherwise */
  public boolean isSetBankName() {
    return this.bankName != null;
  }

  public void setBankNameIsSet(boolean value) {
    if (!value) {
      this.bankName = null;
    }
  }

  public int getBatchRefundFeeMainId() {
    return this.batchRefundFeeMainId;
  }

  public RefundFeeIndexDTO setBatchRefundFeeMainId(int batchRefundFeeMainId) {
    this.batchRefundFeeMainId = batchRefundFeeMainId;
    setBatchRefundFeeMainIdIsSet(true);
    return this;
  }

  public void unsetBatchRefundFeeMainId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BATCHREFUNDFEEMAINID_ISSET_ID);
  }

  /** Returns true if field batchRefundFeeMainId is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchRefundFeeMainId() {
    return EncodingUtils.testBit(__isset_bitfield, __BATCHREFUNDFEEMAINID_ISSET_ID);
  }

  public void setBatchRefundFeeMainIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BATCHREFUNDFEEMAINID_ISSET_ID, value);
  }

  public String getBatchName() {
    return this.batchName;
  }

  public RefundFeeIndexDTO setBatchName(String batchName) {
    this.batchName = batchName;
    return this;
  }

  public void unsetBatchName() {
    this.batchName = null;
  }

  /** Returns true if field batchName is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchName() {
    return this.batchName != null;
  }

  public void setBatchNameIsSet(boolean value) {
    if (!value) {
      this.batchName = null;
    }
  }

  public String getBusinessSourceStr() {
    return this.businessSourceStr;
  }

  public RefundFeeIndexDTO setBusinessSourceStr(String businessSourceStr) {
    this.businessSourceStr = businessSourceStr;
    return this;
  }

  public void unsetBusinessSourceStr() {
    this.businessSourceStr = null;
  }

  /** Returns true if field businessSourceStr is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessSourceStr() {
    return this.businessSourceStr != null;
  }

  public void setBusinessSourceStrIsSet(boolean value) {
    if (!value) {
      this.businessSourceStr = null;
    }
  }

  public String getRepaymentDate() {
    return this.repaymentDate;
  }

  public RefundFeeIndexDTO setRepaymentDate(String repaymentDate) {
    this.repaymentDate = repaymentDate;
    return this;
  }

  public void unsetRepaymentDate() {
    this.repaymentDate = null;
  }

  /** Returns true if field repaymentDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDate() {
    return this.repaymentDate != null;
  }

  public void setRepaymentDateIsSet(boolean value) {
    if (!value) {
      this.repaymentDate = null;
    }
  }

  public String getRepaymentDateEnd() {
    return this.repaymentDateEnd;
  }

  public RefundFeeIndexDTO setRepaymentDateEnd(String repaymentDateEnd) {
    this.repaymentDateEnd = repaymentDateEnd;
    return this;
  }

  public void unsetRepaymentDateEnd() {
    this.repaymentDateEnd = null;
  }

  /** Returns true if field repaymentDateEnd is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentDateEnd() {
    return this.repaymentDateEnd != null;
  }

  public void setRepaymentDateEndIsSet(boolean value) {
    if (!value) {
      this.repaymentDateEnd = null;
    }
  }

  public double getRepaymentMoney() {
    return this.repaymentMoney;
  }

  public RefundFeeIndexDTO setRepaymentMoney(double repaymentMoney) {
    this.repaymentMoney = repaymentMoney;
    setRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field repaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID);
  }

  public void setRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPAYMENTMONEY_ISSET_ID, value);
  }

  public double getNotRepaymentMoney() {
    return this.notRepaymentMoney;
  }

  public RefundFeeIndexDTO setNotRepaymentMoney(double notRepaymentMoney) {
    this.notRepaymentMoney = notRepaymentMoney;
    setNotRepaymentMoneyIsSet(true);
    return this;
  }

  public void unsetNotRepaymentMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTREPAYMENTMONEY_ISSET_ID);
  }

  /** Returns true if field notRepaymentMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetNotRepaymentMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTREPAYMENTMONEY_ISSET_ID);
  }

  public void setNotRepaymentMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTREPAYMENTMONEY_ISSET_ID, value);
  }

  public double getExtensionFee() {
    return this.extensionFee;
  }

  public RefundFeeIndexDTO setExtensionFee(double extensionFee) {
    this.extensionFee = extensionFee;
    setExtensionFeeIsSet(true);
    return this;
  }

  public void unsetExtensionFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  /** Returns true if field extensionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetExtensionFee() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID);
  }

  public void setExtensionFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTENSIONFEE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case PROJECT_NUMBER:
      if (value == null) {
        unsetProjectNumber();
      } else {
        setProjectNumber((String)value);
      }
      break;

    case PROJECT_NAME:
      if (value == null) {
        unsetProjectName();
      } else {
        setProjectName((String)value);
      }
      break;

    case BIZ_APPLY_HANDLE_STATUS:
      if (value == null) {
        unsetBizApplyHandleStatus();
      } else {
        setBizApplyHandleStatus((Integer)value);
      }
      break;

    case REC_STATUS:
      if (value == null) {
        unsetRecStatus();
      } else {
        setRecStatus((Integer)value);
      }
      break;

    case BACK_FEE_APPLY_HANDLE_STATUS:
      if (value == null) {
        unsetBackFeeApplyHandleStatus();
      } else {
        setBackFeeApplyHandleStatus((Integer)value);
      }
      break;

    case CANCEL_GUARANTEE_DATE:
      if (value == null) {
        unsetCancelGuaranteeDate();
      } else {
        setCancelGuaranteeDate((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case CUSTOMER_NAME:
      if (value == null) {
        unsetCustomerName();
      } else {
        setCustomerName((String)value);
      }
      break;

    case OLD_HOME:
      if (value == null) {
        unsetOldHome();
      } else {
        setOldHome((String)value);
      }
      break;

    case PROJECT_PASS_DATE:
      if (value == null) {
        unsetProjectPassDate();
      } else {
        setProjectPassDate((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case LOAN_MONEY:
      if (value == null) {
        unsetLoanMoney();
      } else {
        setLoanMoney((Double)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((Integer)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductId();
      } else {
        setProductId((Integer)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((String)value);
      }
      break;

    case REQUEST_DATE:
      if (value == null) {
        unsetRequestDate();
      } else {
        setRequestDate((String)value);
      }
      break;

    case BACK_FEE_APPLY_HANDLE_STATUS_LIST:
      if (value == null) {
        unsetBackFeeApplyHandleStatusList();
      } else {
        setBackFeeApplyHandleStatusList((List<Integer>)value);
      }
      break;

    case CONFIRM_MONEY:
      if (value == null) {
        unsetConfirmMoney();
      } else {
        setConfirmMoney((Double)value);
      }
      break;

    case IS_CONFIRM:
      if (value == null) {
        unsetIsConfirm();
      } else {
        setIsConfirm((Integer)value);
      }
      break;

    case CONFIRM_DATE:
      if (value == null) {
        unsetConfirmDate();
      } else {
        setConfirmDate((String)value);
      }
      break;

    case RETURN_FEE:
      if (value == null) {
        unsetReturnFee();
      } else {
        setReturnFee((Double)value);
      }
      break;

    case HOUSE_NAME:
      if (value == null) {
        unsetHouseName();
      } else {
        setHouseName((String)value);
      }
      break;

    case BUYER_NAME:
      if (value == null) {
        unsetBuyerName();
      } else {
        setBuyerName((String)value);
      }
      break;

    case SELLER_NAME:
      if (value == null) {
        unsetSellerName();
      } else {
        setSellerName((String)value);
      }
      break;

    case IS_CHECHAN:
      if (value == null) {
        unsetIsChechan();
      } else {
        setIsChechan((Integer)value);
      }
      break;

    case PM_USER_ID:
      if (value == null) {
        unsetPmUserId();
      } else {
        setPmUserId((Integer)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((Integer)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case BUSINESS_SOURCE_NO:
      if (value == null) {
        unsetBusinessSourceNo();
      } else {
        setBusinessSourceNo((Integer)value);
      }
      break;

    case BUSINESS_CATELOG:
      if (value == null) {
        unsetBusinessCatelog();
      } else {
        setBusinessCatelog((Integer)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((String)value);
      }
      break;

    case PM_NAME:
      if (value == null) {
        unsetPmName();
      } else {
        setPmName((String)value);
      }
      break;

    case REC_ACCOUNT_NAME:
      if (value == null) {
        unsetRecAccountName();
      } else {
        setRecAccountName((String)value);
      }
      break;

    case GUARANTEE_FEE:
      if (value == null) {
        unsetGuaranteeFee();
      } else {
        setGuaranteeFee((Double)value);
      }
      break;

    case RECE_MONEY:
      if (value == null) {
        unsetReceMoney();
      } else {
        setReceMoney((Double)value);
      }
      break;

    case FIN_POUNDAGE:
      if (value == null) {
        unsetFinPoundage();
      } else {
        setFinPoundage((Double)value);
      }
      break;

    case BUSINESS_SOURCE:
      if (value == null) {
        unsetBusinessSource();
      } else {
        setBusinessSource((Integer)value);
      }
      break;

    case INNER_OR_OUT:
      if (value == null) {
        unsetInnerOrOut();
      } else {
        setInnerOrOut((Integer)value);
      }
      break;

    case INNER_OR_OUT_NAME:
      if (value == null) {
        unsetInnerOrOutName();
      } else {
        setInnerOrOutName((String)value);
      }
      break;

    case BUSINESS_SOURCE_NAME:
      if (value == null) {
        unsetBusinessSourceName();
      } else {
        setBusinessSourceName((String)value);
      }
      break;

    case BIZ_APPLY_HANDLE_STATUS_NAME:
      if (value == null) {
        unsetBizApplyHandleStatusName();
      } else {
        setBizApplyHandleStatusName((String)value);
      }
      break;

    case BACK_FEE_APPLY_HANDLE_STATUS_NAME:
      if (value == null) {
        unsetBackFeeApplyHandleStatusName();
      } else {
        setBackFeeApplyHandleStatusName((String)value);
      }
      break;

    case FORECLOSURE_FLOOR_MONEY:
      if (value == null) {
        unsetForeclosureFloorMoney();
      } else {
        setForeclosureFloorMoney((Double)value);
      }
      break;

    case FIN_INTEREST:
      if (value == null) {
        unsetFinInterest();
      } else {
        setFinInterest((Double)value);
      }
      break;

    case BANK_NAME:
      if (value == null) {
        unsetBankName();
      } else {
        setBankName((String)value);
      }
      break;

    case BATCH_REFUND_FEE_MAIN_ID:
      if (value == null) {
        unsetBatchRefundFeeMainId();
      } else {
        setBatchRefundFeeMainId((Integer)value);
      }
      break;

    case BATCH_NAME:
      if (value == null) {
        unsetBatchName();
      } else {
        setBatchName((String)value);
      }
      break;

    case BUSINESS_SOURCE_STR:
      if (value == null) {
        unsetBusinessSourceStr();
      } else {
        setBusinessSourceStr((String)value);
      }
      break;

    case REPAYMENT_DATE:
      if (value == null) {
        unsetRepaymentDate();
      } else {
        setRepaymentDate((String)value);
      }
      break;

    case REPAYMENT_DATE_END:
      if (value == null) {
        unsetRepaymentDateEnd();
      } else {
        setRepaymentDateEnd((String)value);
      }
      break;

    case REPAYMENT_MONEY:
      if (value == null) {
        unsetRepaymentMoney();
      } else {
        setRepaymentMoney((Double)value);
      }
      break;

    case NOT_REPAYMENT_MONEY:
      if (value == null) {
        unsetNotRepaymentMoney();
      } else {
        setNotRepaymentMoney((Double)value);
      }
      break;

    case EXTENSION_FEE:
      if (value == null) {
        unsetExtensionFee();
      } else {
        setExtensionFee((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case PROJECT_NUMBER:
      return getProjectNumber();

    case PROJECT_NAME:
      return getProjectName();

    case BIZ_APPLY_HANDLE_STATUS:
      return Integer.valueOf(getBizApplyHandleStatus());

    case REC_STATUS:
      return Integer.valueOf(getRecStatus());

    case BACK_FEE_APPLY_HANDLE_STATUS:
      return Integer.valueOf(getBackFeeApplyHandleStatus());

    case CANCEL_GUARANTEE_DATE:
      return getCancelGuaranteeDate();

    case USER_IDS:
      return getUserIds();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case CUSTOMER_NAME:
      return getCustomerName();

    case OLD_HOME:
      return getOldHome();

    case PROJECT_PASS_DATE:
      return getProjectPassDate();

    case TYPE:
      return Integer.valueOf(getType());

    case LOAN_MONEY:
      return Double.valueOf(getLoanMoney());

    case PRODUCT_TYPE:
      return Integer.valueOf(getProductType());

    case PRODUCT_ID:
      return Integer.valueOf(getProductId());

    case PRODUCT_NAME:
      return getProductName();

    case REQUEST_DATE:
      return getRequestDate();

    case BACK_FEE_APPLY_HANDLE_STATUS_LIST:
      return getBackFeeApplyHandleStatusList();

    case CONFIRM_MONEY:
      return Double.valueOf(getConfirmMoney());

    case IS_CONFIRM:
      return Integer.valueOf(getIsConfirm());

    case CONFIRM_DATE:
      return getConfirmDate();

    case RETURN_FEE:
      return Double.valueOf(getReturnFee());

    case HOUSE_NAME:
      return getHouseName();

    case BUYER_NAME:
      return getBuyerName();

    case SELLER_NAME:
      return getSellerName();

    case IS_CHECHAN:
      return Integer.valueOf(getIsChechan());

    case PM_USER_ID:
      return Integer.valueOf(getPmUserId());

    case ORG_ID:
      return Integer.valueOf(getOrgId());

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case BUSINESS_SOURCE_NO:
      return Integer.valueOf(getBusinessSourceNo());

    case BUSINESS_CATELOG:
      return Integer.valueOf(getBusinessCatelog());

    case ORG_NAME:
      return getOrgName();

    case PM_NAME:
      return getPmName();

    case REC_ACCOUNT_NAME:
      return getRecAccountName();

    case GUARANTEE_FEE:
      return Double.valueOf(getGuaranteeFee());

    case RECE_MONEY:
      return Double.valueOf(getReceMoney());

    case FIN_POUNDAGE:
      return Double.valueOf(getFinPoundage());

    case BUSINESS_SOURCE:
      return Integer.valueOf(getBusinessSource());

    case INNER_OR_OUT:
      return Integer.valueOf(getInnerOrOut());

    case INNER_OR_OUT_NAME:
      return getInnerOrOutName();

    case BUSINESS_SOURCE_NAME:
      return getBusinessSourceName();

    case BIZ_APPLY_HANDLE_STATUS_NAME:
      return getBizApplyHandleStatusName();

    case BACK_FEE_APPLY_HANDLE_STATUS_NAME:
      return getBackFeeApplyHandleStatusName();

    case FORECLOSURE_FLOOR_MONEY:
      return Double.valueOf(getForeclosureFloorMoney());

    case FIN_INTEREST:
      return Double.valueOf(getFinInterest());

    case BANK_NAME:
      return getBankName();

    case BATCH_REFUND_FEE_MAIN_ID:
      return Integer.valueOf(getBatchRefundFeeMainId());

    case BATCH_NAME:
      return getBatchName();

    case BUSINESS_SOURCE_STR:
      return getBusinessSourceStr();

    case REPAYMENT_DATE:
      return getRepaymentDate();

    case REPAYMENT_DATE_END:
      return getRepaymentDateEnd();

    case REPAYMENT_MONEY:
      return Double.valueOf(getRepaymentMoney());

    case NOT_REPAYMENT_MONEY:
      return Double.valueOf(getNotRepaymentMoney());

    case EXTENSION_FEE:
      return Double.valueOf(getExtensionFee());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case PROJECT_NUMBER:
      return isSetProjectNumber();
    case PROJECT_NAME:
      return isSetProjectName();
    case BIZ_APPLY_HANDLE_STATUS:
      return isSetBizApplyHandleStatus();
    case REC_STATUS:
      return isSetRecStatus();
    case BACK_FEE_APPLY_HANDLE_STATUS:
      return isSetBackFeeApplyHandleStatus();
    case CANCEL_GUARANTEE_DATE:
      return isSetCancelGuaranteeDate();
    case USER_IDS:
      return isSetUserIds();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case CUSTOMER_NAME:
      return isSetCustomerName();
    case OLD_HOME:
      return isSetOldHome();
    case PROJECT_PASS_DATE:
      return isSetProjectPassDate();
    case TYPE:
      return isSetType();
    case LOAN_MONEY:
      return isSetLoanMoney();
    case PRODUCT_TYPE:
      return isSetProductType();
    case PRODUCT_ID:
      return isSetProductId();
    case PRODUCT_NAME:
      return isSetProductName();
    case REQUEST_DATE:
      return isSetRequestDate();
    case BACK_FEE_APPLY_HANDLE_STATUS_LIST:
      return isSetBackFeeApplyHandleStatusList();
    case CONFIRM_MONEY:
      return isSetConfirmMoney();
    case IS_CONFIRM:
      return isSetIsConfirm();
    case CONFIRM_DATE:
      return isSetConfirmDate();
    case RETURN_FEE:
      return isSetReturnFee();
    case HOUSE_NAME:
      return isSetHouseName();
    case BUYER_NAME:
      return isSetBuyerName();
    case SELLER_NAME:
      return isSetSellerName();
    case IS_CHECHAN:
      return isSetIsChechan();
    case PM_USER_ID:
      return isSetPmUserId();
    case ORG_ID:
      return isSetOrgId();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case BUSINESS_SOURCE_NO:
      return isSetBusinessSourceNo();
    case BUSINESS_CATELOG:
      return isSetBusinessCatelog();
    case ORG_NAME:
      return isSetOrgName();
    case PM_NAME:
      return isSetPmName();
    case REC_ACCOUNT_NAME:
      return isSetRecAccountName();
    case GUARANTEE_FEE:
      return isSetGuaranteeFee();
    case RECE_MONEY:
      return isSetReceMoney();
    case FIN_POUNDAGE:
      return isSetFinPoundage();
    case BUSINESS_SOURCE:
      return isSetBusinessSource();
    case INNER_OR_OUT:
      return isSetInnerOrOut();
    case INNER_OR_OUT_NAME:
      return isSetInnerOrOutName();
    case BUSINESS_SOURCE_NAME:
      return isSetBusinessSourceName();
    case BIZ_APPLY_HANDLE_STATUS_NAME:
      return isSetBizApplyHandleStatusName();
    case BACK_FEE_APPLY_HANDLE_STATUS_NAME:
      return isSetBackFeeApplyHandleStatusName();
    case FORECLOSURE_FLOOR_MONEY:
      return isSetForeclosureFloorMoney();
    case FIN_INTEREST:
      return isSetFinInterest();
    case BANK_NAME:
      return isSetBankName();
    case BATCH_REFUND_FEE_MAIN_ID:
      return isSetBatchRefundFeeMainId();
    case BATCH_NAME:
      return isSetBatchName();
    case BUSINESS_SOURCE_STR:
      return isSetBusinessSourceStr();
    case REPAYMENT_DATE:
      return isSetRepaymentDate();
    case REPAYMENT_DATE_END:
      return isSetRepaymentDateEnd();
    case REPAYMENT_MONEY:
      return isSetRepaymentMoney();
    case NOT_REPAYMENT_MONEY:
      return isSetNotRepaymentMoney();
    case EXTENSION_FEE:
      return isSetExtensionFee();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundFeeIndexDTO)
      return this.equals((RefundFeeIndexDTO)that);
    return false;
  }

  public boolean equals(RefundFeeIndexDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_projectNumber = true && this.isSetProjectNumber();
    boolean that_present_projectNumber = true && that.isSetProjectNumber();
    if (this_present_projectNumber || that_present_projectNumber) {
      if (!(this_present_projectNumber && that_present_projectNumber))
        return false;
      if (!this.projectNumber.equals(that.projectNumber))
        return false;
    }

    boolean this_present_projectName = true && this.isSetProjectName();
    boolean that_present_projectName = true && that.isSetProjectName();
    if (this_present_projectName || that_present_projectName) {
      if (!(this_present_projectName && that_present_projectName))
        return false;
      if (!this.projectName.equals(that.projectName))
        return false;
    }

    boolean this_present_bizApplyHandleStatus = true;
    boolean that_present_bizApplyHandleStatus = true;
    if (this_present_bizApplyHandleStatus || that_present_bizApplyHandleStatus) {
      if (!(this_present_bizApplyHandleStatus && that_present_bizApplyHandleStatus))
        return false;
      if (this.bizApplyHandleStatus != that.bizApplyHandleStatus)
        return false;
    }

    boolean this_present_recStatus = true;
    boolean that_present_recStatus = true;
    if (this_present_recStatus || that_present_recStatus) {
      if (!(this_present_recStatus && that_present_recStatus))
        return false;
      if (this.recStatus != that.recStatus)
        return false;
    }

    boolean this_present_backFeeApplyHandleStatus = true;
    boolean that_present_backFeeApplyHandleStatus = true;
    if (this_present_backFeeApplyHandleStatus || that_present_backFeeApplyHandleStatus) {
      if (!(this_present_backFeeApplyHandleStatus && that_present_backFeeApplyHandleStatus))
        return false;
      if (this.backFeeApplyHandleStatus != that.backFeeApplyHandleStatus)
        return false;
    }

    boolean this_present_cancelGuaranteeDate = true && this.isSetCancelGuaranteeDate();
    boolean that_present_cancelGuaranteeDate = true && that.isSetCancelGuaranteeDate();
    if (this_present_cancelGuaranteeDate || that_present_cancelGuaranteeDate) {
      if (!(this_present_cancelGuaranteeDate && that_present_cancelGuaranteeDate))
        return false;
      if (!this.cancelGuaranteeDate.equals(that.cancelGuaranteeDate))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_customerName = true && this.isSetCustomerName();
    boolean that_present_customerName = true && that.isSetCustomerName();
    if (this_present_customerName || that_present_customerName) {
      if (!(this_present_customerName && that_present_customerName))
        return false;
      if (!this.customerName.equals(that.customerName))
        return false;
    }

    boolean this_present_oldHome = true && this.isSetOldHome();
    boolean that_present_oldHome = true && that.isSetOldHome();
    if (this_present_oldHome || that_present_oldHome) {
      if (!(this_present_oldHome && that_present_oldHome))
        return false;
      if (!this.oldHome.equals(that.oldHome))
        return false;
    }

    boolean this_present_projectPassDate = true && this.isSetProjectPassDate();
    boolean that_present_projectPassDate = true && that.isSetProjectPassDate();
    if (this_present_projectPassDate || that_present_projectPassDate) {
      if (!(this_present_projectPassDate && that_present_projectPassDate))
        return false;
      if (!this.projectPassDate.equals(that.projectPassDate))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_loanMoney = true;
    boolean that_present_loanMoney = true;
    if (this_present_loanMoney || that_present_loanMoney) {
      if (!(this_present_loanMoney && that_present_loanMoney))
        return false;
      if (this.loanMoney != that.loanMoney)
        return false;
    }

    boolean this_present_productType = true;
    boolean that_present_productType = true;
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (this.productType != that.productType)
        return false;
    }

    boolean this_present_productId = true;
    boolean that_present_productId = true;
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (this.productId != that.productId)
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_requestDate = true && this.isSetRequestDate();
    boolean that_present_requestDate = true && that.isSetRequestDate();
    if (this_present_requestDate || that_present_requestDate) {
      if (!(this_present_requestDate && that_present_requestDate))
        return false;
      if (!this.requestDate.equals(that.requestDate))
        return false;
    }

    boolean this_present_backFeeApplyHandleStatusList = true && this.isSetBackFeeApplyHandleStatusList();
    boolean that_present_backFeeApplyHandleStatusList = true && that.isSetBackFeeApplyHandleStatusList();
    if (this_present_backFeeApplyHandleStatusList || that_present_backFeeApplyHandleStatusList) {
      if (!(this_present_backFeeApplyHandleStatusList && that_present_backFeeApplyHandleStatusList))
        return false;
      if (!this.backFeeApplyHandleStatusList.equals(that.backFeeApplyHandleStatusList))
        return false;
    }

    boolean this_present_confirmMoney = true;
    boolean that_present_confirmMoney = true;
    if (this_present_confirmMoney || that_present_confirmMoney) {
      if (!(this_present_confirmMoney && that_present_confirmMoney))
        return false;
      if (this.confirmMoney != that.confirmMoney)
        return false;
    }

    boolean this_present_isConfirm = true;
    boolean that_present_isConfirm = true;
    if (this_present_isConfirm || that_present_isConfirm) {
      if (!(this_present_isConfirm && that_present_isConfirm))
        return false;
      if (this.isConfirm != that.isConfirm)
        return false;
    }

    boolean this_present_confirmDate = true && this.isSetConfirmDate();
    boolean that_present_confirmDate = true && that.isSetConfirmDate();
    if (this_present_confirmDate || that_present_confirmDate) {
      if (!(this_present_confirmDate && that_present_confirmDate))
        return false;
      if (!this.confirmDate.equals(that.confirmDate))
        return false;
    }

    boolean this_present_returnFee = true;
    boolean that_present_returnFee = true;
    if (this_present_returnFee || that_present_returnFee) {
      if (!(this_present_returnFee && that_present_returnFee))
        return false;
      if (this.returnFee != that.returnFee)
        return false;
    }

    boolean this_present_houseName = true && this.isSetHouseName();
    boolean that_present_houseName = true && that.isSetHouseName();
    if (this_present_houseName || that_present_houseName) {
      if (!(this_present_houseName && that_present_houseName))
        return false;
      if (!this.houseName.equals(that.houseName))
        return false;
    }

    boolean this_present_buyerName = true && this.isSetBuyerName();
    boolean that_present_buyerName = true && that.isSetBuyerName();
    if (this_present_buyerName || that_present_buyerName) {
      if (!(this_present_buyerName && that_present_buyerName))
        return false;
      if (!this.buyerName.equals(that.buyerName))
        return false;
    }

    boolean this_present_sellerName = true && this.isSetSellerName();
    boolean that_present_sellerName = true && that.isSetSellerName();
    if (this_present_sellerName || that_present_sellerName) {
      if (!(this_present_sellerName && that_present_sellerName))
        return false;
      if (!this.sellerName.equals(that.sellerName))
        return false;
    }

    boolean this_present_isChechan = true;
    boolean that_present_isChechan = true;
    if (this_present_isChechan || that_present_isChechan) {
      if (!(this_present_isChechan && that_present_isChechan))
        return false;
      if (this.isChechan != that.isChechan)
        return false;
    }

    boolean this_present_pmUserId = true;
    boolean that_present_pmUserId = true;
    if (this_present_pmUserId || that_present_pmUserId) {
      if (!(this_present_pmUserId && that_present_pmUserId))
        return false;
      if (this.pmUserId != that.pmUserId)
        return false;
    }

    boolean this_present_orgId = true;
    boolean that_present_orgId = true;
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (this.orgId != that.orgId)
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_businessSourceNo = true;
    boolean that_present_businessSourceNo = true;
    if (this_present_businessSourceNo || that_present_businessSourceNo) {
      if (!(this_present_businessSourceNo && that_present_businessSourceNo))
        return false;
      if (this.businessSourceNo != that.businessSourceNo)
        return false;
    }

    boolean this_present_businessCatelog = true;
    boolean that_present_businessCatelog = true;
    if (this_present_businessCatelog || that_present_businessCatelog) {
      if (!(this_present_businessCatelog && that_present_businessCatelog))
        return false;
      if (this.businessCatelog != that.businessCatelog)
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_pmName = true && this.isSetPmName();
    boolean that_present_pmName = true && that.isSetPmName();
    if (this_present_pmName || that_present_pmName) {
      if (!(this_present_pmName && that_present_pmName))
        return false;
      if (!this.pmName.equals(that.pmName))
        return false;
    }

    boolean this_present_recAccountName = true && this.isSetRecAccountName();
    boolean that_present_recAccountName = true && that.isSetRecAccountName();
    if (this_present_recAccountName || that_present_recAccountName) {
      if (!(this_present_recAccountName && that_present_recAccountName))
        return false;
      if (!this.recAccountName.equals(that.recAccountName))
        return false;
    }

    boolean this_present_guaranteeFee = true;
    boolean that_present_guaranteeFee = true;
    if (this_present_guaranteeFee || that_present_guaranteeFee) {
      if (!(this_present_guaranteeFee && that_present_guaranteeFee))
        return false;
      if (this.guaranteeFee != that.guaranteeFee)
        return false;
    }

    boolean this_present_receMoney = true;
    boolean that_present_receMoney = true;
    if (this_present_receMoney || that_present_receMoney) {
      if (!(this_present_receMoney && that_present_receMoney))
        return false;
      if (this.receMoney != that.receMoney)
        return false;
    }

    boolean this_present_finPoundage = true;
    boolean that_present_finPoundage = true;
    if (this_present_finPoundage || that_present_finPoundage) {
      if (!(this_present_finPoundage && that_present_finPoundage))
        return false;
      if (this.finPoundage != that.finPoundage)
        return false;
    }

    boolean this_present_businessSource = true;
    boolean that_present_businessSource = true;
    if (this_present_businessSource || that_present_businessSource) {
      if (!(this_present_businessSource && that_present_businessSource))
        return false;
      if (this.businessSource != that.businessSource)
        return false;
    }

    boolean this_present_innerOrOut = true;
    boolean that_present_innerOrOut = true;
    if (this_present_innerOrOut || that_present_innerOrOut) {
      if (!(this_present_innerOrOut && that_present_innerOrOut))
        return false;
      if (this.innerOrOut != that.innerOrOut)
        return false;
    }

    boolean this_present_InnerOrOutName = true && this.isSetInnerOrOutName();
    boolean that_present_InnerOrOutName = true && that.isSetInnerOrOutName();
    if (this_present_InnerOrOutName || that_present_InnerOrOutName) {
      if (!(this_present_InnerOrOutName && that_present_InnerOrOutName))
        return false;
      if (!this.InnerOrOutName.equals(that.InnerOrOutName))
        return false;
    }

    boolean this_present_businessSourceName = true && this.isSetBusinessSourceName();
    boolean that_present_businessSourceName = true && that.isSetBusinessSourceName();
    if (this_present_businessSourceName || that_present_businessSourceName) {
      if (!(this_present_businessSourceName && that_present_businessSourceName))
        return false;
      if (!this.businessSourceName.equals(that.businessSourceName))
        return false;
    }

    boolean this_present_bizApplyHandleStatusName = true && this.isSetBizApplyHandleStatusName();
    boolean that_present_bizApplyHandleStatusName = true && that.isSetBizApplyHandleStatusName();
    if (this_present_bizApplyHandleStatusName || that_present_bizApplyHandleStatusName) {
      if (!(this_present_bizApplyHandleStatusName && that_present_bizApplyHandleStatusName))
        return false;
      if (!this.bizApplyHandleStatusName.equals(that.bizApplyHandleStatusName))
        return false;
    }

    boolean this_present_backFeeApplyHandleStatusName = true && this.isSetBackFeeApplyHandleStatusName();
    boolean that_present_backFeeApplyHandleStatusName = true && that.isSetBackFeeApplyHandleStatusName();
    if (this_present_backFeeApplyHandleStatusName || that_present_backFeeApplyHandleStatusName) {
      if (!(this_present_backFeeApplyHandleStatusName && that_present_backFeeApplyHandleStatusName))
        return false;
      if (!this.backFeeApplyHandleStatusName.equals(that.backFeeApplyHandleStatusName))
        return false;
    }

    boolean this_present_foreclosureFloorMoney = true;
    boolean that_present_foreclosureFloorMoney = true;
    if (this_present_foreclosureFloorMoney || that_present_foreclosureFloorMoney) {
      if (!(this_present_foreclosureFloorMoney && that_present_foreclosureFloorMoney))
        return false;
      if (this.foreclosureFloorMoney != that.foreclosureFloorMoney)
        return false;
    }

    boolean this_present_finInterest = true;
    boolean that_present_finInterest = true;
    if (this_present_finInterest || that_present_finInterest) {
      if (!(this_present_finInterest && that_present_finInterest))
        return false;
      if (this.finInterest != that.finInterest)
        return false;
    }

    boolean this_present_bankName = true && this.isSetBankName();
    boolean that_present_bankName = true && that.isSetBankName();
    if (this_present_bankName || that_present_bankName) {
      if (!(this_present_bankName && that_present_bankName))
        return false;
      if (!this.bankName.equals(that.bankName))
        return false;
    }

    boolean this_present_batchRefundFeeMainId = true;
    boolean that_present_batchRefundFeeMainId = true;
    if (this_present_batchRefundFeeMainId || that_present_batchRefundFeeMainId) {
      if (!(this_present_batchRefundFeeMainId && that_present_batchRefundFeeMainId))
        return false;
      if (this.batchRefundFeeMainId != that.batchRefundFeeMainId)
        return false;
    }

    boolean this_present_batchName = true && this.isSetBatchName();
    boolean that_present_batchName = true && that.isSetBatchName();
    if (this_present_batchName || that_present_batchName) {
      if (!(this_present_batchName && that_present_batchName))
        return false;
      if (!this.batchName.equals(that.batchName))
        return false;
    }

    boolean this_present_businessSourceStr = true && this.isSetBusinessSourceStr();
    boolean that_present_businessSourceStr = true && that.isSetBusinessSourceStr();
    if (this_present_businessSourceStr || that_present_businessSourceStr) {
      if (!(this_present_businessSourceStr && that_present_businessSourceStr))
        return false;
      if (!this.businessSourceStr.equals(that.businessSourceStr))
        return false;
    }

    boolean this_present_repaymentDate = true && this.isSetRepaymentDate();
    boolean that_present_repaymentDate = true && that.isSetRepaymentDate();
    if (this_present_repaymentDate || that_present_repaymentDate) {
      if (!(this_present_repaymentDate && that_present_repaymentDate))
        return false;
      if (!this.repaymentDate.equals(that.repaymentDate))
        return false;
    }

    boolean this_present_repaymentDateEnd = true && this.isSetRepaymentDateEnd();
    boolean that_present_repaymentDateEnd = true && that.isSetRepaymentDateEnd();
    if (this_present_repaymentDateEnd || that_present_repaymentDateEnd) {
      if (!(this_present_repaymentDateEnd && that_present_repaymentDateEnd))
        return false;
      if (!this.repaymentDateEnd.equals(that.repaymentDateEnd))
        return false;
    }

    boolean this_present_repaymentMoney = true;
    boolean that_present_repaymentMoney = true;
    if (this_present_repaymentMoney || that_present_repaymentMoney) {
      if (!(this_present_repaymentMoney && that_present_repaymentMoney))
        return false;
      if (this.repaymentMoney != that.repaymentMoney)
        return false;
    }

    boolean this_present_notRepaymentMoney = true;
    boolean that_present_notRepaymentMoney = true;
    if (this_present_notRepaymentMoney || that_present_notRepaymentMoney) {
      if (!(this_present_notRepaymentMoney && that_present_notRepaymentMoney))
        return false;
      if (this.notRepaymentMoney != that.notRepaymentMoney)
        return false;
    }

    boolean this_present_extensionFee = true;
    boolean that_present_extensionFee = true;
    if (this_present_extensionFee || that_present_extensionFee) {
      if (!(this_present_extensionFee && that_present_extensionFee))
        return false;
      if (this.extensionFee != that.extensionFee)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_projectNumber = true && (isSetProjectNumber());
    list.add(present_projectNumber);
    if (present_projectNumber)
      list.add(projectNumber);

    boolean present_projectName = true && (isSetProjectName());
    list.add(present_projectName);
    if (present_projectName)
      list.add(projectName);

    boolean present_bizApplyHandleStatus = true;
    list.add(present_bizApplyHandleStatus);
    if (present_bizApplyHandleStatus)
      list.add(bizApplyHandleStatus);

    boolean present_recStatus = true;
    list.add(present_recStatus);
    if (present_recStatus)
      list.add(recStatus);

    boolean present_backFeeApplyHandleStatus = true;
    list.add(present_backFeeApplyHandleStatus);
    if (present_backFeeApplyHandleStatus)
      list.add(backFeeApplyHandleStatus);

    boolean present_cancelGuaranteeDate = true && (isSetCancelGuaranteeDate());
    list.add(present_cancelGuaranteeDate);
    if (present_cancelGuaranteeDate)
      list.add(cancelGuaranteeDate);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_customerName = true && (isSetCustomerName());
    list.add(present_customerName);
    if (present_customerName)
      list.add(customerName);

    boolean present_oldHome = true && (isSetOldHome());
    list.add(present_oldHome);
    if (present_oldHome)
      list.add(oldHome);

    boolean present_projectPassDate = true && (isSetProjectPassDate());
    list.add(present_projectPassDate);
    if (present_projectPassDate)
      list.add(projectPassDate);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    boolean present_loanMoney = true;
    list.add(present_loanMoney);
    if (present_loanMoney)
      list.add(loanMoney);

    boolean present_productType = true;
    list.add(present_productType);
    if (present_productType)
      list.add(productType);

    boolean present_productId = true;
    list.add(present_productId);
    if (present_productId)
      list.add(productId);

    boolean present_productName = true && (isSetProductName());
    list.add(present_productName);
    if (present_productName)
      list.add(productName);

    boolean present_requestDate = true && (isSetRequestDate());
    list.add(present_requestDate);
    if (present_requestDate)
      list.add(requestDate);

    boolean present_backFeeApplyHandleStatusList = true && (isSetBackFeeApplyHandleStatusList());
    list.add(present_backFeeApplyHandleStatusList);
    if (present_backFeeApplyHandleStatusList)
      list.add(backFeeApplyHandleStatusList);

    boolean present_confirmMoney = true;
    list.add(present_confirmMoney);
    if (present_confirmMoney)
      list.add(confirmMoney);

    boolean present_isConfirm = true;
    list.add(present_isConfirm);
    if (present_isConfirm)
      list.add(isConfirm);

    boolean present_confirmDate = true && (isSetConfirmDate());
    list.add(present_confirmDate);
    if (present_confirmDate)
      list.add(confirmDate);

    boolean present_returnFee = true;
    list.add(present_returnFee);
    if (present_returnFee)
      list.add(returnFee);

    boolean present_houseName = true && (isSetHouseName());
    list.add(present_houseName);
    if (present_houseName)
      list.add(houseName);

    boolean present_buyerName = true && (isSetBuyerName());
    list.add(present_buyerName);
    if (present_buyerName)
      list.add(buyerName);

    boolean present_sellerName = true && (isSetSellerName());
    list.add(present_sellerName);
    if (present_sellerName)
      list.add(sellerName);

    boolean present_isChechan = true;
    list.add(present_isChechan);
    if (present_isChechan)
      list.add(isChechan);

    boolean present_pmUserId = true;
    list.add(present_pmUserId);
    if (present_pmUserId)
      list.add(pmUserId);

    boolean present_orgId = true;
    list.add(present_orgId);
    if (present_orgId)
      list.add(orgId);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_businessSourceNo = true;
    list.add(present_businessSourceNo);
    if (present_businessSourceNo)
      list.add(businessSourceNo);

    boolean present_businessCatelog = true;
    list.add(present_businessCatelog);
    if (present_businessCatelog)
      list.add(businessCatelog);

    boolean present_orgName = true && (isSetOrgName());
    list.add(present_orgName);
    if (present_orgName)
      list.add(orgName);

    boolean present_pmName = true && (isSetPmName());
    list.add(present_pmName);
    if (present_pmName)
      list.add(pmName);

    boolean present_recAccountName = true && (isSetRecAccountName());
    list.add(present_recAccountName);
    if (present_recAccountName)
      list.add(recAccountName);

    boolean present_guaranteeFee = true;
    list.add(present_guaranteeFee);
    if (present_guaranteeFee)
      list.add(guaranteeFee);

    boolean present_receMoney = true;
    list.add(present_receMoney);
    if (present_receMoney)
      list.add(receMoney);

    boolean present_finPoundage = true;
    list.add(present_finPoundage);
    if (present_finPoundage)
      list.add(finPoundage);

    boolean present_businessSource = true;
    list.add(present_businessSource);
    if (present_businessSource)
      list.add(businessSource);

    boolean present_innerOrOut = true;
    list.add(present_innerOrOut);
    if (present_innerOrOut)
      list.add(innerOrOut);

    boolean present_InnerOrOutName = true && (isSetInnerOrOutName());
    list.add(present_InnerOrOutName);
    if (present_InnerOrOutName)
      list.add(InnerOrOutName);

    boolean present_businessSourceName = true && (isSetBusinessSourceName());
    list.add(present_businessSourceName);
    if (present_businessSourceName)
      list.add(businessSourceName);

    boolean present_bizApplyHandleStatusName = true && (isSetBizApplyHandleStatusName());
    list.add(present_bizApplyHandleStatusName);
    if (present_bizApplyHandleStatusName)
      list.add(bizApplyHandleStatusName);

    boolean present_backFeeApplyHandleStatusName = true && (isSetBackFeeApplyHandleStatusName());
    list.add(present_backFeeApplyHandleStatusName);
    if (present_backFeeApplyHandleStatusName)
      list.add(backFeeApplyHandleStatusName);

    boolean present_foreclosureFloorMoney = true;
    list.add(present_foreclosureFloorMoney);
    if (present_foreclosureFloorMoney)
      list.add(foreclosureFloorMoney);

    boolean present_finInterest = true;
    list.add(present_finInterest);
    if (present_finInterest)
      list.add(finInterest);

    boolean present_bankName = true && (isSetBankName());
    list.add(present_bankName);
    if (present_bankName)
      list.add(bankName);

    boolean present_batchRefundFeeMainId = true;
    list.add(present_batchRefundFeeMainId);
    if (present_batchRefundFeeMainId)
      list.add(batchRefundFeeMainId);

    boolean present_batchName = true && (isSetBatchName());
    list.add(present_batchName);
    if (present_batchName)
      list.add(batchName);

    boolean present_businessSourceStr = true && (isSetBusinessSourceStr());
    list.add(present_businessSourceStr);
    if (present_businessSourceStr)
      list.add(businessSourceStr);

    boolean present_repaymentDate = true && (isSetRepaymentDate());
    list.add(present_repaymentDate);
    if (present_repaymentDate)
      list.add(repaymentDate);

    boolean present_repaymentDateEnd = true && (isSetRepaymentDateEnd());
    list.add(present_repaymentDateEnd);
    if (present_repaymentDateEnd)
      list.add(repaymentDateEnd);

    boolean present_repaymentMoney = true;
    list.add(present_repaymentMoney);
    if (present_repaymentMoney)
      list.add(repaymentMoney);

    boolean present_notRepaymentMoney = true;
    list.add(present_notRepaymentMoney);
    if (present_notRepaymentMoney)
      list.add(notRepaymentMoney);

    boolean present_extensionFee = true;
    list.add(present_extensionFee);
    if (present_extensionFee)
      list.add(extensionFee);

    return list.hashCode();
  }

  @Override
  public int compareTo(RefundFeeIndexDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectNumber()).compareTo(other.isSetProjectNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectNumber, other.projectNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectName()).compareTo(other.isSetProjectName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectName, other.projectName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizApplyHandleStatus()).compareTo(other.isSetBizApplyHandleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizApplyHandleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizApplyHandleStatus, other.bizApplyHandleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecStatus()).compareTo(other.isSetRecStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recStatus, other.recStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackFeeApplyHandleStatus()).compareTo(other.isSetBackFeeApplyHandleStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackFeeApplyHandleStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backFeeApplyHandleStatus, other.backFeeApplyHandleStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelGuaranteeDate()).compareTo(other.isSetCancelGuaranteeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelGuaranteeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelGuaranteeDate, other.cancelGuaranteeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerName()).compareTo(other.isSetCustomerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerName, other.customerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldHome()).compareTo(other.isSetOldHome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldHome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldHome, other.oldHome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectPassDate()).compareTo(other.isSetProjectPassDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectPassDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectPassDate, other.projectPassDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanMoney()).compareTo(other.isSetLoanMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanMoney, other.loanMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductId()).compareTo(other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestDate()).compareTo(other.isSetRequestDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestDate, other.requestDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackFeeApplyHandleStatusList()).compareTo(other.isSetBackFeeApplyHandleStatusList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackFeeApplyHandleStatusList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backFeeApplyHandleStatusList, other.backFeeApplyHandleStatusList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmMoney()).compareTo(other.isSetConfirmMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmMoney, other.confirmMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsConfirm()).compareTo(other.isSetIsConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsConfirm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isConfirm, other.isConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirmDate()).compareTo(other.isSetConfirmDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirmDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmDate, other.confirmDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFee()).compareTo(other.isSetReturnFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnFee, other.returnFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseName()).compareTo(other.isSetHouseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseName, other.houseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuyerName()).compareTo(other.isSetBuyerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuyerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buyerName, other.buyerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellerName()).compareTo(other.isSetSellerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellerName, other.sellerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsChechan()).compareTo(other.isSetIsChechan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsChechan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isChechan, other.isChechan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmUserId()).compareTo(other.isSetPmUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmUserId, other.pmUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceNo()).compareTo(other.isSetBusinessSourceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceNo, other.businessSourceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessCatelog()).compareTo(other.isSetBusinessCatelog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessCatelog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessCatelog, other.businessCatelog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPmName()).compareTo(other.isSetPmName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPmName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pmName, other.pmName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecAccountName()).compareTo(other.isSetRecAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recAccountName, other.recAccountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGuaranteeFee()).compareTo(other.isSetGuaranteeFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuaranteeFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guaranteeFee, other.guaranteeFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceMoney()).compareTo(other.isSetReceMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receMoney, other.receMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinPoundage()).compareTo(other.isSetFinPoundage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinPoundage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finPoundage, other.finPoundage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSource()).compareTo(other.isSetBusinessSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSource, other.businessSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOut()).compareTo(other.isSetInnerOrOut());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOut()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.innerOrOut, other.innerOrOut);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInnerOrOutName()).compareTo(other.isSetInnerOrOutName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInnerOrOutName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.InnerOrOutName, other.InnerOrOutName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceName()).compareTo(other.isSetBusinessSourceName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceName, other.businessSourceName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBizApplyHandleStatusName()).compareTo(other.isSetBizApplyHandleStatusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBizApplyHandleStatusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bizApplyHandleStatusName, other.bizApplyHandleStatusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackFeeApplyHandleStatusName()).compareTo(other.isSetBackFeeApplyHandleStatusName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackFeeApplyHandleStatusName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backFeeApplyHandleStatusName, other.backFeeApplyHandleStatusName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeclosureFloorMoney()).compareTo(other.isSetForeclosureFloorMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeclosureFloorMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreclosureFloorMoney, other.foreclosureFloorMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinInterest()).compareTo(other.isSetFinInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finInterest, other.finInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankName()).compareTo(other.isSetBankName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankName, other.bankName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchRefundFeeMainId()).compareTo(other.isSetBatchRefundFeeMainId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchRefundFeeMainId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchRefundFeeMainId, other.batchRefundFeeMainId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchName()).compareTo(other.isSetBatchName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchName, other.batchName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBusinessSourceStr()).compareTo(other.isSetBusinessSourceStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessSourceStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessSourceStr, other.businessSourceStr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDate()).compareTo(other.isSetRepaymentDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDate, other.repaymentDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentDateEnd()).compareTo(other.isSetRepaymentDateEnd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentDateEnd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentDateEnd, other.repaymentDateEnd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepaymentMoney()).compareTo(other.isSetRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentMoney, other.repaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotRepaymentMoney()).compareTo(other.isSetNotRepaymentMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotRepaymentMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notRepaymentMoney, other.notRepaymentMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtensionFee()).compareTo(other.isSetExtensionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtensionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extensionFee, other.extensionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundFeeIndexDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectNumber:");
    if (this.projectNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.projectNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectName:");
    if (this.projectName == null) {
      sb.append("null");
    } else {
      sb.append(this.projectName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizApplyHandleStatus:");
    sb.append(this.bizApplyHandleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recStatus:");
    sb.append(this.recStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("backFeeApplyHandleStatus:");
    sb.append(this.backFeeApplyHandleStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelGuaranteeDate:");
    if (this.cancelGuaranteeDate == null) {
      sb.append("null");
    } else {
      sb.append(this.cancelGuaranteeDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerName:");
    if (this.customerName == null) {
      sb.append("null");
    } else {
      sb.append(this.customerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldHome:");
    if (this.oldHome == null) {
      sb.append("null");
    } else {
      sb.append(this.oldHome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectPassDate:");
    if (this.projectPassDate == null) {
      sb.append("null");
    } else {
      sb.append(this.projectPassDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanMoney:");
    sb.append(this.loanMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    sb.append(this.productType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productId:");
    sb.append(this.productId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestDate:");
    if (this.requestDate == null) {
      sb.append("null");
    } else {
      sb.append(this.requestDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backFeeApplyHandleStatusList:");
    if (this.backFeeApplyHandleStatusList == null) {
      sb.append("null");
    } else {
      sb.append(this.backFeeApplyHandleStatusList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmMoney:");
    sb.append(this.confirmMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isConfirm:");
    sb.append(this.isConfirm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("confirmDate:");
    if (this.confirmDate == null) {
      sb.append("null");
    } else {
      sb.append(this.confirmDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnFee:");
    sb.append(this.returnFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseName:");
    if (this.houseName == null) {
      sb.append("null");
    } else {
      sb.append(this.houseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buyerName:");
    if (this.buyerName == null) {
      sb.append("null");
    } else {
      sb.append(this.buyerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sellerName:");
    if (this.sellerName == null) {
      sb.append("null");
    } else {
      sb.append(this.sellerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isChechan:");
    sb.append(this.isChechan);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmUserId:");
    sb.append(this.pmUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    sb.append(this.orgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceNo:");
    sb.append(this.businessSourceNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessCatelog:");
    sb.append(this.businessCatelog);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgName:");
    if (this.orgName == null) {
      sb.append("null");
    } else {
      sb.append(this.orgName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pmName:");
    if (this.pmName == null) {
      sb.append("null");
    } else {
      sb.append(this.pmName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recAccountName:");
    if (this.recAccountName == null) {
      sb.append("null");
    } else {
      sb.append(this.recAccountName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("guaranteeFee:");
    sb.append(this.guaranteeFee);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receMoney:");
    sb.append(this.receMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finPoundage:");
    sb.append(this.finPoundage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSource:");
    sb.append(this.businessSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("innerOrOut:");
    sb.append(this.innerOrOut);
    first = false;
    if (!first) sb.append(", ");
    sb.append("InnerOrOutName:");
    if (this.InnerOrOutName == null) {
      sb.append("null");
    } else {
      sb.append(this.InnerOrOutName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceName:");
    if (this.businessSourceName == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bizApplyHandleStatusName:");
    if (this.bizApplyHandleStatusName == null) {
      sb.append("null");
    } else {
      sb.append(this.bizApplyHandleStatusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backFeeApplyHandleStatusName:");
    if (this.backFeeApplyHandleStatusName == null) {
      sb.append("null");
    } else {
      sb.append(this.backFeeApplyHandleStatusName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("foreclosureFloorMoney:");
    sb.append(this.foreclosureFloorMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finInterest:");
    sb.append(this.finInterest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bankName:");
    if (this.bankName == null) {
      sb.append("null");
    } else {
      sb.append(this.bankName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchRefundFeeMainId:");
    sb.append(this.batchRefundFeeMainId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("batchName:");
    if (this.batchName == null) {
      sb.append("null");
    } else {
      sb.append(this.batchName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessSourceStr:");
    if (this.businessSourceStr == null) {
      sb.append("null");
    } else {
      sb.append(this.businessSourceStr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDate:");
    if (this.repaymentDate == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentDateEnd:");
    if (this.repaymentDateEnd == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentDateEnd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("repaymentMoney:");
    sb.append(this.repaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notRepaymentMoney:");
    sb.append(this.notRepaymentMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extensionFee:");
    sb.append(this.extensionFee);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundFeeIndexDTOStandardSchemeFactory implements SchemeFactory {
    public RefundFeeIndexDTOStandardScheme getScheme() {
      return new RefundFeeIndexDTOStandardScheme();
    }
  }

  private static class RefundFeeIndexDTOStandardScheme extends StandardScheme<RefundFeeIndexDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundFeeIndexDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROJECT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectNumber = iprot.readString();
              struct.setProjectNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectName = iprot.readString();
              struct.setProjectNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BIZ_APPLY_HANDLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bizApplyHandleStatus = iprot.readI32();
              struct.setBizApplyHandleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recStatus = iprot.readI32();
              struct.setRecStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BACK_FEE_APPLY_HANDLE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.backFeeApplyHandleStatus = iprot.readI32();
              struct.setBackFeeApplyHandleStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CANCEL_GUARANTEE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cancelGuaranteeDate = iprot.readString();
              struct.setCancelGuaranteeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list128.size);
                int _elem129;
                for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                {
                  _elem129 = iprot.readI32();
                  struct.userIds.add(_elem129);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CUSTOMER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerName = iprot.readString();
              struct.setCustomerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OLD_HOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldHome = iprot.readString();
              struct.setOldHomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PROJECT_PASS_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.projectPassDate = iprot.readString();
              struct.setProjectPassDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOAN_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.loanMoney = iprot.readDouble();
              struct.setLoanMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = iprot.readI32();
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productId = iprot.readI32();
              struct.setProductIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // REQUEST_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestDate = iprot.readString();
              struct.setRequestDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BACK_FEE_APPLY_HANDLE_STATUS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list131 = iprot.readListBegin();
                struct.backFeeApplyHandleStatusList = new ArrayList<Integer>(_list131.size);
                int _elem132;
                for (int _i133 = 0; _i133 < _list131.size; ++_i133)
                {
                  _elem132 = iprot.readI32();
                  struct.backFeeApplyHandleStatusList.add(_elem132);
                }
                iprot.readListEnd();
              }
              struct.setBackFeeApplyHandleStatusListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CONFIRM_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.confirmMoney = iprot.readDouble();
              struct.setConfirmMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // IS_CONFIRM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isConfirm = iprot.readI32();
              struct.setIsConfirmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CONFIRM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirmDate = iprot.readString();
              struct.setConfirmDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // RETURN_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.returnFee = iprot.readDouble();
              struct.setReturnFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // HOUSE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.houseName = iprot.readString();
              struct.setHouseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // BUYER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buyerName = iprot.readString();
              struct.setBuyerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // SELLER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sellerName = iprot.readString();
              struct.setSellerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // IS_CHECHAN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isChechan = iprot.readI32();
              struct.setIsChechanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // PM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pmUserId = iprot.readI32();
              struct.setPmUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orgId = iprot.readI32();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // BUSINESS_SOURCE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSourceNo = iprot.readI32();
              struct.setBusinessSourceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // BUSINESS_CATELOG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessCatelog = iprot.readI32();
              struct.setBusinessCatelogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // PM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pmName = iprot.readString();
              struct.setPmNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // REC_ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.recAccountName = iprot.readString();
              struct.setRecAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // GUARANTEE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.guaranteeFee = iprot.readDouble();
              struct.setGuaranteeFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // RECE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.receMoney = iprot.readDouble();
              struct.setReceMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // FIN_POUNDAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.finPoundage = iprot.readDouble();
              struct.setFinPoundageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // BUSINESS_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.businessSource = iprot.readI32();
              struct.setBusinessSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // INNER_OR_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.innerOrOut = iprot.readI32();
              struct.setInnerOrOutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // INNER_OR_OUT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.InnerOrOutName = iprot.readString();
              struct.setInnerOrOutNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // BUSINESS_SOURCE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceName = iprot.readString();
              struct.setBusinessSourceNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // BIZ_APPLY_HANDLE_STATUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bizApplyHandleStatusName = iprot.readString();
              struct.setBizApplyHandleStatusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // BACK_FEE_APPLY_HANDLE_STATUS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backFeeApplyHandleStatusName = iprot.readString();
              struct.setBackFeeApplyHandleStatusNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // FORECLOSURE_FLOOR_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.foreclosureFloorMoney = iprot.readDouble();
              struct.setForeclosureFloorMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // FIN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.finInterest = iprot.readDouble();
              struct.setFinInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // BANK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bankName = iprot.readString();
              struct.setBankNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // BATCH_REFUND_FEE_MAIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batchRefundFeeMainId = iprot.readI32();
              struct.setBatchRefundFeeMainIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // BATCH_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batchName = iprot.readString();
              struct.setBatchNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // BUSINESS_SOURCE_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessSourceStr = iprot.readString();
              struct.setBusinessSourceStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // REPAYMENT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDate = iprot.readString();
              struct.setRepaymentDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // REPAYMENT_DATE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repaymentDateEnd = iprot.readString();
              struct.setRepaymentDateEndIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.repaymentMoney = iprot.readDouble();
              struct.setRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // NOT_REPAYMENT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.notRepaymentMoney = iprot.readDouble();
              struct.setNotRepaymentMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // EXTENSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.extensionFee = iprot.readDouble();
              struct.setExtensionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundFeeIndexDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      if (struct.projectNumber != null) {
        oprot.writeFieldBegin(PROJECT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.projectNumber);
        oprot.writeFieldEnd();
      }
      if (struct.projectName != null) {
        oprot.writeFieldBegin(PROJECT_NAME_FIELD_DESC);
        oprot.writeString(struct.projectName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BIZ_APPLY_HANDLE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.bizApplyHandleStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REC_STATUS_FIELD_DESC);
      oprot.writeI32(struct.recStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BACK_FEE_APPLY_HANDLE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.backFeeApplyHandleStatus);
      oprot.writeFieldEnd();
      if (struct.cancelGuaranteeDate != null) {
        oprot.writeFieldBegin(CANCEL_GUARANTEE_DATE_FIELD_DESC);
        oprot.writeString(struct.cancelGuaranteeDate);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter134 : struct.userIds)
          {
            oprot.writeI32(_iter134);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.customerName != null) {
        oprot.writeFieldBegin(CUSTOMER_NAME_FIELD_DESC);
        oprot.writeString(struct.customerName);
        oprot.writeFieldEnd();
      }
      if (struct.oldHome != null) {
        oprot.writeFieldBegin(OLD_HOME_FIELD_DESC);
        oprot.writeString(struct.oldHome);
        oprot.writeFieldEnd();
      }
      if (struct.projectPassDate != null) {
        oprot.writeFieldBegin(PROJECT_PASS_DATE_FIELD_DESC);
        oprot.writeString(struct.projectPassDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.loanMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.productType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeI32(struct.productId);
      oprot.writeFieldEnd();
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.requestDate != null) {
        oprot.writeFieldBegin(REQUEST_DATE_FIELD_DESC);
        oprot.writeString(struct.requestDate);
        oprot.writeFieldEnd();
      }
      if (struct.backFeeApplyHandleStatusList != null) {
        oprot.writeFieldBegin(BACK_FEE_APPLY_HANDLE_STATUS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.backFeeApplyHandleStatusList.size()));
          for (int _iter135 : struct.backFeeApplyHandleStatusList)
          {
            oprot.writeI32(_iter135);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONFIRM_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.confirmMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CONFIRM_FIELD_DESC);
      oprot.writeI32(struct.isConfirm);
      oprot.writeFieldEnd();
      if (struct.confirmDate != null) {
        oprot.writeFieldBegin(CONFIRM_DATE_FIELD_DESC);
        oprot.writeString(struct.confirmDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RETURN_FEE_FIELD_DESC);
      oprot.writeDouble(struct.returnFee);
      oprot.writeFieldEnd();
      if (struct.houseName != null) {
        oprot.writeFieldBegin(HOUSE_NAME_FIELD_DESC);
        oprot.writeString(struct.houseName);
        oprot.writeFieldEnd();
      }
      if (struct.buyerName != null) {
        oprot.writeFieldBegin(BUYER_NAME_FIELD_DESC);
        oprot.writeString(struct.buyerName);
        oprot.writeFieldEnd();
      }
      if (struct.sellerName != null) {
        oprot.writeFieldBegin(SELLER_NAME_FIELD_DESC);
        oprot.writeString(struct.sellerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECHAN_FIELD_DESC);
      oprot.writeI32(struct.isChechan);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PM_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.pmUserId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
      oprot.writeI32(struct.orgId);
      oprot.writeFieldEnd();
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BUSINESS_SOURCE_NO_FIELD_DESC);
      oprot.writeI32(struct.businessSourceNo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_CATELOG_FIELD_DESC);
      oprot.writeI32(struct.businessCatelog);
      oprot.writeFieldEnd();
      if (struct.orgName != null) {
        oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
        oprot.writeString(struct.orgName);
        oprot.writeFieldEnd();
      }
      if (struct.pmName != null) {
        oprot.writeFieldBegin(PM_NAME_FIELD_DESC);
        oprot.writeString(struct.pmName);
        oprot.writeFieldEnd();
      }
      if (struct.recAccountName != null) {
        oprot.writeFieldBegin(REC_ACCOUNT_NAME_FIELD_DESC);
        oprot.writeString(struct.recAccountName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GUARANTEE_FEE_FIELD_DESC);
      oprot.writeDouble(struct.guaranteeFee);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.receMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIN_POUNDAGE_FIELD_DESC);
      oprot.writeDouble(struct.finPoundage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BUSINESS_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.businessSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INNER_OR_OUT_FIELD_DESC);
      oprot.writeI32(struct.innerOrOut);
      oprot.writeFieldEnd();
      if (struct.InnerOrOutName != null) {
        oprot.writeFieldBegin(INNER_OR_OUT_NAME_FIELD_DESC);
        oprot.writeString(struct.InnerOrOutName);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceName != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_NAME_FIELD_DESC);
        oprot.writeString(struct.businessSourceName);
        oprot.writeFieldEnd();
      }
      if (struct.bizApplyHandleStatusName != null) {
        oprot.writeFieldBegin(BIZ_APPLY_HANDLE_STATUS_NAME_FIELD_DESC);
        oprot.writeString(struct.bizApplyHandleStatusName);
        oprot.writeFieldEnd();
      }
      if (struct.backFeeApplyHandleStatusName != null) {
        oprot.writeFieldBegin(BACK_FEE_APPLY_HANDLE_STATUS_NAME_FIELD_DESC);
        oprot.writeString(struct.backFeeApplyHandleStatusName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FORECLOSURE_FLOOR_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.foreclosureFloorMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIN_INTEREST_FIELD_DESC);
      oprot.writeDouble(struct.finInterest);
      oprot.writeFieldEnd();
      if (struct.bankName != null) {
        oprot.writeFieldBegin(BANK_NAME_FIELD_DESC);
        oprot.writeString(struct.bankName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BATCH_REFUND_FEE_MAIN_ID_FIELD_DESC);
      oprot.writeI32(struct.batchRefundFeeMainId);
      oprot.writeFieldEnd();
      if (struct.batchName != null) {
        oprot.writeFieldBegin(BATCH_NAME_FIELD_DESC);
        oprot.writeString(struct.batchName);
        oprot.writeFieldEnd();
      }
      if (struct.businessSourceStr != null) {
        oprot.writeFieldBegin(BUSINESS_SOURCE_STR_FIELD_DESC);
        oprot.writeString(struct.businessSourceStr);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentDate != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_FIELD_DESC);
        oprot.writeString(struct.repaymentDate);
        oprot.writeFieldEnd();
      }
      if (struct.repaymentDateEnd != null) {
        oprot.writeFieldBegin(REPAYMENT_DATE_END_FIELD_DESC);
        oprot.writeString(struct.repaymentDateEnd);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.repaymentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOT_REPAYMENT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.notRepaymentMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXTENSION_FEE_FIELD_DESC);
      oprot.writeDouble(struct.extensionFee);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundFeeIndexDTOTupleSchemeFactory implements SchemeFactory {
    public RefundFeeIndexDTOTupleScheme getScheme() {
      return new RefundFeeIndexDTOTupleScheme();
    }
  }

  private static class RefundFeeIndexDTOTupleScheme extends TupleScheme<RefundFeeIndexDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundFeeIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetProjectNumber()) {
        optionals.set(2);
      }
      if (struct.isSetProjectName()) {
        optionals.set(3);
      }
      if (struct.isSetBizApplyHandleStatus()) {
        optionals.set(4);
      }
      if (struct.isSetRecStatus()) {
        optionals.set(5);
      }
      if (struct.isSetBackFeeApplyHandleStatus()) {
        optionals.set(6);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        optionals.set(7);
      }
      if (struct.isSetUserIds()) {
        optionals.set(8);
      }
      if (struct.isSetPage()) {
        optionals.set(9);
      }
      if (struct.isSetRows()) {
        optionals.set(10);
      }
      if (struct.isSetCustomerName()) {
        optionals.set(11);
      }
      if (struct.isSetOldHome()) {
        optionals.set(12);
      }
      if (struct.isSetProjectPassDate()) {
        optionals.set(13);
      }
      if (struct.isSetType()) {
        optionals.set(14);
      }
      if (struct.isSetLoanMoney()) {
        optionals.set(15);
      }
      if (struct.isSetProductType()) {
        optionals.set(16);
      }
      if (struct.isSetProductId()) {
        optionals.set(17);
      }
      if (struct.isSetProductName()) {
        optionals.set(18);
      }
      if (struct.isSetRequestDate()) {
        optionals.set(19);
      }
      if (struct.isSetBackFeeApplyHandleStatusList()) {
        optionals.set(20);
      }
      if (struct.isSetConfirmMoney()) {
        optionals.set(21);
      }
      if (struct.isSetIsConfirm()) {
        optionals.set(22);
      }
      if (struct.isSetConfirmDate()) {
        optionals.set(23);
      }
      if (struct.isSetReturnFee()) {
        optionals.set(24);
      }
      if (struct.isSetHouseName()) {
        optionals.set(25);
      }
      if (struct.isSetBuyerName()) {
        optionals.set(26);
      }
      if (struct.isSetSellerName()) {
        optionals.set(27);
      }
      if (struct.isSetIsChechan()) {
        optionals.set(28);
      }
      if (struct.isSetPmUserId()) {
        optionals.set(29);
      }
      if (struct.isSetOrgId()) {
        optionals.set(30);
      }
      if (struct.isSetStartDate()) {
        optionals.set(31);
      }
      if (struct.isSetEndDate()) {
        optionals.set(32);
      }
      if (struct.isSetBusinessSourceNo()) {
        optionals.set(33);
      }
      if (struct.isSetBusinessCatelog()) {
        optionals.set(34);
      }
      if (struct.isSetOrgName()) {
        optionals.set(35);
      }
      if (struct.isSetPmName()) {
        optionals.set(36);
      }
      if (struct.isSetRecAccountName()) {
        optionals.set(37);
      }
      if (struct.isSetGuaranteeFee()) {
        optionals.set(38);
      }
      if (struct.isSetReceMoney()) {
        optionals.set(39);
      }
      if (struct.isSetFinPoundage()) {
        optionals.set(40);
      }
      if (struct.isSetBusinessSource()) {
        optionals.set(41);
      }
      if (struct.isSetInnerOrOut()) {
        optionals.set(42);
      }
      if (struct.isSetInnerOrOutName()) {
        optionals.set(43);
      }
      if (struct.isSetBusinessSourceName()) {
        optionals.set(44);
      }
      if (struct.isSetBizApplyHandleStatusName()) {
        optionals.set(45);
      }
      if (struct.isSetBackFeeApplyHandleStatusName()) {
        optionals.set(46);
      }
      if (struct.isSetForeclosureFloorMoney()) {
        optionals.set(47);
      }
      if (struct.isSetFinInterest()) {
        optionals.set(48);
      }
      if (struct.isSetBankName()) {
        optionals.set(49);
      }
      if (struct.isSetBatchRefundFeeMainId()) {
        optionals.set(50);
      }
      if (struct.isSetBatchName()) {
        optionals.set(51);
      }
      if (struct.isSetBusinessSourceStr()) {
        optionals.set(52);
      }
      if (struct.isSetRepaymentDate()) {
        optionals.set(53);
      }
      if (struct.isSetRepaymentDateEnd()) {
        optionals.set(54);
      }
      if (struct.isSetRepaymentMoney()) {
        optionals.set(55);
      }
      if (struct.isSetNotRepaymentMoney()) {
        optionals.set(56);
      }
      if (struct.isSetExtensionFee()) {
        optionals.set(57);
      }
      oprot.writeBitSet(optionals, 58);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetProjectNumber()) {
        oprot.writeString(struct.projectNumber);
      }
      if (struct.isSetProjectName()) {
        oprot.writeString(struct.projectName);
      }
      if (struct.isSetBizApplyHandleStatus()) {
        oprot.writeI32(struct.bizApplyHandleStatus);
      }
      if (struct.isSetRecStatus()) {
        oprot.writeI32(struct.recStatus);
      }
      if (struct.isSetBackFeeApplyHandleStatus()) {
        oprot.writeI32(struct.backFeeApplyHandleStatus);
      }
      if (struct.isSetCancelGuaranteeDate()) {
        oprot.writeString(struct.cancelGuaranteeDate);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter136 : struct.userIds)
          {
            oprot.writeI32(_iter136);
          }
        }
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetCustomerName()) {
        oprot.writeString(struct.customerName);
      }
      if (struct.isSetOldHome()) {
        oprot.writeString(struct.oldHome);
      }
      if (struct.isSetProjectPassDate()) {
        oprot.writeString(struct.projectPassDate);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetLoanMoney()) {
        oprot.writeDouble(struct.loanMoney);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType);
      }
      if (struct.isSetProductId()) {
        oprot.writeI32(struct.productId);
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetRequestDate()) {
        oprot.writeString(struct.requestDate);
      }
      if (struct.isSetBackFeeApplyHandleStatusList()) {
        {
          oprot.writeI32(struct.backFeeApplyHandleStatusList.size());
          for (int _iter137 : struct.backFeeApplyHandleStatusList)
          {
            oprot.writeI32(_iter137);
          }
        }
      }
      if (struct.isSetConfirmMoney()) {
        oprot.writeDouble(struct.confirmMoney);
      }
      if (struct.isSetIsConfirm()) {
        oprot.writeI32(struct.isConfirm);
      }
      if (struct.isSetConfirmDate()) {
        oprot.writeString(struct.confirmDate);
      }
      if (struct.isSetReturnFee()) {
        oprot.writeDouble(struct.returnFee);
      }
      if (struct.isSetHouseName()) {
        oprot.writeString(struct.houseName);
      }
      if (struct.isSetBuyerName()) {
        oprot.writeString(struct.buyerName);
      }
      if (struct.isSetSellerName()) {
        oprot.writeString(struct.sellerName);
      }
      if (struct.isSetIsChechan()) {
        oprot.writeI32(struct.isChechan);
      }
      if (struct.isSetPmUserId()) {
        oprot.writeI32(struct.pmUserId);
      }
      if (struct.isSetOrgId()) {
        oprot.writeI32(struct.orgId);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetBusinessSourceNo()) {
        oprot.writeI32(struct.businessSourceNo);
      }
      if (struct.isSetBusinessCatelog()) {
        oprot.writeI32(struct.businessCatelog);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetPmName()) {
        oprot.writeString(struct.pmName);
      }
      if (struct.isSetRecAccountName()) {
        oprot.writeString(struct.recAccountName);
      }
      if (struct.isSetGuaranteeFee()) {
        oprot.writeDouble(struct.guaranteeFee);
      }
      if (struct.isSetReceMoney()) {
        oprot.writeDouble(struct.receMoney);
      }
      if (struct.isSetFinPoundage()) {
        oprot.writeDouble(struct.finPoundage);
      }
      if (struct.isSetBusinessSource()) {
        oprot.writeI32(struct.businessSource);
      }
      if (struct.isSetInnerOrOut()) {
        oprot.writeI32(struct.innerOrOut);
      }
      if (struct.isSetInnerOrOutName()) {
        oprot.writeString(struct.InnerOrOutName);
      }
      if (struct.isSetBusinessSourceName()) {
        oprot.writeString(struct.businessSourceName);
      }
      if (struct.isSetBizApplyHandleStatusName()) {
        oprot.writeString(struct.bizApplyHandleStatusName);
      }
      if (struct.isSetBackFeeApplyHandleStatusName()) {
        oprot.writeString(struct.backFeeApplyHandleStatusName);
      }
      if (struct.isSetForeclosureFloorMoney()) {
        oprot.writeDouble(struct.foreclosureFloorMoney);
      }
      if (struct.isSetFinInterest()) {
        oprot.writeDouble(struct.finInterest);
      }
      if (struct.isSetBankName()) {
        oprot.writeString(struct.bankName);
      }
      if (struct.isSetBatchRefundFeeMainId()) {
        oprot.writeI32(struct.batchRefundFeeMainId);
      }
      if (struct.isSetBatchName()) {
        oprot.writeString(struct.batchName);
      }
      if (struct.isSetBusinessSourceStr()) {
        oprot.writeString(struct.businessSourceStr);
      }
      if (struct.isSetRepaymentDate()) {
        oprot.writeString(struct.repaymentDate);
      }
      if (struct.isSetRepaymentDateEnd()) {
        oprot.writeString(struct.repaymentDateEnd);
      }
      if (struct.isSetRepaymentMoney()) {
        oprot.writeDouble(struct.repaymentMoney);
      }
      if (struct.isSetNotRepaymentMoney()) {
        oprot.writeDouble(struct.notRepaymentMoney);
      }
      if (struct.isSetExtensionFee()) {
        oprot.writeDouble(struct.extensionFee);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundFeeIndexDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(58);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.projectNumber = iprot.readString();
        struct.setProjectNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectName = iprot.readString();
        struct.setProjectNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bizApplyHandleStatus = iprot.readI32();
        struct.setBizApplyHandleStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.recStatus = iprot.readI32();
        struct.setRecStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.backFeeApplyHandleStatus = iprot.readI32();
        struct.setBackFeeApplyHandleStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cancelGuaranteeDate = iprot.readString();
        struct.setCancelGuaranteeDateIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list138 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list138.size);
          int _elem139;
          for (int _i140 = 0; _i140 < _list138.size; ++_i140)
          {
            _elem139 = iprot.readI32();
            struct.userIds.add(_elem139);
          }
        }
        struct.setUserIdsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(10)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.customerName = iprot.readString();
        struct.setCustomerNameIsSet(true);
      }
      if (incoming.get(12)) {
        struct.oldHome = iprot.readString();
        struct.setOldHomeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.projectPassDate = iprot.readString();
        struct.setProjectPassDateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.loanMoney = iprot.readDouble();
        struct.setLoanMoneyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.productType = iprot.readI32();
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.productId = iprot.readI32();
        struct.setProductIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.requestDate = iprot.readString();
        struct.setRequestDateIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.backFeeApplyHandleStatusList = new ArrayList<Integer>(_list141.size);
          int _elem142;
          for (int _i143 = 0; _i143 < _list141.size; ++_i143)
          {
            _elem142 = iprot.readI32();
            struct.backFeeApplyHandleStatusList.add(_elem142);
          }
        }
        struct.setBackFeeApplyHandleStatusListIsSet(true);
      }
      if (incoming.get(21)) {
        struct.confirmMoney = iprot.readDouble();
        struct.setConfirmMoneyIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isConfirm = iprot.readI32();
        struct.setIsConfirmIsSet(true);
      }
      if (incoming.get(23)) {
        struct.confirmDate = iprot.readString();
        struct.setConfirmDateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.returnFee = iprot.readDouble();
        struct.setReturnFeeIsSet(true);
      }
      if (incoming.get(25)) {
        struct.houseName = iprot.readString();
        struct.setHouseNameIsSet(true);
      }
      if (incoming.get(26)) {
        struct.buyerName = iprot.readString();
        struct.setBuyerNameIsSet(true);
      }
      if (incoming.get(27)) {
        struct.sellerName = iprot.readString();
        struct.setSellerNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.isChechan = iprot.readI32();
        struct.setIsChechanIsSet(true);
      }
      if (incoming.get(29)) {
        struct.pmUserId = iprot.readI32();
        struct.setPmUserIdIsSet(true);
      }
      if (incoming.get(30)) {
        struct.orgId = iprot.readI32();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(31)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(32)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(33)) {
        struct.businessSourceNo = iprot.readI32();
        struct.setBusinessSourceNoIsSet(true);
      }
      if (incoming.get(34)) {
        struct.businessCatelog = iprot.readI32();
        struct.setBusinessCatelogIsSet(true);
      }
      if (incoming.get(35)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.pmName = iprot.readString();
        struct.setPmNameIsSet(true);
      }
      if (incoming.get(37)) {
        struct.recAccountName = iprot.readString();
        struct.setRecAccountNameIsSet(true);
      }
      if (incoming.get(38)) {
        struct.guaranteeFee = iprot.readDouble();
        struct.setGuaranteeFeeIsSet(true);
      }
      if (incoming.get(39)) {
        struct.receMoney = iprot.readDouble();
        struct.setReceMoneyIsSet(true);
      }
      if (incoming.get(40)) {
        struct.finPoundage = iprot.readDouble();
        struct.setFinPoundageIsSet(true);
      }
      if (incoming.get(41)) {
        struct.businessSource = iprot.readI32();
        struct.setBusinessSourceIsSet(true);
      }
      if (incoming.get(42)) {
        struct.innerOrOut = iprot.readI32();
        struct.setInnerOrOutIsSet(true);
      }
      if (incoming.get(43)) {
        struct.InnerOrOutName = iprot.readString();
        struct.setInnerOrOutNameIsSet(true);
      }
      if (incoming.get(44)) {
        struct.businessSourceName = iprot.readString();
        struct.setBusinessSourceNameIsSet(true);
      }
      if (incoming.get(45)) {
        struct.bizApplyHandleStatusName = iprot.readString();
        struct.setBizApplyHandleStatusNameIsSet(true);
      }
      if (incoming.get(46)) {
        struct.backFeeApplyHandleStatusName = iprot.readString();
        struct.setBackFeeApplyHandleStatusNameIsSet(true);
      }
      if (incoming.get(47)) {
        struct.foreclosureFloorMoney = iprot.readDouble();
        struct.setForeclosureFloorMoneyIsSet(true);
      }
      if (incoming.get(48)) {
        struct.finInterest = iprot.readDouble();
        struct.setFinInterestIsSet(true);
      }
      if (incoming.get(49)) {
        struct.bankName = iprot.readString();
        struct.setBankNameIsSet(true);
      }
      if (incoming.get(50)) {
        struct.batchRefundFeeMainId = iprot.readI32();
        struct.setBatchRefundFeeMainIdIsSet(true);
      }
      if (incoming.get(51)) {
        struct.batchName = iprot.readString();
        struct.setBatchNameIsSet(true);
      }
      if (incoming.get(52)) {
        struct.businessSourceStr = iprot.readString();
        struct.setBusinessSourceStrIsSet(true);
      }
      if (incoming.get(53)) {
        struct.repaymentDate = iprot.readString();
        struct.setRepaymentDateIsSet(true);
      }
      if (incoming.get(54)) {
        struct.repaymentDateEnd = iprot.readString();
        struct.setRepaymentDateEndIsSet(true);
      }
      if (incoming.get(55)) {
        struct.repaymentMoney = iprot.readDouble();
        struct.setRepaymentMoneyIsSet(true);
      }
      if (incoming.get(56)) {
        struct.notRepaymentMoney = iprot.readDouble();
        struct.setNotRepaymentMoneyIsSet(true);
      }
      if (incoming.get(57)) {
        struct.extensionFee = iprot.readDouble();
        struct.setExtensionFeeIsSet(true);
      }
    }
  }

}


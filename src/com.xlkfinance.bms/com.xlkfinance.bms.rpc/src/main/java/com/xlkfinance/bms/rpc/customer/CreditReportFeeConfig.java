/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-18")
public class CreditReportFeeConfig implements org.apache.thrift.TBase<CreditReportFeeConfig, CreditReportFeeConfig._Fields>, java.io.Serializable, Cloneable, Comparable<CreditReportFeeConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditReportFeeConfig");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSource", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField UNIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField UPDATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("updator", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreditReportFeeConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreditReportFeeConfigTupleSchemeFactory());
  }

  public int pid; // required
  public int dataSource; // required
  public int reportType; // required
  public double unitPrice; // required
  public int creator; // required
  public String createTime; // required
  public int updator; // required
  public String updateTime; // required
  public String remark; // required
  public String operatorName; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    DATA_SOURCE((short)2, "dataSource"),
    REPORT_TYPE((short)3, "reportType"),
    UNIT_PRICE((short)4, "unitPrice"),
    CREATOR((short)5, "creator"),
    CREATE_TIME((short)6, "createTime"),
    UPDATOR((short)7, "updator"),
    UPDATE_TIME((short)8, "updateTime"),
    REMARK((short)9, "remark"),
    OPERATOR_NAME((short)10, "operatorName"),
    PAGE((short)11, "page"),
    ROWS((short)12, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // DATA_SOURCE
          return DATA_SOURCE;
        case 3: // REPORT_TYPE
          return REPORT_TYPE;
        case 4: // UNIT_PRICE
          return UNIT_PRICE;
        case 5: // CREATOR
          return CREATOR;
        case 6: // CREATE_TIME
          return CREATE_TIME;
        case 7: // UPDATOR
          return UPDATOR;
        case 8: // UPDATE_TIME
          return UPDATE_TIME;
        case 9: // REMARK
          return REMARK;
        case 10: // OPERATOR_NAME
          return OPERATOR_NAME;
        case 11: // PAGE
          return PAGE;
        case 12: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __DATASOURCE_ISSET_ID = 1;
  private static final int __REPORTTYPE_ISSET_ID = 2;
  private static final int __UNITPRICE_ISSET_ID = 3;
  private static final int __CREATOR_ISSET_ID = 4;
  private static final int __UPDATOR_ISSET_ID = 5;
  private static final int __PAGE_ISSET_ID = 6;
  private static final int __ROWS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("dataSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reportType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("unitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATOR, new org.apache.thrift.meta_data.FieldMetaData("updator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditReportFeeConfig.class, metaDataMap);
  }

  public CreditReportFeeConfig() {
  }

  public CreditReportFeeConfig(
    int pid,
    int dataSource,
    int reportType,
    double unitPrice,
    int creator,
    String createTime,
    int updator,
    String updateTime,
    String remark,
    String operatorName,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.dataSource = dataSource;
    setDataSourceIsSet(true);
    this.reportType = reportType;
    setReportTypeIsSet(true);
    this.unitPrice = unitPrice;
    setUnitPriceIsSet(true);
    this.creator = creator;
    setCreatorIsSet(true);
    this.createTime = createTime;
    this.updator = updator;
    setUpdatorIsSet(true);
    this.updateTime = updateTime;
    this.remark = remark;
    this.operatorName = operatorName;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditReportFeeConfig(CreditReportFeeConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.dataSource = other.dataSource;
    this.reportType = other.reportType;
    this.unitPrice = other.unitPrice;
    this.creator = other.creator;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.updator = other.updator;
    if (other.isSetUpdateTime()) {
      this.updateTime = other.updateTime;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
    this.page = other.page;
    this.rows = other.rows;
  }

  public CreditReportFeeConfig deepCopy() {
    return new CreditReportFeeConfig(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setDataSourceIsSet(false);
    this.dataSource = 0;
    setReportTypeIsSet(false);
    this.reportType = 0;
    setUnitPriceIsSet(false);
    this.unitPrice = 0.0;
    setCreatorIsSet(false);
    this.creator = 0;
    this.createTime = null;
    setUpdatorIsSet(false);
    this.updator = 0;
    this.updateTime = null;
    this.remark = null;
    this.operatorName = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CreditReportFeeConfig setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getDataSource() {
    return this.dataSource;
  }

  public CreditReportFeeConfig setDataSource(int dataSource) {
    this.dataSource = dataSource;
    setDataSourceIsSet(true);
    return this;
  }

  public void unsetDataSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASOURCE_ISSET_ID);
  }

  /** Returns true if field dataSource is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSource() {
    return EncodingUtils.testBit(__isset_bitfield, __DATASOURCE_ISSET_ID);
  }

  public void setDataSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASOURCE_ISSET_ID, value);
  }

  public int getReportType() {
    return this.reportType;
  }

  public CreditReportFeeConfig setReportType(int reportType) {
    this.reportType = reportType;
    setReportTypeIsSet(true);
    return this;
  }

  public void unsetReportType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTTYPE_ISSET_ID);
  }

  /** Returns true if field reportType is set (has been assigned a value) and false otherwise */
  public boolean isSetReportType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTTYPE_ISSET_ID);
  }

  public void setReportTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTTYPE_ISSET_ID, value);
  }

  public double getUnitPrice() {
    return this.unitPrice;
  }

  public CreditReportFeeConfig setUnitPrice(double unitPrice) {
    this.unitPrice = unitPrice;
    setUnitPriceIsSet(true);
    return this;
  }

  public void unsetUnitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITPRICE_ISSET_ID);
  }

  /** Returns true if field unitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITPRICE_ISSET_ID);
  }

  public void setUnitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITPRICE_ISSET_ID, value);
  }

  public int getCreator() {
    return this.creator;
  }

  public CreditReportFeeConfig setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);
    return this;
  }

  public void unsetCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public CreditReportFeeConfig setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getUpdator() {
    return this.updator;
  }

  public CreditReportFeeConfig setUpdator(int updator) {
    this.updator = updator;
    setUpdatorIsSet(true);
    return this;
  }

  public void unsetUpdator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATOR_ISSET_ID);
  }

  /** Returns true if field updator is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdator() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATOR_ISSET_ID);
  }

  public void setUpdatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATOR_ISSET_ID, value);
  }

  public String getUpdateTime() {
    return this.updateTime;
  }

  public CreditReportFeeConfig setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  public void unsetUpdateTime() {
    this.updateTime = null;
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return this.updateTime != null;
  }

  public void setUpdateTimeIsSet(boolean value) {
    if (!value) {
      this.updateTime = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CreditReportFeeConfig setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getOperatorName() {
    return this.operatorName;
  }

  public CreditReportFeeConfig setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CreditReportFeeConfig setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CreditReportFeeConfig setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case DATA_SOURCE:
      if (value == null) {
        unsetDataSource();
      } else {
        setDataSource((Integer)value);
      }
      break;

    case REPORT_TYPE:
      if (value == null) {
        unsetReportType();
      } else {
        setReportType((Integer)value);
      }
      break;

    case UNIT_PRICE:
      if (value == null) {
        unsetUnitPrice();
      } else {
        setUnitPrice((Double)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case UPDATOR:
      if (value == null) {
        unsetUpdator();
      } else {
        setUpdator((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case DATA_SOURCE:
      return Integer.valueOf(getDataSource());

    case REPORT_TYPE:
      return Integer.valueOf(getReportType());

    case UNIT_PRICE:
      return Double.valueOf(getUnitPrice());

    case CREATOR:
      return Integer.valueOf(getCreator());

    case CREATE_TIME:
      return getCreateTime();

    case UPDATOR:
      return Integer.valueOf(getUpdator());

    case UPDATE_TIME:
      return getUpdateTime();

    case REMARK:
      return getRemark();

    case OPERATOR_NAME:
      return getOperatorName();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case DATA_SOURCE:
      return isSetDataSource();
    case REPORT_TYPE:
      return isSetReportType();
    case UNIT_PRICE:
      return isSetUnitPrice();
    case CREATOR:
      return isSetCreator();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATOR:
      return isSetUpdator();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case REMARK:
      return isSetRemark();
    case OPERATOR_NAME:
      return isSetOperatorName();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditReportFeeConfig)
      return this.equals((CreditReportFeeConfig)that);
    return false;
  }

  public boolean equals(CreditReportFeeConfig that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_dataSource = true;
    boolean that_present_dataSource = true;
    if (this_present_dataSource || that_present_dataSource) {
      if (!(this_present_dataSource && that_present_dataSource))
        return false;
      if (this.dataSource != that.dataSource)
        return false;
    }

    boolean this_present_reportType = true;
    boolean that_present_reportType = true;
    if (this_present_reportType || that_present_reportType) {
      if (!(this_present_reportType && that_present_reportType))
        return false;
      if (this.reportType != that.reportType)
        return false;
    }

    boolean this_present_unitPrice = true;
    boolean that_present_unitPrice = true;
    if (this_present_unitPrice || that_present_unitPrice) {
      if (!(this_present_unitPrice && that_present_unitPrice))
        return false;
      if (this.unitPrice != that.unitPrice)
        return false;
    }

    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_updator = true;
    boolean that_present_updator = true;
    if (this_present_updator || that_present_updator) {
      if (!(this_present_updator && that_present_updator))
        return false;
      if (this.updator != that.updator)
        return false;
    }

    boolean this_present_updateTime = true && this.isSetUpdateTime();
    boolean that_present_updateTime = true && that.isSetUpdateTime();
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (!this.updateTime.equals(that.updateTime))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_dataSource = true;
    list.add(present_dataSource);
    if (present_dataSource)
      list.add(dataSource);

    boolean present_reportType = true;
    list.add(present_reportType);
    if (present_reportType)
      list.add(reportType);

    boolean present_unitPrice = true;
    list.add(present_unitPrice);
    if (present_unitPrice)
      list.add(unitPrice);

    boolean present_creator = true;
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updator = true;
    list.add(present_updator);
    if (present_updator)
      list.add(updator);

    boolean present_updateTime = true && (isSetUpdateTime());
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CreditReportFeeConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataSource()).compareTo(other.isSetDataSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSource, other.dataSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportType()).compareTo(other.isSetReportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportType, other.reportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitPrice()).compareTo(other.isSetUnitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitPrice, other.unitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdator()).compareTo(other.isSetUpdator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updator, other.updator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreditReportFeeConfig(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataSource:");
    sb.append(this.dataSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportType:");
    sb.append(this.reportType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitPrice:");
    sb.append(this.unitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updator:");
    sb.append(this.updator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    if (this.updateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.updateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorName:");
    if (this.operatorName == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditReportFeeConfigStandardSchemeFactory implements SchemeFactory {
    public CreditReportFeeConfigStandardScheme getScheme() {
      return new CreditReportFeeConfigStandardScheme();
    }
  }

  private static class CreditReportFeeConfigStandardScheme extends StandardScheme<CreditReportFeeConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditReportFeeConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataSource = iprot.readI32();
              struct.setDataSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportType = iprot.readI32();
              struct.setReportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UNIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unitPrice = iprot.readDouble();
              struct.setUnitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creator = iprot.readI32();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UPDATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updator = iprot.readI32();
              struct.setUpdatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateTime = iprot.readString();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditReportFeeConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.dataSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.reportType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.unitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATOR_FIELD_DESC);
      oprot.writeI32(struct.creator);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UPDATOR_FIELD_DESC);
      oprot.writeI32(struct.updator);
      oprot.writeFieldEnd();
      if (struct.updateTime != null) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.updateTime);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.operatorName != null) {
        oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
        oprot.writeString(struct.operatorName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditReportFeeConfigTupleSchemeFactory implements SchemeFactory {
    public CreditReportFeeConfigTupleScheme getScheme() {
      return new CreditReportFeeConfigTupleScheme();
    }
  }

  private static class CreditReportFeeConfigTupleScheme extends TupleScheme<CreditReportFeeConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditReportFeeConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetDataSource()) {
        optionals.set(1);
      }
      if (struct.isSetReportType()) {
        optionals.set(2);
      }
      if (struct.isSetUnitPrice()) {
        optionals.set(3);
      }
      if (struct.isSetCreator()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(5);
      }
      if (struct.isSetUpdator()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(7);
      }
      if (struct.isSetRemark()) {
        optionals.set(8);
      }
      if (struct.isSetOperatorName()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetRows()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetDataSource()) {
        oprot.writeI32(struct.dataSource);
      }
      if (struct.isSetReportType()) {
        oprot.writeI32(struct.reportType);
      }
      if (struct.isSetUnitPrice()) {
        oprot.writeDouble(struct.unitPrice);
      }
      if (struct.isSetCreator()) {
        oprot.writeI32(struct.creator);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetUpdator()) {
        oprot.writeI32(struct.updator);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeString(struct.updateTime);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetOperatorName()) {
        oprot.writeString(struct.operatorName);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditReportFeeConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dataSource = iprot.readI32();
        struct.setDataSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reportType = iprot.readI32();
        struct.setReportTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.unitPrice = iprot.readDouble();
        struct.setUnitPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.creator = iprot.readI32();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.updator = iprot.readI32();
        struct.setUpdatorIsSet(true);
      }
      if (incoming.get(7)) {
        struct.updateTime = iprot.readString();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(9)) {
        struct.operatorName = iprot.readString();
        struct.setOperatorNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


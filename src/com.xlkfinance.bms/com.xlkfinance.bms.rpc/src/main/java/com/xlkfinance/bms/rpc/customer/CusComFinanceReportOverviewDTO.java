/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComFinanceReportOverviewDTO implements org.apache.thrift.TBase<CusComFinanceReportOverviewDTO, CusComFinanceReportOverviewDTO._Fields>, java.io.Serializable, Cloneable, Comparable<CusComFinanceReportOverviewDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComFinanceReportOverviewDTO");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPORT_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("reportPeriod", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REPORT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reportName", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComFinanceReportOverviewDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComFinanceReportOverviewDTOTupleSchemeFactory());
  }

  public int pid; // required
  public String reportPeriod; // required
  public String reportName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REPORT_PERIOD((short)2, "reportPeriod"),
    REPORT_NAME((short)3, "reportName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REPORT_PERIOD
          return REPORT_PERIOD;
        case 3: // REPORT_NAME
          return REPORT_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("reportPeriod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_NAME, new org.apache.thrift.meta_data.FieldMetaData("reportName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComFinanceReportOverviewDTO.class, metaDataMap);
  }

  public CusComFinanceReportOverviewDTO() {
  }

  public CusComFinanceReportOverviewDTO(
    int pid,
    String reportPeriod,
    String reportName)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.reportPeriod = reportPeriod;
    this.reportName = reportName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComFinanceReportOverviewDTO(CusComFinanceReportOverviewDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetReportPeriod()) {
      this.reportPeriod = other.reportPeriod;
    }
    if (other.isSetReportName()) {
      this.reportName = other.reportName;
    }
  }

  public CusComFinanceReportOverviewDTO deepCopy() {
    return new CusComFinanceReportOverviewDTO(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.reportPeriod = null;
    this.reportName = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComFinanceReportOverviewDTO setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public String getReportPeriod() {
    return this.reportPeriod;
  }

  public CusComFinanceReportOverviewDTO setReportPeriod(String reportPeriod) {
    this.reportPeriod = reportPeriod;
    return this;
  }

  public void unsetReportPeriod() {
    this.reportPeriod = null;
  }

  /** Returns true if field reportPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetReportPeriod() {
    return this.reportPeriod != null;
  }

  public void setReportPeriodIsSet(boolean value) {
    if (!value) {
      this.reportPeriod = null;
    }
  }

  public String getReportName() {
    return this.reportName;
  }

  public CusComFinanceReportOverviewDTO setReportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

  public void unsetReportName() {
    this.reportName = null;
  }

  /** Returns true if field reportName is set (has been assigned a value) and false otherwise */
  public boolean isSetReportName() {
    return this.reportName != null;
  }

  public void setReportNameIsSet(boolean value) {
    if (!value) {
      this.reportName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REPORT_PERIOD:
      if (value == null) {
        unsetReportPeriod();
      } else {
        setReportPeriod((String)value);
      }
      break;

    case REPORT_NAME:
      if (value == null) {
        unsetReportName();
      } else {
        setReportName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REPORT_PERIOD:
      return getReportPeriod();

    case REPORT_NAME:
      return getReportName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REPORT_PERIOD:
      return isSetReportPeriod();
    case REPORT_NAME:
      return isSetReportName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComFinanceReportOverviewDTO)
      return this.equals((CusComFinanceReportOverviewDTO)that);
    return false;
  }

  public boolean equals(CusComFinanceReportOverviewDTO that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_reportPeriod = true && this.isSetReportPeriod();
    boolean that_present_reportPeriod = true && that.isSetReportPeriod();
    if (this_present_reportPeriod || that_present_reportPeriod) {
      if (!(this_present_reportPeriod && that_present_reportPeriod))
        return false;
      if (!this.reportPeriod.equals(that.reportPeriod))
        return false;
    }

    boolean this_present_reportName = true && this.isSetReportName();
    boolean that_present_reportName = true && that.isSetReportName();
    if (this_present_reportName || that_present_reportName) {
      if (!(this_present_reportName && that_present_reportName))
        return false;
      if (!this.reportName.equals(that.reportName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_reportPeriod = true && (isSetReportPeriod());
    list.add(present_reportPeriod);
    if (present_reportPeriod)
      list.add(reportPeriod);

    boolean present_reportName = true && (isSetReportName());
    list.add(present_reportName);
    if (present_reportName)
      list.add(reportName);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComFinanceReportOverviewDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportPeriod()).compareTo(other.isSetReportPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportPeriod, other.reportPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportName()).compareTo(other.isSetReportName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportName, other.reportName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComFinanceReportOverviewDTO(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportPeriod:");
    if (this.reportPeriod == null) {
      sb.append("null");
    } else {
      sb.append(this.reportPeriod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportName:");
    if (this.reportName == null) {
      sb.append("null");
    } else {
      sb.append(this.reportName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComFinanceReportOverviewDTOStandardSchemeFactory implements SchemeFactory {
    public CusComFinanceReportOverviewDTOStandardScheme getScheme() {
      return new CusComFinanceReportOverviewDTOStandardScheme();
    }
  }

  private static class CusComFinanceReportOverviewDTOStandardScheme extends StandardScheme<CusComFinanceReportOverviewDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComFinanceReportOverviewDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORT_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportPeriod = iprot.readString();
              struct.setReportPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REPORT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportName = iprot.readString();
              struct.setReportNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComFinanceReportOverviewDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.reportPeriod != null) {
        oprot.writeFieldBegin(REPORT_PERIOD_FIELD_DESC);
        oprot.writeString(struct.reportPeriod);
        oprot.writeFieldEnd();
      }
      if (struct.reportName != null) {
        oprot.writeFieldBegin(REPORT_NAME_FIELD_DESC);
        oprot.writeString(struct.reportName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComFinanceReportOverviewDTOTupleSchemeFactory implements SchemeFactory {
    public CusComFinanceReportOverviewDTOTupleScheme getScheme() {
      return new CusComFinanceReportOverviewDTOTupleScheme();
    }
  }

  private static class CusComFinanceReportOverviewDTOTupleScheme extends TupleScheme<CusComFinanceReportOverviewDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComFinanceReportOverviewDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetReportPeriod()) {
        optionals.set(1);
      }
      if (struct.isSetReportName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetReportPeriod()) {
        oprot.writeString(struct.reportPeriod);
      }
      if (struct.isSetReportName()) {
        oprot.writeString(struct.reportName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComFinanceReportOverviewDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reportPeriod = iprot.readString();
        struct.setReportPeriodIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reportName = iprot.readString();
        struct.setReportNameIsSet(true);
      }
    }
  }

}


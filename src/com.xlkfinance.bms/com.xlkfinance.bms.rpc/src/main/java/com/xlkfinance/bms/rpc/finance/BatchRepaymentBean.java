/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class BatchRepaymentBean implements org.apache.thrift.TBase<BatchRepaymentBean, BatchRepaymentBean._Fields>, java.io.Serializable, Cloneable, Comparable<BatchRepaymentBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatchRepaymentBean");

  private static final org.apache.thrift.protocol.TField LOAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIPT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("receiptDate", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField REMAINING_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("remainingAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("details", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BatchRepaymentBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BatchRepaymentBeanTupleSchemeFactory());
  }

  public int loanId; // required
  public String receiptDate; // required
  public double amount; // required
  public double remainingAmt; // required
  public List<BatchRepaymentItem> details; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOAN_ID((short)1, "loanId"),
    RECEIPT_DATE((short)2, "receiptDate"),
    AMOUNT((short)3, "amount"),
    REMAINING_AMT((short)4, "remainingAmt"),
    DETAILS((short)5, "details");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOAN_ID
          return LOAN_ID;
        case 2: // RECEIPT_DATE
          return RECEIPT_DATE;
        case 3: // AMOUNT
          return AMOUNT;
        case 4: // REMAINING_AMT
          return REMAINING_AMT;
        case 5: // DETAILS
          return DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOANID_ISSET_ID = 0;
  private static final int __AMOUNT_ISSET_ID = 1;
  private static final int __REMAININGAMT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RECEIPT_DATE, new org.apache.thrift.meta_data.FieldMetaData("receiptDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.REMAINING_AMT, new org.apache.thrift.meta_data.FieldMetaData("remainingAmt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DETAILS, new org.apache.thrift.meta_data.FieldMetaData("details", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BatchRepaymentItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatchRepaymentBean.class, metaDataMap);
  }

  public BatchRepaymentBean() {
  }

  public BatchRepaymentBean(
    int loanId,
    String receiptDate,
    double amount,
    double remainingAmt,
    List<BatchRepaymentItem> details)
  {
    this();
    this.loanId = loanId;
    setLoanIdIsSet(true);
    this.receiptDate = receiptDate;
    this.amount = amount;
    setAmountIsSet(true);
    this.remainingAmt = remainingAmt;
    setRemainingAmtIsSet(true);
    this.details = details;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatchRepaymentBean(BatchRepaymentBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.loanId = other.loanId;
    if (other.isSetReceiptDate()) {
      this.receiptDate = other.receiptDate;
    }
    this.amount = other.amount;
    this.remainingAmt = other.remainingAmt;
    if (other.isSetDetails()) {
      List<BatchRepaymentItem> __this__details = new ArrayList<BatchRepaymentItem>(other.details.size());
      for (BatchRepaymentItem other_element : other.details) {
        __this__details.add(new BatchRepaymentItem(other_element));
      }
      this.details = __this__details;
    }
  }

  public BatchRepaymentBean deepCopy() {
    return new BatchRepaymentBean(this);
  }

  @Override
  public void clear() {
    setLoanIdIsSet(false);
    this.loanId = 0;
    this.receiptDate = null;
    setAmountIsSet(false);
    this.amount = 0.0;
    setRemainingAmtIsSet(false);
    this.remainingAmt = 0.0;
    this.details = null;
  }

  public int getLoanId() {
    return this.loanId;
  }

  public BatchRepaymentBean setLoanId(int loanId) {
    this.loanId = loanId;
    setLoanIdIsSet(true);
    return this;
  }

  public void unsetLoanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  /** Returns true if field loanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANID_ISSET_ID);
  }

  public void setLoanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANID_ISSET_ID, value);
  }

  public String getReceiptDate() {
    return this.receiptDate;
  }

  public BatchRepaymentBean setReceiptDate(String receiptDate) {
    this.receiptDate = receiptDate;
    return this;
  }

  public void unsetReceiptDate() {
    this.receiptDate = null;
  }

  /** Returns true if field receiptDate is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiptDate() {
    return this.receiptDate != null;
  }

  public void setReceiptDateIsSet(boolean value) {
    if (!value) {
      this.receiptDate = null;
    }
  }

  public double getAmount() {
    return this.amount;
  }

  public BatchRepaymentBean setAmount(double amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  public double getRemainingAmt() {
    return this.remainingAmt;
  }

  public BatchRepaymentBean setRemainingAmt(double remainingAmt) {
    this.remainingAmt = remainingAmt;
    setRemainingAmtIsSet(true);
    return this;
  }

  public void unsetRemainingAmt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMAININGAMT_ISSET_ID);
  }

  /** Returns true if field remainingAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainingAmt() {
    return EncodingUtils.testBit(__isset_bitfield, __REMAININGAMT_ISSET_ID);
  }

  public void setRemainingAmtIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMAININGAMT_ISSET_ID, value);
  }

  public int getDetailsSize() {
    return (this.details == null) ? 0 : this.details.size();
  }

  public java.util.Iterator<BatchRepaymentItem> getDetailsIterator() {
    return (this.details == null) ? null : this.details.iterator();
  }

  public void addToDetails(BatchRepaymentItem elem) {
    if (this.details == null) {
      this.details = new ArrayList<BatchRepaymentItem>();
    }
    this.details.add(elem);
  }

  public List<BatchRepaymentItem> getDetails() {
    return this.details;
  }

  public BatchRepaymentBean setDetails(List<BatchRepaymentItem> details) {
    this.details = details;
    return this;
  }

  public void unsetDetails() {
    this.details = null;
  }

  /** Returns true if field details is set (has been assigned a value) and false otherwise */
  public boolean isSetDetails() {
    return this.details != null;
  }

  public void setDetailsIsSet(boolean value) {
    if (!value) {
      this.details = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOAN_ID:
      if (value == null) {
        unsetLoanId();
      } else {
        setLoanId((Integer)value);
      }
      break;

    case RECEIPT_DATE:
      if (value == null) {
        unsetReceiptDate();
      } else {
        setReceiptDate((String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Double)value);
      }
      break;

    case REMAINING_AMT:
      if (value == null) {
        unsetRemainingAmt();
      } else {
        setRemainingAmt((Double)value);
      }
      break;

    case DETAILS:
      if (value == null) {
        unsetDetails();
      } else {
        setDetails((List<BatchRepaymentItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOAN_ID:
      return Integer.valueOf(getLoanId());

    case RECEIPT_DATE:
      return getReceiptDate();

    case AMOUNT:
      return Double.valueOf(getAmount());

    case REMAINING_AMT:
      return Double.valueOf(getRemainingAmt());

    case DETAILS:
      return getDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOAN_ID:
      return isSetLoanId();
    case RECEIPT_DATE:
      return isSetReceiptDate();
    case AMOUNT:
      return isSetAmount();
    case REMAINING_AMT:
      return isSetRemainingAmt();
    case DETAILS:
      return isSetDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BatchRepaymentBean)
      return this.equals((BatchRepaymentBean)that);
    return false;
  }

  public boolean equals(BatchRepaymentBean that) {
    if (that == null)
      return false;

    boolean this_present_loanId = true;
    boolean that_present_loanId = true;
    if (this_present_loanId || that_present_loanId) {
      if (!(this_present_loanId && that_present_loanId))
        return false;
      if (this.loanId != that.loanId)
        return false;
    }

    boolean this_present_receiptDate = true && this.isSetReceiptDate();
    boolean that_present_receiptDate = true && that.isSetReceiptDate();
    if (this_present_receiptDate || that_present_receiptDate) {
      if (!(this_present_receiptDate && that_present_receiptDate))
        return false;
      if (!this.receiptDate.equals(that.receiptDate))
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_remainingAmt = true;
    boolean that_present_remainingAmt = true;
    if (this_present_remainingAmt || that_present_remainingAmt) {
      if (!(this_present_remainingAmt && that_present_remainingAmt))
        return false;
      if (this.remainingAmt != that.remainingAmt)
        return false;
    }

    boolean this_present_details = true && this.isSetDetails();
    boolean that_present_details = true && that.isSetDetails();
    if (this_present_details || that_present_details) {
      if (!(this_present_details && that_present_details))
        return false;
      if (!this.details.equals(that.details))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_loanId = true;
    list.add(present_loanId);
    if (present_loanId)
      list.add(loanId);

    boolean present_receiptDate = true && (isSetReceiptDate());
    list.add(present_receiptDate);
    if (present_receiptDate)
      list.add(receiptDate);

    boolean present_amount = true;
    list.add(present_amount);
    if (present_amount)
      list.add(amount);

    boolean present_remainingAmt = true;
    list.add(present_remainingAmt);
    if (present_remainingAmt)
      list.add(remainingAmt);

    boolean present_details = true && (isSetDetails());
    list.add(present_details);
    if (present_details)
      list.add(details);

    return list.hashCode();
  }

  @Override
  public int compareTo(BatchRepaymentBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoanId()).compareTo(other.isSetLoanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanId, other.loanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiptDate()).compareTo(other.isSetReceiptDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiptDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiptDate, other.receiptDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(other.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, other.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemainingAmt()).compareTo(other.isSetRemainingAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainingAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainingAmt, other.remainingAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetails()).compareTo(other.isSetDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.details, other.details);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BatchRepaymentBean(");
    boolean first = true;

    sb.append("loanId:");
    sb.append(this.loanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiptDate:");
    if (this.receiptDate == null) {
      sb.append("null");
    } else {
      sb.append(this.receiptDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remainingAmt:");
    sb.append(this.remainingAmt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("details:");
    if (this.details == null) {
      sb.append("null");
    } else {
      sb.append(this.details);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatchRepaymentBeanStandardSchemeFactory implements SchemeFactory {
    public BatchRepaymentBeanStandardScheme getScheme() {
      return new BatchRepaymentBeanStandardScheme();
    }
  }

  private static class BatchRepaymentBeanStandardScheme extends StandardScheme<BatchRepaymentBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatchRepaymentBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanId = iprot.readI32();
              struct.setLoanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIPT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiptDate = iprot.readString();
              struct.setReceiptDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount = iprot.readDouble();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMAINING_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.remainingAmt = iprot.readDouble();
              struct.setRemainingAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.details = new ArrayList<BatchRepaymentItem>(_list8.size);
                BatchRepaymentItem _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new BatchRepaymentItem();
                  _elem9.read(iprot);
                  struct.details.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatchRepaymentBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanId);
      oprot.writeFieldEnd();
      if (struct.receiptDate != null) {
        oprot.writeFieldBegin(RECEIPT_DATE_FIELD_DESC);
        oprot.writeString(struct.receiptDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeDouble(struct.amount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REMAINING_AMT_FIELD_DESC);
      oprot.writeDouble(struct.remainingAmt);
      oprot.writeFieldEnd();
      if (struct.details != null) {
        oprot.writeFieldBegin(DETAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.details.size()));
          for (BatchRepaymentItem _iter11 : struct.details)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatchRepaymentBeanTupleSchemeFactory implements SchemeFactory {
    public BatchRepaymentBeanTupleScheme getScheme() {
      return new BatchRepaymentBeanTupleScheme();
    }
  }

  private static class BatchRepaymentBeanTupleScheme extends TupleScheme<BatchRepaymentBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatchRepaymentBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoanId()) {
        optionals.set(0);
      }
      if (struct.isSetReceiptDate()) {
        optionals.set(1);
      }
      if (struct.isSetAmount()) {
        optionals.set(2);
      }
      if (struct.isSetRemainingAmt()) {
        optionals.set(3);
      }
      if (struct.isSetDetails()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLoanId()) {
        oprot.writeI32(struct.loanId);
      }
      if (struct.isSetReceiptDate()) {
        oprot.writeString(struct.receiptDate);
      }
      if (struct.isSetAmount()) {
        oprot.writeDouble(struct.amount);
      }
      if (struct.isSetRemainingAmt()) {
        oprot.writeDouble(struct.remainingAmt);
      }
      if (struct.isSetDetails()) {
        {
          oprot.writeI32(struct.details.size());
          for (BatchRepaymentItem _iter12 : struct.details)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatchRepaymentBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.loanId = iprot.readI32();
        struct.setLoanIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.receiptDate = iprot.readString();
        struct.setReceiptDateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.amount = iprot.readDouble();
        struct.setAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remainingAmt = iprot.readDouble();
        struct.setRemainingAmtIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.details = new ArrayList<BatchRepaymentItem>(_list13.size);
          BatchRepaymentItem _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new BatchRepaymentItem();
            _elem14.read(iprot);
            struct.details.add(_elem14);
          }
        }
        struct.setDetailsIsSet(true);
      }
    }
  }

}


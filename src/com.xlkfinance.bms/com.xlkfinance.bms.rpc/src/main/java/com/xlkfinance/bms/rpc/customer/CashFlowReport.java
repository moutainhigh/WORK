/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CashFlowReport implements org.apache.thrift.TBase<CashFlowReport, CashFlowReport._Fields>, java.io.Serializable, Cloneable, Comparable<CashFlowReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CashFlowReport");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REPORT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reportId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CASH_FLOW_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cashFlowItemId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField THIS_MONTH_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("thisMonthVal", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField THIS_YEAR_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("thisYearVal", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SORT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sortNum", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("isMain", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CashFlowReportStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CashFlowReportTupleSchemeFactory());
  }

  public int pid; // required
  public int reportId; // required
  public int cashFlowItemId; // required
  public double thisMonthVal; // required
  public double thisYearVal; // required
  public int status; // required
  public int sortNum; // required
  public int isMain; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    REPORT_ID((short)2, "reportId"),
    CASH_FLOW_ITEM_ID((short)3, "cashFlowItemId"),
    THIS_MONTH_VAL((short)4, "thisMonthVal"),
    THIS_YEAR_VAL((short)5, "thisYearVal"),
    STATUS((short)6, "status"),
    SORT_NUM((short)7, "sortNum"),
    IS_MAIN((short)8, "isMain");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // REPORT_ID
          return REPORT_ID;
        case 3: // CASH_FLOW_ITEM_ID
          return CASH_FLOW_ITEM_ID;
        case 4: // THIS_MONTH_VAL
          return THIS_MONTH_VAL;
        case 5: // THIS_YEAR_VAL
          return THIS_YEAR_VAL;
        case 6: // STATUS
          return STATUS;
        case 7: // SORT_NUM
          return SORT_NUM;
        case 8: // IS_MAIN
          return IS_MAIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __REPORTID_ISSET_ID = 1;
  private static final int __CASHFLOWITEMID_ISSET_ID = 2;
  private static final int __THISMONTHVAL_ISSET_ID = 3;
  private static final int __THISYEARVAL_ISSET_ID = 4;
  private static final int __STATUS_ISSET_ID = 5;
  private static final int __SORTNUM_ISSET_ID = 6;
  private static final int __ISMAIN_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_ID, new org.apache.thrift.meta_data.FieldMetaData("reportId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CASH_FLOW_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("cashFlowItemId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THIS_MONTH_VAL, new org.apache.thrift.meta_data.FieldMetaData("thisMonthVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.THIS_YEAR_VAL, new org.apache.thrift.meta_data.FieldMetaData("thisYearVal", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SORT_NUM, new org.apache.thrift.meta_data.FieldMetaData("sortNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_MAIN, new org.apache.thrift.meta_data.FieldMetaData("isMain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CashFlowReport.class, metaDataMap);
  }

  public CashFlowReport() {
  }

  public CashFlowReport(
    int pid,
    int reportId,
    int cashFlowItemId,
    double thisMonthVal,
    double thisYearVal,
    int status,
    int sortNum,
    int isMain)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.reportId = reportId;
    setReportIdIsSet(true);
    this.cashFlowItemId = cashFlowItemId;
    setCashFlowItemIdIsSet(true);
    this.thisMonthVal = thisMonthVal;
    setThisMonthValIsSet(true);
    this.thisYearVal = thisYearVal;
    setThisYearValIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.sortNum = sortNum;
    setSortNumIsSet(true);
    this.isMain = isMain;
    setIsMainIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CashFlowReport(CashFlowReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.reportId = other.reportId;
    this.cashFlowItemId = other.cashFlowItemId;
    this.thisMonthVal = other.thisMonthVal;
    this.thisYearVal = other.thisYearVal;
    this.status = other.status;
    this.sortNum = other.sortNum;
    this.isMain = other.isMain;
  }

  public CashFlowReport deepCopy() {
    return new CashFlowReport(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setReportIdIsSet(false);
    this.reportId = 0;
    setCashFlowItemIdIsSet(false);
    this.cashFlowItemId = 0;
    setThisMonthValIsSet(false);
    this.thisMonthVal = 0.0;
    setThisYearValIsSet(false);
    this.thisYearVal = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setSortNumIsSet(false);
    this.sortNum = 0;
    setIsMainIsSet(false);
    this.isMain = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CashFlowReport setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getReportId() {
    return this.reportId;
  }

  public CashFlowReport setReportId(int reportId) {
    this.reportId = reportId;
    setReportIdIsSet(true);
    return this;
  }

  public void unsetReportId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTID_ISSET_ID);
  }

  /** Returns true if field reportId is set (has been assigned a value) and false otherwise */
  public boolean isSetReportId() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTID_ISSET_ID);
  }

  public void setReportIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTID_ISSET_ID, value);
  }

  public int getCashFlowItemId() {
    return this.cashFlowItemId;
  }

  public CashFlowReport setCashFlowItemId(int cashFlowItemId) {
    this.cashFlowItemId = cashFlowItemId;
    setCashFlowItemIdIsSet(true);
    return this;
  }

  public void unsetCashFlowItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CASHFLOWITEMID_ISSET_ID);
  }

  /** Returns true if field cashFlowItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetCashFlowItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __CASHFLOWITEMID_ISSET_ID);
  }

  public void setCashFlowItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CASHFLOWITEMID_ISSET_ID, value);
  }

  public double getThisMonthVal() {
    return this.thisMonthVal;
  }

  public CashFlowReport setThisMonthVal(double thisMonthVal) {
    this.thisMonthVal = thisMonthVal;
    setThisMonthValIsSet(true);
    return this;
  }

  public void unsetThisMonthVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THISMONTHVAL_ISSET_ID);
  }

  /** Returns true if field thisMonthVal is set (has been assigned a value) and false otherwise */
  public boolean isSetThisMonthVal() {
    return EncodingUtils.testBit(__isset_bitfield, __THISMONTHVAL_ISSET_ID);
  }

  public void setThisMonthValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THISMONTHVAL_ISSET_ID, value);
  }

  public double getThisYearVal() {
    return this.thisYearVal;
  }

  public CashFlowReport setThisYearVal(double thisYearVal) {
    this.thisYearVal = thisYearVal;
    setThisYearValIsSet(true);
    return this;
  }

  public void unsetThisYearVal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __THISYEARVAL_ISSET_ID);
  }

  /** Returns true if field thisYearVal is set (has been assigned a value) and false otherwise */
  public boolean isSetThisYearVal() {
    return EncodingUtils.testBit(__isset_bitfield, __THISYEARVAL_ISSET_ID);
  }

  public void setThisYearValIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __THISYEARVAL_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CashFlowReport setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getSortNum() {
    return this.sortNum;
  }

  public CashFlowReport setSortNum(int sortNum) {
    this.sortNum = sortNum;
    setSortNumIsSet(true);
    return this;
  }

  public void unsetSortNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTNUM_ISSET_ID);
  }

  /** Returns true if field sortNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSortNum() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTNUM_ISSET_ID);
  }

  public void setSortNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTNUM_ISSET_ID, value);
  }

  public int getIsMain() {
    return this.isMain;
  }

  public CashFlowReport setIsMain(int isMain) {
    this.isMain = isMain;
    setIsMainIsSet(true);
    return this;
  }

  public void unsetIsMain() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMAIN_ISSET_ID);
  }

  /** Returns true if field isMain is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMain() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMAIN_ISSET_ID);
  }

  public void setIsMainIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMAIN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case REPORT_ID:
      if (value == null) {
        unsetReportId();
      } else {
        setReportId((Integer)value);
      }
      break;

    case CASH_FLOW_ITEM_ID:
      if (value == null) {
        unsetCashFlowItemId();
      } else {
        setCashFlowItemId((Integer)value);
      }
      break;

    case THIS_MONTH_VAL:
      if (value == null) {
        unsetThisMonthVal();
      } else {
        setThisMonthVal((Double)value);
      }
      break;

    case THIS_YEAR_VAL:
      if (value == null) {
        unsetThisYearVal();
      } else {
        setThisYearVal((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case SORT_NUM:
      if (value == null) {
        unsetSortNum();
      } else {
        setSortNum((Integer)value);
      }
      break;

    case IS_MAIN:
      if (value == null) {
        unsetIsMain();
      } else {
        setIsMain((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case REPORT_ID:
      return Integer.valueOf(getReportId());

    case CASH_FLOW_ITEM_ID:
      return Integer.valueOf(getCashFlowItemId());

    case THIS_MONTH_VAL:
      return Double.valueOf(getThisMonthVal());

    case THIS_YEAR_VAL:
      return Double.valueOf(getThisYearVal());

    case STATUS:
      return Integer.valueOf(getStatus());

    case SORT_NUM:
      return Integer.valueOf(getSortNum());

    case IS_MAIN:
      return Integer.valueOf(getIsMain());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case REPORT_ID:
      return isSetReportId();
    case CASH_FLOW_ITEM_ID:
      return isSetCashFlowItemId();
    case THIS_MONTH_VAL:
      return isSetThisMonthVal();
    case THIS_YEAR_VAL:
      return isSetThisYearVal();
    case STATUS:
      return isSetStatus();
    case SORT_NUM:
      return isSetSortNum();
    case IS_MAIN:
      return isSetIsMain();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CashFlowReport)
      return this.equals((CashFlowReport)that);
    return false;
  }

  public boolean equals(CashFlowReport that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_reportId = true;
    boolean that_present_reportId = true;
    if (this_present_reportId || that_present_reportId) {
      if (!(this_present_reportId && that_present_reportId))
        return false;
      if (this.reportId != that.reportId)
        return false;
    }

    boolean this_present_cashFlowItemId = true;
    boolean that_present_cashFlowItemId = true;
    if (this_present_cashFlowItemId || that_present_cashFlowItemId) {
      if (!(this_present_cashFlowItemId && that_present_cashFlowItemId))
        return false;
      if (this.cashFlowItemId != that.cashFlowItemId)
        return false;
    }

    boolean this_present_thisMonthVal = true;
    boolean that_present_thisMonthVal = true;
    if (this_present_thisMonthVal || that_present_thisMonthVal) {
      if (!(this_present_thisMonthVal && that_present_thisMonthVal))
        return false;
      if (this.thisMonthVal != that.thisMonthVal)
        return false;
    }

    boolean this_present_thisYearVal = true;
    boolean that_present_thisYearVal = true;
    if (this_present_thisYearVal || that_present_thisYearVal) {
      if (!(this_present_thisYearVal && that_present_thisYearVal))
        return false;
      if (this.thisYearVal != that.thisYearVal)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_sortNum = true;
    boolean that_present_sortNum = true;
    if (this_present_sortNum || that_present_sortNum) {
      if (!(this_present_sortNum && that_present_sortNum))
        return false;
      if (this.sortNum != that.sortNum)
        return false;
    }

    boolean this_present_isMain = true;
    boolean that_present_isMain = true;
    if (this_present_isMain || that_present_isMain) {
      if (!(this_present_isMain && that_present_isMain))
        return false;
      if (this.isMain != that.isMain)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_reportId = true;
    list.add(present_reportId);
    if (present_reportId)
      list.add(reportId);

    boolean present_cashFlowItemId = true;
    list.add(present_cashFlowItemId);
    if (present_cashFlowItemId)
      list.add(cashFlowItemId);

    boolean present_thisMonthVal = true;
    list.add(present_thisMonthVal);
    if (present_thisMonthVal)
      list.add(thisMonthVal);

    boolean present_thisYearVal = true;
    list.add(present_thisYearVal);
    if (present_thisYearVal)
      list.add(thisYearVal);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_sortNum = true;
    list.add(present_sortNum);
    if (present_sortNum)
      list.add(sortNum);

    boolean present_isMain = true;
    list.add(present_isMain);
    if (present_isMain)
      list.add(isMain);

    return list.hashCode();
  }

  @Override
  public int compareTo(CashFlowReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportId()).compareTo(other.isSetReportId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportId, other.reportId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCashFlowItemId()).compareTo(other.isSetCashFlowItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCashFlowItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cashFlowItemId, other.cashFlowItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThisMonthVal()).compareTo(other.isSetThisMonthVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThisMonthVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thisMonthVal, other.thisMonthVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThisYearVal()).compareTo(other.isSetThisYearVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThisYearVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thisYearVal, other.thisYearVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortNum()).compareTo(other.isSetSortNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortNum, other.sortNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMain()).compareTo(other.isSetIsMain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMain, other.isMain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CashFlowReport(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportId:");
    sb.append(this.reportId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cashFlowItemId:");
    sb.append(this.cashFlowItemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thisMonthVal:");
    sb.append(this.thisMonthVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("thisYearVal:");
    sb.append(this.thisYearVal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sortNum:");
    sb.append(this.sortNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMain:");
    sb.append(this.isMain);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CashFlowReportStandardSchemeFactory implements SchemeFactory {
    public CashFlowReportStandardScheme getScheme() {
      return new CashFlowReportStandardScheme();
    }
  }

  private static class CashFlowReportStandardScheme extends StandardScheme<CashFlowReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CashFlowReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPORT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportId = iprot.readI32();
              struct.setReportIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CASH_FLOW_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cashFlowItemId = iprot.readI32();
              struct.setCashFlowItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THIS_MONTH_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.thisMonthVal = iprot.readDouble();
              struct.setThisMonthValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // THIS_YEAR_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.thisYearVal = iprot.readDouble();
              struct.setThisYearValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SORT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sortNum = iprot.readI32();
              struct.setSortNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isMain = iprot.readI32();
              struct.setIsMainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CashFlowReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORT_ID_FIELD_DESC);
      oprot.writeI32(struct.reportId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CASH_FLOW_ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.cashFlowItemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THIS_MONTH_VAL_FIELD_DESC);
      oprot.writeDouble(struct.thisMonthVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THIS_YEAR_VAL_FIELD_DESC);
      oprot.writeDouble(struct.thisYearVal);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SORT_NUM_FIELD_DESC);
      oprot.writeI32(struct.sortNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MAIN_FIELD_DESC);
      oprot.writeI32(struct.isMain);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CashFlowReportTupleSchemeFactory implements SchemeFactory {
    public CashFlowReportTupleScheme getScheme() {
      return new CashFlowReportTupleScheme();
    }
  }

  private static class CashFlowReportTupleScheme extends TupleScheme<CashFlowReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CashFlowReport struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetReportId()) {
        optionals.set(1);
      }
      if (struct.isSetCashFlowItemId()) {
        optionals.set(2);
      }
      if (struct.isSetThisMonthVal()) {
        optionals.set(3);
      }
      if (struct.isSetThisYearVal()) {
        optionals.set(4);
      }
      if (struct.isSetStatus()) {
        optionals.set(5);
      }
      if (struct.isSetSortNum()) {
        optionals.set(6);
      }
      if (struct.isSetIsMain()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetReportId()) {
        oprot.writeI32(struct.reportId);
      }
      if (struct.isSetCashFlowItemId()) {
        oprot.writeI32(struct.cashFlowItemId);
      }
      if (struct.isSetThisMonthVal()) {
        oprot.writeDouble(struct.thisMonthVal);
      }
      if (struct.isSetThisYearVal()) {
        oprot.writeDouble(struct.thisYearVal);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetSortNum()) {
        oprot.writeI32(struct.sortNum);
      }
      if (struct.isSetIsMain()) {
        oprot.writeI32(struct.isMain);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CashFlowReport struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reportId = iprot.readI32();
        struct.setReportIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cashFlowItemId = iprot.readI32();
        struct.setCashFlowItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.thisMonthVal = iprot.readDouble();
        struct.setThisMonthValIsSet(true);
      }
      if (incoming.get(4)) {
        struct.thisYearVal = iprot.readDouble();
        struct.setThisYearValIsSet(true);
      }
      if (incoming.get(5)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sortNum = iprot.readI32();
        struct.setSortNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isMain = iprot.readI32();
        struct.setIsMainIsSet(true);
      }
    }
  }

}


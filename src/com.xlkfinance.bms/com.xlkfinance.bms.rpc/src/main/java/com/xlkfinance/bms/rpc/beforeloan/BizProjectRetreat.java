/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.beforeloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-21")
public class BizProjectRetreat implements org.apache.thrift.TBase<BizProjectRetreat, BizProjectRetreat._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectRetreat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectRetreat");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OLD_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldProjectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newProjectId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RETREAT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("retreatUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField RETREAT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("retreatTime", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectRetreatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectRetreatTupleSchemeFactory());
  }

  public int pid; // required
  public int oldProjectId; // required
  public int newProjectId; // required
  public int retreatUserId; // required
  public String retreatTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    OLD_PROJECT_ID((short)2, "oldProjectId"),
    NEW_PROJECT_ID((short)3, "newProjectId"),
    RETREAT_USER_ID((short)4, "retreatUserId"),
    RETREAT_TIME((short)5, "retreatTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // OLD_PROJECT_ID
          return OLD_PROJECT_ID;
        case 3: // NEW_PROJECT_ID
          return NEW_PROJECT_ID;
        case 4: // RETREAT_USER_ID
          return RETREAT_USER_ID;
        case 5: // RETREAT_TIME
          return RETREAT_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __OLDPROJECTID_ISSET_ID = 1;
  private static final int __NEWPROJECTID_ISSET_ID = 2;
  private static final int __RETREATUSERID_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OLD_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("oldProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NEW_PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("newProjectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETREAT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("retreatUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETREAT_TIME, new org.apache.thrift.meta_data.FieldMetaData("retreatTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectRetreat.class, metaDataMap);
  }

  public BizProjectRetreat() {
  }

  public BizProjectRetreat(
    int pid,
    int oldProjectId,
    int newProjectId,
    int retreatUserId,
    String retreatTime)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.oldProjectId = oldProjectId;
    setOldProjectIdIsSet(true);
    this.newProjectId = newProjectId;
    setNewProjectIdIsSet(true);
    this.retreatUserId = retreatUserId;
    setRetreatUserIdIsSet(true);
    this.retreatTime = retreatTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectRetreat(BizProjectRetreat other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.oldProjectId = other.oldProjectId;
    this.newProjectId = other.newProjectId;
    this.retreatUserId = other.retreatUserId;
    if (other.isSetRetreatTime()) {
      this.retreatTime = other.retreatTime;
    }
  }

  public BizProjectRetreat deepCopy() {
    return new BizProjectRetreat(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setOldProjectIdIsSet(false);
    this.oldProjectId = 0;
    setNewProjectIdIsSet(false);
    this.newProjectId = 0;
    setRetreatUserIdIsSet(false);
    this.retreatUserId = 0;
    this.retreatTime = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectRetreat setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getOldProjectId() {
    return this.oldProjectId;
  }

  public BizProjectRetreat setOldProjectId(int oldProjectId) {
    this.oldProjectId = oldProjectId;
    setOldProjectIdIsSet(true);
    return this;
  }

  public void unsetOldProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDPROJECTID_ISSET_ID);
  }

  /** Returns true if field oldProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetOldProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __OLDPROJECTID_ISSET_ID);
  }

  public void setOldProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDPROJECTID_ISSET_ID, value);
  }

  public int getNewProjectId() {
    return this.newProjectId;
  }

  public BizProjectRetreat setNewProjectId(int newProjectId) {
    this.newProjectId = newProjectId;
    setNewProjectIdIsSet(true);
    return this;
  }

  public void unsetNewProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWPROJECTID_ISSET_ID);
  }

  /** Returns true if field newProjectId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWPROJECTID_ISSET_ID);
  }

  public void setNewProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWPROJECTID_ISSET_ID, value);
  }

  public int getRetreatUserId() {
    return this.retreatUserId;
  }

  public BizProjectRetreat setRetreatUserId(int retreatUserId) {
    this.retreatUserId = retreatUserId;
    setRetreatUserIdIsSet(true);
    return this;
  }

  public void unsetRetreatUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETREATUSERID_ISSET_ID);
  }

  /** Returns true if field retreatUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetRetreatUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __RETREATUSERID_ISSET_ID);
  }

  public void setRetreatUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETREATUSERID_ISSET_ID, value);
  }

  public String getRetreatTime() {
    return this.retreatTime;
  }

  public BizProjectRetreat setRetreatTime(String retreatTime) {
    this.retreatTime = retreatTime;
    return this;
  }

  public void unsetRetreatTime() {
    this.retreatTime = null;
  }

  /** Returns true if field retreatTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRetreatTime() {
    return this.retreatTime != null;
  }

  public void setRetreatTimeIsSet(boolean value) {
    if (!value) {
      this.retreatTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case OLD_PROJECT_ID:
      if (value == null) {
        unsetOldProjectId();
      } else {
        setOldProjectId((Integer)value);
      }
      break;

    case NEW_PROJECT_ID:
      if (value == null) {
        unsetNewProjectId();
      } else {
        setNewProjectId((Integer)value);
      }
      break;

    case RETREAT_USER_ID:
      if (value == null) {
        unsetRetreatUserId();
      } else {
        setRetreatUserId((Integer)value);
      }
      break;

    case RETREAT_TIME:
      if (value == null) {
        unsetRetreatTime();
      } else {
        setRetreatTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case OLD_PROJECT_ID:
      return Integer.valueOf(getOldProjectId());

    case NEW_PROJECT_ID:
      return Integer.valueOf(getNewProjectId());

    case RETREAT_USER_ID:
      return Integer.valueOf(getRetreatUserId());

    case RETREAT_TIME:
      return getRetreatTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case OLD_PROJECT_ID:
      return isSetOldProjectId();
    case NEW_PROJECT_ID:
      return isSetNewProjectId();
    case RETREAT_USER_ID:
      return isSetRetreatUserId();
    case RETREAT_TIME:
      return isSetRetreatTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectRetreat)
      return this.equals((BizProjectRetreat)that);
    return false;
  }

  public boolean equals(BizProjectRetreat that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_oldProjectId = true;
    boolean that_present_oldProjectId = true;
    if (this_present_oldProjectId || that_present_oldProjectId) {
      if (!(this_present_oldProjectId && that_present_oldProjectId))
        return false;
      if (this.oldProjectId != that.oldProjectId)
        return false;
    }

    boolean this_present_newProjectId = true;
    boolean that_present_newProjectId = true;
    if (this_present_newProjectId || that_present_newProjectId) {
      if (!(this_present_newProjectId && that_present_newProjectId))
        return false;
      if (this.newProjectId != that.newProjectId)
        return false;
    }

    boolean this_present_retreatUserId = true;
    boolean that_present_retreatUserId = true;
    if (this_present_retreatUserId || that_present_retreatUserId) {
      if (!(this_present_retreatUserId && that_present_retreatUserId))
        return false;
      if (this.retreatUserId != that.retreatUserId)
        return false;
    }

    boolean this_present_retreatTime = true && this.isSetRetreatTime();
    boolean that_present_retreatTime = true && that.isSetRetreatTime();
    if (this_present_retreatTime || that_present_retreatTime) {
      if (!(this_present_retreatTime && that_present_retreatTime))
        return false;
      if (!this.retreatTime.equals(that.retreatTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_oldProjectId = true;
    list.add(present_oldProjectId);
    if (present_oldProjectId)
      list.add(oldProjectId);

    boolean present_newProjectId = true;
    list.add(present_newProjectId);
    if (present_newProjectId)
      list.add(newProjectId);

    boolean present_retreatUserId = true;
    list.add(present_retreatUserId);
    if (present_retreatUserId)
      list.add(retreatUserId);

    boolean present_retreatTime = true && (isSetRetreatTime());
    list.add(present_retreatTime);
    if (present_retreatTime)
      list.add(retreatTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectRetreat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldProjectId()).compareTo(other.isSetOldProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldProjectId, other.oldProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewProjectId()).compareTo(other.isSetNewProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newProjectId, other.newProjectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetreatUserId()).compareTo(other.isSetRetreatUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetreatUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retreatUserId, other.retreatUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetreatTime()).compareTo(other.isSetRetreatTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetreatTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retreatTime, other.retreatTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectRetreat(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldProjectId:");
    sb.append(this.oldProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newProjectId:");
    sb.append(this.newProjectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retreatUserId:");
    sb.append(this.retreatUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retreatTime:");
    if (this.retreatTime == null) {
      sb.append("null");
    } else {
      sb.append(this.retreatTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectRetreatStandardSchemeFactory implements SchemeFactory {
    public BizProjectRetreatStandardScheme getScheme() {
      return new BizProjectRetreatStandardScheme();
    }
  }

  private static class BizProjectRetreatStandardScheme extends StandardScheme<BizProjectRetreat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectRetreat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OLD_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oldProjectId = iprot.readI32();
              struct.setOldProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.newProjectId = iprot.readI32();
              struct.setNewProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETREAT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retreatUserId = iprot.readI32();
              struct.setRetreatUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RETREAT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retreatTime = iprot.readString();
              struct.setRetreatTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectRetreat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.oldProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.newProjectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETREAT_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.retreatUserId);
      oprot.writeFieldEnd();
      if (struct.retreatTime != null) {
        oprot.writeFieldBegin(RETREAT_TIME_FIELD_DESC);
        oprot.writeString(struct.retreatTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectRetreatTupleSchemeFactory implements SchemeFactory {
    public BizProjectRetreatTupleScheme getScheme() {
      return new BizProjectRetreatTupleScheme();
    }
  }

  private static class BizProjectRetreatTupleScheme extends TupleScheme<BizProjectRetreat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectRetreat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetOldProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetNewProjectId()) {
        optionals.set(2);
      }
      if (struct.isSetRetreatUserId()) {
        optionals.set(3);
      }
      if (struct.isSetRetreatTime()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetOldProjectId()) {
        oprot.writeI32(struct.oldProjectId);
      }
      if (struct.isSetNewProjectId()) {
        oprot.writeI32(struct.newProjectId);
      }
      if (struct.isSetRetreatUserId()) {
        oprot.writeI32(struct.retreatUserId);
      }
      if (struct.isSetRetreatTime()) {
        oprot.writeString(struct.retreatTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectRetreat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.oldProjectId = iprot.readI32();
        struct.setOldProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.newProjectId = iprot.readI32();
        struct.setNewProjectIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.retreatUserId = iprot.readI32();
        struct.setRetreatUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.retreatTime = iprot.readString();
        struct.setRetreatTimeIsSet(true);
      }
    }
  }

}


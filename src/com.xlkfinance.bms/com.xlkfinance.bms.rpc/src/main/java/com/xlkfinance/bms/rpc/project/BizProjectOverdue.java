/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.project;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-3")
public class BizProjectOverdue implements org.apache.thrift.TBase<BizProjectOverdue, BizProjectOverdue._Fields>, java.io.Serializable, Cloneable, Comparable<BizProjectOverdue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizProjectOverdue");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LOAN_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loanPlanId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField SHOULD_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ACTUAL_PENALTY_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPenalty", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField ACTUAL_PENALTY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualPenaltyTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACTUAL_OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("actualOverdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField SHOULD_OVERDUE_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("shouldOverdueMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField OVERDUE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueRate", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField OVERDUE_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("overdueDay", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizProjectOverdueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizProjectOverdueTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int loanPlanId; // required
  public double overdueMoney; // required
  public double shouldPenalty; // required
  public double actualPenalty; // required
  public String actualPenaltyTime; // required
  public double actualOverdueMoney; // required
  public double shouldOverdueMoney; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public double overdueRate; // required
  public int overdueDay; // required
  public String remark; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    LOAN_PLAN_ID((short)3, "loanPlanId"),
    OVERDUE_MONEY((short)4, "overdueMoney"),
    SHOULD_PENALTY((short)5, "shouldPenalty"),
    ACTUAL_PENALTY((short)6, "actualPenalty"),
    ACTUAL_PENALTY_TIME((short)7, "actualPenaltyTime"),
    ACTUAL_OVERDUE_MONEY((short)8, "actualOverdueMoney"),
    SHOULD_OVERDUE_MONEY((short)9, "shouldOverdueMoney"),
    CREATE_DATE((short)10, "createDate"),
    CREATER_ID((short)11, "createrId"),
    UPDATE_ID((short)12, "updateId"),
    UPDATE_DATE((short)13, "updateDate"),
    OVERDUE_RATE((short)14, "overdueRate"),
    OVERDUE_DAY((short)15, "overdueDay"),
    REMARK((short)16, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // LOAN_PLAN_ID
          return LOAN_PLAN_ID;
        case 4: // OVERDUE_MONEY
          return OVERDUE_MONEY;
        case 5: // SHOULD_PENALTY
          return SHOULD_PENALTY;
        case 6: // ACTUAL_PENALTY
          return ACTUAL_PENALTY;
        case 7: // ACTUAL_PENALTY_TIME
          return ACTUAL_PENALTY_TIME;
        case 8: // ACTUAL_OVERDUE_MONEY
          return ACTUAL_OVERDUE_MONEY;
        case 9: // SHOULD_OVERDUE_MONEY
          return SHOULD_OVERDUE_MONEY;
        case 10: // CREATE_DATE
          return CREATE_DATE;
        case 11: // CREATER_ID
          return CREATER_ID;
        case 12: // UPDATE_ID
          return UPDATE_ID;
        case 13: // UPDATE_DATE
          return UPDATE_DATE;
        case 14: // OVERDUE_RATE
          return OVERDUE_RATE;
        case 15: // OVERDUE_DAY
          return OVERDUE_DAY;
        case 16: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __LOANPLANID_ISSET_ID = 2;
  private static final int __OVERDUEMONEY_ISSET_ID = 3;
  private static final int __SHOULDPENALTY_ISSET_ID = 4;
  private static final int __ACTUALPENALTY_ISSET_ID = 5;
  private static final int __ACTUALOVERDUEMONEY_ISSET_ID = 6;
  private static final int __SHOULDOVERDUEMONEY_ISSET_ID = 7;
  private static final int __CREATERID_ISSET_ID = 8;
  private static final int __UPDATEID_ISSET_ID = 9;
  private static final int __OVERDUERATE_ISSET_ID = 10;
  private static final int __OVERDUEDAY_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOAN_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("loanPlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("overdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("shouldPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PENALTY, new org.apache.thrift.meta_data.FieldMetaData("actualPenalty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTUAL_PENALTY_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualPenaltyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTUAL_OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("actualOverdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SHOULD_OVERDUE_MONEY, new org.apache.thrift.meta_data.FieldMetaData("shouldOverdueMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OVERDUE_RATE, new org.apache.thrift.meta_data.FieldMetaData("overdueRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OVERDUE_DAY, new org.apache.thrift.meta_data.FieldMetaData("overdueDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizProjectOverdue.class, metaDataMap);
  }

  public BizProjectOverdue() {
  }

  public BizProjectOverdue(
    int pid,
    int projectId,
    int loanPlanId,
    double overdueMoney,
    double shouldPenalty,
    double actualPenalty,
    String actualPenaltyTime,
    double actualOverdueMoney,
    double shouldOverdueMoney,
    String createDate,
    int createrId,
    int updateId,
    String updateDate,
    double overdueRate,
    int overdueDay,
    String remark)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.loanPlanId = loanPlanId;
    setLoanPlanIdIsSet(true);
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    this.shouldPenalty = shouldPenalty;
    setShouldPenaltyIsSet(true);
    this.actualPenalty = actualPenalty;
    setActualPenaltyIsSet(true);
    this.actualPenaltyTime = actualPenaltyTime;
    this.actualOverdueMoney = actualOverdueMoney;
    setActualOverdueMoneyIsSet(true);
    this.shouldOverdueMoney = shouldOverdueMoney;
    setShouldOverdueMoneyIsSet(true);
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    this.remark = remark;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizProjectOverdue(BizProjectOverdue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.loanPlanId = other.loanPlanId;
    this.overdueMoney = other.overdueMoney;
    this.shouldPenalty = other.shouldPenalty;
    this.actualPenalty = other.actualPenalty;
    if (other.isSetActualPenaltyTime()) {
      this.actualPenaltyTime = other.actualPenaltyTime;
    }
    this.actualOverdueMoney = other.actualOverdueMoney;
    this.shouldOverdueMoney = other.shouldOverdueMoney;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    this.overdueRate = other.overdueRate;
    this.overdueDay = other.overdueDay;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public BizProjectOverdue deepCopy() {
    return new BizProjectOverdue(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setLoanPlanIdIsSet(false);
    this.loanPlanId = 0;
    setOverdueMoneyIsSet(false);
    this.overdueMoney = 0.0;
    setShouldPenaltyIsSet(false);
    this.shouldPenalty = 0.0;
    setActualPenaltyIsSet(false);
    this.actualPenalty = 0.0;
    this.actualPenaltyTime = null;
    setActualOverdueMoneyIsSet(false);
    this.actualOverdueMoney = 0.0;
    setShouldOverdueMoneyIsSet(false);
    this.shouldOverdueMoney = 0.0;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    setOverdueRateIsSet(false);
    this.overdueRate = 0.0;
    setOverdueDayIsSet(false);
    this.overdueDay = 0;
    this.remark = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizProjectOverdue setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizProjectOverdue setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getLoanPlanId() {
    return this.loanPlanId;
  }

  public BizProjectOverdue setLoanPlanId(int loanPlanId) {
    this.loanPlanId = loanPlanId;
    setLoanPlanIdIsSet(true);
    return this;
  }

  public void unsetLoanPlanId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOANPLANID_ISSET_ID);
  }

  /** Returns true if field loanPlanId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoanPlanId() {
    return EncodingUtils.testBit(__isset_bitfield, __LOANPLANID_ISSET_ID);
  }

  public void setLoanPlanIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOANPLANID_ISSET_ID, value);
  }

  public double getOverdueMoney() {
    return this.overdueMoney;
  }

  public BizProjectOverdue setOverdueMoney(double overdueMoney) {
    this.overdueMoney = overdueMoney;
    setOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field overdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID);
  }

  public void setOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEMONEY_ISSET_ID, value);
  }

  public double getShouldPenalty() {
    return this.shouldPenalty;
  }

  public BizProjectOverdue setShouldPenalty(double shouldPenalty) {
    this.shouldPenalty = shouldPenalty;
    setShouldPenaltyIsSet(true);
    return this;
  }

  public void unsetShouldPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID);
  }

  /** Returns true if field shouldPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID);
  }

  public void setShouldPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDPENALTY_ISSET_ID, value);
  }

  public double getActualPenalty() {
    return this.actualPenalty;
  }

  public BizProjectOverdue setActualPenalty(double actualPenalty) {
    this.actualPenalty = actualPenalty;
    setActualPenaltyIsSet(true);
    return this;
  }

  public void unsetActualPenalty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID);
  }

  /** Returns true if field actualPenalty is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPenalty() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID);
  }

  public void setActualPenaltyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALPENALTY_ISSET_ID, value);
  }

  public String getActualPenaltyTime() {
    return this.actualPenaltyTime;
  }

  public BizProjectOverdue setActualPenaltyTime(String actualPenaltyTime) {
    this.actualPenaltyTime = actualPenaltyTime;
    return this;
  }

  public void unsetActualPenaltyTime() {
    this.actualPenaltyTime = null;
  }

  /** Returns true if field actualPenaltyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualPenaltyTime() {
    return this.actualPenaltyTime != null;
  }

  public void setActualPenaltyTimeIsSet(boolean value) {
    if (!value) {
      this.actualPenaltyTime = null;
    }
  }

  public double getActualOverdueMoney() {
    return this.actualOverdueMoney;
  }

  public BizProjectOverdue setActualOverdueMoney(double actualOverdueMoney) {
    this.actualOverdueMoney = actualOverdueMoney;
    setActualOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetActualOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field actualOverdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetActualOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID);
  }

  public void setActualOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALOVERDUEMONEY_ISSET_ID, value);
  }

  public double getShouldOverdueMoney() {
    return this.shouldOverdueMoney;
  }

  public BizProjectOverdue setShouldOverdueMoney(double shouldOverdueMoney) {
    this.shouldOverdueMoney = shouldOverdueMoney;
    setShouldOverdueMoneyIsSet(true);
    return this;
  }

  public void unsetShouldOverdueMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID);
  }

  /** Returns true if field shouldOverdueMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetShouldOverdueMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID);
  }

  public void setShouldOverdueMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHOULDOVERDUEMONEY_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizProjectOverdue setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizProjectOverdue setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizProjectOverdue setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizProjectOverdue setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public double getOverdueRate() {
    return this.overdueRate;
  }

  public BizProjectOverdue setOverdueRate(double overdueRate) {
    this.overdueRate = overdueRate;
    setOverdueRateIsSet(true);
    return this;
  }

  public void unsetOverdueRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  /** Returns true if field overdueRate is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueRate() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUERATE_ISSET_ID);
  }

  public void setOverdueRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUERATE_ISSET_ID, value);
  }

  public int getOverdueDay() {
    return this.overdueDay;
  }

  public BizProjectOverdue setOverdueDay(int overdueDay) {
    this.overdueDay = overdueDay;
    setOverdueDayIsSet(true);
    return this;
  }

  public void unsetOverdueDay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  /** Returns true if field overdueDay is set (has been assigned a value) and false otherwise */
  public boolean isSetOverdueDay() {
    return EncodingUtils.testBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID);
  }

  public void setOverdueDayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OVERDUEDAY_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public BizProjectOverdue setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case LOAN_PLAN_ID:
      if (value == null) {
        unsetLoanPlanId();
      } else {
        setLoanPlanId((Integer)value);
      }
      break;

    case OVERDUE_MONEY:
      if (value == null) {
        unsetOverdueMoney();
      } else {
        setOverdueMoney((Double)value);
      }
      break;

    case SHOULD_PENALTY:
      if (value == null) {
        unsetShouldPenalty();
      } else {
        setShouldPenalty((Double)value);
      }
      break;

    case ACTUAL_PENALTY:
      if (value == null) {
        unsetActualPenalty();
      } else {
        setActualPenalty((Double)value);
      }
      break;

    case ACTUAL_PENALTY_TIME:
      if (value == null) {
        unsetActualPenaltyTime();
      } else {
        setActualPenaltyTime((String)value);
      }
      break;

    case ACTUAL_OVERDUE_MONEY:
      if (value == null) {
        unsetActualOverdueMoney();
      } else {
        setActualOverdueMoney((Double)value);
      }
      break;

    case SHOULD_OVERDUE_MONEY:
      if (value == null) {
        unsetShouldOverdueMoney();
      } else {
        setShouldOverdueMoney((Double)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case OVERDUE_RATE:
      if (value == null) {
        unsetOverdueRate();
      } else {
        setOverdueRate((Double)value);
      }
      break;

    case OVERDUE_DAY:
      if (value == null) {
        unsetOverdueDay();
      } else {
        setOverdueDay((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case LOAN_PLAN_ID:
      return Integer.valueOf(getLoanPlanId());

    case OVERDUE_MONEY:
      return Double.valueOf(getOverdueMoney());

    case SHOULD_PENALTY:
      return Double.valueOf(getShouldPenalty());

    case ACTUAL_PENALTY:
      return Double.valueOf(getActualPenalty());

    case ACTUAL_PENALTY_TIME:
      return getActualPenaltyTime();

    case ACTUAL_OVERDUE_MONEY:
      return Double.valueOf(getActualOverdueMoney());

    case SHOULD_OVERDUE_MONEY:
      return Double.valueOf(getShouldOverdueMoney());

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case OVERDUE_RATE:
      return Double.valueOf(getOverdueRate());

    case OVERDUE_DAY:
      return Integer.valueOf(getOverdueDay());

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case LOAN_PLAN_ID:
      return isSetLoanPlanId();
    case OVERDUE_MONEY:
      return isSetOverdueMoney();
    case SHOULD_PENALTY:
      return isSetShouldPenalty();
    case ACTUAL_PENALTY:
      return isSetActualPenalty();
    case ACTUAL_PENALTY_TIME:
      return isSetActualPenaltyTime();
    case ACTUAL_OVERDUE_MONEY:
      return isSetActualOverdueMoney();
    case SHOULD_OVERDUE_MONEY:
      return isSetShouldOverdueMoney();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case OVERDUE_RATE:
      return isSetOverdueRate();
    case OVERDUE_DAY:
      return isSetOverdueDay();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizProjectOverdue)
      return this.equals((BizProjectOverdue)that);
    return false;
  }

  public boolean equals(BizProjectOverdue that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_loanPlanId = true;
    boolean that_present_loanPlanId = true;
    if (this_present_loanPlanId || that_present_loanPlanId) {
      if (!(this_present_loanPlanId && that_present_loanPlanId))
        return false;
      if (this.loanPlanId != that.loanPlanId)
        return false;
    }

    boolean this_present_overdueMoney = true;
    boolean that_present_overdueMoney = true;
    if (this_present_overdueMoney || that_present_overdueMoney) {
      if (!(this_present_overdueMoney && that_present_overdueMoney))
        return false;
      if (this.overdueMoney != that.overdueMoney)
        return false;
    }

    boolean this_present_shouldPenalty = true;
    boolean that_present_shouldPenalty = true;
    if (this_present_shouldPenalty || that_present_shouldPenalty) {
      if (!(this_present_shouldPenalty && that_present_shouldPenalty))
        return false;
      if (this.shouldPenalty != that.shouldPenalty)
        return false;
    }

    boolean this_present_actualPenalty = true;
    boolean that_present_actualPenalty = true;
    if (this_present_actualPenalty || that_present_actualPenalty) {
      if (!(this_present_actualPenalty && that_present_actualPenalty))
        return false;
      if (this.actualPenalty != that.actualPenalty)
        return false;
    }

    boolean this_present_actualPenaltyTime = true && this.isSetActualPenaltyTime();
    boolean that_present_actualPenaltyTime = true && that.isSetActualPenaltyTime();
    if (this_present_actualPenaltyTime || that_present_actualPenaltyTime) {
      if (!(this_present_actualPenaltyTime && that_present_actualPenaltyTime))
        return false;
      if (!this.actualPenaltyTime.equals(that.actualPenaltyTime))
        return false;
    }

    boolean this_present_actualOverdueMoney = true;
    boolean that_present_actualOverdueMoney = true;
    if (this_present_actualOverdueMoney || that_present_actualOverdueMoney) {
      if (!(this_present_actualOverdueMoney && that_present_actualOverdueMoney))
        return false;
      if (this.actualOverdueMoney != that.actualOverdueMoney)
        return false;
    }

    boolean this_present_shouldOverdueMoney = true;
    boolean that_present_shouldOverdueMoney = true;
    if (this_present_shouldOverdueMoney || that_present_shouldOverdueMoney) {
      if (!(this_present_shouldOverdueMoney && that_present_shouldOverdueMoney))
        return false;
      if (this.shouldOverdueMoney != that.shouldOverdueMoney)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_overdueRate = true;
    boolean that_present_overdueRate = true;
    if (this_present_overdueRate || that_present_overdueRate) {
      if (!(this_present_overdueRate && that_present_overdueRate))
        return false;
      if (this.overdueRate != that.overdueRate)
        return false;
    }

    boolean this_present_overdueDay = true;
    boolean that_present_overdueDay = true;
    if (this_present_overdueDay || that_present_overdueDay) {
      if (!(this_present_overdueDay && that_present_overdueDay))
        return false;
      if (this.overdueDay != that.overdueDay)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_loanPlanId = true;
    list.add(present_loanPlanId);
    if (present_loanPlanId)
      list.add(loanPlanId);

    boolean present_overdueMoney = true;
    list.add(present_overdueMoney);
    if (present_overdueMoney)
      list.add(overdueMoney);

    boolean present_shouldPenalty = true;
    list.add(present_shouldPenalty);
    if (present_shouldPenalty)
      list.add(shouldPenalty);

    boolean present_actualPenalty = true;
    list.add(present_actualPenalty);
    if (present_actualPenalty)
      list.add(actualPenalty);

    boolean present_actualPenaltyTime = true && (isSetActualPenaltyTime());
    list.add(present_actualPenaltyTime);
    if (present_actualPenaltyTime)
      list.add(actualPenaltyTime);

    boolean present_actualOverdueMoney = true;
    list.add(present_actualOverdueMoney);
    if (present_actualOverdueMoney)
      list.add(actualOverdueMoney);

    boolean present_shouldOverdueMoney = true;
    list.add(present_shouldOverdueMoney);
    if (present_shouldOverdueMoney)
      list.add(shouldOverdueMoney);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_overdueRate = true;
    list.add(present_overdueRate);
    if (present_overdueRate)
      list.add(overdueRate);

    boolean present_overdueDay = true;
    list.add(present_overdueDay);
    if (present_overdueDay)
      list.add(overdueDay);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizProjectOverdue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoanPlanId()).compareTo(other.isSetLoanPlanId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoanPlanId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loanPlanId, other.loanPlanId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueMoney()).compareTo(other.isSetOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueMoney, other.overdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldPenalty()).compareTo(other.isSetShouldPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldPenalty, other.shouldPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPenalty()).compareTo(other.isSetActualPenalty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPenalty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPenalty, other.actualPenalty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualPenaltyTime()).compareTo(other.isSetActualPenaltyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualPenaltyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualPenaltyTime, other.actualPenaltyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualOverdueMoney()).compareTo(other.isSetActualOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualOverdueMoney, other.actualOverdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShouldOverdueMoney()).compareTo(other.isSetShouldOverdueMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShouldOverdueMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shouldOverdueMoney, other.shouldOverdueMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueRate()).compareTo(other.isSetOverdueRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueRate, other.overdueRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOverdueDay()).compareTo(other.isSetOverdueDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOverdueDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.overdueDay, other.overdueDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizProjectOverdue(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loanPlanId:");
    sb.append(this.loanPlanId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueMoney:");
    sb.append(this.overdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldPenalty:");
    sb.append(this.shouldPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPenalty:");
    sb.append(this.actualPenalty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualPenaltyTime:");
    if (this.actualPenaltyTime == null) {
      sb.append("null");
    } else {
      sb.append(this.actualPenaltyTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualOverdueMoney:");
    sb.append(this.actualOverdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("shouldOverdueMoney:");
    sb.append(this.shouldOverdueMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueRate:");
    sb.append(this.overdueRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("overdueDay:");
    sb.append(this.overdueDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizProjectOverdueStandardSchemeFactory implements SchemeFactory {
    public BizProjectOverdueStandardScheme getScheme() {
      return new BizProjectOverdueStandardScheme();
    }
  }

  private static class BizProjectOverdueStandardScheme extends StandardScheme<BizProjectOverdue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizProjectOverdue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOAN_PLAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loanPlanId = iprot.readI32();
              struct.setLoanPlanIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueMoney = iprot.readDouble();
              struct.setOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOULD_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldPenalty = iprot.readDouble();
              struct.setShouldPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTUAL_PENALTY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualPenalty = iprot.readDouble();
              struct.setActualPenaltyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTUAL_PENALTY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actualPenaltyTime = iprot.readString();
              struct.setActualPenaltyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACTUAL_OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.actualOverdueMoney = iprot.readDouble();
              struct.setActualOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SHOULD_OVERDUE_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.shouldOverdueMoney = iprot.readDouble();
              struct.setShouldOverdueMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OVERDUE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.overdueRate = iprot.readDouble();
              struct.setOverdueRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // OVERDUE_DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.overdueDay = iprot.readI32();
              struct.setOverdueDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizProjectOverdue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOAN_PLAN_ID_FIELD_DESC);
      oprot.writeI32(struct.loanPlanId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.overdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.shouldPenalty);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_PENALTY_FIELD_DESC);
      oprot.writeDouble(struct.actualPenalty);
      oprot.writeFieldEnd();
      if (struct.actualPenaltyTime != null) {
        oprot.writeFieldBegin(ACTUAL_PENALTY_TIME_FIELD_DESC);
        oprot.writeString(struct.actualPenaltyTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ACTUAL_OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.actualOverdueMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOULD_OVERDUE_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.shouldOverdueMoney);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OVERDUE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.overdueRate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OVERDUE_DAY_FIELD_DESC);
      oprot.writeI32(struct.overdueDay);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizProjectOverdueTupleSchemeFactory implements SchemeFactory {
    public BizProjectOverdueTupleScheme getScheme() {
      return new BizProjectOverdueTupleScheme();
    }
  }

  private static class BizProjectOverdueTupleScheme extends TupleScheme<BizProjectOverdue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizProjectOverdue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetLoanPlanId()) {
        optionals.set(2);
      }
      if (struct.isSetOverdueMoney()) {
        optionals.set(3);
      }
      if (struct.isSetShouldPenalty()) {
        optionals.set(4);
      }
      if (struct.isSetActualPenalty()) {
        optionals.set(5);
      }
      if (struct.isSetActualPenaltyTime()) {
        optionals.set(6);
      }
      if (struct.isSetActualOverdueMoney()) {
        optionals.set(7);
      }
      if (struct.isSetShouldOverdueMoney()) {
        optionals.set(8);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(9);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(12);
      }
      if (struct.isSetOverdueRate()) {
        optionals.set(13);
      }
      if (struct.isSetOverdueDay()) {
        optionals.set(14);
      }
      if (struct.isSetRemark()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetLoanPlanId()) {
        oprot.writeI32(struct.loanPlanId);
      }
      if (struct.isSetOverdueMoney()) {
        oprot.writeDouble(struct.overdueMoney);
      }
      if (struct.isSetShouldPenalty()) {
        oprot.writeDouble(struct.shouldPenalty);
      }
      if (struct.isSetActualPenalty()) {
        oprot.writeDouble(struct.actualPenalty);
      }
      if (struct.isSetActualPenaltyTime()) {
        oprot.writeString(struct.actualPenaltyTime);
      }
      if (struct.isSetActualOverdueMoney()) {
        oprot.writeDouble(struct.actualOverdueMoney);
      }
      if (struct.isSetShouldOverdueMoney()) {
        oprot.writeDouble(struct.shouldOverdueMoney);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetOverdueRate()) {
        oprot.writeDouble(struct.overdueRate);
      }
      if (struct.isSetOverdueDay()) {
        oprot.writeI32(struct.overdueDay);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizProjectOverdue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loanPlanId = iprot.readI32();
        struct.setLoanPlanIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.overdueMoney = iprot.readDouble();
        struct.setOverdueMoneyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.shouldPenalty = iprot.readDouble();
        struct.setShouldPenaltyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.actualPenalty = iprot.readDouble();
        struct.setActualPenaltyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.actualPenaltyTime = iprot.readString();
        struct.setActualPenaltyTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.actualOverdueMoney = iprot.readDouble();
        struct.setActualOverdueMoneyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.shouldOverdueMoney = iprot.readDouble();
        struct.setShouldOverdueMoneyIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.overdueRate = iprot.readDouble();
        struct.setOverdueRateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.overdueDay = iprot.readI32();
        struct.setOverdueDayIsSet(true);
      }
      if (incoming.get(15)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}


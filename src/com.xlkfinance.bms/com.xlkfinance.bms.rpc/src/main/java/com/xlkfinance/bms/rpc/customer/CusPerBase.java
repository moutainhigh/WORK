/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusPerBase implements org.apache.thrift.TBase<CusPerBase, CusPerBase._Fields>, java.io.Serializable, Cloneable, Comparable<CusPerBase> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusPerBase");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcct", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PICTURE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("pictureUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TO_LOCAL_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toLocalDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CUS_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("cusLevel", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREDIT_SITUATION_FIELD_DESC = new org.apache.thrift.protocol.TField("creditSituation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CUS_ACCT_MANAGER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cusAcctManagerName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusPerBaseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusPerBaseTupleSchemeFactory());
  }

  public int pid; // required
  public CusAcct cusAcct; // required
  public String pictureUrl; // required
  public String toLocalDate; // required
  public int cusLevel; // required
  public String creditSituation; // required
  public int status; // required
  public String cusAcctManagerName; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_ACCT((short)2, "cusAcct"),
    PICTURE_URL((short)3, "pictureUrl"),
    TO_LOCAL_DATE((short)4, "toLocalDate"),
    CUS_LEVEL((short)5, "cusLevel"),
    CREDIT_SITUATION((short)6, "creditSituation"),
    STATUS((short)7, "status"),
    CUS_ACCT_MANAGER_NAME((short)8, "cusAcctManagerName"),
    PAGE((short)9, "page"),
    ROWS((short)10, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_ACCT
          return CUS_ACCT;
        case 3: // PICTURE_URL
          return PICTURE_URL;
        case 4: // TO_LOCAL_DATE
          return TO_LOCAL_DATE;
        case 5: // CUS_LEVEL
          return CUS_LEVEL;
        case 6: // CREDIT_SITUATION
          return CREDIT_SITUATION;
        case 7: // STATUS
          return STATUS;
        case 8: // CUS_ACCT_MANAGER_NAME
          return CUS_ACCT_MANAGER_NAME;
        case 9: // PAGE
          return PAGE;
        case 10: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CUSLEVEL_ISSET_ID = 1;
  private static final int __STATUS_ISSET_ID = 2;
  private static final int __PAGE_ISSET_ID = 3;
  private static final int __ROWS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_ACCT, new org.apache.thrift.meta_data.FieldMetaData("cusAcct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusAcct.class)));
    tmpMap.put(_Fields.PICTURE_URL, new org.apache.thrift.meta_data.FieldMetaData("pictureUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_LOCAL_DATE, new org.apache.thrift.meta_data.FieldMetaData("toLocalDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUS_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("cusLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREDIT_SITUATION, new org.apache.thrift.meta_data.FieldMetaData("creditSituation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_ACCT_MANAGER_NAME, new org.apache.thrift.meta_data.FieldMetaData("cusAcctManagerName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusPerBase.class, metaDataMap);
  }

  public CusPerBase() {
  }

  public CusPerBase(
    int pid,
    CusAcct cusAcct,
    String pictureUrl,
    String toLocalDate,
    int cusLevel,
    String creditSituation,
    int status,
    String cusAcctManagerName,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusAcct = cusAcct;
    this.pictureUrl = pictureUrl;
    this.toLocalDate = toLocalDate;
    this.cusLevel = cusLevel;
    setCusLevelIsSet(true);
    this.creditSituation = creditSituation;
    this.status = status;
    setStatusIsSet(true);
    this.cusAcctManagerName = cusAcctManagerName;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusPerBase(CusPerBase other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusAcct()) {
      this.cusAcct = new CusAcct(other.cusAcct);
    }
    if (other.isSetPictureUrl()) {
      this.pictureUrl = other.pictureUrl;
    }
    if (other.isSetToLocalDate()) {
      this.toLocalDate = other.toLocalDate;
    }
    this.cusLevel = other.cusLevel;
    if (other.isSetCreditSituation()) {
      this.creditSituation = other.creditSituation;
    }
    this.status = other.status;
    if (other.isSetCusAcctManagerName()) {
      this.cusAcctManagerName = other.cusAcctManagerName;
    }
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusPerBase deepCopy() {
    return new CusPerBase(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusAcct = null;
    this.pictureUrl = null;
    this.toLocalDate = null;
    setCusLevelIsSet(false);
    this.cusLevel = 0;
    this.creditSituation = null;
    setStatusIsSet(false);
    this.status = 0;
    this.cusAcctManagerName = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusPerBase setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusAcct getCusAcct() {
    return this.cusAcct;
  }

  public CusPerBase setCusAcct(CusAcct cusAcct) {
    this.cusAcct = cusAcct;
    return this;
  }

  public void unsetCusAcct() {
    this.cusAcct = null;
  }

  /** Returns true if field cusAcct is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcct() {
    return this.cusAcct != null;
  }

  public void setCusAcctIsSet(boolean value) {
    if (!value) {
      this.cusAcct = null;
    }
  }

  public String getPictureUrl() {
    return this.pictureUrl;
  }

  public CusPerBase setPictureUrl(String pictureUrl) {
    this.pictureUrl = pictureUrl;
    return this;
  }

  public void unsetPictureUrl() {
    this.pictureUrl = null;
  }

  /** Returns true if field pictureUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPictureUrl() {
    return this.pictureUrl != null;
  }

  public void setPictureUrlIsSet(boolean value) {
    if (!value) {
      this.pictureUrl = null;
    }
  }

  public String getToLocalDate() {
    return this.toLocalDate;
  }

  public CusPerBase setToLocalDate(String toLocalDate) {
    this.toLocalDate = toLocalDate;
    return this;
  }

  public void unsetToLocalDate() {
    this.toLocalDate = null;
  }

  /** Returns true if field toLocalDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToLocalDate() {
    return this.toLocalDate != null;
  }

  public void setToLocalDateIsSet(boolean value) {
    if (!value) {
      this.toLocalDate = null;
    }
  }

  public int getCusLevel() {
    return this.cusLevel;
  }

  public CusPerBase setCusLevel(int cusLevel) {
    this.cusLevel = cusLevel;
    setCusLevelIsSet(true);
    return this;
  }

  public void unsetCusLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CUSLEVEL_ISSET_ID);
  }

  /** Returns true if field cusLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetCusLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __CUSLEVEL_ISSET_ID);
  }

  public void setCusLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CUSLEVEL_ISSET_ID, value);
  }

  public String getCreditSituation() {
    return this.creditSituation;
  }

  public CusPerBase setCreditSituation(String creditSituation) {
    this.creditSituation = creditSituation;
    return this;
  }

  public void unsetCreditSituation() {
    this.creditSituation = null;
  }

  /** Returns true if field creditSituation is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditSituation() {
    return this.creditSituation != null;
  }

  public void setCreditSituationIsSet(boolean value) {
    if (!value) {
      this.creditSituation = null;
    }
  }

  public int getStatus() {
    return this.status;
  }

  public CusPerBase setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getCusAcctManagerName() {
    return this.cusAcctManagerName;
  }

  public CusPerBase setCusAcctManagerName(String cusAcctManagerName) {
    this.cusAcctManagerName = cusAcctManagerName;
    return this;
  }

  public void unsetCusAcctManagerName() {
    this.cusAcctManagerName = null;
  }

  /** Returns true if field cusAcctManagerName is set (has been assigned a value) and false otherwise */
  public boolean isSetCusAcctManagerName() {
    return this.cusAcctManagerName != null;
  }

  public void setCusAcctManagerNameIsSet(boolean value) {
    if (!value) {
      this.cusAcctManagerName = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CusPerBase setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusPerBase setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_ACCT:
      if (value == null) {
        unsetCusAcct();
      } else {
        setCusAcct((CusAcct)value);
      }
      break;

    case PICTURE_URL:
      if (value == null) {
        unsetPictureUrl();
      } else {
        setPictureUrl((String)value);
      }
      break;

    case TO_LOCAL_DATE:
      if (value == null) {
        unsetToLocalDate();
      } else {
        setToLocalDate((String)value);
      }
      break;

    case CUS_LEVEL:
      if (value == null) {
        unsetCusLevel();
      } else {
        setCusLevel((Integer)value);
      }
      break;

    case CREDIT_SITUATION:
      if (value == null) {
        unsetCreditSituation();
      } else {
        setCreditSituation((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case CUS_ACCT_MANAGER_NAME:
      if (value == null) {
        unsetCusAcctManagerName();
      } else {
        setCusAcctManagerName((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_ACCT:
      return getCusAcct();

    case PICTURE_URL:
      return getPictureUrl();

    case TO_LOCAL_DATE:
      return getToLocalDate();

    case CUS_LEVEL:
      return Integer.valueOf(getCusLevel());

    case CREDIT_SITUATION:
      return getCreditSituation();

    case STATUS:
      return Integer.valueOf(getStatus());

    case CUS_ACCT_MANAGER_NAME:
      return getCusAcctManagerName();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_ACCT:
      return isSetCusAcct();
    case PICTURE_URL:
      return isSetPictureUrl();
    case TO_LOCAL_DATE:
      return isSetToLocalDate();
    case CUS_LEVEL:
      return isSetCusLevel();
    case CREDIT_SITUATION:
      return isSetCreditSituation();
    case STATUS:
      return isSetStatus();
    case CUS_ACCT_MANAGER_NAME:
      return isSetCusAcctManagerName();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusPerBase)
      return this.equals((CusPerBase)that);
    return false;
  }

  public boolean equals(CusPerBase that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusAcct = true && this.isSetCusAcct();
    boolean that_present_cusAcct = true && that.isSetCusAcct();
    if (this_present_cusAcct || that_present_cusAcct) {
      if (!(this_present_cusAcct && that_present_cusAcct))
        return false;
      if (!this.cusAcct.equals(that.cusAcct))
        return false;
    }

    boolean this_present_pictureUrl = true && this.isSetPictureUrl();
    boolean that_present_pictureUrl = true && that.isSetPictureUrl();
    if (this_present_pictureUrl || that_present_pictureUrl) {
      if (!(this_present_pictureUrl && that_present_pictureUrl))
        return false;
      if (!this.pictureUrl.equals(that.pictureUrl))
        return false;
    }

    boolean this_present_toLocalDate = true && this.isSetToLocalDate();
    boolean that_present_toLocalDate = true && that.isSetToLocalDate();
    if (this_present_toLocalDate || that_present_toLocalDate) {
      if (!(this_present_toLocalDate && that_present_toLocalDate))
        return false;
      if (!this.toLocalDate.equals(that.toLocalDate))
        return false;
    }

    boolean this_present_cusLevel = true;
    boolean that_present_cusLevel = true;
    if (this_present_cusLevel || that_present_cusLevel) {
      if (!(this_present_cusLevel && that_present_cusLevel))
        return false;
      if (this.cusLevel != that.cusLevel)
        return false;
    }

    boolean this_present_creditSituation = true && this.isSetCreditSituation();
    boolean that_present_creditSituation = true && that.isSetCreditSituation();
    if (this_present_creditSituation || that_present_creditSituation) {
      if (!(this_present_creditSituation && that_present_creditSituation))
        return false;
      if (!this.creditSituation.equals(that.creditSituation))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_cusAcctManagerName = true && this.isSetCusAcctManagerName();
    boolean that_present_cusAcctManagerName = true && that.isSetCusAcctManagerName();
    if (this_present_cusAcctManagerName || that_present_cusAcctManagerName) {
      if (!(this_present_cusAcctManagerName && that_present_cusAcctManagerName))
        return false;
      if (!this.cusAcctManagerName.equals(that.cusAcctManagerName))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusAcct = true && (isSetCusAcct());
    list.add(present_cusAcct);
    if (present_cusAcct)
      list.add(cusAcct);

    boolean present_pictureUrl = true && (isSetPictureUrl());
    list.add(present_pictureUrl);
    if (present_pictureUrl)
      list.add(pictureUrl);

    boolean present_toLocalDate = true && (isSetToLocalDate());
    list.add(present_toLocalDate);
    if (present_toLocalDate)
      list.add(toLocalDate);

    boolean present_cusLevel = true;
    list.add(present_cusLevel);
    if (present_cusLevel)
      list.add(cusLevel);

    boolean present_creditSituation = true && (isSetCreditSituation());
    list.add(present_creditSituation);
    if (present_creditSituation)
      list.add(creditSituation);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_cusAcctManagerName = true && (isSetCusAcctManagerName());
    list.add(present_cusAcctManagerName);
    if (present_cusAcctManagerName)
      list.add(cusAcctManagerName);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusPerBase other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcct()).compareTo(other.isSetCusAcct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcct, other.cusAcct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPictureUrl()).compareTo(other.isSetPictureUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPictureUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pictureUrl, other.pictureUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToLocalDate()).compareTo(other.isSetToLocalDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToLocalDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toLocalDate, other.toLocalDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusLevel()).compareTo(other.isSetCusLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusLevel, other.cusLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditSituation()).compareTo(other.isSetCreditSituation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditSituation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditSituation, other.creditSituation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusAcctManagerName()).compareTo(other.isSetCusAcctManagerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusAcctManagerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusAcctManagerName, other.cusAcctManagerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusPerBase(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcct:");
    if (this.cusAcct == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pictureUrl:");
    if (this.pictureUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.pictureUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toLocalDate:");
    if (this.toLocalDate == null) {
      sb.append("null");
    } else {
      sb.append(this.toLocalDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusLevel:");
    sb.append(this.cusLevel);
    first = false;
    if (!first) sb.append(", ");
    sb.append("creditSituation:");
    if (this.creditSituation == null) {
      sb.append("null");
    } else {
      sb.append(this.creditSituation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusAcctManagerName:");
    if (this.cusAcctManagerName == null) {
      sb.append("null");
    } else {
      sb.append(this.cusAcctManagerName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusAcct != null) {
      cusAcct.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusPerBaseStandardSchemeFactory implements SchemeFactory {
    public CusPerBaseStandardScheme getScheme() {
      return new CusPerBaseStandardScheme();
    }
  }

  private static class CusPerBaseStandardScheme extends StandardScheme<CusPerBase> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusPerBase struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_ACCT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusAcct = new CusAcct();
              struct.cusAcct.read(iprot);
              struct.setCusAcctIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PICTURE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pictureUrl = iprot.readString();
              struct.setPictureUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO_LOCAL_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.toLocalDate = iprot.readString();
              struct.setToLocalDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CUS_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cusLevel = iprot.readI32();
              struct.setCusLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREDIT_SITUATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.creditSituation = iprot.readString();
              struct.setCreditSituationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CUS_ACCT_MANAGER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cusAcctManagerName = iprot.readString();
              struct.setCusAcctManagerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusPerBase struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusAcct != null) {
        oprot.writeFieldBegin(CUS_ACCT_FIELD_DESC);
        struct.cusAcct.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pictureUrl != null) {
        oprot.writeFieldBegin(PICTURE_URL_FIELD_DESC);
        oprot.writeString(struct.pictureUrl);
        oprot.writeFieldEnd();
      }
      if (struct.toLocalDate != null) {
        oprot.writeFieldBegin(TO_LOCAL_DATE_FIELD_DESC);
        oprot.writeString(struct.toLocalDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CUS_LEVEL_FIELD_DESC);
      oprot.writeI32(struct.cusLevel);
      oprot.writeFieldEnd();
      if (struct.creditSituation != null) {
        oprot.writeFieldBegin(CREDIT_SITUATION_FIELD_DESC);
        oprot.writeString(struct.creditSituation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.cusAcctManagerName != null) {
        oprot.writeFieldBegin(CUS_ACCT_MANAGER_NAME_FIELD_DESC);
        oprot.writeString(struct.cusAcctManagerName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusPerBaseTupleSchemeFactory implements SchemeFactory {
    public CusPerBaseTupleScheme getScheme() {
      return new CusPerBaseTupleScheme();
    }
  }

  private static class CusPerBaseTupleScheme extends TupleScheme<CusPerBase> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusPerBase struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusAcct()) {
        optionals.set(1);
      }
      if (struct.isSetPictureUrl()) {
        optionals.set(2);
      }
      if (struct.isSetToLocalDate()) {
        optionals.set(3);
      }
      if (struct.isSetCusLevel()) {
        optionals.set(4);
      }
      if (struct.isSetCreditSituation()) {
        optionals.set(5);
      }
      if (struct.isSetStatus()) {
        optionals.set(6);
      }
      if (struct.isSetCusAcctManagerName()) {
        optionals.set(7);
      }
      if (struct.isSetPage()) {
        optionals.set(8);
      }
      if (struct.isSetRows()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusAcct()) {
        struct.cusAcct.write(oprot);
      }
      if (struct.isSetPictureUrl()) {
        oprot.writeString(struct.pictureUrl);
      }
      if (struct.isSetToLocalDate()) {
        oprot.writeString(struct.toLocalDate);
      }
      if (struct.isSetCusLevel()) {
        oprot.writeI32(struct.cusLevel);
      }
      if (struct.isSetCreditSituation()) {
        oprot.writeString(struct.creditSituation);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetCusAcctManagerName()) {
        oprot.writeString(struct.cusAcctManagerName);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusPerBase struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusAcct = new CusAcct();
        struct.cusAcct.read(iprot);
        struct.setCusAcctIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pictureUrl = iprot.readString();
        struct.setPictureUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.toLocalDate = iprot.readString();
        struct.setToLocalDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cusLevel = iprot.readI32();
        struct.setCusLevelIsSet(true);
      }
      if (incoming.get(5)) {
        struct.creditSituation = iprot.readString();
        struct.setCreditSituationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cusAcctManagerName = iprot.readString();
        struct.setCusAcctManagerNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


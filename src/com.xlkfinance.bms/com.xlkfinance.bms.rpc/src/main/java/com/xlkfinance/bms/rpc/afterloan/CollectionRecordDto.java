/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.afterloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-18")
public class CollectionRecordDto implements org.apache.thrift.TBase<CollectionRecordDto, CollectionRecordDto._Fields>, java.io.Serializable, Cloneable, Comparable<CollectionRecordDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionRecordDto");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CYCLE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("cycleNum", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REMINDER_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderDt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REMINDER_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("reminderUser", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CT_METHODS_FIELD_DESC = new org.apache.thrift.protocol.TField("ctMethods", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("subject", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionRecordDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionRecordDtoTupleSchemeFactory());
  }

  public int pid; // required
  public int cycleNum; // required
  public String reminderDt; // required
  public String reminderUser; // required
  public int ctMethods; // required
  public String subject; // required
  public String content; // required
  public int count; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CYCLE_NUM((short)2, "cycleNum"),
    REMINDER_DT((short)3, "reminderDt"),
    REMINDER_USER((short)4, "reminderUser"),
    CT_METHODS((short)5, "ctMethods"),
    SUBJECT((short)6, "subject"),
    CONTENT((short)7, "content"),
    COUNT((short)8, "count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CYCLE_NUM
          return CYCLE_NUM;
        case 3: // REMINDER_DT
          return REMINDER_DT;
        case 4: // REMINDER_USER
          return REMINDER_USER;
        case 5: // CT_METHODS
          return CT_METHODS;
        case 6: // SUBJECT
          return SUBJECT;
        case 7: // CONTENT
          return CONTENT;
        case 8: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __CYCLENUM_ISSET_ID = 1;
  private static final int __CTMETHODS_ISSET_ID = 2;
  private static final int __COUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CYCLE_NUM, new org.apache.thrift.meta_data.FieldMetaData("cycleNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMINDER_DT, new org.apache.thrift.meta_data.FieldMetaData("reminderDt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMINDER_USER, new org.apache.thrift.meta_data.FieldMetaData("reminderUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CT_METHODS, new org.apache.thrift.meta_data.FieldMetaData("ctMethods", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("subject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionRecordDto.class, metaDataMap);
  }

  public CollectionRecordDto() {
  }

  public CollectionRecordDto(
    int pid,
    int cycleNum,
    String reminderDt,
    String reminderUser,
    int ctMethods,
    String subject,
    String content,
    int count)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    this.reminderDt = reminderDt;
    this.reminderUser = reminderUser;
    this.ctMethods = ctMethods;
    setCtMethodsIsSet(true);
    this.subject = subject;
    this.content = content;
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionRecordDto(CollectionRecordDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.cycleNum = other.cycleNum;
    if (other.isSetReminderDt()) {
      this.reminderDt = other.reminderDt;
    }
    if (other.isSetReminderUser()) {
      this.reminderUser = other.reminderUser;
    }
    this.ctMethods = other.ctMethods;
    if (other.isSetSubject()) {
      this.subject = other.subject;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    this.count = other.count;
  }

  public CollectionRecordDto deepCopy() {
    return new CollectionRecordDto(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setCycleNumIsSet(false);
    this.cycleNum = 0;
    this.reminderDt = null;
    this.reminderUser = null;
    setCtMethodsIsSet(false);
    this.ctMethods = 0;
    this.subject = null;
    this.content = null;
    setCountIsSet(false);
    this.count = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CollectionRecordDto setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getCycleNum() {
    return this.cycleNum;
  }

  public CollectionRecordDto setCycleNum(int cycleNum) {
    this.cycleNum = cycleNum;
    setCycleNumIsSet(true);
    return this;
  }

  public void unsetCycleNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  /** Returns true if field cycleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetCycleNum() {
    return EncodingUtils.testBit(__isset_bitfield, __CYCLENUM_ISSET_ID);
  }

  public void setCycleNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CYCLENUM_ISSET_ID, value);
  }

  public String getReminderDt() {
    return this.reminderDt;
  }

  public CollectionRecordDto setReminderDt(String reminderDt) {
    this.reminderDt = reminderDt;
    return this;
  }

  public void unsetReminderDt() {
    this.reminderDt = null;
  }

  /** Returns true if field reminderDt is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderDt() {
    return this.reminderDt != null;
  }

  public void setReminderDtIsSet(boolean value) {
    if (!value) {
      this.reminderDt = null;
    }
  }

  public String getReminderUser() {
    return this.reminderUser;
  }

  public CollectionRecordDto setReminderUser(String reminderUser) {
    this.reminderUser = reminderUser;
    return this;
  }

  public void unsetReminderUser() {
    this.reminderUser = null;
  }

  /** Returns true if field reminderUser is set (has been assigned a value) and false otherwise */
  public boolean isSetReminderUser() {
    return this.reminderUser != null;
  }

  public void setReminderUserIsSet(boolean value) {
    if (!value) {
      this.reminderUser = null;
    }
  }

  public int getCtMethods() {
    return this.ctMethods;
  }

  public CollectionRecordDto setCtMethods(int ctMethods) {
    this.ctMethods = ctMethods;
    setCtMethodsIsSet(true);
    return this;
  }

  public void unsetCtMethods() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CTMETHODS_ISSET_ID);
  }

  /** Returns true if field ctMethods is set (has been assigned a value) and false otherwise */
  public boolean isSetCtMethods() {
    return EncodingUtils.testBit(__isset_bitfield, __CTMETHODS_ISSET_ID);
  }

  public void setCtMethodsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CTMETHODS_ISSET_ID, value);
  }

  public String getSubject() {
    return this.subject;
  }

  public CollectionRecordDto setSubject(String subject) {
    this.subject = subject;
    return this;
  }

  public void unsetSubject() {
    this.subject = null;
  }

  /** Returns true if field subject is set (has been assigned a value) and false otherwise */
  public boolean isSetSubject() {
    return this.subject != null;
  }

  public void setSubjectIsSet(boolean value) {
    if (!value) {
      this.subject = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public CollectionRecordDto setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getCount() {
    return this.count;
  }

  public CollectionRecordDto setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CYCLE_NUM:
      if (value == null) {
        unsetCycleNum();
      } else {
        setCycleNum((Integer)value);
      }
      break;

    case REMINDER_DT:
      if (value == null) {
        unsetReminderDt();
      } else {
        setReminderDt((String)value);
      }
      break;

    case REMINDER_USER:
      if (value == null) {
        unsetReminderUser();
      } else {
        setReminderUser((String)value);
      }
      break;

    case CT_METHODS:
      if (value == null) {
        unsetCtMethods();
      } else {
        setCtMethods((Integer)value);
      }
      break;

    case SUBJECT:
      if (value == null) {
        unsetSubject();
      } else {
        setSubject((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CYCLE_NUM:
      return Integer.valueOf(getCycleNum());

    case REMINDER_DT:
      return getReminderDt();

    case REMINDER_USER:
      return getReminderUser();

    case CT_METHODS:
      return Integer.valueOf(getCtMethods());

    case SUBJECT:
      return getSubject();

    case CONTENT:
      return getContent();

    case COUNT:
      return Integer.valueOf(getCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CYCLE_NUM:
      return isSetCycleNum();
    case REMINDER_DT:
      return isSetReminderDt();
    case REMINDER_USER:
      return isSetReminderUser();
    case CT_METHODS:
      return isSetCtMethods();
    case SUBJECT:
      return isSetSubject();
    case CONTENT:
      return isSetContent();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionRecordDto)
      return this.equals((CollectionRecordDto)that);
    return false;
  }

  public boolean equals(CollectionRecordDto that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cycleNum = true;
    boolean that_present_cycleNum = true;
    if (this_present_cycleNum || that_present_cycleNum) {
      if (!(this_present_cycleNum && that_present_cycleNum))
        return false;
      if (this.cycleNum != that.cycleNum)
        return false;
    }

    boolean this_present_reminderDt = true && this.isSetReminderDt();
    boolean that_present_reminderDt = true && that.isSetReminderDt();
    if (this_present_reminderDt || that_present_reminderDt) {
      if (!(this_present_reminderDt && that_present_reminderDt))
        return false;
      if (!this.reminderDt.equals(that.reminderDt))
        return false;
    }

    boolean this_present_reminderUser = true && this.isSetReminderUser();
    boolean that_present_reminderUser = true && that.isSetReminderUser();
    if (this_present_reminderUser || that_present_reminderUser) {
      if (!(this_present_reminderUser && that_present_reminderUser))
        return false;
      if (!this.reminderUser.equals(that.reminderUser))
        return false;
    }

    boolean this_present_ctMethods = true;
    boolean that_present_ctMethods = true;
    if (this_present_ctMethods || that_present_ctMethods) {
      if (!(this_present_ctMethods && that_present_ctMethods))
        return false;
      if (this.ctMethods != that.ctMethods)
        return false;
    }

    boolean this_present_subject = true && this.isSetSubject();
    boolean that_present_subject = true && that.isSetSubject();
    if (this_present_subject || that_present_subject) {
      if (!(this_present_subject && that_present_subject))
        return false;
      if (!this.subject.equals(that.subject))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cycleNum = true;
    list.add(present_cycleNum);
    if (present_cycleNum)
      list.add(cycleNum);

    boolean present_reminderDt = true && (isSetReminderDt());
    list.add(present_reminderDt);
    if (present_reminderDt)
      list.add(reminderDt);

    boolean present_reminderUser = true && (isSetReminderUser());
    list.add(present_reminderUser);
    if (present_reminderUser)
      list.add(reminderUser);

    boolean present_ctMethods = true;
    list.add(present_ctMethods);
    if (present_ctMethods)
      list.add(ctMethods);

    boolean present_subject = true && (isSetSubject());
    list.add(present_subject);
    if (present_subject)
      list.add(subject);

    boolean present_content = true && (isSetContent());
    list.add(present_content);
    if (present_content)
      list.add(content);

    boolean present_count = true;
    list.add(present_count);
    if (present_count)
      list.add(count);

    return list.hashCode();
  }

  @Override
  public int compareTo(CollectionRecordDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCycleNum()).compareTo(other.isSetCycleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCycleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cycleNum, other.cycleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderDt()).compareTo(other.isSetReminderDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderDt, other.reminderDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReminderUser()).compareTo(other.isSetReminderUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReminderUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reminderUser, other.reminderUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtMethods()).compareTo(other.isSetCtMethods());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtMethods()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctMethods, other.ctMethods);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubject()).compareTo(other.isSetSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subject, other.subject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionRecordDto(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cycleNum:");
    sb.append(this.cycleNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderDt:");
    if (this.reminderDt == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderDt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reminderUser:");
    if (this.reminderUser == null) {
      sb.append("null");
    } else {
      sb.append(this.reminderUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ctMethods:");
    sb.append(this.ctMethods);
    first = false;
    if (!first) sb.append(", ");
    sb.append("subject:");
    if (this.subject == null) {
      sb.append("null");
    } else {
      sb.append(this.subject);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionRecordDtoStandardSchemeFactory implements SchemeFactory {
    public CollectionRecordDtoStandardScheme getScheme() {
      return new CollectionRecordDtoStandardScheme();
    }
  }

  private static class CollectionRecordDtoStandardScheme extends StandardScheme<CollectionRecordDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionRecordDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CYCLE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cycleNum = iprot.readI32();
              struct.setCycleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMINDER_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderDt = iprot.readString();
              struct.setReminderDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMINDER_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reminderUser = iprot.readString();
              struct.setReminderUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CT_METHODS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ctMethods = iprot.readI32();
              struct.setCtMethodsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subject = iprot.readString();
              struct.setSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionRecordDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CYCLE_NUM_FIELD_DESC);
      oprot.writeI32(struct.cycleNum);
      oprot.writeFieldEnd();
      if (struct.reminderDt != null) {
        oprot.writeFieldBegin(REMINDER_DT_FIELD_DESC);
        oprot.writeString(struct.reminderDt);
        oprot.writeFieldEnd();
      }
      if (struct.reminderUser != null) {
        oprot.writeFieldBegin(REMINDER_USER_FIELD_DESC);
        oprot.writeString(struct.reminderUser);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CT_METHODS_FIELD_DESC);
      oprot.writeI32(struct.ctMethods);
      oprot.writeFieldEnd();
      if (struct.subject != null) {
        oprot.writeFieldBegin(SUBJECT_FIELD_DESC);
        oprot.writeString(struct.subject);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionRecordDtoTupleSchemeFactory implements SchemeFactory {
    public CollectionRecordDtoTupleScheme getScheme() {
      return new CollectionRecordDtoTupleScheme();
    }
  }

  private static class CollectionRecordDtoTupleScheme extends TupleScheme<CollectionRecordDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionRecordDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCycleNum()) {
        optionals.set(1);
      }
      if (struct.isSetReminderDt()) {
        optionals.set(2);
      }
      if (struct.isSetReminderUser()) {
        optionals.set(3);
      }
      if (struct.isSetCtMethods()) {
        optionals.set(4);
      }
      if (struct.isSetSubject()) {
        optionals.set(5);
      }
      if (struct.isSetContent()) {
        optionals.set(6);
      }
      if (struct.isSetCount()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCycleNum()) {
        oprot.writeI32(struct.cycleNum);
      }
      if (struct.isSetReminderDt()) {
        oprot.writeString(struct.reminderDt);
      }
      if (struct.isSetReminderUser()) {
        oprot.writeString(struct.reminderUser);
      }
      if (struct.isSetCtMethods()) {
        oprot.writeI32(struct.ctMethods);
      }
      if (struct.isSetSubject()) {
        oprot.writeString(struct.subject);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionRecordDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cycleNum = iprot.readI32();
        struct.setCycleNumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reminderDt = iprot.readString();
        struct.setReminderDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reminderUser = iprot.readString();
        struct.setReminderUserIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ctMethods = iprot.readI32();
        struct.setCtMethodsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subject = iprot.readString();
        struct.setSubjectIsSet(true);
      }
      if (incoming.get(6)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(7)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
    }
  }

}


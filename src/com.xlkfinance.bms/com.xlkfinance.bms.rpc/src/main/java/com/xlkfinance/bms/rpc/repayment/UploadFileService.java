/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.repayment;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-12-19")
public class UploadFileService {

  public interface Iface {

    public int uploadassBaseFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RegAdvapplyFileview> queryAssBaseFile(int baseId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int uploadBaddealFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public List<RegAdvapplyFileview> queryBaddealFile(int badId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateAdvLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateACgLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

    public int updateFeedLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void uploadassBaseFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryAssBaseFile(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void uploadBaddealFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryBaddealFile(int badId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateAdvLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateACgLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateFeedLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int uploadassBaseFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_uploadassBaseFile(uploadinstAdvapplyBaseDTO);
      return recv_uploadassBaseFile();
    }

    public void send_uploadassBaseFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      uploadassBaseFile_args args = new uploadassBaseFile_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("uploadassBaseFile", args);
    }

    public int recv_uploadassBaseFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      uploadassBaseFile_result result = new uploadassBaseFile_result();
      receiveBase(result, "uploadassBaseFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadassBaseFile failed: unknown result");
    }

    public List<RegAdvapplyFileview> queryAssBaseFile(int baseId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryAssBaseFile(baseId);
      return recv_queryAssBaseFile();
    }

    public void send_queryAssBaseFile(int baseId) throws org.apache.thrift.TException
    {
      queryAssBaseFile_args args = new queryAssBaseFile_args();
      args.setBaseId(baseId);
      sendBase("queryAssBaseFile", args);
    }

    public List<RegAdvapplyFileview> recv_queryAssBaseFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryAssBaseFile_result result = new queryAssBaseFile_result();
      receiveBase(result, "queryAssBaseFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAssBaseFile failed: unknown result");
    }

    public int uploadBaddealFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_uploadBaddealFile(uploadinstAdvapplyBaseDTO);
      return recv_uploadBaddealFile();
    }

    public void send_uploadBaddealFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      uploadBaddealFile_args args = new uploadBaddealFile_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("uploadBaddealFile", args);
    }

    public int recv_uploadBaddealFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      uploadBaddealFile_result result = new uploadBaddealFile_result();
      receiveBase(result, "uploadBaddealFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadBaddealFile failed: unknown result");
    }

    public List<RegAdvapplyFileview> queryBaddealFile(int badId) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_queryBaddealFile(badId);
      return recv_queryBaddealFile();
    }

    public void send_queryBaddealFile(int badId) throws org.apache.thrift.TException
    {
      queryBaddealFile_args args = new queryBaddealFile_args();
      args.setBadId(badId);
      sendBase("queryBaddealFile", args);
    }

    public List<RegAdvapplyFileview> recv_queryBaddealFile() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      queryBaddealFile_result result = new queryBaddealFile_result();
      receiveBase(result, "queryBaddealFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryBaddealFile failed: unknown result");
    }

    public int updateAdvLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateAdvLoadFileInfo(uploadinstAdvapplyBaseDTO);
      return recv_updateAdvLoadFileInfo();
    }

    public void send_updateAdvLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      updateAdvLoadFileInfo_args args = new updateAdvLoadFileInfo_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("updateAdvLoadFileInfo", args);
    }

    public int recv_updateAdvLoadFileInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateAdvLoadFileInfo_result result = new updateAdvLoadFileInfo_result();
      receiveBase(result, "updateAdvLoadFileInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAdvLoadFileInfo failed: unknown result");
    }

    public int updateACgLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateACgLoadFileInfo(uploadinstAdvapplyBaseDTO);
      return recv_updateACgLoadFileInfo();
    }

    public void send_updateACgLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      updateACgLoadFileInfo_args args = new updateACgLoadFileInfo_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("updateACgLoadFileInfo", args);
    }

    public int recv_updateACgLoadFileInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateACgLoadFileInfo_result result = new updateACgLoadFileInfo_result();
      receiveBase(result, "updateACgLoadFileInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateACgLoadFileInfo failed: unknown result");
    }

    public int updateFeedLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      send_updateFeedLoadFileInfo(uploadinstAdvapplyBaseDTO);
      return recv_updateFeedLoadFileInfo();
    }

    public void send_updateFeedLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) throws org.apache.thrift.TException
    {
      updateFeedLoadFileInfo_args args = new updateFeedLoadFileInfo_args();
      args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
      sendBase("updateFeedLoadFileInfo", args);
    }

    public int recv_updateFeedLoadFileInfo() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException
    {
      updateFeedLoadFileInfo_result result = new updateFeedLoadFileInfo_result();
      receiveBase(result, "updateFeedLoadFileInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateFeedLoadFileInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void uploadassBaseFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadassBaseFile_call method_call = new uploadassBaseFile_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadassBaseFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public uploadassBaseFile_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadassBaseFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadassBaseFile_args args = new uploadassBaseFile_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadassBaseFile();
      }
    }

    public void queryAssBaseFile(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAssBaseFile_call method_call = new queryAssBaseFile_call(baseId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAssBaseFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int baseId;
      public queryAssBaseFile_call(int baseId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseId = baseId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAssBaseFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAssBaseFile_args args = new queryAssBaseFile_args();
        args.setBaseId(baseId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RegAdvapplyFileview> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAssBaseFile();
      }
    }

    public void uploadBaddealFile(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadBaddealFile_call method_call = new uploadBaddealFile_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadBaddealFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public uploadBaddealFile_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadBaddealFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadBaddealFile_args args = new uploadBaddealFile_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadBaddealFile();
      }
    }

    public void queryBaddealFile(int badId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryBaddealFile_call method_call = new queryBaddealFile_call(badId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryBaddealFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int badId;
      public queryBaddealFile_call(int badId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.badId = badId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryBaddealFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryBaddealFile_args args = new queryBaddealFile_args();
        args.setBadId(badId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RegAdvapplyFileview> getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryBaddealFile();
      }
    }

    public void updateAdvLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAdvLoadFileInfo_call method_call = new updateAdvLoadFileInfo_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAdvLoadFileInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public updateAdvLoadFileInfo_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAdvLoadFileInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAdvLoadFileInfo_args args = new updateAdvLoadFileInfo_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAdvLoadFileInfo();
      }
    }

    public void updateACgLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateACgLoadFileInfo_call method_call = new updateACgLoadFileInfo_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateACgLoadFileInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public updateACgLoadFileInfo_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateACgLoadFileInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateACgLoadFileInfo_args args = new updateACgLoadFileInfo_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateACgLoadFileInfo();
      }
    }

    public void updateFeedLoadFileInfo(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateFeedLoadFileInfo_call method_call = new updateFeedLoadFileInfo_call(uploadinstAdvapplyBaseDTO, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateFeedLoadFileInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO;
      public updateFeedLoadFileInfo_call(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateFeedLoadFileInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateFeedLoadFileInfo_args args = new updateFeedLoadFileInfo_args();
        args.setUploadinstAdvapplyBaseDTO(uploadinstAdvapplyBaseDTO);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws com.xlkfinance.bms.rpc.common.ThriftServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateFeedLoadFileInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("uploadassBaseFile", new uploadassBaseFile());
      processMap.put("queryAssBaseFile", new queryAssBaseFile());
      processMap.put("uploadBaddealFile", new uploadBaddealFile());
      processMap.put("queryBaddealFile", new queryBaddealFile());
      processMap.put("updateAdvLoadFileInfo", new updateAdvLoadFileInfo());
      processMap.put("updateACgLoadFileInfo", new updateACgLoadFileInfo());
      processMap.put("updateFeedLoadFileInfo", new updateFeedLoadFileInfo());
      return processMap;
    }

    public static class uploadassBaseFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadassBaseFile_args> {
      public uploadassBaseFile() {
        super("uploadassBaseFile");
      }

      public uploadassBaseFile_args getEmptyArgsInstance() {
        return new uploadassBaseFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadassBaseFile_result getResult(I iface, uploadassBaseFile_args args) throws org.apache.thrift.TException {
        uploadassBaseFile_result result = new uploadassBaseFile_result();
        try {
          result.success = iface.uploadassBaseFile(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryAssBaseFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAssBaseFile_args> {
      public queryAssBaseFile() {
        super("queryAssBaseFile");
      }

      public queryAssBaseFile_args getEmptyArgsInstance() {
        return new queryAssBaseFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAssBaseFile_result getResult(I iface, queryAssBaseFile_args args) throws org.apache.thrift.TException {
        queryAssBaseFile_result result = new queryAssBaseFile_result();
        try {
          result.success = iface.queryAssBaseFile(args.baseId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class uploadBaddealFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadBaddealFile_args> {
      public uploadBaddealFile() {
        super("uploadBaddealFile");
      }

      public uploadBaddealFile_args getEmptyArgsInstance() {
        return new uploadBaddealFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadBaddealFile_result getResult(I iface, uploadBaddealFile_args args) throws org.apache.thrift.TException {
        uploadBaddealFile_result result = new uploadBaddealFile_result();
        try {
          result.success = iface.uploadBaddealFile(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryBaddealFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryBaddealFile_args> {
      public queryBaddealFile() {
        super("queryBaddealFile");
      }

      public queryBaddealFile_args getEmptyArgsInstance() {
        return new queryBaddealFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryBaddealFile_result getResult(I iface, queryBaddealFile_args args) throws org.apache.thrift.TException {
        queryBaddealFile_result result = new queryBaddealFile_result();
        try {
          result.success = iface.queryBaddealFile(args.badId);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateAdvLoadFileInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAdvLoadFileInfo_args> {
      public updateAdvLoadFileInfo() {
        super("updateAdvLoadFileInfo");
      }

      public updateAdvLoadFileInfo_args getEmptyArgsInstance() {
        return new updateAdvLoadFileInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAdvLoadFileInfo_result getResult(I iface, updateAdvLoadFileInfo_args args) throws org.apache.thrift.TException {
        updateAdvLoadFileInfo_result result = new updateAdvLoadFileInfo_result();
        try {
          result.success = iface.updateAdvLoadFileInfo(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateACgLoadFileInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateACgLoadFileInfo_args> {
      public updateACgLoadFileInfo() {
        super("updateACgLoadFileInfo");
      }

      public updateACgLoadFileInfo_args getEmptyArgsInstance() {
        return new updateACgLoadFileInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateACgLoadFileInfo_result getResult(I iface, updateACgLoadFileInfo_args args) throws org.apache.thrift.TException {
        updateACgLoadFileInfo_result result = new updateACgLoadFileInfo_result();
        try {
          result.success = iface.updateACgLoadFileInfo(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class updateFeedLoadFileInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateFeedLoadFileInfo_args> {
      public updateFeedLoadFileInfo() {
        super("updateFeedLoadFileInfo");
      }

      public updateFeedLoadFileInfo_args getEmptyArgsInstance() {
        return new updateFeedLoadFileInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateFeedLoadFileInfo_result getResult(I iface, updateFeedLoadFileInfo_args args) throws org.apache.thrift.TException {
        updateFeedLoadFileInfo_result result = new updateFeedLoadFileInfo_result();
        try {
          result.success = iface.updateFeedLoadFileInfo(args.uploadinstAdvapplyBaseDTO);
          result.setSuccessIsSet(true);
        } catch (com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("uploadassBaseFile", new uploadassBaseFile());
      processMap.put("queryAssBaseFile", new queryAssBaseFile());
      processMap.put("uploadBaddealFile", new uploadBaddealFile());
      processMap.put("queryBaddealFile", new queryBaddealFile());
      processMap.put("updateAdvLoadFileInfo", new updateAdvLoadFileInfo());
      processMap.put("updateACgLoadFileInfo", new updateACgLoadFileInfo());
      processMap.put("updateFeedLoadFileInfo", new updateFeedLoadFileInfo());
      return processMap;
    }

    public static class uploadassBaseFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadassBaseFile_args, Integer> {
      public uploadassBaseFile() {
        super("uploadassBaseFile");
      }

      public uploadassBaseFile_args getEmptyArgsInstance() {
        return new uploadassBaseFile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            uploadassBaseFile_result result = new uploadassBaseFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadassBaseFile_result result = new uploadassBaseFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadassBaseFile_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.uploadassBaseFile(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class queryAssBaseFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAssBaseFile_args, List<RegAdvapplyFileview>> {
      public queryAssBaseFile() {
        super("queryAssBaseFile");
      }

      public queryAssBaseFile_args getEmptyArgsInstance() {
        return new queryAssBaseFile_args();
      }

      public AsyncMethodCallback<List<RegAdvapplyFileview>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RegAdvapplyFileview>>() { 
          public void onComplete(List<RegAdvapplyFileview> o) {
            queryAssBaseFile_result result = new queryAssBaseFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryAssBaseFile_result result = new queryAssBaseFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAssBaseFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<RegAdvapplyFileview>> resultHandler) throws TException {
        iface.queryAssBaseFile(args.baseId,resultHandler);
      }
    }

    public static class uploadBaddealFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadBaddealFile_args, Integer> {
      public uploadBaddealFile() {
        super("uploadBaddealFile");
      }

      public uploadBaddealFile_args getEmptyArgsInstance() {
        return new uploadBaddealFile_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            uploadBaddealFile_result result = new uploadBaddealFile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            uploadBaddealFile_result result = new uploadBaddealFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadBaddealFile_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.uploadBaddealFile(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class queryBaddealFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryBaddealFile_args, List<RegAdvapplyFileview>> {
      public queryBaddealFile() {
        super("queryBaddealFile");
      }

      public queryBaddealFile_args getEmptyArgsInstance() {
        return new queryBaddealFile_args();
      }

      public AsyncMethodCallback<List<RegAdvapplyFileview>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RegAdvapplyFileview>>() { 
          public void onComplete(List<RegAdvapplyFileview> o) {
            queryBaddealFile_result result = new queryBaddealFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryBaddealFile_result result = new queryBaddealFile_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryBaddealFile_args args, org.apache.thrift.async.AsyncMethodCallback<List<RegAdvapplyFileview>> resultHandler) throws TException {
        iface.queryBaddealFile(args.badId,resultHandler);
      }
    }

    public static class updateAdvLoadFileInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAdvLoadFileInfo_args, Integer> {
      public updateAdvLoadFileInfo() {
        super("updateAdvLoadFileInfo");
      }

      public updateAdvLoadFileInfo_args getEmptyArgsInstance() {
        return new updateAdvLoadFileInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateAdvLoadFileInfo_result result = new updateAdvLoadFileInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateAdvLoadFileInfo_result result = new updateAdvLoadFileInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAdvLoadFileInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateAdvLoadFileInfo(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class updateACgLoadFileInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateACgLoadFileInfo_args, Integer> {
      public updateACgLoadFileInfo() {
        super("updateACgLoadFileInfo");
      }

      public updateACgLoadFileInfo_args getEmptyArgsInstance() {
        return new updateACgLoadFileInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateACgLoadFileInfo_result result = new updateACgLoadFileInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateACgLoadFileInfo_result result = new updateACgLoadFileInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateACgLoadFileInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateACgLoadFileInfo(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

    public static class updateFeedLoadFileInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateFeedLoadFileInfo_args, Integer> {
      public updateFeedLoadFileInfo() {
        super("updateFeedLoadFileInfo");
      }

      public updateFeedLoadFileInfo_args getEmptyArgsInstance() {
        return new updateFeedLoadFileInfo_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            updateFeedLoadFileInfo_result result = new updateFeedLoadFileInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateFeedLoadFileInfo_result result = new updateFeedLoadFileInfo_result();
            if (e instanceof com.xlkfinance.bms.rpc.common.ThriftServiceException) {
                        result.e = (com.xlkfinance.bms.rpc.common.ThriftServiceException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateFeedLoadFileInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.updateFeedLoadFileInfo(args.uploadinstAdvapplyBaseDTO,resultHandler);
      }
    }

  }

  public static class uploadassBaseFile_args implements org.apache.thrift.TBase<uploadassBaseFile_args, uploadassBaseFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadassBaseFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadassBaseFile_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadassBaseFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadassBaseFile_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadassBaseFile_args.class, metaDataMap);
    }

    public uploadassBaseFile_args() {
    }

    public uploadassBaseFile_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadassBaseFile_args(uploadassBaseFile_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public uploadassBaseFile_args deepCopy() {
      return new uploadassBaseFile_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public uploadassBaseFile_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadassBaseFile_args)
        return this.equals((uploadassBaseFile_args)that);
      return false;
    }

    public boolean equals(uploadassBaseFile_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadassBaseFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadassBaseFile_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadassBaseFile_argsStandardSchemeFactory implements SchemeFactory {
      public uploadassBaseFile_argsStandardScheme getScheme() {
        return new uploadassBaseFile_argsStandardScheme();
      }
    }

    private static class uploadassBaseFile_argsStandardScheme extends StandardScheme<uploadassBaseFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadassBaseFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadassBaseFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadassBaseFile_argsTupleSchemeFactory implements SchemeFactory {
      public uploadassBaseFile_argsTupleScheme getScheme() {
        return new uploadassBaseFile_argsTupleScheme();
      }
    }

    private static class uploadassBaseFile_argsTupleScheme extends TupleScheme<uploadassBaseFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadassBaseFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadassBaseFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class uploadassBaseFile_result implements org.apache.thrift.TBase<uploadassBaseFile_result, uploadassBaseFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadassBaseFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadassBaseFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadassBaseFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadassBaseFile_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadassBaseFile_result.class, metaDataMap);
    }

    public uploadassBaseFile_result() {
    }

    public uploadassBaseFile_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadassBaseFile_result(uploadassBaseFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public uploadassBaseFile_result deepCopy() {
      return new uploadassBaseFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public uploadassBaseFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public uploadassBaseFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadassBaseFile_result)
        return this.equals((uploadassBaseFile_result)that);
      return false;
    }

    public boolean equals(uploadassBaseFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadassBaseFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadassBaseFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadassBaseFile_resultStandardSchemeFactory implements SchemeFactory {
      public uploadassBaseFile_resultStandardScheme getScheme() {
        return new uploadassBaseFile_resultStandardScheme();
      }
    }

    private static class uploadassBaseFile_resultStandardScheme extends StandardScheme<uploadassBaseFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadassBaseFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadassBaseFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadassBaseFile_resultTupleSchemeFactory implements SchemeFactory {
      public uploadassBaseFile_resultTupleScheme getScheme() {
        return new uploadassBaseFile_resultTupleScheme();
      }
    }

    private static class uploadassBaseFile_resultTupleScheme extends TupleScheme<uploadassBaseFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadassBaseFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadassBaseFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryAssBaseFile_args implements org.apache.thrift.TBase<queryAssBaseFile_args, queryAssBaseFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAssBaseFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAssBaseFile_args");

    private static final org.apache.thrift.protocol.TField BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("baseId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAssBaseFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAssBaseFile_argsTupleSchemeFactory());
    }

    public int baseId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_ID((short)1, "baseId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_ID
            return BASE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BASEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("baseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAssBaseFile_args.class, metaDataMap);
    }

    public queryAssBaseFile_args() {
    }

    public queryAssBaseFile_args(
      int baseId)
    {
      this();
      this.baseId = baseId;
      setBaseIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAssBaseFile_args(queryAssBaseFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.baseId = other.baseId;
    }

    public queryAssBaseFile_args deepCopy() {
      return new queryAssBaseFile_args(this);
    }

    @Override
    public void clear() {
      setBaseIdIsSet(false);
      this.baseId = 0;
    }

    public int getBaseId() {
      return this.baseId;
    }

    public queryAssBaseFile_args setBaseId(int baseId) {
      this.baseId = baseId;
      setBaseIdIsSet(true);
      return this;
    }

    public void unsetBaseId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    /** Returns true if field baseId is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseId() {
      return EncodingUtils.testBit(__isset_bitfield, __BASEID_ISSET_ID);
    }

    public void setBaseIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BASE_ID:
        if (value == null) {
          unsetBaseId();
        } else {
          setBaseId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_ID:
        return Integer.valueOf(getBaseId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BASE_ID:
        return isSetBaseId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAssBaseFile_args)
        return this.equals((queryAssBaseFile_args)that);
      return false;
    }

    public boolean equals(queryAssBaseFile_args that) {
      if (that == null)
        return false;

      boolean this_present_baseId = true;
      boolean that_present_baseId = true;
      if (this_present_baseId || that_present_baseId) {
        if (!(this_present_baseId && that_present_baseId))
          return false;
        if (this.baseId != that.baseId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_baseId = true;
      list.add(present_baseId);
      if (present_baseId)
        list.add(baseId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAssBaseFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBaseId()).compareTo(other.isSetBaseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseId, other.baseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAssBaseFile_args(");
      boolean first = true;

      sb.append("baseId:");
      sb.append(this.baseId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAssBaseFile_argsStandardSchemeFactory implements SchemeFactory {
      public queryAssBaseFile_argsStandardScheme getScheme() {
        return new queryAssBaseFile_argsStandardScheme();
      }
    }

    private static class queryAssBaseFile_argsStandardScheme extends StandardScheme<queryAssBaseFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAssBaseFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.baseId = iprot.readI32();
                struct.setBaseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAssBaseFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BASE_ID_FIELD_DESC);
        oprot.writeI32(struct.baseId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAssBaseFile_argsTupleSchemeFactory implements SchemeFactory {
      public queryAssBaseFile_argsTupleScheme getScheme() {
        return new queryAssBaseFile_argsTupleScheme();
      }
    }

    private static class queryAssBaseFile_argsTupleScheme extends TupleScheme<queryAssBaseFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAssBaseFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBaseId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBaseId()) {
          oprot.writeI32(struct.baseId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAssBaseFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.baseId = iprot.readI32();
          struct.setBaseIdIsSet(true);
        }
      }
    }

  }

  public static class queryAssBaseFile_result implements org.apache.thrift.TBase<queryAssBaseFile_result, queryAssBaseFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAssBaseFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAssBaseFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryAssBaseFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryAssBaseFile_resultTupleSchemeFactory());
    }

    public List<RegAdvapplyFileview> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegAdvapplyFileview.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAssBaseFile_result.class, metaDataMap);
    }

    public queryAssBaseFile_result() {
    }

    public queryAssBaseFile_result(
      List<RegAdvapplyFileview> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAssBaseFile_result(queryAssBaseFile_result other) {
      if (other.isSetSuccess()) {
        List<RegAdvapplyFileview> __this__success = new ArrayList<RegAdvapplyFileview>(other.success.size());
        for (RegAdvapplyFileview other_element : other.success) {
          __this__success.add(new RegAdvapplyFileview(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryAssBaseFile_result deepCopy() {
      return new queryAssBaseFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RegAdvapplyFileview> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RegAdvapplyFileview elem) {
      if (this.success == null) {
        this.success = new ArrayList<RegAdvapplyFileview>();
      }
      this.success.add(elem);
    }

    public List<RegAdvapplyFileview> getSuccess() {
      return this.success;
    }

    public queryAssBaseFile_result setSuccess(List<RegAdvapplyFileview> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryAssBaseFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RegAdvapplyFileview>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAssBaseFile_result)
        return this.equals((queryAssBaseFile_result)that);
      return false;
    }

    public boolean equals(queryAssBaseFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryAssBaseFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryAssBaseFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAssBaseFile_resultStandardSchemeFactory implements SchemeFactory {
      public queryAssBaseFile_resultStandardScheme getScheme() {
        return new queryAssBaseFile_resultStandardScheme();
      }
    }

    private static class queryAssBaseFile_resultStandardScheme extends StandardScheme<queryAssBaseFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAssBaseFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new ArrayList<RegAdvapplyFileview>(_list232.size);
                  RegAdvapplyFileview _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new RegAdvapplyFileview();
                    _elem233.read(iprot);
                    struct.success.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAssBaseFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RegAdvapplyFileview _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAssBaseFile_resultTupleSchemeFactory implements SchemeFactory {
      public queryAssBaseFile_resultTupleScheme getScheme() {
        return new queryAssBaseFile_resultTupleScheme();
      }
    }

    private static class queryAssBaseFile_resultTupleScheme extends TupleScheme<queryAssBaseFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAssBaseFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RegAdvapplyFileview _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAssBaseFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RegAdvapplyFileview>(_list237.size);
            RegAdvapplyFileview _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new RegAdvapplyFileview();
              _elem238.read(iprot);
              struct.success.add(_elem238);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class uploadBaddealFile_args implements org.apache.thrift.TBase<uploadBaddealFile_args, uploadBaddealFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadBaddealFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadBaddealFile_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadBaddealFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadBaddealFile_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadBaddealFile_args.class, metaDataMap);
    }

    public uploadBaddealFile_args() {
    }

    public uploadBaddealFile_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadBaddealFile_args(uploadBaddealFile_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public uploadBaddealFile_args deepCopy() {
      return new uploadBaddealFile_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public uploadBaddealFile_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadBaddealFile_args)
        return this.equals((uploadBaddealFile_args)that);
      return false;
    }

    public boolean equals(uploadBaddealFile_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadBaddealFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadBaddealFile_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadBaddealFile_argsStandardSchemeFactory implements SchemeFactory {
      public uploadBaddealFile_argsStandardScheme getScheme() {
        return new uploadBaddealFile_argsStandardScheme();
      }
    }

    private static class uploadBaddealFile_argsStandardScheme extends StandardScheme<uploadBaddealFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadBaddealFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadBaddealFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadBaddealFile_argsTupleSchemeFactory implements SchemeFactory {
      public uploadBaddealFile_argsTupleScheme getScheme() {
        return new uploadBaddealFile_argsTupleScheme();
      }
    }

    private static class uploadBaddealFile_argsTupleScheme extends TupleScheme<uploadBaddealFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadBaddealFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadBaddealFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class uploadBaddealFile_result implements org.apache.thrift.TBase<uploadBaddealFile_result, uploadBaddealFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadBaddealFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadBaddealFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new uploadBaddealFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new uploadBaddealFile_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadBaddealFile_result.class, metaDataMap);
    }

    public uploadBaddealFile_result() {
    }

    public uploadBaddealFile_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadBaddealFile_result(uploadBaddealFile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public uploadBaddealFile_result deepCopy() {
      return new uploadBaddealFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public uploadBaddealFile_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public uploadBaddealFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadBaddealFile_result)
        return this.equals((uploadBaddealFile_result)that);
      return false;
    }

    public boolean equals(uploadBaddealFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(uploadBaddealFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("uploadBaddealFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadBaddealFile_resultStandardSchemeFactory implements SchemeFactory {
      public uploadBaddealFile_resultStandardScheme getScheme() {
        return new uploadBaddealFile_resultStandardScheme();
      }
    }

    private static class uploadBaddealFile_resultStandardScheme extends StandardScheme<uploadBaddealFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadBaddealFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadBaddealFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadBaddealFile_resultTupleSchemeFactory implements SchemeFactory {
      public uploadBaddealFile_resultTupleScheme getScheme() {
        return new uploadBaddealFile_resultTupleScheme();
      }
    }

    private static class uploadBaddealFile_resultTupleScheme extends TupleScheme<uploadBaddealFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadBaddealFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadBaddealFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class queryBaddealFile_args implements org.apache.thrift.TBase<queryBaddealFile_args, queryBaddealFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryBaddealFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBaddealFile_args");

    private static final org.apache.thrift.protocol.TField BAD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("badId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBaddealFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBaddealFile_argsTupleSchemeFactory());
    }

    public int badId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BAD_ID((short)1, "badId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BAD_ID
            return BAD_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BADID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BAD_ID, new org.apache.thrift.meta_data.FieldMetaData("badId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBaddealFile_args.class, metaDataMap);
    }

    public queryBaddealFile_args() {
    }

    public queryBaddealFile_args(
      int badId)
    {
      this();
      this.badId = badId;
      setBadIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBaddealFile_args(queryBaddealFile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.badId = other.badId;
    }

    public queryBaddealFile_args deepCopy() {
      return new queryBaddealFile_args(this);
    }

    @Override
    public void clear() {
      setBadIdIsSet(false);
      this.badId = 0;
    }

    public int getBadId() {
      return this.badId;
    }

    public queryBaddealFile_args setBadId(int badId) {
      this.badId = badId;
      setBadIdIsSet(true);
      return this;
    }

    public void unsetBadId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BADID_ISSET_ID);
    }

    /** Returns true if field badId is set (has been assigned a value) and false otherwise */
    public boolean isSetBadId() {
      return EncodingUtils.testBit(__isset_bitfield, __BADID_ISSET_ID);
    }

    public void setBadIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BADID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BAD_ID:
        if (value == null) {
          unsetBadId();
        } else {
          setBadId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BAD_ID:
        return Integer.valueOf(getBadId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BAD_ID:
        return isSetBadId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBaddealFile_args)
        return this.equals((queryBaddealFile_args)that);
      return false;
    }

    public boolean equals(queryBaddealFile_args that) {
      if (that == null)
        return false;

      boolean this_present_badId = true;
      boolean that_present_badId = true;
      if (this_present_badId || that_present_badId) {
        if (!(this_present_badId && that_present_badId))
          return false;
        if (this.badId != that.badId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_badId = true;
      list.add(present_badId);
      if (present_badId)
        list.add(badId);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBaddealFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBadId()).compareTo(other.isSetBadId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.badId, other.badId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBaddealFile_args(");
      boolean first = true;

      sb.append("badId:");
      sb.append(this.badId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBaddealFile_argsStandardSchemeFactory implements SchemeFactory {
      public queryBaddealFile_argsStandardScheme getScheme() {
        return new queryBaddealFile_argsStandardScheme();
      }
    }

    private static class queryBaddealFile_argsStandardScheme extends StandardScheme<queryBaddealFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBaddealFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BAD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.badId = iprot.readI32();
                struct.setBadIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBaddealFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(BAD_ID_FIELD_DESC);
        oprot.writeI32(struct.badId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBaddealFile_argsTupleSchemeFactory implements SchemeFactory {
      public queryBaddealFile_argsTupleScheme getScheme() {
        return new queryBaddealFile_argsTupleScheme();
      }
    }

    private static class queryBaddealFile_argsTupleScheme extends TupleScheme<queryBaddealFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBaddealFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBadId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBadId()) {
          oprot.writeI32(struct.badId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBaddealFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.badId = iprot.readI32();
          struct.setBadIdIsSet(true);
        }
      }
    }

  }

  public static class queryBaddealFile_result implements org.apache.thrift.TBase<queryBaddealFile_result, queryBaddealFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryBaddealFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryBaddealFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryBaddealFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryBaddealFile_resultTupleSchemeFactory());
    }

    public List<RegAdvapplyFileview> success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RegAdvapplyFileview.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryBaddealFile_result.class, metaDataMap);
    }

    public queryBaddealFile_result() {
    }

    public queryBaddealFile_result(
      List<RegAdvapplyFileview> success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryBaddealFile_result(queryBaddealFile_result other) {
      if (other.isSetSuccess()) {
        List<RegAdvapplyFileview> __this__success = new ArrayList<RegAdvapplyFileview>(other.success.size());
        for (RegAdvapplyFileview other_element : other.success) {
          __this__success.add(new RegAdvapplyFileview(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public queryBaddealFile_result deepCopy() {
      return new queryBaddealFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RegAdvapplyFileview> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RegAdvapplyFileview elem) {
      if (this.success == null) {
        this.success = new ArrayList<RegAdvapplyFileview>();
      }
      this.success.add(elem);
    }

    public List<RegAdvapplyFileview> getSuccess() {
      return this.success;
    }

    public queryBaddealFile_result setSuccess(List<RegAdvapplyFileview> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public queryBaddealFile_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RegAdvapplyFileview>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryBaddealFile_result)
        return this.equals((queryBaddealFile_result)that);
      return false;
    }

    public boolean equals(queryBaddealFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryBaddealFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryBaddealFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryBaddealFile_resultStandardSchemeFactory implements SchemeFactory {
      public queryBaddealFile_resultStandardScheme getScheme() {
        return new queryBaddealFile_resultStandardScheme();
      }
    }

    private static class queryBaddealFile_resultStandardScheme extends StandardScheme<queryBaddealFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryBaddealFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new ArrayList<RegAdvapplyFileview>(_list240.size);
                  RegAdvapplyFileview _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new RegAdvapplyFileview();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryBaddealFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RegAdvapplyFileview _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryBaddealFile_resultTupleSchemeFactory implements SchemeFactory {
      public queryBaddealFile_resultTupleScheme getScheme() {
        return new queryBaddealFile_resultTupleScheme();
      }
    }

    private static class queryBaddealFile_resultTupleScheme extends TupleScheme<queryBaddealFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryBaddealFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RegAdvapplyFileview _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryBaddealFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RegAdvapplyFileview>(_list245.size);
            RegAdvapplyFileview _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new RegAdvapplyFileview();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateAdvLoadFileInfo_args implements org.apache.thrift.TBase<updateAdvLoadFileInfo_args, updateAdvLoadFileInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdvLoadFileInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdvLoadFileInfo_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAdvLoadFileInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAdvLoadFileInfo_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdvLoadFileInfo_args.class, metaDataMap);
    }

    public updateAdvLoadFileInfo_args() {
    }

    public updateAdvLoadFileInfo_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdvLoadFileInfo_args(updateAdvLoadFileInfo_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public updateAdvLoadFileInfo_args deepCopy() {
      return new updateAdvLoadFileInfo_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public updateAdvLoadFileInfo_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdvLoadFileInfo_args)
        return this.equals((updateAdvLoadFileInfo_args)that);
      return false;
    }

    public boolean equals(updateAdvLoadFileInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAdvLoadFileInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAdvLoadFileInfo_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdvLoadFileInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateAdvLoadFileInfo_argsStandardScheme getScheme() {
        return new updateAdvLoadFileInfo_argsStandardScheme();
      }
    }

    private static class updateAdvLoadFileInfo_argsStandardScheme extends StandardScheme<updateAdvLoadFileInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdvLoadFileInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdvLoadFileInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdvLoadFileInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateAdvLoadFileInfo_argsTupleScheme getScheme() {
        return new updateAdvLoadFileInfo_argsTupleScheme();
      }
    }

    private static class updateAdvLoadFileInfo_argsTupleScheme extends TupleScheme<updateAdvLoadFileInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdvLoadFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdvLoadFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class updateAdvLoadFileInfo_result implements org.apache.thrift.TBase<updateAdvLoadFileInfo_result, updateAdvLoadFileInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdvLoadFileInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdvLoadFileInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateAdvLoadFileInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateAdvLoadFileInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdvLoadFileInfo_result.class, metaDataMap);
    }

    public updateAdvLoadFileInfo_result() {
    }

    public updateAdvLoadFileInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdvLoadFileInfo_result(updateAdvLoadFileInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateAdvLoadFileInfo_result deepCopy() {
      return new updateAdvLoadFileInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateAdvLoadFileInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateAdvLoadFileInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdvLoadFileInfo_result)
        return this.equals((updateAdvLoadFileInfo_result)that);
      return false;
    }

    public boolean equals(updateAdvLoadFileInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateAdvLoadFileInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateAdvLoadFileInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdvLoadFileInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateAdvLoadFileInfo_resultStandardScheme getScheme() {
        return new updateAdvLoadFileInfo_resultStandardScheme();
      }
    }

    private static class updateAdvLoadFileInfo_resultStandardScheme extends StandardScheme<updateAdvLoadFileInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdvLoadFileInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdvLoadFileInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdvLoadFileInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateAdvLoadFileInfo_resultTupleScheme getScheme() {
        return new updateAdvLoadFileInfo_resultTupleScheme();
      }
    }

    private static class updateAdvLoadFileInfo_resultTupleScheme extends TupleScheme<updateAdvLoadFileInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdvLoadFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdvLoadFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateACgLoadFileInfo_args implements org.apache.thrift.TBase<updateACgLoadFileInfo_args, updateACgLoadFileInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateACgLoadFileInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateACgLoadFileInfo_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateACgLoadFileInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateACgLoadFileInfo_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateACgLoadFileInfo_args.class, metaDataMap);
    }

    public updateACgLoadFileInfo_args() {
    }

    public updateACgLoadFileInfo_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateACgLoadFileInfo_args(updateACgLoadFileInfo_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public updateACgLoadFileInfo_args deepCopy() {
      return new updateACgLoadFileInfo_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public updateACgLoadFileInfo_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateACgLoadFileInfo_args)
        return this.equals((updateACgLoadFileInfo_args)that);
      return false;
    }

    public boolean equals(updateACgLoadFileInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateACgLoadFileInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateACgLoadFileInfo_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateACgLoadFileInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateACgLoadFileInfo_argsStandardScheme getScheme() {
        return new updateACgLoadFileInfo_argsStandardScheme();
      }
    }

    private static class updateACgLoadFileInfo_argsStandardScheme extends StandardScheme<updateACgLoadFileInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateACgLoadFileInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateACgLoadFileInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateACgLoadFileInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateACgLoadFileInfo_argsTupleScheme getScheme() {
        return new updateACgLoadFileInfo_argsTupleScheme();
      }
    }

    private static class updateACgLoadFileInfo_argsTupleScheme extends TupleScheme<updateACgLoadFileInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateACgLoadFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateACgLoadFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class updateACgLoadFileInfo_result implements org.apache.thrift.TBase<updateACgLoadFileInfo_result, updateACgLoadFileInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateACgLoadFileInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateACgLoadFileInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateACgLoadFileInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateACgLoadFileInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateACgLoadFileInfo_result.class, metaDataMap);
    }

    public updateACgLoadFileInfo_result() {
    }

    public updateACgLoadFileInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateACgLoadFileInfo_result(updateACgLoadFileInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateACgLoadFileInfo_result deepCopy() {
      return new updateACgLoadFileInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateACgLoadFileInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateACgLoadFileInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateACgLoadFileInfo_result)
        return this.equals((updateACgLoadFileInfo_result)that);
      return false;
    }

    public boolean equals(updateACgLoadFileInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateACgLoadFileInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateACgLoadFileInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateACgLoadFileInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateACgLoadFileInfo_resultStandardScheme getScheme() {
        return new updateACgLoadFileInfo_resultStandardScheme();
      }
    }

    private static class updateACgLoadFileInfo_resultStandardScheme extends StandardScheme<updateACgLoadFileInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateACgLoadFileInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateACgLoadFileInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateACgLoadFileInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateACgLoadFileInfo_resultTupleScheme getScheme() {
        return new updateACgLoadFileInfo_resultTupleScheme();
      }
    }

    private static class updateACgLoadFileInfo_resultTupleScheme extends TupleScheme<updateACgLoadFileInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateACgLoadFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateACgLoadFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class updateFeedLoadFileInfo_args implements org.apache.thrift.TBase<updateFeedLoadFileInfo_args, updateFeedLoadFileInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateFeedLoadFileInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFeedLoadFileInfo_args");

    private static final org.apache.thrift.protocol.TField UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadinstAdvapplyBaseDTO", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFeedLoadFileInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFeedLoadFileInfo_argsTupleSchemeFactory());
    }

    public UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPLOADINST_ADVAPPLY_BASE_DTO((short)1, "uploadinstAdvapplyBaseDTO");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
            return UPLOADINST_ADVAPPLY_BASE_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPLOADINST_ADVAPPLY_BASE_DTO, new org.apache.thrift.meta_data.FieldMetaData("uploadinstAdvapplyBaseDTO", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UploadinstAdvapplyBaseDTO.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFeedLoadFileInfo_args.class, metaDataMap);
    }

    public updateFeedLoadFileInfo_args() {
    }

    public updateFeedLoadFileInfo_args(
      UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO)
    {
      this();
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFeedLoadFileInfo_args(updateFeedLoadFileInfo_args other) {
      if (other.isSetUploadinstAdvapplyBaseDTO()) {
        this.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO(other.uploadinstAdvapplyBaseDTO);
      }
    }

    public updateFeedLoadFileInfo_args deepCopy() {
      return new updateFeedLoadFileInfo_args(this);
    }

    @Override
    public void clear() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    public UploadinstAdvapplyBaseDTO getUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO;
    }

    public updateFeedLoadFileInfo_args setUploadinstAdvapplyBaseDTO(UploadinstAdvapplyBaseDTO uploadinstAdvapplyBaseDTO) {
      this.uploadinstAdvapplyBaseDTO = uploadinstAdvapplyBaseDTO;
      return this;
    }

    public void unsetUploadinstAdvapplyBaseDTO() {
      this.uploadinstAdvapplyBaseDTO = null;
    }

    /** Returns true if field uploadinstAdvapplyBaseDTO is set (has been assigned a value) and false otherwise */
    public boolean isSetUploadinstAdvapplyBaseDTO() {
      return this.uploadinstAdvapplyBaseDTO != null;
    }

    public void setUploadinstAdvapplyBaseDTOIsSet(boolean value) {
      if (!value) {
        this.uploadinstAdvapplyBaseDTO = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        if (value == null) {
          unsetUploadinstAdvapplyBaseDTO();
        } else {
          setUploadinstAdvapplyBaseDTO((UploadinstAdvapplyBaseDTO)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return getUploadinstAdvapplyBaseDTO();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPLOADINST_ADVAPPLY_BASE_DTO:
        return isSetUploadinstAdvapplyBaseDTO();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFeedLoadFileInfo_args)
        return this.equals((updateFeedLoadFileInfo_args)that);
      return false;
    }

    public boolean equals(updateFeedLoadFileInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_uploadinstAdvapplyBaseDTO = true && this.isSetUploadinstAdvapplyBaseDTO();
      boolean that_present_uploadinstAdvapplyBaseDTO = true && that.isSetUploadinstAdvapplyBaseDTO();
      if (this_present_uploadinstAdvapplyBaseDTO || that_present_uploadinstAdvapplyBaseDTO) {
        if (!(this_present_uploadinstAdvapplyBaseDTO && that_present_uploadinstAdvapplyBaseDTO))
          return false;
        if (!this.uploadinstAdvapplyBaseDTO.equals(that.uploadinstAdvapplyBaseDTO))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uploadinstAdvapplyBaseDTO = true && (isSetUploadinstAdvapplyBaseDTO());
      list.add(present_uploadinstAdvapplyBaseDTO);
      if (present_uploadinstAdvapplyBaseDTO)
        list.add(uploadinstAdvapplyBaseDTO);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFeedLoadFileInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUploadinstAdvapplyBaseDTO()).compareTo(other.isSetUploadinstAdvapplyBaseDTO());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUploadinstAdvapplyBaseDTO()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadinstAdvapplyBaseDTO, other.uploadinstAdvapplyBaseDTO);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFeedLoadFileInfo_args(");
      boolean first = true;

      sb.append("uploadinstAdvapplyBaseDTO:");
      if (this.uploadinstAdvapplyBaseDTO == null) {
        sb.append("null");
      } else {
        sb.append(this.uploadinstAdvapplyBaseDTO);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (uploadinstAdvapplyBaseDTO != null) {
        uploadinstAdvapplyBaseDTO.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFeedLoadFileInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateFeedLoadFileInfo_argsStandardScheme getScheme() {
        return new updateFeedLoadFileInfo_argsStandardScheme();
      }
    }

    private static class updateFeedLoadFileInfo_argsStandardScheme extends StandardScheme<updateFeedLoadFileInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFeedLoadFileInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPLOADINST_ADVAPPLY_BASE_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
                struct.uploadinstAdvapplyBaseDTO.read(iprot);
                struct.setUploadinstAdvapplyBaseDTOIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFeedLoadFileInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uploadinstAdvapplyBaseDTO != null) {
          oprot.writeFieldBegin(UPLOADINST_ADVAPPLY_BASE_DTO_FIELD_DESC);
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFeedLoadFileInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateFeedLoadFileInfo_argsTupleScheme getScheme() {
        return new updateFeedLoadFileInfo_argsTupleScheme();
      }
    }

    private static class updateFeedLoadFileInfo_argsTupleScheme extends TupleScheme<updateFeedLoadFileInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFeedLoadFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUploadinstAdvapplyBaseDTO()) {
          struct.uploadinstAdvapplyBaseDTO.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFeedLoadFileInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uploadinstAdvapplyBaseDTO = new UploadinstAdvapplyBaseDTO();
          struct.uploadinstAdvapplyBaseDTO.read(iprot);
          struct.setUploadinstAdvapplyBaseDTOIsSet(true);
        }
      }
    }

  }

  public static class updateFeedLoadFileInfo_result implements org.apache.thrift.TBase<updateFeedLoadFileInfo_result, updateFeedLoadFileInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateFeedLoadFileInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateFeedLoadFileInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateFeedLoadFileInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateFeedLoadFileInfo_resultTupleSchemeFactory());
    }

    public int success; // required
    public com.xlkfinance.bms.rpc.common.ThriftServiceException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateFeedLoadFileInfo_result.class, metaDataMap);
    }

    public updateFeedLoadFileInfo_result() {
    }

    public updateFeedLoadFileInfo_result(
      int success,
      com.xlkfinance.bms.rpc.common.ThriftServiceException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateFeedLoadFileInfo_result(updateFeedLoadFileInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException(other.e);
      }
    }

    public updateFeedLoadFileInfo_result deepCopy() {
      return new updateFeedLoadFileInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public updateFeedLoadFileInfo_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.xlkfinance.bms.rpc.common.ThriftServiceException getE() {
      return this.e;
    }

    public updateFeedLoadFileInfo_result setE(com.xlkfinance.bms.rpc.common.ThriftServiceException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.xlkfinance.bms.rpc.common.ThriftServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateFeedLoadFileInfo_result)
        return this.equals((updateFeedLoadFileInfo_result)that);
      return false;
    }

    public boolean equals(updateFeedLoadFileInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateFeedLoadFileInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateFeedLoadFileInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateFeedLoadFileInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateFeedLoadFileInfo_resultStandardScheme getScheme() {
        return new updateFeedLoadFileInfo_resultStandardScheme();
      }
    }

    private static class updateFeedLoadFileInfo_resultStandardScheme extends StandardScheme<updateFeedLoadFileInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateFeedLoadFileInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateFeedLoadFileInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateFeedLoadFileInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateFeedLoadFileInfo_resultTupleScheme getScheme() {
        return new updateFeedLoadFileInfo_resultTupleScheme();
      }
    }

    private static class updateFeedLoadFileInfo_resultTupleScheme extends TupleScheme<updateFeedLoadFileInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateFeedLoadFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateFeedLoadFileInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.xlkfinance.bms.rpc.common.ThriftServiceException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

}

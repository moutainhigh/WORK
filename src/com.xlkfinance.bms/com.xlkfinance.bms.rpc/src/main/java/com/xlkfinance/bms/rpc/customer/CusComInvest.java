/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class CusComInvest implements org.apache.thrift.TBase<CusComInvest, CusComInvest._Fields>, java.io.Serializable, Cloneable, Comparable<CusComInvest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusComInvest");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CUS_COM_BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("cusComBase", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INV_OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("invObj", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INV_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("invMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField INV_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("invWay", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PRE_EARN_FIELD_DESC = new org.apache.thrift.protocol.TField("preEarn", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField INV_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("invStartDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INV_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("invEndDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REAL_EARN_FIELD_DESC = new org.apache.thrift.protocol.TField("realEarn", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField PRIOR_PRE_EARN_FIELD_DESC = new org.apache.thrift.protocol.TField("priorPreEarn", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField PRIOR_REAL_EARN_FIELD_DESC = new org.apache.thrift.protocol.TField("priorRealEarn", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField PAY_INVEST_FIELD_DESC = new org.apache.thrift.protocol.TField("payInvest", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField INV_EARN_FIELD_DESC = new org.apache.thrift.protocol.TField("invEarn", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusComInvestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusComInvestTupleSchemeFactory());
  }

  public int pid; // required
  public CusComBase cusComBase; // required
  public String remark; // required
  public String invObj; // required
  public double invMoney; // required
  public int invWay; // required
  public double preEarn; // required
  public String invStartDate; // required
  public String invEndDate; // required
  public double realEarn; // required
  public double priorPreEarn; // required
  public double priorRealEarn; // required
  public double payInvest; // required
  public double invEarn; // required
  public int status; // required
  public int page; // required
  public int rows; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    CUS_COM_BASE((short)2, "cusComBase"),
    REMARK((short)3, "remark"),
    INV_OBJ((short)4, "invObj"),
    INV_MONEY((short)5, "invMoney"),
    INV_WAY((short)6, "invWay"),
    PRE_EARN((short)7, "preEarn"),
    INV_START_DATE((short)8, "invStartDate"),
    INV_END_DATE((short)9, "invEndDate"),
    REAL_EARN((short)10, "realEarn"),
    PRIOR_PRE_EARN((short)11, "priorPreEarn"),
    PRIOR_REAL_EARN((short)12, "priorRealEarn"),
    PAY_INVEST((short)13, "payInvest"),
    INV_EARN((short)14, "invEarn"),
    STATUS((short)15, "status"),
    PAGE((short)16, "page"),
    ROWS((short)17, "rows");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // CUS_COM_BASE
          return CUS_COM_BASE;
        case 3: // REMARK
          return REMARK;
        case 4: // INV_OBJ
          return INV_OBJ;
        case 5: // INV_MONEY
          return INV_MONEY;
        case 6: // INV_WAY
          return INV_WAY;
        case 7: // PRE_EARN
          return PRE_EARN;
        case 8: // INV_START_DATE
          return INV_START_DATE;
        case 9: // INV_END_DATE
          return INV_END_DATE;
        case 10: // REAL_EARN
          return REAL_EARN;
        case 11: // PRIOR_PRE_EARN
          return PRIOR_PRE_EARN;
        case 12: // PRIOR_REAL_EARN
          return PRIOR_REAL_EARN;
        case 13: // PAY_INVEST
          return PAY_INVEST;
        case 14: // INV_EARN
          return INV_EARN;
        case 15: // STATUS
          return STATUS;
        case 16: // PAGE
          return PAGE;
        case 17: // ROWS
          return ROWS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __INVMONEY_ISSET_ID = 1;
  private static final int __INVWAY_ISSET_ID = 2;
  private static final int __PREEARN_ISSET_ID = 3;
  private static final int __REALEARN_ISSET_ID = 4;
  private static final int __PRIORPREEARN_ISSET_ID = 5;
  private static final int __PRIORREALEARN_ISSET_ID = 6;
  private static final int __PAYINVEST_ISSET_ID = 7;
  private static final int __INVEARN_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private static final int __PAGE_ISSET_ID = 10;
  private static final int __ROWS_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CUS_COM_BASE, new org.apache.thrift.meta_data.FieldMetaData("cusComBase", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CusComBase.class)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INV_OBJ, new org.apache.thrift.meta_data.FieldMetaData("invObj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INV_MONEY, new org.apache.thrift.meta_data.FieldMetaData("invMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INV_WAY, new org.apache.thrift.meta_data.FieldMetaData("invWay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRE_EARN, new org.apache.thrift.meta_data.FieldMetaData("preEarn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INV_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("invStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INV_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("invEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REAL_EARN, new org.apache.thrift.meta_data.FieldMetaData("realEarn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRIOR_PRE_EARN, new org.apache.thrift.meta_data.FieldMetaData("priorPreEarn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRIOR_REAL_EARN, new org.apache.thrift.meta_data.FieldMetaData("priorRealEarn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PAY_INVEST, new org.apache.thrift.meta_data.FieldMetaData("payInvest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INV_EARN, new org.apache.thrift.meta_data.FieldMetaData("invEarn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusComInvest.class, metaDataMap);
  }

  public CusComInvest() {
  }

  public CusComInvest(
    int pid,
    CusComBase cusComBase,
    String remark,
    String invObj,
    double invMoney,
    int invWay,
    double preEarn,
    String invStartDate,
    String invEndDate,
    double realEarn,
    double priorPreEarn,
    double priorRealEarn,
    double payInvest,
    double invEarn,
    int status,
    int page,
    int rows)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.cusComBase = cusComBase;
    this.remark = remark;
    this.invObj = invObj;
    this.invMoney = invMoney;
    setInvMoneyIsSet(true);
    this.invWay = invWay;
    setInvWayIsSet(true);
    this.preEarn = preEarn;
    setPreEarnIsSet(true);
    this.invStartDate = invStartDate;
    this.invEndDate = invEndDate;
    this.realEarn = realEarn;
    setRealEarnIsSet(true);
    this.priorPreEarn = priorPreEarn;
    setPriorPreEarnIsSet(true);
    this.priorRealEarn = priorRealEarn;
    setPriorRealEarnIsSet(true);
    this.payInvest = payInvest;
    setPayInvestIsSet(true);
    this.invEarn = invEarn;
    setInvEarnIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusComInvest(CusComInvest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    if (other.isSetCusComBase()) {
      this.cusComBase = new CusComBase(other.cusComBase);
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetInvObj()) {
      this.invObj = other.invObj;
    }
    this.invMoney = other.invMoney;
    this.invWay = other.invWay;
    this.preEarn = other.preEarn;
    if (other.isSetInvStartDate()) {
      this.invStartDate = other.invStartDate;
    }
    if (other.isSetInvEndDate()) {
      this.invEndDate = other.invEndDate;
    }
    this.realEarn = other.realEarn;
    this.priorPreEarn = other.priorPreEarn;
    this.priorRealEarn = other.priorRealEarn;
    this.payInvest = other.payInvest;
    this.invEarn = other.invEarn;
    this.status = other.status;
    this.page = other.page;
    this.rows = other.rows;
  }

  public CusComInvest deepCopy() {
    return new CusComInvest(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    this.cusComBase = null;
    this.remark = null;
    this.invObj = null;
    setInvMoneyIsSet(false);
    this.invMoney = 0.0;
    setInvWayIsSet(false);
    this.invWay = 0;
    setPreEarnIsSet(false);
    this.preEarn = 0.0;
    this.invStartDate = null;
    this.invEndDate = null;
    setRealEarnIsSet(false);
    this.realEarn = 0.0;
    setPriorPreEarnIsSet(false);
    this.priorPreEarn = 0.0;
    setPriorRealEarnIsSet(false);
    this.priorRealEarn = 0.0;
    setPayInvestIsSet(false);
    this.payInvest = 0.0;
    setInvEarnIsSet(false);
    this.invEarn = 0.0;
    setStatusIsSet(false);
    this.status = 0;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
  }

  public int getPid() {
    return this.pid;
  }

  public CusComInvest setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public CusComBase getCusComBase() {
    return this.cusComBase;
  }

  public CusComInvest setCusComBase(CusComBase cusComBase) {
    this.cusComBase = cusComBase;
    return this;
  }

  public void unsetCusComBase() {
    this.cusComBase = null;
  }

  /** Returns true if field cusComBase is set (has been assigned a value) and false otherwise */
  public boolean isSetCusComBase() {
    return this.cusComBase != null;
  }

  public void setCusComBaseIsSet(boolean value) {
    if (!value) {
      this.cusComBase = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public CusComInvest setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public String getInvObj() {
    return this.invObj;
  }

  public CusComInvest setInvObj(String invObj) {
    this.invObj = invObj;
    return this;
  }

  public void unsetInvObj() {
    this.invObj = null;
  }

  /** Returns true if field invObj is set (has been assigned a value) and false otherwise */
  public boolean isSetInvObj() {
    return this.invObj != null;
  }

  public void setInvObjIsSet(boolean value) {
    if (!value) {
      this.invObj = null;
    }
  }

  public double getInvMoney() {
    return this.invMoney;
  }

  public CusComInvest setInvMoney(double invMoney) {
    this.invMoney = invMoney;
    setInvMoneyIsSet(true);
    return this;
  }

  public void unsetInvMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVMONEY_ISSET_ID);
  }

  /** Returns true if field invMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetInvMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __INVMONEY_ISSET_ID);
  }

  public void setInvMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVMONEY_ISSET_ID, value);
  }

  public int getInvWay() {
    return this.invWay;
  }

  public CusComInvest setInvWay(int invWay) {
    this.invWay = invWay;
    setInvWayIsSet(true);
    return this;
  }

  public void unsetInvWay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVWAY_ISSET_ID);
  }

  /** Returns true if field invWay is set (has been assigned a value) and false otherwise */
  public boolean isSetInvWay() {
    return EncodingUtils.testBit(__isset_bitfield, __INVWAY_ISSET_ID);
  }

  public void setInvWayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVWAY_ISSET_ID, value);
  }

  public double getPreEarn() {
    return this.preEarn;
  }

  public CusComInvest setPreEarn(double preEarn) {
    this.preEarn = preEarn;
    setPreEarnIsSet(true);
    return this;
  }

  public void unsetPreEarn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREEARN_ISSET_ID);
  }

  /** Returns true if field preEarn is set (has been assigned a value) and false otherwise */
  public boolean isSetPreEarn() {
    return EncodingUtils.testBit(__isset_bitfield, __PREEARN_ISSET_ID);
  }

  public void setPreEarnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREEARN_ISSET_ID, value);
  }

  public String getInvStartDate() {
    return this.invStartDate;
  }

  public CusComInvest setInvStartDate(String invStartDate) {
    this.invStartDate = invStartDate;
    return this;
  }

  public void unsetInvStartDate() {
    this.invStartDate = null;
  }

  /** Returns true if field invStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInvStartDate() {
    return this.invStartDate != null;
  }

  public void setInvStartDateIsSet(boolean value) {
    if (!value) {
      this.invStartDate = null;
    }
  }

  public String getInvEndDate() {
    return this.invEndDate;
  }

  public CusComInvest setInvEndDate(String invEndDate) {
    this.invEndDate = invEndDate;
    return this;
  }

  public void unsetInvEndDate() {
    this.invEndDate = null;
  }

  /** Returns true if field invEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetInvEndDate() {
    return this.invEndDate != null;
  }

  public void setInvEndDateIsSet(boolean value) {
    if (!value) {
      this.invEndDate = null;
    }
  }

  public double getRealEarn() {
    return this.realEarn;
  }

  public CusComInvest setRealEarn(double realEarn) {
    this.realEarn = realEarn;
    setRealEarnIsSet(true);
    return this;
  }

  public void unsetRealEarn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REALEARN_ISSET_ID);
  }

  /** Returns true if field realEarn is set (has been assigned a value) and false otherwise */
  public boolean isSetRealEarn() {
    return EncodingUtils.testBit(__isset_bitfield, __REALEARN_ISSET_ID);
  }

  public void setRealEarnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REALEARN_ISSET_ID, value);
  }

  public double getPriorPreEarn() {
    return this.priorPreEarn;
  }

  public CusComInvest setPriorPreEarn(double priorPreEarn) {
    this.priorPreEarn = priorPreEarn;
    setPriorPreEarnIsSet(true);
    return this;
  }

  public void unsetPriorPreEarn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORPREEARN_ISSET_ID);
  }

  /** Returns true if field priorPreEarn is set (has been assigned a value) and false otherwise */
  public boolean isSetPriorPreEarn() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORPREEARN_ISSET_ID);
  }

  public void setPriorPreEarnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORPREEARN_ISSET_ID, value);
  }

  public double getPriorRealEarn() {
    return this.priorRealEarn;
  }

  public CusComInvest setPriorRealEarn(double priorRealEarn) {
    this.priorRealEarn = priorRealEarn;
    setPriorRealEarnIsSet(true);
    return this;
  }

  public void unsetPriorRealEarn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRIORREALEARN_ISSET_ID);
  }

  /** Returns true if field priorRealEarn is set (has been assigned a value) and false otherwise */
  public boolean isSetPriorRealEarn() {
    return EncodingUtils.testBit(__isset_bitfield, __PRIORREALEARN_ISSET_ID);
  }

  public void setPriorRealEarnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRIORREALEARN_ISSET_ID, value);
  }

  public double getPayInvest() {
    return this.payInvest;
  }

  public CusComInvest setPayInvest(double payInvest) {
    this.payInvest = payInvest;
    setPayInvestIsSet(true);
    return this;
  }

  public void unsetPayInvest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAYINVEST_ISSET_ID);
  }

  /** Returns true if field payInvest is set (has been assigned a value) and false otherwise */
  public boolean isSetPayInvest() {
    return EncodingUtils.testBit(__isset_bitfield, __PAYINVEST_ISSET_ID);
  }

  public void setPayInvestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAYINVEST_ISSET_ID, value);
  }

  public double getInvEarn() {
    return this.invEarn;
  }

  public CusComInvest setInvEarn(double invEarn) {
    this.invEarn = invEarn;
    setInvEarnIsSet(true);
    return this;
  }

  public void unsetInvEarn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVEARN_ISSET_ID);
  }

  /** Returns true if field invEarn is set (has been assigned a value) and false otherwise */
  public boolean isSetInvEarn() {
    return EncodingUtils.testBit(__isset_bitfield, __INVEARN_ISSET_ID);
  }

  public void setInvEarnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVEARN_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public CusComInvest setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public CusComInvest setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusComInvest setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case CUS_COM_BASE:
      if (value == null) {
        unsetCusComBase();
      } else {
        setCusComBase((CusComBase)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case INV_OBJ:
      if (value == null) {
        unsetInvObj();
      } else {
        setInvObj((String)value);
      }
      break;

    case INV_MONEY:
      if (value == null) {
        unsetInvMoney();
      } else {
        setInvMoney((Double)value);
      }
      break;

    case INV_WAY:
      if (value == null) {
        unsetInvWay();
      } else {
        setInvWay((Integer)value);
      }
      break;

    case PRE_EARN:
      if (value == null) {
        unsetPreEarn();
      } else {
        setPreEarn((Double)value);
      }
      break;

    case INV_START_DATE:
      if (value == null) {
        unsetInvStartDate();
      } else {
        setInvStartDate((String)value);
      }
      break;

    case INV_END_DATE:
      if (value == null) {
        unsetInvEndDate();
      } else {
        setInvEndDate((String)value);
      }
      break;

    case REAL_EARN:
      if (value == null) {
        unsetRealEarn();
      } else {
        setRealEarn((Double)value);
      }
      break;

    case PRIOR_PRE_EARN:
      if (value == null) {
        unsetPriorPreEarn();
      } else {
        setPriorPreEarn((Double)value);
      }
      break;

    case PRIOR_REAL_EARN:
      if (value == null) {
        unsetPriorRealEarn();
      } else {
        setPriorRealEarn((Double)value);
      }
      break;

    case PAY_INVEST:
      if (value == null) {
        unsetPayInvest();
      } else {
        setPayInvest((Double)value);
      }
      break;

    case INV_EARN:
      if (value == null) {
        unsetInvEarn();
      } else {
        setInvEarn((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case CUS_COM_BASE:
      return getCusComBase();

    case REMARK:
      return getRemark();

    case INV_OBJ:
      return getInvObj();

    case INV_MONEY:
      return Double.valueOf(getInvMoney());

    case INV_WAY:
      return Integer.valueOf(getInvWay());

    case PRE_EARN:
      return Double.valueOf(getPreEarn());

    case INV_START_DATE:
      return getInvStartDate();

    case INV_END_DATE:
      return getInvEndDate();

    case REAL_EARN:
      return Double.valueOf(getRealEarn());

    case PRIOR_PRE_EARN:
      return Double.valueOf(getPriorPreEarn());

    case PRIOR_REAL_EARN:
      return Double.valueOf(getPriorRealEarn());

    case PAY_INVEST:
      return Double.valueOf(getPayInvest());

    case INV_EARN:
      return Double.valueOf(getInvEarn());

    case STATUS:
      return Integer.valueOf(getStatus());

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case CUS_COM_BASE:
      return isSetCusComBase();
    case REMARK:
      return isSetRemark();
    case INV_OBJ:
      return isSetInvObj();
    case INV_MONEY:
      return isSetInvMoney();
    case INV_WAY:
      return isSetInvWay();
    case PRE_EARN:
      return isSetPreEarn();
    case INV_START_DATE:
      return isSetInvStartDate();
    case INV_END_DATE:
      return isSetInvEndDate();
    case REAL_EARN:
      return isSetRealEarn();
    case PRIOR_PRE_EARN:
      return isSetPriorPreEarn();
    case PRIOR_REAL_EARN:
      return isSetPriorRealEarn();
    case PAY_INVEST:
      return isSetPayInvest();
    case INV_EARN:
      return isSetInvEarn();
    case STATUS:
      return isSetStatus();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusComInvest)
      return this.equals((CusComInvest)that);
    return false;
  }

  public boolean equals(CusComInvest that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_cusComBase = true && this.isSetCusComBase();
    boolean that_present_cusComBase = true && that.isSetCusComBase();
    if (this_present_cusComBase || that_present_cusComBase) {
      if (!(this_present_cusComBase && that_present_cusComBase))
        return false;
      if (!this.cusComBase.equals(that.cusComBase))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_invObj = true && this.isSetInvObj();
    boolean that_present_invObj = true && that.isSetInvObj();
    if (this_present_invObj || that_present_invObj) {
      if (!(this_present_invObj && that_present_invObj))
        return false;
      if (!this.invObj.equals(that.invObj))
        return false;
    }

    boolean this_present_invMoney = true;
    boolean that_present_invMoney = true;
    if (this_present_invMoney || that_present_invMoney) {
      if (!(this_present_invMoney && that_present_invMoney))
        return false;
      if (this.invMoney != that.invMoney)
        return false;
    }

    boolean this_present_invWay = true;
    boolean that_present_invWay = true;
    if (this_present_invWay || that_present_invWay) {
      if (!(this_present_invWay && that_present_invWay))
        return false;
      if (this.invWay != that.invWay)
        return false;
    }

    boolean this_present_preEarn = true;
    boolean that_present_preEarn = true;
    if (this_present_preEarn || that_present_preEarn) {
      if (!(this_present_preEarn && that_present_preEarn))
        return false;
      if (this.preEarn != that.preEarn)
        return false;
    }

    boolean this_present_invStartDate = true && this.isSetInvStartDate();
    boolean that_present_invStartDate = true && that.isSetInvStartDate();
    if (this_present_invStartDate || that_present_invStartDate) {
      if (!(this_present_invStartDate && that_present_invStartDate))
        return false;
      if (!this.invStartDate.equals(that.invStartDate))
        return false;
    }

    boolean this_present_invEndDate = true && this.isSetInvEndDate();
    boolean that_present_invEndDate = true && that.isSetInvEndDate();
    if (this_present_invEndDate || that_present_invEndDate) {
      if (!(this_present_invEndDate && that_present_invEndDate))
        return false;
      if (!this.invEndDate.equals(that.invEndDate))
        return false;
    }

    boolean this_present_realEarn = true;
    boolean that_present_realEarn = true;
    if (this_present_realEarn || that_present_realEarn) {
      if (!(this_present_realEarn && that_present_realEarn))
        return false;
      if (this.realEarn != that.realEarn)
        return false;
    }

    boolean this_present_priorPreEarn = true;
    boolean that_present_priorPreEarn = true;
    if (this_present_priorPreEarn || that_present_priorPreEarn) {
      if (!(this_present_priorPreEarn && that_present_priorPreEarn))
        return false;
      if (this.priorPreEarn != that.priorPreEarn)
        return false;
    }

    boolean this_present_priorRealEarn = true;
    boolean that_present_priorRealEarn = true;
    if (this_present_priorRealEarn || that_present_priorRealEarn) {
      if (!(this_present_priorRealEarn && that_present_priorRealEarn))
        return false;
      if (this.priorRealEarn != that.priorRealEarn)
        return false;
    }

    boolean this_present_payInvest = true;
    boolean that_present_payInvest = true;
    if (this_present_payInvest || that_present_payInvest) {
      if (!(this_present_payInvest && that_present_payInvest))
        return false;
      if (this.payInvest != that.payInvest)
        return false;
    }

    boolean this_present_invEarn = true;
    boolean that_present_invEarn = true;
    if (this_present_invEarn || that_present_invEarn) {
      if (!(this_present_invEarn && that_present_invEarn))
        return false;
      if (this.invEarn != that.invEarn)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_cusComBase = true && (isSetCusComBase());
    list.add(present_cusComBase);
    if (present_cusComBase)
      list.add(cusComBase);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_invObj = true && (isSetInvObj());
    list.add(present_invObj);
    if (present_invObj)
      list.add(invObj);

    boolean present_invMoney = true;
    list.add(present_invMoney);
    if (present_invMoney)
      list.add(invMoney);

    boolean present_invWay = true;
    list.add(present_invWay);
    if (present_invWay)
      list.add(invWay);

    boolean present_preEarn = true;
    list.add(present_preEarn);
    if (present_preEarn)
      list.add(preEarn);

    boolean present_invStartDate = true && (isSetInvStartDate());
    list.add(present_invStartDate);
    if (present_invStartDate)
      list.add(invStartDate);

    boolean present_invEndDate = true && (isSetInvEndDate());
    list.add(present_invEndDate);
    if (present_invEndDate)
      list.add(invEndDate);

    boolean present_realEarn = true;
    list.add(present_realEarn);
    if (present_realEarn)
      list.add(realEarn);

    boolean present_priorPreEarn = true;
    list.add(present_priorPreEarn);
    if (present_priorPreEarn)
      list.add(priorPreEarn);

    boolean present_priorRealEarn = true;
    list.add(present_priorRealEarn);
    if (present_priorRealEarn)
      list.add(priorRealEarn);

    boolean present_payInvest = true;
    list.add(present_payInvest);
    if (present_payInvest)
      list.add(payInvest);

    boolean present_invEarn = true;
    list.add(present_invEarn);
    if (present_invEarn)
      list.add(invEarn);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusComInvest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCusComBase()).compareTo(other.isSetCusComBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCusComBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cusComBase, other.cusComBase);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvObj()).compareTo(other.isSetInvObj());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvObj()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invObj, other.invObj);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvMoney()).compareTo(other.isSetInvMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invMoney, other.invMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvWay()).compareTo(other.isSetInvWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invWay, other.invWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreEarn()).compareTo(other.isSetPreEarn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreEarn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preEarn, other.preEarn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvStartDate()).compareTo(other.isSetInvStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invStartDate, other.invStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvEndDate()).compareTo(other.isSetInvEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invEndDate, other.invEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealEarn()).compareTo(other.isSetRealEarn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealEarn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realEarn, other.realEarn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriorPreEarn()).compareTo(other.isSetPriorPreEarn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriorPreEarn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorPreEarn, other.priorPreEarn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriorRealEarn()).compareTo(other.isSetPriorRealEarn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriorRealEarn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priorRealEarn, other.priorRealEarn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPayInvest()).compareTo(other.isSetPayInvest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayInvest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payInvest, other.payInvest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvEarn()).compareTo(other.isSetInvEarn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvEarn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invEarn, other.invEarn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusComInvest(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cusComBase:");
    if (this.cusComBase == null) {
      sb.append("null");
    } else {
      sb.append(this.cusComBase);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invObj:");
    if (this.invObj == null) {
      sb.append("null");
    } else {
      sb.append(this.invObj);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invMoney:");
    sb.append(this.invMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invWay:");
    sb.append(this.invWay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preEarn:");
    sb.append(this.preEarn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invStartDate:");
    if (this.invStartDate == null) {
      sb.append("null");
    } else {
      sb.append(this.invStartDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invEndDate:");
    if (this.invEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.invEndDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realEarn:");
    sb.append(this.realEarn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priorPreEarn:");
    sb.append(this.priorPreEarn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("priorRealEarn:");
    sb.append(this.priorRealEarn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("payInvest:");
    sb.append(this.payInvest);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invEarn:");
    sb.append(this.invEarn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (cusComBase != null) {
      cusComBase.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusComInvestStandardSchemeFactory implements SchemeFactory {
    public CusComInvestStandardScheme getScheme() {
      return new CusComInvestStandardScheme();
    }
  }

  private static class CusComInvestStandardScheme extends StandardScheme<CusComInvest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusComInvest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUS_COM_BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.cusComBase = new CusComBase();
              struct.cusComBase.read(iprot);
              struct.setCusComBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INV_OBJ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invObj = iprot.readString();
              struct.setInvObjIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INV_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.invMoney = iprot.readDouble();
              struct.setInvMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INV_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.invWay = iprot.readI32();
              struct.setInvWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRE_EARN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preEarn = iprot.readDouble();
              struct.setPreEarnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // INV_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invStartDate = iprot.readString();
              struct.setInvStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INV_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invEndDate = iprot.readString();
              struct.setInvEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REAL_EARN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.realEarn = iprot.readDouble();
              struct.setRealEarnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PRIOR_PRE_EARN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priorPreEarn = iprot.readDouble();
              struct.setPriorPreEarnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRIOR_REAL_EARN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.priorRealEarn = iprot.readDouble();
              struct.setPriorRealEarnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAY_INVEST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.payInvest = iprot.readDouble();
              struct.setPayInvestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // INV_EARN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.invEarn = iprot.readDouble();
              struct.setInvEarnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusComInvest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      if (struct.cusComBase != null) {
        oprot.writeFieldBegin(CUS_COM_BASE_FIELD_DESC);
        struct.cusComBase.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      if (struct.invObj != null) {
        oprot.writeFieldBegin(INV_OBJ_FIELD_DESC);
        oprot.writeString(struct.invObj);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INV_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.invMoney);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INV_WAY_FIELD_DESC);
      oprot.writeI32(struct.invWay);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRE_EARN_FIELD_DESC);
      oprot.writeDouble(struct.preEarn);
      oprot.writeFieldEnd();
      if (struct.invStartDate != null) {
        oprot.writeFieldBegin(INV_START_DATE_FIELD_DESC);
        oprot.writeString(struct.invStartDate);
        oprot.writeFieldEnd();
      }
      if (struct.invEndDate != null) {
        oprot.writeFieldBegin(INV_END_DATE_FIELD_DESC);
        oprot.writeString(struct.invEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REAL_EARN_FIELD_DESC);
      oprot.writeDouble(struct.realEarn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIOR_PRE_EARN_FIELD_DESC);
      oprot.writeDouble(struct.priorPreEarn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIOR_REAL_EARN_FIELD_DESC);
      oprot.writeDouble(struct.priorRealEarn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAY_INVEST_FIELD_DESC);
      oprot.writeDouble(struct.payInvest);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INV_EARN_FIELD_DESC);
      oprot.writeDouble(struct.invEarn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusComInvestTupleSchemeFactory implements SchemeFactory {
    public CusComInvestTupleScheme getScheme() {
      return new CusComInvestTupleScheme();
    }
  }

  private static class CusComInvestTupleScheme extends TupleScheme<CusComInvest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusComInvest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetCusComBase()) {
        optionals.set(1);
      }
      if (struct.isSetRemark()) {
        optionals.set(2);
      }
      if (struct.isSetInvObj()) {
        optionals.set(3);
      }
      if (struct.isSetInvMoney()) {
        optionals.set(4);
      }
      if (struct.isSetInvWay()) {
        optionals.set(5);
      }
      if (struct.isSetPreEarn()) {
        optionals.set(6);
      }
      if (struct.isSetInvStartDate()) {
        optionals.set(7);
      }
      if (struct.isSetInvEndDate()) {
        optionals.set(8);
      }
      if (struct.isSetRealEarn()) {
        optionals.set(9);
      }
      if (struct.isSetPriorPreEarn()) {
        optionals.set(10);
      }
      if (struct.isSetPriorRealEarn()) {
        optionals.set(11);
      }
      if (struct.isSetPayInvest()) {
        optionals.set(12);
      }
      if (struct.isSetInvEarn()) {
        optionals.set(13);
      }
      if (struct.isSetStatus()) {
        optionals.set(14);
      }
      if (struct.isSetPage()) {
        optionals.set(15);
      }
      if (struct.isSetRows()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetCusComBase()) {
        struct.cusComBase.write(oprot);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetInvObj()) {
        oprot.writeString(struct.invObj);
      }
      if (struct.isSetInvMoney()) {
        oprot.writeDouble(struct.invMoney);
      }
      if (struct.isSetInvWay()) {
        oprot.writeI32(struct.invWay);
      }
      if (struct.isSetPreEarn()) {
        oprot.writeDouble(struct.preEarn);
      }
      if (struct.isSetInvStartDate()) {
        oprot.writeString(struct.invStartDate);
      }
      if (struct.isSetInvEndDate()) {
        oprot.writeString(struct.invEndDate);
      }
      if (struct.isSetRealEarn()) {
        oprot.writeDouble(struct.realEarn);
      }
      if (struct.isSetPriorPreEarn()) {
        oprot.writeDouble(struct.priorPreEarn);
      }
      if (struct.isSetPriorRealEarn()) {
        oprot.writeDouble(struct.priorRealEarn);
      }
      if (struct.isSetPayInvest()) {
        oprot.writeDouble(struct.payInvest);
      }
      if (struct.isSetInvEarn()) {
        oprot.writeDouble(struct.invEarn);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusComInvest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cusComBase = new CusComBase();
        struct.cusComBase.read(iprot);
        struct.setCusComBaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(3)) {
        struct.invObj = iprot.readString();
        struct.setInvObjIsSet(true);
      }
      if (incoming.get(4)) {
        struct.invMoney = iprot.readDouble();
        struct.setInvMoneyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.invWay = iprot.readI32();
        struct.setInvWayIsSet(true);
      }
      if (incoming.get(6)) {
        struct.preEarn = iprot.readDouble();
        struct.setPreEarnIsSet(true);
      }
      if (incoming.get(7)) {
        struct.invStartDate = iprot.readString();
        struct.setInvStartDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.invEndDate = iprot.readString();
        struct.setInvEndDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.realEarn = iprot.readDouble();
        struct.setRealEarnIsSet(true);
      }
      if (incoming.get(10)) {
        struct.priorPreEarn = iprot.readDouble();
        struct.setPriorPreEarnIsSet(true);
      }
      if (incoming.get(11)) {
        struct.priorRealEarn = iprot.readDouble();
        struct.setPriorRealEarnIsSet(true);
      }
      if (incoming.get(12)) {
        struct.payInvest = iprot.readDouble();
        struct.setPayInvestIsSet(true);
      }
      if (incoming.get(13)) {
        struct.invEarn = iprot.readDouble();
        struct.setInvEarnIsSet(true);
      }
      if (incoming.get(14)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(16)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
    }
  }

}


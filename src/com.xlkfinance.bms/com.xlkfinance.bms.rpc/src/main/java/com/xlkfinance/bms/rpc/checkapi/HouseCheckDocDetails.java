/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.checkapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-17")
public class HouseCheckDocDetails implements org.apache.thrift.TBase<HouseCheckDocDetails, HouseCheckDocDetails._Fields>, java.io.Serializable, Cloneable, Comparable<HouseCheckDocDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HouseCheckDocDetails");

  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HOUSE_CHECK_DOC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("houseCheckDocId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CHECK_DOC_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHECK_DOC_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkDocContent", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHECK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("checkStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HouseCheckDocDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HouseCheckDocDetailsTupleSchemeFactory());
  }

  public int page; // required
  public int rows; // required
  public int pid; // required
  public int houseCheckDocId; // required
  public String checkDocTime; // required
  public String checkDocContent; // required
  public int checkStatus; // required
  public String createTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE((short)1, "page"),
    ROWS((short)2, "rows"),
    PID((short)3, "pid"),
    HOUSE_CHECK_DOC_ID((short)4, "houseCheckDocId"),
    CHECK_DOC_TIME((short)5, "checkDocTime"),
    CHECK_DOC_CONTENT((short)6, "checkDocContent"),
    CHECK_STATUS((short)7, "checkStatus"),
    CREATE_TIME((short)8, "createTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE
          return PAGE;
        case 2: // ROWS
          return ROWS;
        case 3: // PID
          return PID;
        case 4: // HOUSE_CHECK_DOC_ID
          return HOUSE_CHECK_DOC_ID;
        case 5: // CHECK_DOC_TIME
          return CHECK_DOC_TIME;
        case 6: // CHECK_DOC_CONTENT
          return CHECK_DOC_CONTENT;
        case 7: // CHECK_STATUS
          return CHECK_STATUS;
        case 8: // CREATE_TIME
          return CREATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PAGE_ISSET_ID = 0;
  private static final int __ROWS_ISSET_ID = 1;
  private static final int __PID_ISSET_ID = 2;
  private static final int __HOUSECHECKDOCID_ISSET_ID = 3;
  private static final int __CHECKSTATUS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOUSE_CHECK_DOC_ID, new org.apache.thrift.meta_data.FieldMetaData("houseCheckDocId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHECK_DOC_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkDocTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_DOC_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("checkDocContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("checkStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HouseCheckDocDetails.class, metaDataMap);
  }

  public HouseCheckDocDetails() {
  }

  public HouseCheckDocDetails(
    int page,
    int rows,
    int pid,
    int houseCheckDocId,
    String checkDocTime,
    String checkDocContent,
    int checkStatus,
    String createTime)
  {
    this();
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.pid = pid;
    setPidIsSet(true);
    this.houseCheckDocId = houseCheckDocId;
    setHouseCheckDocIdIsSet(true);
    this.checkDocTime = checkDocTime;
    this.checkDocContent = checkDocContent;
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    this.createTime = createTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HouseCheckDocDetails(HouseCheckDocDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    this.page = other.page;
    this.rows = other.rows;
    this.pid = other.pid;
    this.houseCheckDocId = other.houseCheckDocId;
    if (other.isSetCheckDocTime()) {
      this.checkDocTime = other.checkDocTime;
    }
    if (other.isSetCheckDocContent()) {
      this.checkDocContent = other.checkDocContent;
    }
    this.checkStatus = other.checkStatus;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
  }

  public HouseCheckDocDetails deepCopy() {
    return new HouseCheckDocDetails(this);
  }

  @Override
  public void clear() {
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    setPidIsSet(false);
    this.pid = 0;
    setHouseCheckDocIdIsSet(false);
    this.houseCheckDocId = 0;
    this.checkDocTime = null;
    this.checkDocContent = null;
    setCheckStatusIsSet(false);
    this.checkStatus = 0;
    this.createTime = null;
  }

  public int getPage() {
    return this.page;
  }

  public HouseCheckDocDetails setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public HouseCheckDocDetails setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public int getPid() {
    return this.pid;
  }

  public HouseCheckDocDetails setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getHouseCheckDocId() {
    return this.houseCheckDocId;
  }

  public HouseCheckDocDetails setHouseCheckDocId(int houseCheckDocId) {
    this.houseCheckDocId = houseCheckDocId;
    setHouseCheckDocIdIsSet(true);
    return this;
  }

  public void unsetHouseCheckDocId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOUSECHECKDOCID_ISSET_ID);
  }

  /** Returns true if field houseCheckDocId is set (has been assigned a value) and false otherwise */
  public boolean isSetHouseCheckDocId() {
    return EncodingUtils.testBit(__isset_bitfield, __HOUSECHECKDOCID_ISSET_ID);
  }

  public void setHouseCheckDocIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOUSECHECKDOCID_ISSET_ID, value);
  }

  public String getCheckDocTime() {
    return this.checkDocTime;
  }

  public HouseCheckDocDetails setCheckDocTime(String checkDocTime) {
    this.checkDocTime = checkDocTime;
    return this;
  }

  public void unsetCheckDocTime() {
    this.checkDocTime = null;
  }

  /** Returns true if field checkDocTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDocTime() {
    return this.checkDocTime != null;
  }

  public void setCheckDocTimeIsSet(boolean value) {
    if (!value) {
      this.checkDocTime = null;
    }
  }

  public String getCheckDocContent() {
    return this.checkDocContent;
  }

  public HouseCheckDocDetails setCheckDocContent(String checkDocContent) {
    this.checkDocContent = checkDocContent;
    return this;
  }

  public void unsetCheckDocContent() {
    this.checkDocContent = null;
  }

  /** Returns true if field checkDocContent is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckDocContent() {
    return this.checkDocContent != null;
  }

  public void setCheckDocContentIsSet(boolean value) {
    if (!value) {
      this.checkDocContent = null;
    }
  }

  public int getCheckStatus() {
    return this.checkStatus;
  }

  public HouseCheckDocDetails setCheckStatus(int checkStatus) {
    this.checkStatus = checkStatus;
    setCheckStatusIsSet(true);
    return this;
  }

  public void unsetCheckStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  /** Returns true if field checkStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID);
  }

  public void setCheckStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKSTATUS_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public HouseCheckDocDetails setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case HOUSE_CHECK_DOC_ID:
      if (value == null) {
        unsetHouseCheckDocId();
      } else {
        setHouseCheckDocId((Integer)value);
      }
      break;

    case CHECK_DOC_TIME:
      if (value == null) {
        unsetCheckDocTime();
      } else {
        setCheckDocTime((String)value);
      }
      break;

    case CHECK_DOC_CONTENT:
      if (value == null) {
        unsetCheckDocContent();
      } else {
        setCheckDocContent((String)value);
      }
      break;

    case CHECK_STATUS:
      if (value == null) {
        unsetCheckStatus();
      } else {
        setCheckStatus((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case PID:
      return Integer.valueOf(getPid());

    case HOUSE_CHECK_DOC_ID:
      return Integer.valueOf(getHouseCheckDocId());

    case CHECK_DOC_TIME:
      return getCheckDocTime();

    case CHECK_DOC_CONTENT:
      return getCheckDocContent();

    case CHECK_STATUS:
      return Integer.valueOf(getCheckStatus());

    case CREATE_TIME:
      return getCreateTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case PID:
      return isSetPid();
    case HOUSE_CHECK_DOC_ID:
      return isSetHouseCheckDocId();
    case CHECK_DOC_TIME:
      return isSetCheckDocTime();
    case CHECK_DOC_CONTENT:
      return isSetCheckDocContent();
    case CHECK_STATUS:
      return isSetCheckStatus();
    case CREATE_TIME:
      return isSetCreateTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HouseCheckDocDetails)
      return this.equals((HouseCheckDocDetails)that);
    return false;
  }

  public boolean equals(HouseCheckDocDetails that) {
    if (that == null)
      return false;

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_houseCheckDocId = true;
    boolean that_present_houseCheckDocId = true;
    if (this_present_houseCheckDocId || that_present_houseCheckDocId) {
      if (!(this_present_houseCheckDocId && that_present_houseCheckDocId))
        return false;
      if (this.houseCheckDocId != that.houseCheckDocId)
        return false;
    }

    boolean this_present_checkDocTime = true && this.isSetCheckDocTime();
    boolean that_present_checkDocTime = true && that.isSetCheckDocTime();
    if (this_present_checkDocTime || that_present_checkDocTime) {
      if (!(this_present_checkDocTime && that_present_checkDocTime))
        return false;
      if (!this.checkDocTime.equals(that.checkDocTime))
        return false;
    }

    boolean this_present_checkDocContent = true && this.isSetCheckDocContent();
    boolean that_present_checkDocContent = true && that.isSetCheckDocContent();
    if (this_present_checkDocContent || that_present_checkDocContent) {
      if (!(this_present_checkDocContent && that_present_checkDocContent))
        return false;
      if (!this.checkDocContent.equals(that.checkDocContent))
        return false;
    }

    boolean this_present_checkStatus = true;
    boolean that_present_checkStatus = true;
    if (this_present_checkStatus || that_present_checkStatus) {
      if (!(this_present_checkStatus && that_present_checkStatus))
        return false;
      if (this.checkStatus != that.checkStatus)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_houseCheckDocId = true;
    list.add(present_houseCheckDocId);
    if (present_houseCheckDocId)
      list.add(houseCheckDocId);

    boolean present_checkDocTime = true && (isSetCheckDocTime());
    list.add(present_checkDocTime);
    if (present_checkDocTime)
      list.add(checkDocTime);

    boolean present_checkDocContent = true && (isSetCheckDocContent());
    list.add(present_checkDocContent);
    if (present_checkDocContent)
      list.add(checkDocContent);

    boolean present_checkStatus = true;
    list.add(present_checkStatus);
    if (present_checkStatus)
      list.add(checkStatus);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(HouseCheckDocDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseCheckDocId()).compareTo(other.isSetHouseCheckDocId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseCheckDocId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.houseCheckDocId, other.houseCheckDocId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDocTime()).compareTo(other.isSetCheckDocTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDocTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocTime, other.checkDocTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckDocContent()).compareTo(other.isSetCheckDocContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckDocContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkDocContent, other.checkDocContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCheckStatus()).compareTo(other.isSetCheckStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkStatus, other.checkStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HouseCheckDocDetails(");
    boolean first = true;

    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseCheckDocId:");
    sb.append(this.houseCheckDocId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDocTime:");
    if (this.checkDocTime == null) {
      sb.append("null");
    } else {
      sb.append(this.checkDocTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkDocContent:");
    if (this.checkDocContent == null) {
      sb.append("null");
    } else {
      sb.append(this.checkDocContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("checkStatus:");
    sb.append(this.checkStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HouseCheckDocDetailsStandardSchemeFactory implements SchemeFactory {
    public HouseCheckDocDetailsStandardScheme getScheme() {
      return new HouseCheckDocDetailsStandardScheme();
    }
  }

  private static class HouseCheckDocDetailsStandardScheme extends StandardScheme<HouseCheckDocDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HouseCheckDocDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOUSE_CHECK_DOC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.houseCheckDocId = iprot.readI32();
              struct.setHouseCheckDocIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHECK_DOC_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkDocTime = iprot.readString();
              struct.setCheckDocTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHECK_DOC_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkDocContent = iprot.readString();
              struct.setCheckDocContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHECK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.checkStatus = iprot.readI32();
              struct.setCheckStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HouseCheckDocDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HOUSE_CHECK_DOC_ID_FIELD_DESC);
      oprot.writeI32(struct.houseCheckDocId);
      oprot.writeFieldEnd();
      if (struct.checkDocTime != null) {
        oprot.writeFieldBegin(CHECK_DOC_TIME_FIELD_DESC);
        oprot.writeString(struct.checkDocTime);
        oprot.writeFieldEnd();
      }
      if (struct.checkDocContent != null) {
        oprot.writeFieldBegin(CHECK_DOC_CONTENT_FIELD_DESC);
        oprot.writeString(struct.checkDocContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHECK_STATUS_FIELD_DESC);
      oprot.writeI32(struct.checkStatus);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HouseCheckDocDetailsTupleSchemeFactory implements SchemeFactory {
    public HouseCheckDocDetailsTupleScheme getScheme() {
      return new HouseCheckDocDetailsTupleScheme();
    }
  }

  private static class HouseCheckDocDetailsTupleScheme extends TupleScheme<HouseCheckDocDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HouseCheckDocDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPage()) {
        optionals.set(0);
      }
      if (struct.isSetRows()) {
        optionals.set(1);
      }
      if (struct.isSetPid()) {
        optionals.set(2);
      }
      if (struct.isSetHouseCheckDocId()) {
        optionals.set(3);
      }
      if (struct.isSetCheckDocTime()) {
        optionals.set(4);
      }
      if (struct.isSetCheckDocContent()) {
        optionals.set(5);
      }
      if (struct.isSetCheckStatus()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetHouseCheckDocId()) {
        oprot.writeI32(struct.houseCheckDocId);
      }
      if (struct.isSetCheckDocTime()) {
        oprot.writeString(struct.checkDocTime);
      }
      if (struct.isSetCheckDocContent()) {
        oprot.writeString(struct.checkDocContent);
      }
      if (struct.isSetCheckStatus()) {
        oprot.writeI32(struct.checkStatus);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HouseCheckDocDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.houseCheckDocId = iprot.readI32();
        struct.setHouseCheckDocIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.checkDocTime = iprot.readString();
        struct.setCheckDocTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.checkDocContent = iprot.readString();
        struct.setCheckDocContentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.checkStatus = iprot.readI32();
        struct.setCheckStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
    }
  }

}


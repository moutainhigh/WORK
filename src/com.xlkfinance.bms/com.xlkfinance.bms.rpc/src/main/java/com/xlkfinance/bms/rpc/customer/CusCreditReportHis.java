/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-18")
public class CusCreditReportHis implements org.apache.thrift.TBase<CusCreditReportHis, CusCreditReportHis._Fields>, java.io.Serializable, Cloneable, Comparable<CusCreditReportHis> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CusCreditReportHis");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ACCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("acctId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataSource", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REPORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reportType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField QUERY_RESON_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("queryResonId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField QUERY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queryName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField QUERY_DOCUMENT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("queryDocumentNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField QUERY_PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("queryPhone", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField QUERY_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStatus", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField QUERY_STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStatusMsg", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REPORT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("reportNo", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField QUERY_RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("queryResult", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CREATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("creator", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField ROWS_FIELD_DESC = new org.apache.thrift.protocol.TField("rows", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField REAL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realName", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField BEGIN_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginCreateTime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField END_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endCreateTime", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField IS_REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("isRepeat", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField UNIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("unitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField TOTAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)25);
  private static final org.apache.thrift.protocol.TField QUERY_PBOC_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("queryPbocStatus", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("userIds", org.apache.thrift.protocol.TType.LIST, (short)27);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CusCreditReportHisStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CusCreditReportHisTupleSchemeFactory());
  }

  public int pid; // required
  public int acctId; // required
  public int dataSource; // required
  public int reportType; // required
  public String queryResonId; // required
  public String queryName; // required
  public String queryDocumentNo; // required
  public String queryPhone; // required
  public int queryStatus; // required
  public String queryStatusMsg; // required
  public String reportNo; // required
  public String queryResult; // required
  public int operator; // required
  public String createTime; // required
  public int creator; // required
  public String remark; // required
  public int page; // required
  public int rows; // required
  public String realName; // required
  public String beginCreateTime; // required
  public String endCreateTime; // required
  public int isRepeat; // required
  public double unitPrice; // required
  public int totalCount; // required
  public double totalPrice; // required
  public String queryPbocStatus; // required
  public List<Integer> userIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    ACCT_ID((short)2, "acctId"),
    DATA_SOURCE((short)3, "dataSource"),
    REPORT_TYPE((short)4, "reportType"),
    QUERY_RESON_ID((short)5, "queryResonId"),
    QUERY_NAME((short)6, "queryName"),
    QUERY_DOCUMENT_NO((short)7, "queryDocumentNo"),
    QUERY_PHONE((short)8, "queryPhone"),
    QUERY_STATUS((short)9, "queryStatus"),
    QUERY_STATUS_MSG((short)10, "queryStatusMsg"),
    REPORT_NO((short)11, "reportNo"),
    QUERY_RESULT((short)12, "queryResult"),
    OPERATOR((short)13, "operator"),
    CREATE_TIME((short)14, "createTime"),
    CREATOR((short)15, "creator"),
    REMARK((short)16, "remark"),
    PAGE((short)17, "page"),
    ROWS((short)18, "rows"),
    REAL_NAME((short)19, "realName"),
    BEGIN_CREATE_TIME((short)20, "beginCreateTime"),
    END_CREATE_TIME((short)21, "endCreateTime"),
    IS_REPEAT((short)22, "isRepeat"),
    UNIT_PRICE((short)23, "unitPrice"),
    TOTAL_COUNT((short)24, "totalCount"),
    TOTAL_PRICE((short)25, "totalPrice"),
    QUERY_PBOC_STATUS((short)26, "queryPbocStatus"),
    USER_IDS((short)27, "userIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // ACCT_ID
          return ACCT_ID;
        case 3: // DATA_SOURCE
          return DATA_SOURCE;
        case 4: // REPORT_TYPE
          return REPORT_TYPE;
        case 5: // QUERY_RESON_ID
          return QUERY_RESON_ID;
        case 6: // QUERY_NAME
          return QUERY_NAME;
        case 7: // QUERY_DOCUMENT_NO
          return QUERY_DOCUMENT_NO;
        case 8: // QUERY_PHONE
          return QUERY_PHONE;
        case 9: // QUERY_STATUS
          return QUERY_STATUS;
        case 10: // QUERY_STATUS_MSG
          return QUERY_STATUS_MSG;
        case 11: // REPORT_NO
          return REPORT_NO;
        case 12: // QUERY_RESULT
          return QUERY_RESULT;
        case 13: // OPERATOR
          return OPERATOR;
        case 14: // CREATE_TIME
          return CREATE_TIME;
        case 15: // CREATOR
          return CREATOR;
        case 16: // REMARK
          return REMARK;
        case 17: // PAGE
          return PAGE;
        case 18: // ROWS
          return ROWS;
        case 19: // REAL_NAME
          return REAL_NAME;
        case 20: // BEGIN_CREATE_TIME
          return BEGIN_CREATE_TIME;
        case 21: // END_CREATE_TIME
          return END_CREATE_TIME;
        case 22: // IS_REPEAT
          return IS_REPEAT;
        case 23: // UNIT_PRICE
          return UNIT_PRICE;
        case 24: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 25: // TOTAL_PRICE
          return TOTAL_PRICE;
        case 26: // QUERY_PBOC_STATUS
          return QUERY_PBOC_STATUS;
        case 27: // USER_IDS
          return USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ACCTID_ISSET_ID = 1;
  private static final int __DATASOURCE_ISSET_ID = 2;
  private static final int __REPORTTYPE_ISSET_ID = 3;
  private static final int __QUERYSTATUS_ISSET_ID = 4;
  private static final int __OPERATOR_ISSET_ID = 5;
  private static final int __CREATOR_ISSET_ID = 6;
  private static final int __PAGE_ISSET_ID = 7;
  private static final int __ROWS_ISSET_ID = 8;
  private static final int __ISREPEAT_ISSET_ID = 9;
  private static final int __UNITPRICE_ISSET_ID = 10;
  private static final int __TOTALCOUNT_ISSET_ID = 11;
  private static final int __TOTALPRICE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCT_ID, new org.apache.thrift.meta_data.FieldMetaData("acctId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATA_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("dataSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reportType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_RESON_ID, new org.apache.thrift.meta_data.FieldMetaData("queryResonId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_NAME, new org.apache.thrift.meta_data.FieldMetaData("queryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_DOCUMENT_NO, new org.apache.thrift.meta_data.FieldMetaData("queryDocumentNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_PHONE, new org.apache.thrift.meta_data.FieldMetaData("queryPhone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_STATUS, new org.apache.thrift.meta_data.FieldMetaData("queryStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUERY_STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("queryStatusMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPORT_NO, new org.apache.thrift.meta_data.FieldMetaData("reportNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QUERY_RESULT, new org.apache.thrift.meta_data.FieldMetaData("queryResult", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATOR, new org.apache.thrift.meta_data.FieldMetaData("creator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ROWS, new org.apache.thrift.meta_data.FieldMetaData("rows", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REAL_NAME, new org.apache.thrift.meta_data.FieldMetaData("realName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("endCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REPEAT, new org.apache.thrift.meta_data.FieldMetaData("isRepeat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("unitPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("totalPrice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUERY_PBOC_STATUS, new org.apache.thrift.meta_data.FieldMetaData("queryPbocStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("userIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CusCreditReportHis.class, metaDataMap);
  }

  public CusCreditReportHis() {
  }

  public CusCreditReportHis(
    int pid,
    int acctId,
    int dataSource,
    int reportType,
    String queryResonId,
    String queryName,
    String queryDocumentNo,
    String queryPhone,
    int queryStatus,
    String queryStatusMsg,
    String reportNo,
    String queryResult,
    int operator,
    String createTime,
    int creator,
    String remark,
    int page,
    int rows,
    String realName,
    String beginCreateTime,
    String endCreateTime,
    int isRepeat,
    double unitPrice,
    int totalCount,
    double totalPrice,
    String queryPbocStatus,
    List<Integer> userIds)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.acctId = acctId;
    setAcctIdIsSet(true);
    this.dataSource = dataSource;
    setDataSourceIsSet(true);
    this.reportType = reportType;
    setReportTypeIsSet(true);
    this.queryResonId = queryResonId;
    this.queryName = queryName;
    this.queryDocumentNo = queryDocumentNo;
    this.queryPhone = queryPhone;
    this.queryStatus = queryStatus;
    setQueryStatusIsSet(true);
    this.queryStatusMsg = queryStatusMsg;
    this.reportNo = reportNo;
    this.queryResult = queryResult;
    this.operator = operator;
    setOperatorIsSet(true);
    this.createTime = createTime;
    this.creator = creator;
    setCreatorIsSet(true);
    this.remark = remark;
    this.page = page;
    setPageIsSet(true);
    this.rows = rows;
    setRowsIsSet(true);
    this.realName = realName;
    this.beginCreateTime = beginCreateTime;
    this.endCreateTime = endCreateTime;
    this.isRepeat = isRepeat;
    setIsRepeatIsSet(true);
    this.unitPrice = unitPrice;
    setUnitPriceIsSet(true);
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    this.queryPbocStatus = queryPbocStatus;
    this.userIds = userIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CusCreditReportHis(CusCreditReportHis other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.acctId = other.acctId;
    this.dataSource = other.dataSource;
    this.reportType = other.reportType;
    if (other.isSetQueryResonId()) {
      this.queryResonId = other.queryResonId;
    }
    if (other.isSetQueryName()) {
      this.queryName = other.queryName;
    }
    if (other.isSetQueryDocumentNo()) {
      this.queryDocumentNo = other.queryDocumentNo;
    }
    if (other.isSetQueryPhone()) {
      this.queryPhone = other.queryPhone;
    }
    this.queryStatus = other.queryStatus;
    if (other.isSetQueryStatusMsg()) {
      this.queryStatusMsg = other.queryStatusMsg;
    }
    if (other.isSetReportNo()) {
      this.reportNo = other.reportNo;
    }
    if (other.isSetQueryResult()) {
      this.queryResult = other.queryResult;
    }
    this.operator = other.operator;
    if (other.isSetCreateTime()) {
      this.createTime = other.createTime;
    }
    this.creator = other.creator;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    this.page = other.page;
    this.rows = other.rows;
    if (other.isSetRealName()) {
      this.realName = other.realName;
    }
    if (other.isSetBeginCreateTime()) {
      this.beginCreateTime = other.beginCreateTime;
    }
    if (other.isSetEndCreateTime()) {
      this.endCreateTime = other.endCreateTime;
    }
    this.isRepeat = other.isRepeat;
    this.unitPrice = other.unitPrice;
    this.totalCount = other.totalCount;
    this.totalPrice = other.totalPrice;
    if (other.isSetQueryPbocStatus()) {
      this.queryPbocStatus = other.queryPbocStatus;
    }
    if (other.isSetUserIds()) {
      List<Integer> __this__userIds = new ArrayList<Integer>(other.userIds);
      this.userIds = __this__userIds;
    }
  }

  public CusCreditReportHis deepCopy() {
    return new CusCreditReportHis(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setAcctIdIsSet(false);
    this.acctId = 0;
    setDataSourceIsSet(false);
    this.dataSource = 0;
    setReportTypeIsSet(false);
    this.reportType = 0;
    this.queryResonId = null;
    this.queryName = null;
    this.queryDocumentNo = null;
    this.queryPhone = null;
    setQueryStatusIsSet(false);
    this.queryStatus = 0;
    this.queryStatusMsg = null;
    this.reportNo = null;
    this.queryResult = null;
    setOperatorIsSet(false);
    this.operator = 0;
    this.createTime = null;
    setCreatorIsSet(false);
    this.creator = 0;
    this.remark = null;
    setPageIsSet(false);
    this.page = 0;
    setRowsIsSet(false);
    this.rows = 0;
    this.realName = null;
    this.beginCreateTime = null;
    this.endCreateTime = null;
    setIsRepeatIsSet(false);
    this.isRepeat = 0;
    setUnitPriceIsSet(false);
    this.unitPrice = 0.0;
    setTotalCountIsSet(false);
    this.totalCount = 0;
    setTotalPriceIsSet(false);
    this.totalPrice = 0.0;
    this.queryPbocStatus = null;
    this.userIds = null;
  }

  public int getPid() {
    return this.pid;
  }

  public CusCreditReportHis setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getAcctId() {
    return this.acctId;
  }

  public CusCreditReportHis setAcctId(int acctId) {
    this.acctId = acctId;
    setAcctIdIsSet(true);
    return this;
  }

  public void unsetAcctId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  /** Returns true if field acctId is set (has been assigned a value) and false otherwise */
  public boolean isSetAcctId() {
    return EncodingUtils.testBit(__isset_bitfield, __ACCTID_ISSET_ID);
  }

  public void setAcctIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCTID_ISSET_ID, value);
  }

  public int getDataSource() {
    return this.dataSource;
  }

  public CusCreditReportHis setDataSource(int dataSource) {
    this.dataSource = dataSource;
    setDataSourceIsSet(true);
    return this;
  }

  public void unsetDataSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATASOURCE_ISSET_ID);
  }

  /** Returns true if field dataSource is set (has been assigned a value) and false otherwise */
  public boolean isSetDataSource() {
    return EncodingUtils.testBit(__isset_bitfield, __DATASOURCE_ISSET_ID);
  }

  public void setDataSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATASOURCE_ISSET_ID, value);
  }

  public int getReportType() {
    return this.reportType;
  }

  public CusCreditReportHis setReportType(int reportType) {
    this.reportType = reportType;
    setReportTypeIsSet(true);
    return this;
  }

  public void unsetReportType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPORTTYPE_ISSET_ID);
  }

  /** Returns true if field reportType is set (has been assigned a value) and false otherwise */
  public boolean isSetReportType() {
    return EncodingUtils.testBit(__isset_bitfield, __REPORTTYPE_ISSET_ID);
  }

  public void setReportTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPORTTYPE_ISSET_ID, value);
  }

  public String getQueryResonId() {
    return this.queryResonId;
  }

  public CusCreditReportHis setQueryResonId(String queryResonId) {
    this.queryResonId = queryResonId;
    return this;
  }

  public void unsetQueryResonId() {
    this.queryResonId = null;
  }

  /** Returns true if field queryResonId is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryResonId() {
    return this.queryResonId != null;
  }

  public void setQueryResonIdIsSet(boolean value) {
    if (!value) {
      this.queryResonId = null;
    }
  }

  public String getQueryName() {
    return this.queryName;
  }

  public CusCreditReportHis setQueryName(String queryName) {
    this.queryName = queryName;
    return this;
  }

  public void unsetQueryName() {
    this.queryName = null;
  }

  /** Returns true if field queryName is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryName() {
    return this.queryName != null;
  }

  public void setQueryNameIsSet(boolean value) {
    if (!value) {
      this.queryName = null;
    }
  }

  public String getQueryDocumentNo() {
    return this.queryDocumentNo;
  }

  public CusCreditReportHis setQueryDocumentNo(String queryDocumentNo) {
    this.queryDocumentNo = queryDocumentNo;
    return this;
  }

  public void unsetQueryDocumentNo() {
    this.queryDocumentNo = null;
  }

  /** Returns true if field queryDocumentNo is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryDocumentNo() {
    return this.queryDocumentNo != null;
  }

  public void setQueryDocumentNoIsSet(boolean value) {
    if (!value) {
      this.queryDocumentNo = null;
    }
  }

  public String getQueryPhone() {
    return this.queryPhone;
  }

  public CusCreditReportHis setQueryPhone(String queryPhone) {
    this.queryPhone = queryPhone;
    return this;
  }

  public void unsetQueryPhone() {
    this.queryPhone = null;
  }

  /** Returns true if field queryPhone is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryPhone() {
    return this.queryPhone != null;
  }

  public void setQueryPhoneIsSet(boolean value) {
    if (!value) {
      this.queryPhone = null;
    }
  }

  public int getQueryStatus() {
    return this.queryStatus;
  }

  public CusCreditReportHis setQueryStatus(int queryStatus) {
    this.queryStatus = queryStatus;
    setQueryStatusIsSet(true);
    return this;
  }

  public void unsetQueryStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUERYSTATUS_ISSET_ID);
  }

  /** Returns true if field queryStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __QUERYSTATUS_ISSET_ID);
  }

  public void setQueryStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUERYSTATUS_ISSET_ID, value);
  }

  public String getQueryStatusMsg() {
    return this.queryStatusMsg;
  }

  public CusCreditReportHis setQueryStatusMsg(String queryStatusMsg) {
    this.queryStatusMsg = queryStatusMsg;
    return this;
  }

  public void unsetQueryStatusMsg() {
    this.queryStatusMsg = null;
  }

  /** Returns true if field queryStatusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryStatusMsg() {
    return this.queryStatusMsg != null;
  }

  public void setQueryStatusMsgIsSet(boolean value) {
    if (!value) {
      this.queryStatusMsg = null;
    }
  }

  public String getReportNo() {
    return this.reportNo;
  }

  public CusCreditReportHis setReportNo(String reportNo) {
    this.reportNo = reportNo;
    return this;
  }

  public void unsetReportNo() {
    this.reportNo = null;
  }

  /** Returns true if field reportNo is set (has been assigned a value) and false otherwise */
  public boolean isSetReportNo() {
    return this.reportNo != null;
  }

  public void setReportNoIsSet(boolean value) {
    if (!value) {
      this.reportNo = null;
    }
  }

  public String getQueryResult() {
    return this.queryResult;
  }

  public CusCreditReportHis setQueryResult(String queryResult) {
    this.queryResult = queryResult;
    return this;
  }

  public void unsetQueryResult() {
    this.queryResult = null;
  }

  /** Returns true if field queryResult is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryResult() {
    return this.queryResult != null;
  }

  public void setQueryResultIsSet(boolean value) {
    if (!value) {
      this.queryResult = null;
    }
  }

  public int getOperator() {
    return this.operator;
  }

  public CusCreditReportHis setOperator(int operator) {
    this.operator = operator;
    setOperatorIsSet(true);
    return this;
  }

  public void unsetOperator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPERATOR_ISSET_ID);
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return EncodingUtils.testBit(__isset_bitfield, __OPERATOR_ISSET_ID);
  }

  public void setOperatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPERATOR_ISSET_ID, value);
  }

  public String getCreateTime() {
    return this.createTime;
  }

  public CusCreditReportHis setCreateTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  public void unsetCreateTime() {
    this.createTime = null;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return this.createTime != null;
  }

  public void setCreateTimeIsSet(boolean value) {
    if (!value) {
      this.createTime = null;
    }
  }

  public int getCreator() {
    return this.creator;
  }

  public CusCreditReportHis setCreator(int creator) {
    this.creator = creator;
    setCreatorIsSet(true);
    return this;
  }

  public void unsetCreator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  /** Returns true if field creator is set (has been assigned a value) and false otherwise */
  public boolean isSetCreator() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATOR_ISSET_ID);
  }

  public void setCreatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATOR_ISSET_ID, value);
  }

  public String getRemark() {
    return this.remark;
  }

  public CusCreditReportHis setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public int getPage() {
    return this.page;
  }

  public CusCreditReportHis setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getRows() {
    return this.rows;
  }

  public CusCreditReportHis setRows(int rows) {
    this.rows = rows;
    setRowsIsSet(true);
    return this;
  }

  public void unsetRows() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  /** Returns true if field rows is set (has been assigned a value) and false otherwise */
  public boolean isSetRows() {
    return EncodingUtils.testBit(__isset_bitfield, __ROWS_ISSET_ID);
  }

  public void setRowsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ROWS_ISSET_ID, value);
  }

  public String getRealName() {
    return this.realName;
  }

  public CusCreditReportHis setRealName(String realName) {
    this.realName = realName;
    return this;
  }

  public void unsetRealName() {
    this.realName = null;
  }

  /** Returns true if field realName is set (has been assigned a value) and false otherwise */
  public boolean isSetRealName() {
    return this.realName != null;
  }

  public void setRealNameIsSet(boolean value) {
    if (!value) {
      this.realName = null;
    }
  }

  public String getBeginCreateTime() {
    return this.beginCreateTime;
  }

  public CusCreditReportHis setBeginCreateTime(String beginCreateTime) {
    this.beginCreateTime = beginCreateTime;
    return this;
  }

  public void unsetBeginCreateTime() {
    this.beginCreateTime = null;
  }

  /** Returns true if field beginCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginCreateTime() {
    return this.beginCreateTime != null;
  }

  public void setBeginCreateTimeIsSet(boolean value) {
    if (!value) {
      this.beginCreateTime = null;
    }
  }

  public String getEndCreateTime() {
    return this.endCreateTime;
  }

  public CusCreditReportHis setEndCreateTime(String endCreateTime) {
    this.endCreateTime = endCreateTime;
    return this;
  }

  public void unsetEndCreateTime() {
    this.endCreateTime = null;
  }

  /** Returns true if field endCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndCreateTime() {
    return this.endCreateTime != null;
  }

  public void setEndCreateTimeIsSet(boolean value) {
    if (!value) {
      this.endCreateTime = null;
    }
  }

  public int getIsRepeat() {
    return this.isRepeat;
  }

  public CusCreditReportHis setIsRepeat(int isRepeat) {
    this.isRepeat = isRepeat;
    setIsRepeatIsSet(true);
    return this;
  }

  public void unsetIsRepeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISREPEAT_ISSET_ID);
  }

  /** Returns true if field isRepeat is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRepeat() {
    return EncodingUtils.testBit(__isset_bitfield, __ISREPEAT_ISSET_ID);
  }

  public void setIsRepeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISREPEAT_ISSET_ID, value);
  }

  public double getUnitPrice() {
    return this.unitPrice;
  }

  public CusCreditReportHis setUnitPrice(double unitPrice) {
    this.unitPrice = unitPrice;
    setUnitPriceIsSet(true);
    return this;
  }

  public void unsetUnitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UNITPRICE_ISSET_ID);
  }

  /** Returns true if field unitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UNITPRICE_ISSET_ID);
  }

  public void setUnitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UNITPRICE_ISSET_ID, value);
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public CusCreditReportHis setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public double getTotalPrice() {
    return this.totalPrice;
  }

  public CusCreditReportHis setTotalPrice(double totalPrice) {
    this.totalPrice = totalPrice;
    setTotalPriceIsSet(true);
    return this;
  }

  public void unsetTotalPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  /** Returns true if field totalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPRICE_ISSET_ID);
  }

  public void setTotalPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPRICE_ISSET_ID, value);
  }

  public String getQueryPbocStatus() {
    return this.queryPbocStatus;
  }

  public CusCreditReportHis setQueryPbocStatus(String queryPbocStatus) {
    this.queryPbocStatus = queryPbocStatus;
    return this;
  }

  public void unsetQueryPbocStatus() {
    this.queryPbocStatus = null;
  }

  /** Returns true if field queryPbocStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetQueryPbocStatus() {
    return this.queryPbocStatus != null;
  }

  public void setQueryPbocStatusIsSet(boolean value) {
    if (!value) {
      this.queryPbocStatus = null;
    }
  }

  public int getUserIdsSize() {
    return (this.userIds == null) ? 0 : this.userIds.size();
  }

  public java.util.Iterator<Integer> getUserIdsIterator() {
    return (this.userIds == null) ? null : this.userIds.iterator();
  }

  public void addToUserIds(int elem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<Integer>();
    }
    this.userIds.add(elem);
  }

  public List<Integer> getUserIds() {
    return this.userIds;
  }

  public CusCreditReportHis setUserIds(List<Integer> userIds) {
    this.userIds = userIds;
    return this;
  }

  public void unsetUserIds() {
    this.userIds = null;
  }

  /** Returns true if field userIds is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIds() {
    return this.userIds != null;
  }

  public void setUserIdsIsSet(boolean value) {
    if (!value) {
      this.userIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case ACCT_ID:
      if (value == null) {
        unsetAcctId();
      } else {
        setAcctId((Integer)value);
      }
      break;

    case DATA_SOURCE:
      if (value == null) {
        unsetDataSource();
      } else {
        setDataSource((Integer)value);
      }
      break;

    case REPORT_TYPE:
      if (value == null) {
        unsetReportType();
      } else {
        setReportType((Integer)value);
      }
      break;

    case QUERY_RESON_ID:
      if (value == null) {
        unsetQueryResonId();
      } else {
        setQueryResonId((String)value);
      }
      break;

    case QUERY_NAME:
      if (value == null) {
        unsetQueryName();
      } else {
        setQueryName((String)value);
      }
      break;

    case QUERY_DOCUMENT_NO:
      if (value == null) {
        unsetQueryDocumentNo();
      } else {
        setQueryDocumentNo((String)value);
      }
      break;

    case QUERY_PHONE:
      if (value == null) {
        unsetQueryPhone();
      } else {
        setQueryPhone((String)value);
      }
      break;

    case QUERY_STATUS:
      if (value == null) {
        unsetQueryStatus();
      } else {
        setQueryStatus((Integer)value);
      }
      break;

    case QUERY_STATUS_MSG:
      if (value == null) {
        unsetQueryStatusMsg();
      } else {
        setQueryStatusMsg((String)value);
      }
      break;

    case REPORT_NO:
      if (value == null) {
        unsetReportNo();
      } else {
        setReportNo((String)value);
      }
      break;

    case QUERY_RESULT:
      if (value == null) {
        unsetQueryResult();
      } else {
        setQueryResult((String)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((String)value);
      }
      break;

    case CREATOR:
      if (value == null) {
        unsetCreator();
      } else {
        setCreator((Integer)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((Integer)value);
      }
      break;

    case REAL_NAME:
      if (value == null) {
        unsetRealName();
      } else {
        setRealName((String)value);
      }
      break;

    case BEGIN_CREATE_TIME:
      if (value == null) {
        unsetBeginCreateTime();
      } else {
        setBeginCreateTime((String)value);
      }
      break;

    case END_CREATE_TIME:
      if (value == null) {
        unsetEndCreateTime();
      } else {
        setEndCreateTime((String)value);
      }
      break;

    case IS_REPEAT:
      if (value == null) {
        unsetIsRepeat();
      } else {
        setIsRepeat((Integer)value);
      }
      break;

    case UNIT_PRICE:
      if (value == null) {
        unsetUnitPrice();
      } else {
        setUnitPrice((Double)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((Integer)value);
      }
      break;

    case TOTAL_PRICE:
      if (value == null) {
        unsetTotalPrice();
      } else {
        setTotalPrice((Double)value);
      }
      break;

    case QUERY_PBOC_STATUS:
      if (value == null) {
        unsetQueryPbocStatus();
      } else {
        setQueryPbocStatus((String)value);
      }
      break;

    case USER_IDS:
      if (value == null) {
        unsetUserIds();
      } else {
        setUserIds((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case ACCT_ID:
      return Integer.valueOf(getAcctId());

    case DATA_SOURCE:
      return Integer.valueOf(getDataSource());

    case REPORT_TYPE:
      return Integer.valueOf(getReportType());

    case QUERY_RESON_ID:
      return getQueryResonId();

    case QUERY_NAME:
      return getQueryName();

    case QUERY_DOCUMENT_NO:
      return getQueryDocumentNo();

    case QUERY_PHONE:
      return getQueryPhone();

    case QUERY_STATUS:
      return Integer.valueOf(getQueryStatus());

    case QUERY_STATUS_MSG:
      return getQueryStatusMsg();

    case REPORT_NO:
      return getReportNo();

    case QUERY_RESULT:
      return getQueryResult();

    case OPERATOR:
      return Integer.valueOf(getOperator());

    case CREATE_TIME:
      return getCreateTime();

    case CREATOR:
      return Integer.valueOf(getCreator());

    case REMARK:
      return getRemark();

    case PAGE:
      return Integer.valueOf(getPage());

    case ROWS:
      return Integer.valueOf(getRows());

    case REAL_NAME:
      return getRealName();

    case BEGIN_CREATE_TIME:
      return getBeginCreateTime();

    case END_CREATE_TIME:
      return getEndCreateTime();

    case IS_REPEAT:
      return Integer.valueOf(getIsRepeat());

    case UNIT_PRICE:
      return Double.valueOf(getUnitPrice());

    case TOTAL_COUNT:
      return Integer.valueOf(getTotalCount());

    case TOTAL_PRICE:
      return Double.valueOf(getTotalPrice());

    case QUERY_PBOC_STATUS:
      return getQueryPbocStatus();

    case USER_IDS:
      return getUserIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case ACCT_ID:
      return isSetAcctId();
    case DATA_SOURCE:
      return isSetDataSource();
    case REPORT_TYPE:
      return isSetReportType();
    case QUERY_RESON_ID:
      return isSetQueryResonId();
    case QUERY_NAME:
      return isSetQueryName();
    case QUERY_DOCUMENT_NO:
      return isSetQueryDocumentNo();
    case QUERY_PHONE:
      return isSetQueryPhone();
    case QUERY_STATUS:
      return isSetQueryStatus();
    case QUERY_STATUS_MSG:
      return isSetQueryStatusMsg();
    case REPORT_NO:
      return isSetReportNo();
    case QUERY_RESULT:
      return isSetQueryResult();
    case OPERATOR:
      return isSetOperator();
    case CREATE_TIME:
      return isSetCreateTime();
    case CREATOR:
      return isSetCreator();
    case REMARK:
      return isSetRemark();
    case PAGE:
      return isSetPage();
    case ROWS:
      return isSetRows();
    case REAL_NAME:
      return isSetRealName();
    case BEGIN_CREATE_TIME:
      return isSetBeginCreateTime();
    case END_CREATE_TIME:
      return isSetEndCreateTime();
    case IS_REPEAT:
      return isSetIsRepeat();
    case UNIT_PRICE:
      return isSetUnitPrice();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case TOTAL_PRICE:
      return isSetTotalPrice();
    case QUERY_PBOC_STATUS:
      return isSetQueryPbocStatus();
    case USER_IDS:
      return isSetUserIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CusCreditReportHis)
      return this.equals((CusCreditReportHis)that);
    return false;
  }

  public boolean equals(CusCreditReportHis that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_acctId = true;
    boolean that_present_acctId = true;
    if (this_present_acctId || that_present_acctId) {
      if (!(this_present_acctId && that_present_acctId))
        return false;
      if (this.acctId != that.acctId)
        return false;
    }

    boolean this_present_dataSource = true;
    boolean that_present_dataSource = true;
    if (this_present_dataSource || that_present_dataSource) {
      if (!(this_present_dataSource && that_present_dataSource))
        return false;
      if (this.dataSource != that.dataSource)
        return false;
    }

    boolean this_present_reportType = true;
    boolean that_present_reportType = true;
    if (this_present_reportType || that_present_reportType) {
      if (!(this_present_reportType && that_present_reportType))
        return false;
      if (this.reportType != that.reportType)
        return false;
    }

    boolean this_present_queryResonId = true && this.isSetQueryResonId();
    boolean that_present_queryResonId = true && that.isSetQueryResonId();
    if (this_present_queryResonId || that_present_queryResonId) {
      if (!(this_present_queryResonId && that_present_queryResonId))
        return false;
      if (!this.queryResonId.equals(that.queryResonId))
        return false;
    }

    boolean this_present_queryName = true && this.isSetQueryName();
    boolean that_present_queryName = true && that.isSetQueryName();
    if (this_present_queryName || that_present_queryName) {
      if (!(this_present_queryName && that_present_queryName))
        return false;
      if (!this.queryName.equals(that.queryName))
        return false;
    }

    boolean this_present_queryDocumentNo = true && this.isSetQueryDocumentNo();
    boolean that_present_queryDocumentNo = true && that.isSetQueryDocumentNo();
    if (this_present_queryDocumentNo || that_present_queryDocumentNo) {
      if (!(this_present_queryDocumentNo && that_present_queryDocumentNo))
        return false;
      if (!this.queryDocumentNo.equals(that.queryDocumentNo))
        return false;
    }

    boolean this_present_queryPhone = true && this.isSetQueryPhone();
    boolean that_present_queryPhone = true && that.isSetQueryPhone();
    if (this_present_queryPhone || that_present_queryPhone) {
      if (!(this_present_queryPhone && that_present_queryPhone))
        return false;
      if (!this.queryPhone.equals(that.queryPhone))
        return false;
    }

    boolean this_present_queryStatus = true;
    boolean that_present_queryStatus = true;
    if (this_present_queryStatus || that_present_queryStatus) {
      if (!(this_present_queryStatus && that_present_queryStatus))
        return false;
      if (this.queryStatus != that.queryStatus)
        return false;
    }

    boolean this_present_queryStatusMsg = true && this.isSetQueryStatusMsg();
    boolean that_present_queryStatusMsg = true && that.isSetQueryStatusMsg();
    if (this_present_queryStatusMsg || that_present_queryStatusMsg) {
      if (!(this_present_queryStatusMsg && that_present_queryStatusMsg))
        return false;
      if (!this.queryStatusMsg.equals(that.queryStatusMsg))
        return false;
    }

    boolean this_present_reportNo = true && this.isSetReportNo();
    boolean that_present_reportNo = true && that.isSetReportNo();
    if (this_present_reportNo || that_present_reportNo) {
      if (!(this_present_reportNo && that_present_reportNo))
        return false;
      if (!this.reportNo.equals(that.reportNo))
        return false;
    }

    boolean this_present_queryResult = true && this.isSetQueryResult();
    boolean that_present_queryResult = true && that.isSetQueryResult();
    if (this_present_queryResult || that_present_queryResult) {
      if (!(this_present_queryResult && that_present_queryResult))
        return false;
      if (!this.queryResult.equals(that.queryResult))
        return false;
    }

    boolean this_present_operator = true;
    boolean that_present_operator = true;
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (this.operator != that.operator)
        return false;
    }

    boolean this_present_createTime = true && this.isSetCreateTime();
    boolean that_present_createTime = true && that.isSetCreateTime();
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (!this.createTime.equals(that.createTime))
        return false;
    }

    boolean this_present_creator = true;
    boolean that_present_creator = true;
    if (this_present_creator || that_present_creator) {
      if (!(this_present_creator && that_present_creator))
        return false;
      if (this.creator != that.creator)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_page = true;
    boolean that_present_page = true;
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_rows = true;
    boolean that_present_rows = true;
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (this.rows != that.rows)
        return false;
    }

    boolean this_present_realName = true && this.isSetRealName();
    boolean that_present_realName = true && that.isSetRealName();
    if (this_present_realName || that_present_realName) {
      if (!(this_present_realName && that_present_realName))
        return false;
      if (!this.realName.equals(that.realName))
        return false;
    }

    boolean this_present_beginCreateTime = true && this.isSetBeginCreateTime();
    boolean that_present_beginCreateTime = true && that.isSetBeginCreateTime();
    if (this_present_beginCreateTime || that_present_beginCreateTime) {
      if (!(this_present_beginCreateTime && that_present_beginCreateTime))
        return false;
      if (!this.beginCreateTime.equals(that.beginCreateTime))
        return false;
    }

    boolean this_present_endCreateTime = true && this.isSetEndCreateTime();
    boolean that_present_endCreateTime = true && that.isSetEndCreateTime();
    if (this_present_endCreateTime || that_present_endCreateTime) {
      if (!(this_present_endCreateTime && that_present_endCreateTime))
        return false;
      if (!this.endCreateTime.equals(that.endCreateTime))
        return false;
    }

    boolean this_present_isRepeat = true;
    boolean that_present_isRepeat = true;
    if (this_present_isRepeat || that_present_isRepeat) {
      if (!(this_present_isRepeat && that_present_isRepeat))
        return false;
      if (this.isRepeat != that.isRepeat)
        return false;
    }

    boolean this_present_unitPrice = true;
    boolean that_present_unitPrice = true;
    if (this_present_unitPrice || that_present_unitPrice) {
      if (!(this_present_unitPrice && that_present_unitPrice))
        return false;
      if (this.unitPrice != that.unitPrice)
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_totalPrice = true;
    boolean that_present_totalPrice = true;
    if (this_present_totalPrice || that_present_totalPrice) {
      if (!(this_present_totalPrice && that_present_totalPrice))
        return false;
      if (this.totalPrice != that.totalPrice)
        return false;
    }

    boolean this_present_queryPbocStatus = true && this.isSetQueryPbocStatus();
    boolean that_present_queryPbocStatus = true && that.isSetQueryPbocStatus();
    if (this_present_queryPbocStatus || that_present_queryPbocStatus) {
      if (!(this_present_queryPbocStatus && that_present_queryPbocStatus))
        return false;
      if (!this.queryPbocStatus.equals(that.queryPbocStatus))
        return false;
    }

    boolean this_present_userIds = true && this.isSetUserIds();
    boolean that_present_userIds = true && that.isSetUserIds();
    if (this_present_userIds || that_present_userIds) {
      if (!(this_present_userIds && that_present_userIds))
        return false;
      if (!this.userIds.equals(that.userIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_acctId = true;
    list.add(present_acctId);
    if (present_acctId)
      list.add(acctId);

    boolean present_dataSource = true;
    list.add(present_dataSource);
    if (present_dataSource)
      list.add(dataSource);

    boolean present_reportType = true;
    list.add(present_reportType);
    if (present_reportType)
      list.add(reportType);

    boolean present_queryResonId = true && (isSetQueryResonId());
    list.add(present_queryResonId);
    if (present_queryResonId)
      list.add(queryResonId);

    boolean present_queryName = true && (isSetQueryName());
    list.add(present_queryName);
    if (present_queryName)
      list.add(queryName);

    boolean present_queryDocumentNo = true && (isSetQueryDocumentNo());
    list.add(present_queryDocumentNo);
    if (present_queryDocumentNo)
      list.add(queryDocumentNo);

    boolean present_queryPhone = true && (isSetQueryPhone());
    list.add(present_queryPhone);
    if (present_queryPhone)
      list.add(queryPhone);

    boolean present_queryStatus = true;
    list.add(present_queryStatus);
    if (present_queryStatus)
      list.add(queryStatus);

    boolean present_queryStatusMsg = true && (isSetQueryStatusMsg());
    list.add(present_queryStatusMsg);
    if (present_queryStatusMsg)
      list.add(queryStatusMsg);

    boolean present_reportNo = true && (isSetReportNo());
    list.add(present_reportNo);
    if (present_reportNo)
      list.add(reportNo);

    boolean present_queryResult = true && (isSetQueryResult());
    list.add(present_queryResult);
    if (present_queryResult)
      list.add(queryResult);

    boolean present_operator = true;
    list.add(present_operator);
    if (present_operator)
      list.add(operator);

    boolean present_createTime = true && (isSetCreateTime());
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_creator = true;
    list.add(present_creator);
    if (present_creator)
      list.add(creator);

    boolean present_remark = true && (isSetRemark());
    list.add(present_remark);
    if (present_remark)
      list.add(remark);

    boolean present_page = true;
    list.add(present_page);
    if (present_page)
      list.add(page);

    boolean present_rows = true;
    list.add(present_rows);
    if (present_rows)
      list.add(rows);

    boolean present_realName = true && (isSetRealName());
    list.add(present_realName);
    if (present_realName)
      list.add(realName);

    boolean present_beginCreateTime = true && (isSetBeginCreateTime());
    list.add(present_beginCreateTime);
    if (present_beginCreateTime)
      list.add(beginCreateTime);

    boolean present_endCreateTime = true && (isSetEndCreateTime());
    list.add(present_endCreateTime);
    if (present_endCreateTime)
      list.add(endCreateTime);

    boolean present_isRepeat = true;
    list.add(present_isRepeat);
    if (present_isRepeat)
      list.add(isRepeat);

    boolean present_unitPrice = true;
    list.add(present_unitPrice);
    if (present_unitPrice)
      list.add(unitPrice);

    boolean present_totalCount = true;
    list.add(present_totalCount);
    if (present_totalCount)
      list.add(totalCount);

    boolean present_totalPrice = true;
    list.add(present_totalPrice);
    if (present_totalPrice)
      list.add(totalPrice);

    boolean present_queryPbocStatus = true && (isSetQueryPbocStatus());
    list.add(present_queryPbocStatus);
    if (present_queryPbocStatus)
      list.add(queryPbocStatus);

    boolean present_userIds = true && (isSetUserIds());
    list.add(present_userIds);
    if (present_userIds)
      list.add(userIds);

    return list.hashCode();
  }

  @Override
  public int compareTo(CusCreditReportHis other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcctId()).compareTo(other.isSetAcctId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcctId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acctId, other.acctId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataSource()).compareTo(other.isSetDataSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataSource, other.dataSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportType()).compareTo(other.isSetReportType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportType, other.reportType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryResonId()).compareTo(other.isSetQueryResonId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryResonId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryResonId, other.queryResonId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryName()).compareTo(other.isSetQueryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryName, other.queryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryDocumentNo()).compareTo(other.isSetQueryDocumentNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryDocumentNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryDocumentNo, other.queryDocumentNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryPhone()).compareTo(other.isSetQueryPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryPhone, other.queryPhone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryStatus()).compareTo(other.isSetQueryStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStatus, other.queryStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryStatusMsg()).compareTo(other.isSetQueryStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryStatusMsg, other.queryStatusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReportNo()).compareTo(other.isSetReportNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportNo, other.reportNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryResult()).compareTo(other.isSetQueryResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryResult, other.queryResult);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreator()).compareTo(other.isSetCreator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creator, other.creator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(other.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, other.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealName()).compareTo(other.isSetRealName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realName, other.realName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginCreateTime()).compareTo(other.isSetBeginCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginCreateTime, other.beginCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndCreateTime()).compareTo(other.isSetEndCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endCreateTime, other.endCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRepeat()).compareTo(other.isSetIsRepeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRepeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRepeat, other.isRepeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnitPrice()).compareTo(other.isSetUnitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitPrice, other.unitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalPrice()).compareTo(other.isSetTotalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalPrice, other.totalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueryPbocStatus()).compareTo(other.isSetQueryPbocStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueryPbocStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryPbocStatus, other.queryPbocStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIds()).compareTo(other.isSetUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userIds, other.userIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CusCreditReportHis(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("acctId:");
    sb.append(this.acctId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataSource:");
    sb.append(this.dataSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportType:");
    sb.append(this.reportType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryResonId:");
    if (this.queryResonId == null) {
      sb.append("null");
    } else {
      sb.append(this.queryResonId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryName:");
    if (this.queryName == null) {
      sb.append("null");
    } else {
      sb.append(this.queryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryDocumentNo:");
    if (this.queryDocumentNo == null) {
      sb.append("null");
    } else {
      sb.append(this.queryDocumentNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryPhone:");
    if (this.queryPhone == null) {
      sb.append("null");
    } else {
      sb.append(this.queryPhone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryStatus:");
    sb.append(this.queryStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryStatusMsg:");
    if (this.queryStatusMsg == null) {
      sb.append("null");
    } else {
      sb.append(this.queryStatusMsg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reportNo:");
    if (this.reportNo == null) {
      sb.append("null");
    } else {
      sb.append(this.reportNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryResult:");
    if (this.queryResult == null) {
      sb.append("null");
    } else {
      sb.append(this.queryResult);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operator:");
    sb.append(this.operator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    if (this.createTime == null) {
      sb.append("null");
    } else {
      sb.append(this.createTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("creator:");
    sb.append(this.creator);
    first = false;
    if (!first) sb.append(", ");
    sb.append("remark:");
    if (this.remark == null) {
      sb.append("null");
    } else {
      sb.append(this.remark);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("page:");
    sb.append(this.page);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rows:");
    sb.append(this.rows);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realName:");
    if (this.realName == null) {
      sb.append("null");
    } else {
      sb.append(this.realName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("beginCreateTime:");
    if (this.beginCreateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.beginCreateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endCreateTime:");
    if (this.endCreateTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endCreateTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRepeat:");
    sb.append(this.isRepeat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unitPrice:");
    sb.append(this.unitPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalPrice:");
    sb.append(this.totalPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryPbocStatus:");
    if (this.queryPbocStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.queryPbocStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userIds:");
    if (this.userIds == null) {
      sb.append("null");
    } else {
      sb.append(this.userIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CusCreditReportHisStandardSchemeFactory implements SchemeFactory {
    public CusCreditReportHisStandardScheme getScheme() {
      return new CusCreditReportHisStandardScheme();
    }
  }

  private static class CusCreditReportHisStandardScheme extends StandardScheme<CusCreditReportHis> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CusCreditReportHis struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ACCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.acctId = iprot.readI32();
              struct.setAcctIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataSource = iprot.readI32();
              struct.setDataSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REPORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reportType = iprot.readI32();
              struct.setReportTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUERY_RESON_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryResonId = iprot.readString();
              struct.setQueryResonIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUERY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryName = iprot.readString();
              struct.setQueryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // QUERY_DOCUMENT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryDocumentNo = iprot.readString();
              struct.setQueryDocumentNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUERY_PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryPhone = iprot.readString();
              struct.setQueryPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // QUERY_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.queryStatus = iprot.readI32();
              struct.setQueryStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // QUERY_STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryStatusMsg = iprot.readString();
              struct.setQueryStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REPORT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reportNo = iprot.readString();
              struct.setReportNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // QUERY_RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryResult = iprot.readString();
              struct.setQueryResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operator = iprot.readI32();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createTime = iprot.readString();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.creator = iprot.readI32();
              struct.setCreatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ROWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rows = iprot.readI32();
              struct.setRowsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // REAL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realName = iprot.readString();
              struct.setRealNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BEGIN_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.beginCreateTime = iprot.readString();
              struct.setBeginCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // END_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endCreateTime = iprot.readString();
              struct.setEndCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // IS_REPEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isRepeat = iprot.readI32();
              struct.setIsRepeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UNIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.unitPrice = iprot.readDouble();
              struct.setUnitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TOTAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalPrice = iprot.readDouble();
              struct.setTotalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // QUERY_PBOC_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queryPbocStatus = iprot.readString();
              struct.setQueryPbocStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                struct.userIds = new ArrayList<Integer>(_list192.size);
                int _elem193;
                for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                {
                  _elem193 = iprot.readI32();
                  struct.userIds.add(_elem193);
                }
                iprot.readListEnd();
              }
              struct.setUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CusCreditReportHis struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCT_ID_FIELD_DESC);
      oprot.writeI32(struct.acctId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATA_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.dataSource);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REPORT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.reportType);
      oprot.writeFieldEnd();
      if (struct.queryResonId != null) {
        oprot.writeFieldBegin(QUERY_RESON_ID_FIELD_DESC);
        oprot.writeString(struct.queryResonId);
        oprot.writeFieldEnd();
      }
      if (struct.queryName != null) {
        oprot.writeFieldBegin(QUERY_NAME_FIELD_DESC);
        oprot.writeString(struct.queryName);
        oprot.writeFieldEnd();
      }
      if (struct.queryDocumentNo != null) {
        oprot.writeFieldBegin(QUERY_DOCUMENT_NO_FIELD_DESC);
        oprot.writeString(struct.queryDocumentNo);
        oprot.writeFieldEnd();
      }
      if (struct.queryPhone != null) {
        oprot.writeFieldBegin(QUERY_PHONE_FIELD_DESC);
        oprot.writeString(struct.queryPhone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(QUERY_STATUS_FIELD_DESC);
      oprot.writeI32(struct.queryStatus);
      oprot.writeFieldEnd();
      if (struct.queryStatusMsg != null) {
        oprot.writeFieldBegin(QUERY_STATUS_MSG_FIELD_DESC);
        oprot.writeString(struct.queryStatusMsg);
        oprot.writeFieldEnd();
      }
      if (struct.reportNo != null) {
        oprot.writeFieldBegin(REPORT_NO_FIELD_DESC);
        oprot.writeString(struct.reportNo);
        oprot.writeFieldEnd();
      }
      if (struct.queryResult != null) {
        oprot.writeFieldBegin(QUERY_RESULT_FIELD_DESC);
        oprot.writeString(struct.queryResult);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
      oprot.writeI32(struct.operator);
      oprot.writeFieldEnd();
      if (struct.createTime != null) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.createTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATOR_FIELD_DESC);
      oprot.writeI32(struct.creator);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        oprot.writeFieldBegin(REMARK_FIELD_DESC);
        oprot.writeString(struct.remark);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PAGE_FIELD_DESC);
      oprot.writeI32(struct.page);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROWS_FIELD_DESC);
      oprot.writeI32(struct.rows);
      oprot.writeFieldEnd();
      if (struct.realName != null) {
        oprot.writeFieldBegin(REAL_NAME_FIELD_DESC);
        oprot.writeString(struct.realName);
        oprot.writeFieldEnd();
      }
      if (struct.beginCreateTime != null) {
        oprot.writeFieldBegin(BEGIN_CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.beginCreateTime);
        oprot.writeFieldEnd();
      }
      if (struct.endCreateTime != null) {
        oprot.writeFieldBegin(END_CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.endCreateTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_REPEAT_FIELD_DESC);
      oprot.writeI32(struct.isRepeat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNIT_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.unitPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_PRICE_FIELD_DESC);
      oprot.writeDouble(struct.totalPrice);
      oprot.writeFieldEnd();
      if (struct.queryPbocStatus != null) {
        oprot.writeFieldBegin(QUERY_PBOC_STATUS_FIELD_DESC);
        oprot.writeString(struct.queryPbocStatus);
        oprot.writeFieldEnd();
      }
      if (struct.userIds != null) {
        oprot.writeFieldBegin(USER_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.userIds.size()));
          for (int _iter195 : struct.userIds)
          {
            oprot.writeI32(_iter195);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CusCreditReportHisTupleSchemeFactory implements SchemeFactory {
    public CusCreditReportHisTupleScheme getScheme() {
      return new CusCreditReportHisTupleScheme();
    }
  }

  private static class CusCreditReportHisTupleScheme extends TupleScheme<CusCreditReportHis> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CusCreditReportHis struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetAcctId()) {
        optionals.set(1);
      }
      if (struct.isSetDataSource()) {
        optionals.set(2);
      }
      if (struct.isSetReportType()) {
        optionals.set(3);
      }
      if (struct.isSetQueryResonId()) {
        optionals.set(4);
      }
      if (struct.isSetQueryName()) {
        optionals.set(5);
      }
      if (struct.isSetQueryDocumentNo()) {
        optionals.set(6);
      }
      if (struct.isSetQueryPhone()) {
        optionals.set(7);
      }
      if (struct.isSetQueryStatus()) {
        optionals.set(8);
      }
      if (struct.isSetQueryStatusMsg()) {
        optionals.set(9);
      }
      if (struct.isSetReportNo()) {
        optionals.set(10);
      }
      if (struct.isSetQueryResult()) {
        optionals.set(11);
      }
      if (struct.isSetOperator()) {
        optionals.set(12);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(13);
      }
      if (struct.isSetCreator()) {
        optionals.set(14);
      }
      if (struct.isSetRemark()) {
        optionals.set(15);
      }
      if (struct.isSetPage()) {
        optionals.set(16);
      }
      if (struct.isSetRows()) {
        optionals.set(17);
      }
      if (struct.isSetRealName()) {
        optionals.set(18);
      }
      if (struct.isSetBeginCreateTime()) {
        optionals.set(19);
      }
      if (struct.isSetEndCreateTime()) {
        optionals.set(20);
      }
      if (struct.isSetIsRepeat()) {
        optionals.set(21);
      }
      if (struct.isSetUnitPrice()) {
        optionals.set(22);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(23);
      }
      if (struct.isSetTotalPrice()) {
        optionals.set(24);
      }
      if (struct.isSetQueryPbocStatus()) {
        optionals.set(25);
      }
      if (struct.isSetUserIds()) {
        optionals.set(26);
      }
      oprot.writeBitSet(optionals, 27);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetAcctId()) {
        oprot.writeI32(struct.acctId);
      }
      if (struct.isSetDataSource()) {
        oprot.writeI32(struct.dataSource);
      }
      if (struct.isSetReportType()) {
        oprot.writeI32(struct.reportType);
      }
      if (struct.isSetQueryResonId()) {
        oprot.writeString(struct.queryResonId);
      }
      if (struct.isSetQueryName()) {
        oprot.writeString(struct.queryName);
      }
      if (struct.isSetQueryDocumentNo()) {
        oprot.writeString(struct.queryDocumentNo);
      }
      if (struct.isSetQueryPhone()) {
        oprot.writeString(struct.queryPhone);
      }
      if (struct.isSetQueryStatus()) {
        oprot.writeI32(struct.queryStatus);
      }
      if (struct.isSetQueryStatusMsg()) {
        oprot.writeString(struct.queryStatusMsg);
      }
      if (struct.isSetReportNo()) {
        oprot.writeString(struct.reportNo);
      }
      if (struct.isSetQueryResult()) {
        oprot.writeString(struct.queryResult);
      }
      if (struct.isSetOperator()) {
        oprot.writeI32(struct.operator);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeString(struct.createTime);
      }
      if (struct.isSetCreator()) {
        oprot.writeI32(struct.creator);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetRows()) {
        oprot.writeI32(struct.rows);
      }
      if (struct.isSetRealName()) {
        oprot.writeString(struct.realName);
      }
      if (struct.isSetBeginCreateTime()) {
        oprot.writeString(struct.beginCreateTime);
      }
      if (struct.isSetEndCreateTime()) {
        oprot.writeString(struct.endCreateTime);
      }
      if (struct.isSetIsRepeat()) {
        oprot.writeI32(struct.isRepeat);
      }
      if (struct.isSetUnitPrice()) {
        oprot.writeDouble(struct.unitPrice);
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetTotalPrice()) {
        oprot.writeDouble(struct.totalPrice);
      }
      if (struct.isSetQueryPbocStatus()) {
        oprot.writeString(struct.queryPbocStatus);
      }
      if (struct.isSetUserIds()) {
        {
          oprot.writeI32(struct.userIds.size());
          for (int _iter196 : struct.userIds)
          {
            oprot.writeI32(_iter196);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CusCreditReportHis struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(27);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.acctId = iprot.readI32();
        struct.setAcctIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataSource = iprot.readI32();
        struct.setDataSourceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reportType = iprot.readI32();
        struct.setReportTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.queryResonId = iprot.readString();
        struct.setQueryResonIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.queryName = iprot.readString();
        struct.setQueryNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.queryDocumentNo = iprot.readString();
        struct.setQueryDocumentNoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.queryPhone = iprot.readString();
        struct.setQueryPhoneIsSet(true);
      }
      if (incoming.get(8)) {
        struct.queryStatus = iprot.readI32();
        struct.setQueryStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.queryStatusMsg = iprot.readString();
        struct.setQueryStatusMsgIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reportNo = iprot.readString();
        struct.setReportNoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.queryResult = iprot.readString();
        struct.setQueryResultIsSet(true);
      }
      if (incoming.get(12)) {
        struct.operator = iprot.readI32();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(13)) {
        struct.createTime = iprot.readString();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.creator = iprot.readI32();
        struct.setCreatorIsSet(true);
      }
      if (incoming.get(15)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(16)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.rows = iprot.readI32();
        struct.setRowsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.realName = iprot.readString();
        struct.setRealNameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.beginCreateTime = iprot.readString();
        struct.setBeginCreateTimeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.endCreateTime = iprot.readString();
        struct.setEndCreateTimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.isRepeat = iprot.readI32();
        struct.setIsRepeatIsSet(true);
      }
      if (incoming.get(22)) {
        struct.unitPrice = iprot.readDouble();
        struct.setUnitPriceIsSet(true);
      }
      if (incoming.get(23)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(24)) {
        struct.totalPrice = iprot.readDouble();
        struct.setTotalPriceIsSet(true);
      }
      if (incoming.get(25)) {
        struct.queryPbocStatus = iprot.readString();
        struct.setQueryPbocStatusIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.userIds = new ArrayList<Integer>(_list197.size);
          int _elem198;
          for (int _i199 = 0; _i199 < _list197.size; ++_i199)
          {
            _elem198 = iprot.readI32();
            struct.userIds.add(_elem198);
          }
        }
        struct.setUserIdsIsSet(true);
      }
    }
  }

}


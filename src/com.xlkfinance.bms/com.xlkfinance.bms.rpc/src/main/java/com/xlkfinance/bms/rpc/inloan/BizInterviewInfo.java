/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.inloan;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-1-11")
public class BizInterviewInfo implements org.apache.thrift.TBase<BizInterviewInfo, BizInterviewInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizInterviewInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizInterviewInfo");

  private static final org.apache.thrift.protocol.TField PID_FIELD_DESC = new org.apache.thrift.protocol.TField("pid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INTERVIEW_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField INTERVIEW_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField INTERVIEW_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewPlace", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField RECEIVE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField HANDING_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("handingTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MORTGAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField MORTGAGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageCode", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MORTGAGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageTime", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MORTGAGE_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageUser", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField MORTGAGE_HAND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageHandTime", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrant", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantTime", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantUser", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField INTERVIEW_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewStatus", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField NOTARIZATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizationStatus", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField MORTGAGE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgageStatus", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CREATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createDate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CREATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createrId", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField UPDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateId", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField UPDATE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateDate", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField INTERVIEWER_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewer", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField NOTARIZATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("notarizator", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField MORTGATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("mortgator", org.apache.thrift.protocol.TType.STRING, (short)27);
  private static final org.apache.thrift.protocol.TField HIS_WARRANT_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hisWarrantUserName", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField INTERVIEW_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("interviewFile", org.apache.thrift.protocol.TType.STRUCT, (short)30);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizInterviewInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizInterviewInfoTupleSchemeFactory());
  }

  public int pid; // required
  public int projectId; // required
  public int interviewId; // required
  public String interviewTime; // required
  public String interviewPlace; // required
  public String notarizationType; // required
  public String receiveTime; // required
  public int notarizationId; // required
  public String handingTime; // required
  public String mortgageName; // required
  public String mortgageCode; // required
  public String mortgageTime; // required
  public int mortgageUser; // required
  public String mortgageHandTime; // required
  public String hisWarrant; // required
  public String hisWarrantTime; // required
  public int hisWarrantUser; // required
  public int interviewStatus; // required
  public int notarizationStatus; // required
  public int mortgageStatus; // required
  public String createDate; // required
  public int createrId; // required
  public int updateId; // required
  public String updateDate; // required
  public String interviewer; // required
  public String notarizator; // required
  public String mortgator; // required
  public String hisWarrantUserName; // required
  public BizInterviewFile interviewFile; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PID((short)1, "pid"),
    PROJECT_ID((short)2, "projectId"),
    INTERVIEW_ID((short)3, "interviewId"),
    INTERVIEW_TIME((short)4, "interviewTime"),
    INTERVIEW_PLACE((short)5, "interviewPlace"),
    NOTARIZATION_TYPE((short)6, "notarizationType"),
    RECEIVE_TIME((short)7, "receiveTime"),
    NOTARIZATION_ID((short)8, "notarizationId"),
    HANDING_TIME((short)9, "handingTime"),
    MORTGAGE_NAME((short)10, "mortgageName"),
    MORTGAGE_CODE((short)11, "mortgageCode"),
    MORTGAGE_TIME((short)12, "mortgageTime"),
    MORTGAGE_USER((short)13, "mortgageUser"),
    MORTGAGE_HAND_TIME((short)14, "mortgageHandTime"),
    HIS_WARRANT((short)15, "hisWarrant"),
    HIS_WARRANT_TIME((short)16, "hisWarrantTime"),
    HIS_WARRANT_USER((short)17, "hisWarrantUser"),
    INTERVIEW_STATUS((short)18, "interviewStatus"),
    NOTARIZATION_STATUS((short)19, "notarizationStatus"),
    MORTGAGE_STATUS((short)20, "mortgageStatus"),
    CREATE_DATE((short)21, "createDate"),
    CREATER_ID((short)22, "createrId"),
    UPDATE_ID((short)23, "updateId"),
    UPDATE_DATE((short)24, "updateDate"),
    INTERVIEWER((short)25, "interviewer"),
    NOTARIZATOR((short)26, "notarizator"),
    MORTGATOR((short)27, "mortgator"),
    HIS_WARRANT_USER_NAME((short)28, "hisWarrantUserName"),
    INTERVIEW_FILE((short)30, "interviewFile");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PID
          return PID;
        case 2: // PROJECT_ID
          return PROJECT_ID;
        case 3: // INTERVIEW_ID
          return INTERVIEW_ID;
        case 4: // INTERVIEW_TIME
          return INTERVIEW_TIME;
        case 5: // INTERVIEW_PLACE
          return INTERVIEW_PLACE;
        case 6: // NOTARIZATION_TYPE
          return NOTARIZATION_TYPE;
        case 7: // RECEIVE_TIME
          return RECEIVE_TIME;
        case 8: // NOTARIZATION_ID
          return NOTARIZATION_ID;
        case 9: // HANDING_TIME
          return HANDING_TIME;
        case 10: // MORTGAGE_NAME
          return MORTGAGE_NAME;
        case 11: // MORTGAGE_CODE
          return MORTGAGE_CODE;
        case 12: // MORTGAGE_TIME
          return MORTGAGE_TIME;
        case 13: // MORTGAGE_USER
          return MORTGAGE_USER;
        case 14: // MORTGAGE_HAND_TIME
          return MORTGAGE_HAND_TIME;
        case 15: // HIS_WARRANT
          return HIS_WARRANT;
        case 16: // HIS_WARRANT_TIME
          return HIS_WARRANT_TIME;
        case 17: // HIS_WARRANT_USER
          return HIS_WARRANT_USER;
        case 18: // INTERVIEW_STATUS
          return INTERVIEW_STATUS;
        case 19: // NOTARIZATION_STATUS
          return NOTARIZATION_STATUS;
        case 20: // MORTGAGE_STATUS
          return MORTGAGE_STATUS;
        case 21: // CREATE_DATE
          return CREATE_DATE;
        case 22: // CREATER_ID
          return CREATER_ID;
        case 23: // UPDATE_ID
          return UPDATE_ID;
        case 24: // UPDATE_DATE
          return UPDATE_DATE;
        case 25: // INTERVIEWER
          return INTERVIEWER;
        case 26: // NOTARIZATOR
          return NOTARIZATOR;
        case 27: // MORTGATOR
          return MORTGATOR;
        case 28: // HIS_WARRANT_USER_NAME
          return HIS_WARRANT_USER_NAME;
        case 30: // INTERVIEW_FILE
          return INTERVIEW_FILE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __PROJECTID_ISSET_ID = 1;
  private static final int __INTERVIEWID_ISSET_ID = 2;
  private static final int __NOTARIZATIONID_ISSET_ID = 3;
  private static final int __MORTGAGEUSER_ISSET_ID = 4;
  private static final int __HISWARRANTUSER_ISSET_ID = 5;
  private static final int __INTERVIEWSTATUS_ISSET_ID = 6;
  private static final int __NOTARIZATIONSTATUS_ISSET_ID = 7;
  private static final int __MORTGAGESTATUS_ISSET_ID = 8;
  private static final int __CREATERID_ISSET_ID = 9;
  private static final int __UPDATEID_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PID, new org.apache.thrift.meta_data.FieldMetaData("pid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVIEW_ID, new org.apache.thrift.meta_data.FieldMetaData("interviewId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVIEW_TIME, new org.apache.thrift.meta_data.FieldMetaData("interviewTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVIEW_PLACE, new org.apache.thrift.meta_data.FieldMetaData("interviewPlace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTARIZATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("notarizationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVE_TIME, new org.apache.thrift.meta_data.FieldMetaData("receiveTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTARIZATION_ID, new org.apache.thrift.meta_data.FieldMetaData("notarizationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HANDING_TIME, new org.apache.thrift.meta_data.FieldMetaData("handingTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("mortgageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("mortgageCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("mortgageTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGAGE_USER, new org.apache.thrift.meta_data.FieldMetaData("mortgageUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_HAND_TIME, new org.apache.thrift.meta_data.FieldMetaData("mortgageHandTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT, new org.apache.thrift.meta_data.FieldMetaData("hisWarrant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT_TIME, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT_USER, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantUser", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INTERVIEW_STATUS, new org.apache.thrift.meta_data.FieldMetaData("interviewStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOTARIZATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("notarizationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MORTGAGE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mortgageStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("createDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATER_ID, new org.apache.thrift.meta_data.FieldMetaData("createrId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("updateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_DATE, new org.apache.thrift.meta_data.FieldMetaData("updateDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVIEWER, new org.apache.thrift.meta_data.FieldMetaData("interviewer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTARIZATOR, new org.apache.thrift.meta_data.FieldMetaData("notarizator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MORTGATOR, new org.apache.thrift.meta_data.FieldMetaData("mortgator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HIS_WARRANT_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("hisWarrantUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERVIEW_FILE, new org.apache.thrift.meta_data.FieldMetaData("interviewFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "BizInterviewFile")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizInterviewInfo.class, metaDataMap);
  }

  public BizInterviewInfo() {
  }

  public BizInterviewInfo(
    int pid,
    int projectId,
    int interviewId,
    String interviewTime,
    String interviewPlace,
    String notarizationType,
    String receiveTime,
    int notarizationId,
    String handingTime,
    String mortgageName,
    String mortgageCode,
    String mortgageTime,
    int mortgageUser,
    String mortgageHandTime,
    String hisWarrant,
    String hisWarrantTime,
    int hisWarrantUser,
    int interviewStatus,
    int notarizationStatus,
    int mortgageStatus,
    String createDate,
    int createrId,
    int updateId,
    String updateDate,
    String interviewer,
    String notarizator,
    String mortgator,
    String hisWarrantUserName,
    BizInterviewFile interviewFile)
  {
    this();
    this.pid = pid;
    setPidIsSet(true);
    this.projectId = projectId;
    setProjectIdIsSet(true);
    this.interviewId = interviewId;
    setInterviewIdIsSet(true);
    this.interviewTime = interviewTime;
    this.interviewPlace = interviewPlace;
    this.notarizationType = notarizationType;
    this.receiveTime = receiveTime;
    this.notarizationId = notarizationId;
    setNotarizationIdIsSet(true);
    this.handingTime = handingTime;
    this.mortgageName = mortgageName;
    this.mortgageCode = mortgageCode;
    this.mortgageTime = mortgageTime;
    this.mortgageUser = mortgageUser;
    setMortgageUserIsSet(true);
    this.mortgageHandTime = mortgageHandTime;
    this.hisWarrant = hisWarrant;
    this.hisWarrantTime = hisWarrantTime;
    this.hisWarrantUser = hisWarrantUser;
    setHisWarrantUserIsSet(true);
    this.interviewStatus = interviewStatus;
    setInterviewStatusIsSet(true);
    this.notarizationStatus = notarizationStatus;
    setNotarizationStatusIsSet(true);
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    this.createDate = createDate;
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    this.updateDate = updateDate;
    this.interviewer = interviewer;
    this.notarizator = notarizator;
    this.mortgator = mortgator;
    this.hisWarrantUserName = hisWarrantUserName;
    this.interviewFile = interviewFile;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizInterviewInfo(BizInterviewInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pid = other.pid;
    this.projectId = other.projectId;
    this.interviewId = other.interviewId;
    if (other.isSetInterviewTime()) {
      this.interviewTime = other.interviewTime;
    }
    if (other.isSetInterviewPlace()) {
      this.interviewPlace = other.interviewPlace;
    }
    if (other.isSetNotarizationType()) {
      this.notarizationType = other.notarizationType;
    }
    if (other.isSetReceiveTime()) {
      this.receiveTime = other.receiveTime;
    }
    this.notarizationId = other.notarizationId;
    if (other.isSetHandingTime()) {
      this.handingTime = other.handingTime;
    }
    if (other.isSetMortgageName()) {
      this.mortgageName = other.mortgageName;
    }
    if (other.isSetMortgageCode()) {
      this.mortgageCode = other.mortgageCode;
    }
    if (other.isSetMortgageTime()) {
      this.mortgageTime = other.mortgageTime;
    }
    this.mortgageUser = other.mortgageUser;
    if (other.isSetMortgageHandTime()) {
      this.mortgageHandTime = other.mortgageHandTime;
    }
    if (other.isSetHisWarrant()) {
      this.hisWarrant = other.hisWarrant;
    }
    if (other.isSetHisWarrantTime()) {
      this.hisWarrantTime = other.hisWarrantTime;
    }
    this.hisWarrantUser = other.hisWarrantUser;
    this.interviewStatus = other.interviewStatus;
    this.notarizationStatus = other.notarizationStatus;
    this.mortgageStatus = other.mortgageStatus;
    if (other.isSetCreateDate()) {
      this.createDate = other.createDate;
    }
    this.createrId = other.createrId;
    this.updateId = other.updateId;
    if (other.isSetUpdateDate()) {
      this.updateDate = other.updateDate;
    }
    if (other.isSetInterviewer()) {
      this.interviewer = other.interviewer;
    }
    if (other.isSetNotarizator()) {
      this.notarizator = other.notarizator;
    }
    if (other.isSetMortgator()) {
      this.mortgator = other.mortgator;
    }
    if (other.isSetHisWarrantUserName()) {
      this.hisWarrantUserName = other.hisWarrantUserName;
    }
    if (other.isSetInterviewFile()) {
      this.interviewFile = other.interviewFile;
    }
  }

  public BizInterviewInfo deepCopy() {
    return new BizInterviewInfo(this);
  }

  @Override
  public void clear() {
    setPidIsSet(false);
    this.pid = 0;
    setProjectIdIsSet(false);
    this.projectId = 0;
    setInterviewIdIsSet(false);
    this.interviewId = 0;
    this.interviewTime = null;
    this.interviewPlace = null;
    this.notarizationType = null;
    this.receiveTime = null;
    setNotarizationIdIsSet(false);
    this.notarizationId = 0;
    this.handingTime = null;
    this.mortgageName = null;
    this.mortgageCode = null;
    this.mortgageTime = null;
    setMortgageUserIsSet(false);
    this.mortgageUser = 0;
    this.mortgageHandTime = null;
    this.hisWarrant = null;
    this.hisWarrantTime = null;
    setHisWarrantUserIsSet(false);
    this.hisWarrantUser = 0;
    setInterviewStatusIsSet(false);
    this.interviewStatus = 0;
    setNotarizationStatusIsSet(false);
    this.notarizationStatus = 0;
    setMortgageStatusIsSet(false);
    this.mortgageStatus = 0;
    this.createDate = null;
    setCreaterIdIsSet(false);
    this.createrId = 0;
    setUpdateIdIsSet(false);
    this.updateId = 0;
    this.updateDate = null;
    this.interviewer = null;
    this.notarizator = null;
    this.mortgator = null;
    this.hisWarrantUserName = null;
    this.interviewFile = null;
  }

  public int getPid() {
    return this.pid;
  }

  public BizInterviewInfo setPid(int pid) {
    this.pid = pid;
    setPidIsSet(true);
    return this;
  }

  public void unsetPid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pid is set (has been assigned a value) and false otherwise */
  public boolean isSetPid() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public int getProjectId() {
    return this.projectId;
  }

  public BizInterviewInfo setProjectId(int projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  public int getInterviewId() {
    return this.interviewId;
  }

  public BizInterviewInfo setInterviewId(int interviewId) {
    this.interviewId = interviewId;
    setInterviewIdIsSet(true);
    return this;
  }

  public void unsetInterviewId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVIEWID_ISSET_ID);
  }

  /** Returns true if field interviewId is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewId() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVIEWID_ISSET_ID);
  }

  public void setInterviewIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVIEWID_ISSET_ID, value);
  }

  public String getInterviewTime() {
    return this.interviewTime;
  }

  public BizInterviewInfo setInterviewTime(String interviewTime) {
    this.interviewTime = interviewTime;
    return this;
  }

  public void unsetInterviewTime() {
    this.interviewTime = null;
  }

  /** Returns true if field interviewTime is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewTime() {
    return this.interviewTime != null;
  }

  public void setInterviewTimeIsSet(boolean value) {
    if (!value) {
      this.interviewTime = null;
    }
  }

  public String getInterviewPlace() {
    return this.interviewPlace;
  }

  public BizInterviewInfo setInterviewPlace(String interviewPlace) {
    this.interviewPlace = interviewPlace;
    return this;
  }

  public void unsetInterviewPlace() {
    this.interviewPlace = null;
  }

  /** Returns true if field interviewPlace is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewPlace() {
    return this.interviewPlace != null;
  }

  public void setInterviewPlaceIsSet(boolean value) {
    if (!value) {
      this.interviewPlace = null;
    }
  }

  public String getNotarizationType() {
    return this.notarizationType;
  }

  public BizInterviewInfo setNotarizationType(String notarizationType) {
    this.notarizationType = notarizationType;
    return this;
  }

  public void unsetNotarizationType() {
    this.notarizationType = null;
  }

  /** Returns true if field notarizationType is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationType() {
    return this.notarizationType != null;
  }

  public void setNotarizationTypeIsSet(boolean value) {
    if (!value) {
      this.notarizationType = null;
    }
  }

  public String getReceiveTime() {
    return this.receiveTime;
  }

  public BizInterviewInfo setReceiveTime(String receiveTime) {
    this.receiveTime = receiveTime;
    return this;
  }

  public void unsetReceiveTime() {
    this.receiveTime = null;
  }

  /** Returns true if field receiveTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveTime() {
    return this.receiveTime != null;
  }

  public void setReceiveTimeIsSet(boolean value) {
    if (!value) {
      this.receiveTime = null;
    }
  }

  public int getNotarizationId() {
    return this.notarizationId;
  }

  public BizInterviewInfo setNotarizationId(int notarizationId) {
    this.notarizationId = notarizationId;
    setNotarizationIdIsSet(true);
    return this;
  }

  public void unsetNotarizationId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTARIZATIONID_ISSET_ID);
  }

  /** Returns true if field notarizationId is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationId() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTARIZATIONID_ISSET_ID);
  }

  public void setNotarizationIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTARIZATIONID_ISSET_ID, value);
  }

  public String getHandingTime() {
    return this.handingTime;
  }

  public BizInterviewInfo setHandingTime(String handingTime) {
    this.handingTime = handingTime;
    return this;
  }

  public void unsetHandingTime() {
    this.handingTime = null;
  }

  /** Returns true if field handingTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHandingTime() {
    return this.handingTime != null;
  }

  public void setHandingTimeIsSet(boolean value) {
    if (!value) {
      this.handingTime = null;
    }
  }

  public String getMortgageName() {
    return this.mortgageName;
  }

  public BizInterviewInfo setMortgageName(String mortgageName) {
    this.mortgageName = mortgageName;
    return this;
  }

  public void unsetMortgageName() {
    this.mortgageName = null;
  }

  /** Returns true if field mortgageName is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageName() {
    return this.mortgageName != null;
  }

  public void setMortgageNameIsSet(boolean value) {
    if (!value) {
      this.mortgageName = null;
    }
  }

  public String getMortgageCode() {
    return this.mortgageCode;
  }

  public BizInterviewInfo setMortgageCode(String mortgageCode) {
    this.mortgageCode = mortgageCode;
    return this;
  }

  public void unsetMortgageCode() {
    this.mortgageCode = null;
  }

  /** Returns true if field mortgageCode is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageCode() {
    return this.mortgageCode != null;
  }

  public void setMortgageCodeIsSet(boolean value) {
    if (!value) {
      this.mortgageCode = null;
    }
  }

  public String getMortgageTime() {
    return this.mortgageTime;
  }

  public BizInterviewInfo setMortgageTime(String mortgageTime) {
    this.mortgageTime = mortgageTime;
    return this;
  }

  public void unsetMortgageTime() {
    this.mortgageTime = null;
  }

  /** Returns true if field mortgageTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageTime() {
    return this.mortgageTime != null;
  }

  public void setMortgageTimeIsSet(boolean value) {
    if (!value) {
      this.mortgageTime = null;
    }
  }

  public int getMortgageUser() {
    return this.mortgageUser;
  }

  public BizInterviewInfo setMortgageUser(int mortgageUser) {
    this.mortgageUser = mortgageUser;
    setMortgageUserIsSet(true);
    return this;
  }

  public void unsetMortgageUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGEUSER_ISSET_ID);
  }

  /** Returns true if field mortgageUser is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageUser() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGEUSER_ISSET_ID);
  }

  public void setMortgageUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGEUSER_ISSET_ID, value);
  }

  public String getMortgageHandTime() {
    return this.mortgageHandTime;
  }

  public BizInterviewInfo setMortgageHandTime(String mortgageHandTime) {
    this.mortgageHandTime = mortgageHandTime;
    return this;
  }

  public void unsetMortgageHandTime() {
    this.mortgageHandTime = null;
  }

  /** Returns true if field mortgageHandTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageHandTime() {
    return this.mortgageHandTime != null;
  }

  public void setMortgageHandTimeIsSet(boolean value) {
    if (!value) {
      this.mortgageHandTime = null;
    }
  }

  public String getHisWarrant() {
    return this.hisWarrant;
  }

  public BizInterviewInfo setHisWarrant(String hisWarrant) {
    this.hisWarrant = hisWarrant;
    return this;
  }

  public void unsetHisWarrant() {
    this.hisWarrant = null;
  }

  /** Returns true if field hisWarrant is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrant() {
    return this.hisWarrant != null;
  }

  public void setHisWarrantIsSet(boolean value) {
    if (!value) {
      this.hisWarrant = null;
    }
  }

  public String getHisWarrantTime() {
    return this.hisWarrantTime;
  }

  public BizInterviewInfo setHisWarrantTime(String hisWarrantTime) {
    this.hisWarrantTime = hisWarrantTime;
    return this;
  }

  public void unsetHisWarrantTime() {
    this.hisWarrantTime = null;
  }

  /** Returns true if field hisWarrantTime is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantTime() {
    return this.hisWarrantTime != null;
  }

  public void setHisWarrantTimeIsSet(boolean value) {
    if (!value) {
      this.hisWarrantTime = null;
    }
  }

  public int getHisWarrantUser() {
    return this.hisWarrantUser;
  }

  public BizInterviewInfo setHisWarrantUser(int hisWarrantUser) {
    this.hisWarrantUser = hisWarrantUser;
    setHisWarrantUserIsSet(true);
    return this;
  }

  public void unsetHisWarrantUser() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HISWARRANTUSER_ISSET_ID);
  }

  /** Returns true if field hisWarrantUser is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantUser() {
    return EncodingUtils.testBit(__isset_bitfield, __HISWARRANTUSER_ISSET_ID);
  }

  public void setHisWarrantUserIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HISWARRANTUSER_ISSET_ID, value);
  }

  public int getInterviewStatus() {
    return this.interviewStatus;
  }

  public BizInterviewInfo setInterviewStatus(int interviewStatus) {
    this.interviewStatus = interviewStatus;
    setInterviewStatusIsSet(true);
    return this;
  }

  public void unsetInterviewStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INTERVIEWSTATUS_ISSET_ID);
  }

  /** Returns true if field interviewStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __INTERVIEWSTATUS_ISSET_ID);
  }

  public void setInterviewStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INTERVIEWSTATUS_ISSET_ID, value);
  }

  public int getNotarizationStatus() {
    return this.notarizationStatus;
  }

  public BizInterviewInfo setNotarizationStatus(int notarizationStatus) {
    this.notarizationStatus = notarizationStatus;
    setNotarizationStatusIsSet(true);
    return this;
  }

  public void unsetNotarizationStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTARIZATIONSTATUS_ISSET_ID);
  }

  /** Returns true if field notarizationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizationStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __NOTARIZATIONSTATUS_ISSET_ID);
  }

  public void setNotarizationStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTARIZATIONSTATUS_ISSET_ID, value);
  }

  public int getMortgageStatus() {
    return this.mortgageStatus;
  }

  public BizInterviewInfo setMortgageStatus(int mortgageStatus) {
    this.mortgageStatus = mortgageStatus;
    setMortgageStatusIsSet(true);
    return this;
  }

  public void unsetMortgageStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  /** Returns true if field mortgageStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgageStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID);
  }

  public void setMortgageStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MORTGAGESTATUS_ISSET_ID, value);
  }

  public String getCreateDate() {
    return this.createDate;
  }

  public BizInterviewInfo setCreateDate(String createDate) {
    this.createDate = createDate;
    return this;
  }

  public void unsetCreateDate() {
    this.createDate = null;
  }

  /** Returns true if field createDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateDate() {
    return this.createDate != null;
  }

  public void setCreateDateIsSet(boolean value) {
    if (!value) {
      this.createDate = null;
    }
  }

  public int getCreaterId() {
    return this.createrId;
  }

  public BizInterviewInfo setCreaterId(int createrId) {
    this.createrId = createrId;
    setCreaterIdIsSet(true);
    return this;
  }

  public void unsetCreaterId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  /** Returns true if field createrId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreaterId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATERID_ISSET_ID);
  }

  public void setCreaterIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATERID_ISSET_ID, value);
  }

  public int getUpdateId() {
    return this.updateId;
  }

  public BizInterviewInfo setUpdateId(int updateId) {
    this.updateId = updateId;
    setUpdateIdIsSet(true);
    return this;
  }

  public void unsetUpdateId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  /** Returns true if field updateId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateId() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATEID_ISSET_ID);
  }

  public void setUpdateIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATEID_ISSET_ID, value);
  }

  public String getUpdateDate() {
    return this.updateDate;
  }

  public BizInterviewInfo setUpdateDate(String updateDate) {
    this.updateDate = updateDate;
    return this;
  }

  public void unsetUpdateDate() {
    this.updateDate = null;
  }

  /** Returns true if field updateDate is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateDate() {
    return this.updateDate != null;
  }

  public void setUpdateDateIsSet(boolean value) {
    if (!value) {
      this.updateDate = null;
    }
  }

  public String getInterviewer() {
    return this.interviewer;
  }

  public BizInterviewInfo setInterviewer(String interviewer) {
    this.interviewer = interviewer;
    return this;
  }

  public void unsetInterviewer() {
    this.interviewer = null;
  }

  /** Returns true if field interviewer is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewer() {
    return this.interviewer != null;
  }

  public void setInterviewerIsSet(boolean value) {
    if (!value) {
      this.interviewer = null;
    }
  }

  public String getNotarizator() {
    return this.notarizator;
  }

  public BizInterviewInfo setNotarizator(String notarizator) {
    this.notarizator = notarizator;
    return this;
  }

  public void unsetNotarizator() {
    this.notarizator = null;
  }

  /** Returns true if field notarizator is set (has been assigned a value) and false otherwise */
  public boolean isSetNotarizator() {
    return this.notarizator != null;
  }

  public void setNotarizatorIsSet(boolean value) {
    if (!value) {
      this.notarizator = null;
    }
  }

  public String getMortgator() {
    return this.mortgator;
  }

  public BizInterviewInfo setMortgator(String mortgator) {
    this.mortgator = mortgator;
    return this;
  }

  public void unsetMortgator() {
    this.mortgator = null;
  }

  /** Returns true if field mortgator is set (has been assigned a value) and false otherwise */
  public boolean isSetMortgator() {
    return this.mortgator != null;
  }

  public void setMortgatorIsSet(boolean value) {
    if (!value) {
      this.mortgator = null;
    }
  }

  public String getHisWarrantUserName() {
    return this.hisWarrantUserName;
  }

  public BizInterviewInfo setHisWarrantUserName(String hisWarrantUserName) {
    this.hisWarrantUserName = hisWarrantUserName;
    return this;
  }

  public void unsetHisWarrantUserName() {
    this.hisWarrantUserName = null;
  }

  /** Returns true if field hisWarrantUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetHisWarrantUserName() {
    return this.hisWarrantUserName != null;
  }

  public void setHisWarrantUserNameIsSet(boolean value) {
    if (!value) {
      this.hisWarrantUserName = null;
    }
  }

  public BizInterviewFile getInterviewFile() {
    return this.interviewFile;
  }

  public BizInterviewInfo setInterviewFile(BizInterviewFile interviewFile) {
    this.interviewFile = interviewFile;
    return this;
  }

  public void unsetInterviewFile() {
    this.interviewFile = null;
  }

  /** Returns true if field interviewFile is set (has been assigned a value) and false otherwise */
  public boolean isSetInterviewFile() {
    return this.interviewFile != null;
  }

  public void setInterviewFileIsSet(boolean value) {
    if (!value) {
      this.interviewFile = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PID:
      if (value == null) {
        unsetPid();
      } else {
        setPid((Integer)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Integer)value);
      }
      break;

    case INTERVIEW_ID:
      if (value == null) {
        unsetInterviewId();
      } else {
        setInterviewId((Integer)value);
      }
      break;

    case INTERVIEW_TIME:
      if (value == null) {
        unsetInterviewTime();
      } else {
        setInterviewTime((String)value);
      }
      break;

    case INTERVIEW_PLACE:
      if (value == null) {
        unsetInterviewPlace();
      } else {
        setInterviewPlace((String)value);
      }
      break;

    case NOTARIZATION_TYPE:
      if (value == null) {
        unsetNotarizationType();
      } else {
        setNotarizationType((String)value);
      }
      break;

    case RECEIVE_TIME:
      if (value == null) {
        unsetReceiveTime();
      } else {
        setReceiveTime((String)value);
      }
      break;

    case NOTARIZATION_ID:
      if (value == null) {
        unsetNotarizationId();
      } else {
        setNotarizationId((Integer)value);
      }
      break;

    case HANDING_TIME:
      if (value == null) {
        unsetHandingTime();
      } else {
        setHandingTime((String)value);
      }
      break;

    case MORTGAGE_NAME:
      if (value == null) {
        unsetMortgageName();
      } else {
        setMortgageName((String)value);
      }
      break;

    case MORTGAGE_CODE:
      if (value == null) {
        unsetMortgageCode();
      } else {
        setMortgageCode((String)value);
      }
      break;

    case MORTGAGE_TIME:
      if (value == null) {
        unsetMortgageTime();
      } else {
        setMortgageTime((String)value);
      }
      break;

    case MORTGAGE_USER:
      if (value == null) {
        unsetMortgageUser();
      } else {
        setMortgageUser((Integer)value);
      }
      break;

    case MORTGAGE_HAND_TIME:
      if (value == null) {
        unsetMortgageHandTime();
      } else {
        setMortgageHandTime((String)value);
      }
      break;

    case HIS_WARRANT:
      if (value == null) {
        unsetHisWarrant();
      } else {
        setHisWarrant((String)value);
      }
      break;

    case HIS_WARRANT_TIME:
      if (value == null) {
        unsetHisWarrantTime();
      } else {
        setHisWarrantTime((String)value);
      }
      break;

    case HIS_WARRANT_USER:
      if (value == null) {
        unsetHisWarrantUser();
      } else {
        setHisWarrantUser((Integer)value);
      }
      break;

    case INTERVIEW_STATUS:
      if (value == null) {
        unsetInterviewStatus();
      } else {
        setInterviewStatus((Integer)value);
      }
      break;

    case NOTARIZATION_STATUS:
      if (value == null) {
        unsetNotarizationStatus();
      } else {
        setNotarizationStatus((Integer)value);
      }
      break;

    case MORTGAGE_STATUS:
      if (value == null) {
        unsetMortgageStatus();
      } else {
        setMortgageStatus((Integer)value);
      }
      break;

    case CREATE_DATE:
      if (value == null) {
        unsetCreateDate();
      } else {
        setCreateDate((String)value);
      }
      break;

    case CREATER_ID:
      if (value == null) {
        unsetCreaterId();
      } else {
        setCreaterId((Integer)value);
      }
      break;

    case UPDATE_ID:
      if (value == null) {
        unsetUpdateId();
      } else {
        setUpdateId((Integer)value);
      }
      break;

    case UPDATE_DATE:
      if (value == null) {
        unsetUpdateDate();
      } else {
        setUpdateDate((String)value);
      }
      break;

    case INTERVIEWER:
      if (value == null) {
        unsetInterviewer();
      } else {
        setInterviewer((String)value);
      }
      break;

    case NOTARIZATOR:
      if (value == null) {
        unsetNotarizator();
      } else {
        setNotarizator((String)value);
      }
      break;

    case MORTGATOR:
      if (value == null) {
        unsetMortgator();
      } else {
        setMortgator((String)value);
      }
      break;

    case HIS_WARRANT_USER_NAME:
      if (value == null) {
        unsetHisWarrantUserName();
      } else {
        setHisWarrantUserName((String)value);
      }
      break;

    case INTERVIEW_FILE:
      if (value == null) {
        unsetInterviewFile();
      } else {
        setInterviewFile((BizInterviewFile)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PID:
      return Integer.valueOf(getPid());

    case PROJECT_ID:
      return Integer.valueOf(getProjectId());

    case INTERVIEW_ID:
      return Integer.valueOf(getInterviewId());

    case INTERVIEW_TIME:
      return getInterviewTime();

    case INTERVIEW_PLACE:
      return getInterviewPlace();

    case NOTARIZATION_TYPE:
      return getNotarizationType();

    case RECEIVE_TIME:
      return getReceiveTime();

    case NOTARIZATION_ID:
      return Integer.valueOf(getNotarizationId());

    case HANDING_TIME:
      return getHandingTime();

    case MORTGAGE_NAME:
      return getMortgageName();

    case MORTGAGE_CODE:
      return getMortgageCode();

    case MORTGAGE_TIME:
      return getMortgageTime();

    case MORTGAGE_USER:
      return Integer.valueOf(getMortgageUser());

    case MORTGAGE_HAND_TIME:
      return getMortgageHandTime();

    case HIS_WARRANT:
      return getHisWarrant();

    case HIS_WARRANT_TIME:
      return getHisWarrantTime();

    case HIS_WARRANT_USER:
      return Integer.valueOf(getHisWarrantUser());

    case INTERVIEW_STATUS:
      return Integer.valueOf(getInterviewStatus());

    case NOTARIZATION_STATUS:
      return Integer.valueOf(getNotarizationStatus());

    case MORTGAGE_STATUS:
      return Integer.valueOf(getMortgageStatus());

    case CREATE_DATE:
      return getCreateDate();

    case CREATER_ID:
      return Integer.valueOf(getCreaterId());

    case UPDATE_ID:
      return Integer.valueOf(getUpdateId());

    case UPDATE_DATE:
      return getUpdateDate();

    case INTERVIEWER:
      return getInterviewer();

    case NOTARIZATOR:
      return getNotarizator();

    case MORTGATOR:
      return getMortgator();

    case HIS_WARRANT_USER_NAME:
      return getHisWarrantUserName();

    case INTERVIEW_FILE:
      return getInterviewFile();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PID:
      return isSetPid();
    case PROJECT_ID:
      return isSetProjectId();
    case INTERVIEW_ID:
      return isSetInterviewId();
    case INTERVIEW_TIME:
      return isSetInterviewTime();
    case INTERVIEW_PLACE:
      return isSetInterviewPlace();
    case NOTARIZATION_TYPE:
      return isSetNotarizationType();
    case RECEIVE_TIME:
      return isSetReceiveTime();
    case NOTARIZATION_ID:
      return isSetNotarizationId();
    case HANDING_TIME:
      return isSetHandingTime();
    case MORTGAGE_NAME:
      return isSetMortgageName();
    case MORTGAGE_CODE:
      return isSetMortgageCode();
    case MORTGAGE_TIME:
      return isSetMortgageTime();
    case MORTGAGE_USER:
      return isSetMortgageUser();
    case MORTGAGE_HAND_TIME:
      return isSetMortgageHandTime();
    case HIS_WARRANT:
      return isSetHisWarrant();
    case HIS_WARRANT_TIME:
      return isSetHisWarrantTime();
    case HIS_WARRANT_USER:
      return isSetHisWarrantUser();
    case INTERVIEW_STATUS:
      return isSetInterviewStatus();
    case NOTARIZATION_STATUS:
      return isSetNotarizationStatus();
    case MORTGAGE_STATUS:
      return isSetMortgageStatus();
    case CREATE_DATE:
      return isSetCreateDate();
    case CREATER_ID:
      return isSetCreaterId();
    case UPDATE_ID:
      return isSetUpdateId();
    case UPDATE_DATE:
      return isSetUpdateDate();
    case INTERVIEWER:
      return isSetInterviewer();
    case NOTARIZATOR:
      return isSetNotarizator();
    case MORTGATOR:
      return isSetMortgator();
    case HIS_WARRANT_USER_NAME:
      return isSetHisWarrantUserName();
    case INTERVIEW_FILE:
      return isSetInterviewFile();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizInterviewInfo)
      return this.equals((BizInterviewInfo)that);
    return false;
  }

  public boolean equals(BizInterviewInfo that) {
    if (that == null)
      return false;

    boolean this_present_pid = true;
    boolean that_present_pid = true;
    if (this_present_pid || that_present_pid) {
      if (!(this_present_pid && that_present_pid))
        return false;
      if (this.pid != that.pid)
        return false;
    }

    boolean this_present_projectId = true;
    boolean that_present_projectId = true;
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_interviewId = true;
    boolean that_present_interviewId = true;
    if (this_present_interviewId || that_present_interviewId) {
      if (!(this_present_interviewId && that_present_interviewId))
        return false;
      if (this.interviewId != that.interviewId)
        return false;
    }

    boolean this_present_interviewTime = true && this.isSetInterviewTime();
    boolean that_present_interviewTime = true && that.isSetInterviewTime();
    if (this_present_interviewTime || that_present_interviewTime) {
      if (!(this_present_interviewTime && that_present_interviewTime))
        return false;
      if (!this.interviewTime.equals(that.interviewTime))
        return false;
    }

    boolean this_present_interviewPlace = true && this.isSetInterviewPlace();
    boolean that_present_interviewPlace = true && that.isSetInterviewPlace();
    if (this_present_interviewPlace || that_present_interviewPlace) {
      if (!(this_present_interviewPlace && that_present_interviewPlace))
        return false;
      if (!this.interviewPlace.equals(that.interviewPlace))
        return false;
    }

    boolean this_present_notarizationType = true && this.isSetNotarizationType();
    boolean that_present_notarizationType = true && that.isSetNotarizationType();
    if (this_present_notarizationType || that_present_notarizationType) {
      if (!(this_present_notarizationType && that_present_notarizationType))
        return false;
      if (!this.notarizationType.equals(that.notarizationType))
        return false;
    }

    boolean this_present_receiveTime = true && this.isSetReceiveTime();
    boolean that_present_receiveTime = true && that.isSetReceiveTime();
    if (this_present_receiveTime || that_present_receiveTime) {
      if (!(this_present_receiveTime && that_present_receiveTime))
        return false;
      if (!this.receiveTime.equals(that.receiveTime))
        return false;
    }

    boolean this_present_notarizationId = true;
    boolean that_present_notarizationId = true;
    if (this_present_notarizationId || that_present_notarizationId) {
      if (!(this_present_notarizationId && that_present_notarizationId))
        return false;
      if (this.notarizationId != that.notarizationId)
        return false;
    }

    boolean this_present_handingTime = true && this.isSetHandingTime();
    boolean that_present_handingTime = true && that.isSetHandingTime();
    if (this_present_handingTime || that_present_handingTime) {
      if (!(this_present_handingTime && that_present_handingTime))
        return false;
      if (!this.handingTime.equals(that.handingTime))
        return false;
    }

    boolean this_present_mortgageName = true && this.isSetMortgageName();
    boolean that_present_mortgageName = true && that.isSetMortgageName();
    if (this_present_mortgageName || that_present_mortgageName) {
      if (!(this_present_mortgageName && that_present_mortgageName))
        return false;
      if (!this.mortgageName.equals(that.mortgageName))
        return false;
    }

    boolean this_present_mortgageCode = true && this.isSetMortgageCode();
    boolean that_present_mortgageCode = true && that.isSetMortgageCode();
    if (this_present_mortgageCode || that_present_mortgageCode) {
      if (!(this_present_mortgageCode && that_present_mortgageCode))
        return false;
      if (!this.mortgageCode.equals(that.mortgageCode))
        return false;
    }

    boolean this_present_mortgageTime = true && this.isSetMortgageTime();
    boolean that_present_mortgageTime = true && that.isSetMortgageTime();
    if (this_present_mortgageTime || that_present_mortgageTime) {
      if (!(this_present_mortgageTime && that_present_mortgageTime))
        return false;
      if (!this.mortgageTime.equals(that.mortgageTime))
        return false;
    }

    boolean this_present_mortgageUser = true;
    boolean that_present_mortgageUser = true;
    if (this_present_mortgageUser || that_present_mortgageUser) {
      if (!(this_present_mortgageUser && that_present_mortgageUser))
        return false;
      if (this.mortgageUser != that.mortgageUser)
        return false;
    }

    boolean this_present_mortgageHandTime = true && this.isSetMortgageHandTime();
    boolean that_present_mortgageHandTime = true && that.isSetMortgageHandTime();
    if (this_present_mortgageHandTime || that_present_mortgageHandTime) {
      if (!(this_present_mortgageHandTime && that_present_mortgageHandTime))
        return false;
      if (!this.mortgageHandTime.equals(that.mortgageHandTime))
        return false;
    }

    boolean this_present_hisWarrant = true && this.isSetHisWarrant();
    boolean that_present_hisWarrant = true && that.isSetHisWarrant();
    if (this_present_hisWarrant || that_present_hisWarrant) {
      if (!(this_present_hisWarrant && that_present_hisWarrant))
        return false;
      if (!this.hisWarrant.equals(that.hisWarrant))
        return false;
    }

    boolean this_present_hisWarrantTime = true && this.isSetHisWarrantTime();
    boolean that_present_hisWarrantTime = true && that.isSetHisWarrantTime();
    if (this_present_hisWarrantTime || that_present_hisWarrantTime) {
      if (!(this_present_hisWarrantTime && that_present_hisWarrantTime))
        return false;
      if (!this.hisWarrantTime.equals(that.hisWarrantTime))
        return false;
    }

    boolean this_present_hisWarrantUser = true;
    boolean that_present_hisWarrantUser = true;
    if (this_present_hisWarrantUser || that_present_hisWarrantUser) {
      if (!(this_present_hisWarrantUser && that_present_hisWarrantUser))
        return false;
      if (this.hisWarrantUser != that.hisWarrantUser)
        return false;
    }

    boolean this_present_interviewStatus = true;
    boolean that_present_interviewStatus = true;
    if (this_present_interviewStatus || that_present_interviewStatus) {
      if (!(this_present_interviewStatus && that_present_interviewStatus))
        return false;
      if (this.interviewStatus != that.interviewStatus)
        return false;
    }

    boolean this_present_notarizationStatus = true;
    boolean that_present_notarizationStatus = true;
    if (this_present_notarizationStatus || that_present_notarizationStatus) {
      if (!(this_present_notarizationStatus && that_present_notarizationStatus))
        return false;
      if (this.notarizationStatus != that.notarizationStatus)
        return false;
    }

    boolean this_present_mortgageStatus = true;
    boolean that_present_mortgageStatus = true;
    if (this_present_mortgageStatus || that_present_mortgageStatus) {
      if (!(this_present_mortgageStatus && that_present_mortgageStatus))
        return false;
      if (this.mortgageStatus != that.mortgageStatus)
        return false;
    }

    boolean this_present_createDate = true && this.isSetCreateDate();
    boolean that_present_createDate = true && that.isSetCreateDate();
    if (this_present_createDate || that_present_createDate) {
      if (!(this_present_createDate && that_present_createDate))
        return false;
      if (!this.createDate.equals(that.createDate))
        return false;
    }

    boolean this_present_createrId = true;
    boolean that_present_createrId = true;
    if (this_present_createrId || that_present_createrId) {
      if (!(this_present_createrId && that_present_createrId))
        return false;
      if (this.createrId != that.createrId)
        return false;
    }

    boolean this_present_updateId = true;
    boolean that_present_updateId = true;
    if (this_present_updateId || that_present_updateId) {
      if (!(this_present_updateId && that_present_updateId))
        return false;
      if (this.updateId != that.updateId)
        return false;
    }

    boolean this_present_updateDate = true && this.isSetUpdateDate();
    boolean that_present_updateDate = true && that.isSetUpdateDate();
    if (this_present_updateDate || that_present_updateDate) {
      if (!(this_present_updateDate && that_present_updateDate))
        return false;
      if (!this.updateDate.equals(that.updateDate))
        return false;
    }

    boolean this_present_interviewer = true && this.isSetInterviewer();
    boolean that_present_interviewer = true && that.isSetInterviewer();
    if (this_present_interviewer || that_present_interviewer) {
      if (!(this_present_interviewer && that_present_interviewer))
        return false;
      if (!this.interviewer.equals(that.interviewer))
        return false;
    }

    boolean this_present_notarizator = true && this.isSetNotarizator();
    boolean that_present_notarizator = true && that.isSetNotarizator();
    if (this_present_notarizator || that_present_notarizator) {
      if (!(this_present_notarizator && that_present_notarizator))
        return false;
      if (!this.notarizator.equals(that.notarizator))
        return false;
    }

    boolean this_present_mortgator = true && this.isSetMortgator();
    boolean that_present_mortgator = true && that.isSetMortgator();
    if (this_present_mortgator || that_present_mortgator) {
      if (!(this_present_mortgator && that_present_mortgator))
        return false;
      if (!this.mortgator.equals(that.mortgator))
        return false;
    }

    boolean this_present_hisWarrantUserName = true && this.isSetHisWarrantUserName();
    boolean that_present_hisWarrantUserName = true && that.isSetHisWarrantUserName();
    if (this_present_hisWarrantUserName || that_present_hisWarrantUserName) {
      if (!(this_present_hisWarrantUserName && that_present_hisWarrantUserName))
        return false;
      if (!this.hisWarrantUserName.equals(that.hisWarrantUserName))
        return false;
    }

    boolean this_present_interviewFile = true && this.isSetInterviewFile();
    boolean that_present_interviewFile = true && that.isSetInterviewFile();
    if (this_present_interviewFile || that_present_interviewFile) {
      if (!(this_present_interviewFile && that_present_interviewFile))
        return false;
      if (!this.interviewFile.equals(that.interviewFile))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pid = true;
    list.add(present_pid);
    if (present_pid)
      list.add(pid);

    boolean present_projectId = true;
    list.add(present_projectId);
    if (present_projectId)
      list.add(projectId);

    boolean present_interviewId = true;
    list.add(present_interviewId);
    if (present_interviewId)
      list.add(interviewId);

    boolean present_interviewTime = true && (isSetInterviewTime());
    list.add(present_interviewTime);
    if (present_interviewTime)
      list.add(interviewTime);

    boolean present_interviewPlace = true && (isSetInterviewPlace());
    list.add(present_interviewPlace);
    if (present_interviewPlace)
      list.add(interviewPlace);

    boolean present_notarizationType = true && (isSetNotarizationType());
    list.add(present_notarizationType);
    if (present_notarizationType)
      list.add(notarizationType);

    boolean present_receiveTime = true && (isSetReceiveTime());
    list.add(present_receiveTime);
    if (present_receiveTime)
      list.add(receiveTime);

    boolean present_notarizationId = true;
    list.add(present_notarizationId);
    if (present_notarizationId)
      list.add(notarizationId);

    boolean present_handingTime = true && (isSetHandingTime());
    list.add(present_handingTime);
    if (present_handingTime)
      list.add(handingTime);

    boolean present_mortgageName = true && (isSetMortgageName());
    list.add(present_mortgageName);
    if (present_mortgageName)
      list.add(mortgageName);

    boolean present_mortgageCode = true && (isSetMortgageCode());
    list.add(present_mortgageCode);
    if (present_mortgageCode)
      list.add(mortgageCode);

    boolean present_mortgageTime = true && (isSetMortgageTime());
    list.add(present_mortgageTime);
    if (present_mortgageTime)
      list.add(mortgageTime);

    boolean present_mortgageUser = true;
    list.add(present_mortgageUser);
    if (present_mortgageUser)
      list.add(mortgageUser);

    boolean present_mortgageHandTime = true && (isSetMortgageHandTime());
    list.add(present_mortgageHandTime);
    if (present_mortgageHandTime)
      list.add(mortgageHandTime);

    boolean present_hisWarrant = true && (isSetHisWarrant());
    list.add(present_hisWarrant);
    if (present_hisWarrant)
      list.add(hisWarrant);

    boolean present_hisWarrantTime = true && (isSetHisWarrantTime());
    list.add(present_hisWarrantTime);
    if (present_hisWarrantTime)
      list.add(hisWarrantTime);

    boolean present_hisWarrantUser = true;
    list.add(present_hisWarrantUser);
    if (present_hisWarrantUser)
      list.add(hisWarrantUser);

    boolean present_interviewStatus = true;
    list.add(present_interviewStatus);
    if (present_interviewStatus)
      list.add(interviewStatus);

    boolean present_notarizationStatus = true;
    list.add(present_notarizationStatus);
    if (present_notarizationStatus)
      list.add(notarizationStatus);

    boolean present_mortgageStatus = true;
    list.add(present_mortgageStatus);
    if (present_mortgageStatus)
      list.add(mortgageStatus);

    boolean present_createDate = true && (isSetCreateDate());
    list.add(present_createDate);
    if (present_createDate)
      list.add(createDate);

    boolean present_createrId = true;
    list.add(present_createrId);
    if (present_createrId)
      list.add(createrId);

    boolean present_updateId = true;
    list.add(present_updateId);
    if (present_updateId)
      list.add(updateId);

    boolean present_updateDate = true && (isSetUpdateDate());
    list.add(present_updateDate);
    if (present_updateDate)
      list.add(updateDate);

    boolean present_interviewer = true && (isSetInterviewer());
    list.add(present_interviewer);
    if (present_interviewer)
      list.add(interviewer);

    boolean present_notarizator = true && (isSetNotarizator());
    list.add(present_notarizator);
    if (present_notarizator)
      list.add(notarizator);

    boolean present_mortgator = true && (isSetMortgator());
    list.add(present_mortgator);
    if (present_mortgator)
      list.add(mortgator);

    boolean present_hisWarrantUserName = true && (isSetHisWarrantUserName());
    list.add(present_hisWarrantUserName);
    if (present_hisWarrantUserName)
      list.add(hisWarrantUserName);

    boolean present_interviewFile = true && (isSetInterviewFile());
    list.add(present_interviewFile);
    if (present_interviewFile)
      list.add(interviewFile);

    return list.hashCode();
  }

  @Override
  public int compareTo(BizInterviewInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPid()).compareTo(other.isSetPid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pid, other.pid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewId()).compareTo(other.isSetInterviewId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewId, other.interviewId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewTime()).compareTo(other.isSetInterviewTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewTime, other.interviewTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewPlace()).compareTo(other.isSetInterviewPlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewPlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewPlace, other.interviewPlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationType()).compareTo(other.isSetNotarizationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationType, other.notarizationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveTime()).compareTo(other.isSetReceiveTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveTime, other.receiveTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationId()).compareTo(other.isSetNotarizationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationId, other.notarizationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandingTime()).compareTo(other.isSetHandingTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandingTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handingTime, other.handingTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageName()).compareTo(other.isSetMortgageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageName, other.mortgageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageCode()).compareTo(other.isSetMortgageCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageCode, other.mortgageCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageTime()).compareTo(other.isSetMortgageTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageTime, other.mortgageTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageUser()).compareTo(other.isSetMortgageUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageUser, other.mortgageUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageHandTime()).compareTo(other.isSetMortgageHandTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageHandTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageHandTime, other.mortgageHandTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrant()).compareTo(other.isSetHisWarrant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrant, other.hisWarrant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantTime()).compareTo(other.isSetHisWarrantTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantTime, other.hisWarrantTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantUser()).compareTo(other.isSetHisWarrantUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantUser, other.hisWarrantUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewStatus()).compareTo(other.isSetInterviewStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewStatus, other.interviewStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizationStatus()).compareTo(other.isSetNotarizationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizationStatus, other.notarizationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgageStatus()).compareTo(other.isSetMortgageStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgageStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgageStatus, other.mortgageStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateDate()).compareTo(other.isSetCreateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createDate, other.createDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreaterId()).compareTo(other.isSetCreaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createrId, other.createrId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateId()).compareTo(other.isSetUpdateId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateId, other.updateId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateDate()).compareTo(other.isSetUpdateDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateDate, other.updateDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewer()).compareTo(other.isSetInterviewer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewer, other.interviewer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotarizator()).compareTo(other.isSetNotarizator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotarizator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notarizator, other.notarizator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMortgator()).compareTo(other.isSetMortgator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMortgator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mortgator, other.mortgator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHisWarrantUserName()).compareTo(other.isSetHisWarrantUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHisWarrantUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hisWarrantUserName, other.hisWarrantUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInterviewFile()).compareTo(other.isSetInterviewFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInterviewFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interviewFile, other.interviewFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizInterviewInfo(");
    boolean first = true;

    sb.append("pid:");
    sb.append(this.pid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("projectId:");
    sb.append(this.projectId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewId:");
    sb.append(this.interviewId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewTime:");
    if (this.interviewTime == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewPlace:");
    if (this.interviewPlace == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewPlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationType:");
    if (this.notarizationType == null) {
      sb.append("null");
    } else {
      sb.append(this.notarizationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveTime:");
    if (this.receiveTime == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationId:");
    sb.append(this.notarizationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("handingTime:");
    if (this.handingTime == null) {
      sb.append("null");
    } else {
      sb.append(this.handingTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageName:");
    if (this.mortgageName == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageCode:");
    if (this.mortgageCode == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageTime:");
    if (this.mortgageTime == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageUser:");
    sb.append(this.mortgageUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageHandTime:");
    if (this.mortgageHandTime == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgageHandTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrant:");
    if (this.hisWarrant == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrant);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantTime:");
    if (this.hisWarrantTime == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrantTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantUser:");
    sb.append(this.hisWarrantUser);
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewStatus:");
    sb.append(this.interviewStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizationStatus:");
    sb.append(this.notarizationStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgageStatus:");
    sb.append(this.mortgageStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createDate:");
    if (this.createDate == null) {
      sb.append("null");
    } else {
      sb.append(this.createDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createrId:");
    sb.append(this.createrId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateId:");
    sb.append(this.updateId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateDate:");
    if (this.updateDate == null) {
      sb.append("null");
    } else {
      sb.append(this.updateDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewer:");
    if (this.interviewer == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notarizator:");
    if (this.notarizator == null) {
      sb.append("null");
    } else {
      sb.append(this.notarizator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mortgator:");
    if (this.mortgator == null) {
      sb.append("null");
    } else {
      sb.append(this.mortgator);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hisWarrantUserName:");
    if (this.hisWarrantUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.hisWarrantUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interviewFile:");
    if (this.interviewFile == null) {
      sb.append("null");
    } else {
      sb.append(this.interviewFile);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizInterviewInfoStandardSchemeFactory implements SchemeFactory {
    public BizInterviewInfoStandardScheme getScheme() {
      return new BizInterviewInfoStandardScheme();
    }
  }

  private static class BizInterviewInfoStandardScheme extends StandardScheme<BizInterviewInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizInterviewInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pid = iprot.readI32();
              struct.setPidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.projectId = iprot.readI32();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERVIEW_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interviewId = iprot.readI32();
              struct.setInterviewIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INTERVIEW_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interviewTime = iprot.readString();
              struct.setInterviewTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INTERVIEW_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interviewPlace = iprot.readString();
              struct.setInterviewPlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTARIZATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notarizationType = iprot.readString();
              struct.setNotarizationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RECEIVE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveTime = iprot.readString();
              struct.setReceiveTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NOTARIZATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notarizationId = iprot.readI32();
              struct.setNotarizationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // HANDING_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.handingTime = iprot.readString();
              struct.setHandingTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MORTGAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageName = iprot.readString();
              struct.setMortgageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MORTGAGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageCode = iprot.readString();
              struct.setMortgageCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MORTGAGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageTime = iprot.readString();
              struct.setMortgageTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MORTGAGE_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageUser = iprot.readI32();
              struct.setMortgageUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MORTGAGE_HAND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgageHandTime = iprot.readString();
              struct.setMortgageHandTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // HIS_WARRANT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrant = iprot.readString();
              struct.setHisWarrantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HIS_WARRANT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrantTime = iprot.readString();
              struct.setHisWarrantTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // HIS_WARRANT_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hisWarrantUser = iprot.readI32();
              struct.setHisWarrantUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INTERVIEW_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.interviewStatus = iprot.readI32();
              struct.setInterviewStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // NOTARIZATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.notarizationStatus = iprot.readI32();
              struct.setNotarizationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MORTGAGE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mortgageStatus = iprot.readI32();
              struct.setMortgageStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createDate = iprot.readString();
              struct.setCreateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CREATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createrId = iprot.readI32();
              struct.setCreaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UPDATE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateId = iprot.readI32();
              struct.setUpdateIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // UPDATE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updateDate = iprot.readString();
              struct.setUpdateDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // INTERVIEWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interviewer = iprot.readString();
              struct.setInterviewerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // NOTARIZATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notarizator = iprot.readString();
              struct.setNotarizatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // MORTGATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mortgator = iprot.readString();
              struct.setMortgatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // HIS_WARRANT_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hisWarrantUserName = iprot.readString();
              struct.setHisWarrantUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // INTERVIEW_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.interviewFile = new BizInterviewFile();
              struct.interviewFile.read(iprot);
              struct.setInterviewFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizInterviewInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PID_FIELD_DESC);
      oprot.writeI32(struct.pid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
      oprot.writeI32(struct.projectId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVIEW_ID_FIELD_DESC);
      oprot.writeI32(struct.interviewId);
      oprot.writeFieldEnd();
      if (struct.interviewTime != null) {
        oprot.writeFieldBegin(INTERVIEW_TIME_FIELD_DESC);
        oprot.writeString(struct.interviewTime);
        oprot.writeFieldEnd();
      }
      if (struct.interviewPlace != null) {
        oprot.writeFieldBegin(INTERVIEW_PLACE_FIELD_DESC);
        oprot.writeString(struct.interviewPlace);
        oprot.writeFieldEnd();
      }
      if (struct.notarizationType != null) {
        oprot.writeFieldBegin(NOTARIZATION_TYPE_FIELD_DESC);
        oprot.writeString(struct.notarizationType);
        oprot.writeFieldEnd();
      }
      if (struct.receiveTime != null) {
        oprot.writeFieldBegin(RECEIVE_TIME_FIELD_DESC);
        oprot.writeString(struct.receiveTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTARIZATION_ID_FIELD_DESC);
      oprot.writeI32(struct.notarizationId);
      oprot.writeFieldEnd();
      if (struct.handingTime != null) {
        oprot.writeFieldBegin(HANDING_TIME_FIELD_DESC);
        oprot.writeString(struct.handingTime);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageName != null) {
        oprot.writeFieldBegin(MORTGAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.mortgageName);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageCode != null) {
        oprot.writeFieldBegin(MORTGAGE_CODE_FIELD_DESC);
        oprot.writeString(struct.mortgageCode);
        oprot.writeFieldEnd();
      }
      if (struct.mortgageTime != null) {
        oprot.writeFieldBegin(MORTGAGE_TIME_FIELD_DESC);
        oprot.writeString(struct.mortgageTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MORTGAGE_USER_FIELD_DESC);
      oprot.writeI32(struct.mortgageUser);
      oprot.writeFieldEnd();
      if (struct.mortgageHandTime != null) {
        oprot.writeFieldBegin(MORTGAGE_HAND_TIME_FIELD_DESC);
        oprot.writeString(struct.mortgageHandTime);
        oprot.writeFieldEnd();
      }
      if (struct.hisWarrant != null) {
        oprot.writeFieldBegin(HIS_WARRANT_FIELD_DESC);
        oprot.writeString(struct.hisWarrant);
        oprot.writeFieldEnd();
      }
      if (struct.hisWarrantTime != null) {
        oprot.writeFieldBegin(HIS_WARRANT_TIME_FIELD_DESC);
        oprot.writeString(struct.hisWarrantTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HIS_WARRANT_USER_FIELD_DESC);
      oprot.writeI32(struct.hisWarrantUser);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INTERVIEW_STATUS_FIELD_DESC);
      oprot.writeI32(struct.interviewStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTARIZATION_STATUS_FIELD_DESC);
      oprot.writeI32(struct.notarizationStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MORTGAGE_STATUS_FIELD_DESC);
      oprot.writeI32(struct.mortgageStatus);
      oprot.writeFieldEnd();
      if (struct.createDate != null) {
        oprot.writeFieldBegin(CREATE_DATE_FIELD_DESC);
        oprot.writeString(struct.createDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATER_ID_FIELD_DESC);
      oprot.writeI32(struct.createrId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_ID_FIELD_DESC);
      oprot.writeI32(struct.updateId);
      oprot.writeFieldEnd();
      if (struct.updateDate != null) {
        oprot.writeFieldBegin(UPDATE_DATE_FIELD_DESC);
        oprot.writeString(struct.updateDate);
        oprot.writeFieldEnd();
      }
      if (struct.interviewer != null) {
        oprot.writeFieldBegin(INTERVIEWER_FIELD_DESC);
        oprot.writeString(struct.interviewer);
        oprot.writeFieldEnd();
      }
      if (struct.notarizator != null) {
        oprot.writeFieldBegin(NOTARIZATOR_FIELD_DESC);
        oprot.writeString(struct.notarizator);
        oprot.writeFieldEnd();
      }
      if (struct.mortgator != null) {
        oprot.writeFieldBegin(MORTGATOR_FIELD_DESC);
        oprot.writeString(struct.mortgator);
        oprot.writeFieldEnd();
      }
      if (struct.hisWarrantUserName != null) {
        oprot.writeFieldBegin(HIS_WARRANT_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.hisWarrantUserName);
        oprot.writeFieldEnd();
      }
      if (struct.interviewFile != null) {
        oprot.writeFieldBegin(INTERVIEW_FILE_FIELD_DESC);
        struct.interviewFile.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizInterviewInfoTupleSchemeFactory implements SchemeFactory {
    public BizInterviewInfoTupleScheme getScheme() {
      return new BizInterviewInfoTupleScheme();
    }
  }

  private static class BizInterviewInfoTupleScheme extends TupleScheme<BizInterviewInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizInterviewInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPid()) {
        optionals.set(0);
      }
      if (struct.isSetProjectId()) {
        optionals.set(1);
      }
      if (struct.isSetInterviewId()) {
        optionals.set(2);
      }
      if (struct.isSetInterviewTime()) {
        optionals.set(3);
      }
      if (struct.isSetInterviewPlace()) {
        optionals.set(4);
      }
      if (struct.isSetNotarizationType()) {
        optionals.set(5);
      }
      if (struct.isSetReceiveTime()) {
        optionals.set(6);
      }
      if (struct.isSetNotarizationId()) {
        optionals.set(7);
      }
      if (struct.isSetHandingTime()) {
        optionals.set(8);
      }
      if (struct.isSetMortgageName()) {
        optionals.set(9);
      }
      if (struct.isSetMortgageCode()) {
        optionals.set(10);
      }
      if (struct.isSetMortgageTime()) {
        optionals.set(11);
      }
      if (struct.isSetMortgageUser()) {
        optionals.set(12);
      }
      if (struct.isSetMortgageHandTime()) {
        optionals.set(13);
      }
      if (struct.isSetHisWarrant()) {
        optionals.set(14);
      }
      if (struct.isSetHisWarrantTime()) {
        optionals.set(15);
      }
      if (struct.isSetHisWarrantUser()) {
        optionals.set(16);
      }
      if (struct.isSetInterviewStatus()) {
        optionals.set(17);
      }
      if (struct.isSetNotarizationStatus()) {
        optionals.set(18);
      }
      if (struct.isSetMortgageStatus()) {
        optionals.set(19);
      }
      if (struct.isSetCreateDate()) {
        optionals.set(20);
      }
      if (struct.isSetCreaterId()) {
        optionals.set(21);
      }
      if (struct.isSetUpdateId()) {
        optionals.set(22);
      }
      if (struct.isSetUpdateDate()) {
        optionals.set(23);
      }
      if (struct.isSetInterviewer()) {
        optionals.set(24);
      }
      if (struct.isSetNotarizator()) {
        optionals.set(25);
      }
      if (struct.isSetMortgator()) {
        optionals.set(26);
      }
      if (struct.isSetHisWarrantUserName()) {
        optionals.set(27);
      }
      if (struct.isSetInterviewFile()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetPid()) {
        oprot.writeI32(struct.pid);
      }
      if (struct.isSetProjectId()) {
        oprot.writeI32(struct.projectId);
      }
      if (struct.isSetInterviewId()) {
        oprot.writeI32(struct.interviewId);
      }
      if (struct.isSetInterviewTime()) {
        oprot.writeString(struct.interviewTime);
      }
      if (struct.isSetInterviewPlace()) {
        oprot.writeString(struct.interviewPlace);
      }
      if (struct.isSetNotarizationType()) {
        oprot.writeString(struct.notarizationType);
      }
      if (struct.isSetReceiveTime()) {
        oprot.writeString(struct.receiveTime);
      }
      if (struct.isSetNotarizationId()) {
        oprot.writeI32(struct.notarizationId);
      }
      if (struct.isSetHandingTime()) {
        oprot.writeString(struct.handingTime);
      }
      if (struct.isSetMortgageName()) {
        oprot.writeString(struct.mortgageName);
      }
      if (struct.isSetMortgageCode()) {
        oprot.writeString(struct.mortgageCode);
      }
      if (struct.isSetMortgageTime()) {
        oprot.writeString(struct.mortgageTime);
      }
      if (struct.isSetMortgageUser()) {
        oprot.writeI32(struct.mortgageUser);
      }
      if (struct.isSetMortgageHandTime()) {
        oprot.writeString(struct.mortgageHandTime);
      }
      if (struct.isSetHisWarrant()) {
        oprot.writeString(struct.hisWarrant);
      }
      if (struct.isSetHisWarrantTime()) {
        oprot.writeString(struct.hisWarrantTime);
      }
      if (struct.isSetHisWarrantUser()) {
        oprot.writeI32(struct.hisWarrantUser);
      }
      if (struct.isSetInterviewStatus()) {
        oprot.writeI32(struct.interviewStatus);
      }
      if (struct.isSetNotarizationStatus()) {
        oprot.writeI32(struct.notarizationStatus);
      }
      if (struct.isSetMortgageStatus()) {
        oprot.writeI32(struct.mortgageStatus);
      }
      if (struct.isSetCreateDate()) {
        oprot.writeString(struct.createDate);
      }
      if (struct.isSetCreaterId()) {
        oprot.writeI32(struct.createrId);
      }
      if (struct.isSetUpdateId()) {
        oprot.writeI32(struct.updateId);
      }
      if (struct.isSetUpdateDate()) {
        oprot.writeString(struct.updateDate);
      }
      if (struct.isSetInterviewer()) {
        oprot.writeString(struct.interviewer);
      }
      if (struct.isSetNotarizator()) {
        oprot.writeString(struct.notarizator);
      }
      if (struct.isSetMortgator()) {
        oprot.writeString(struct.mortgator);
      }
      if (struct.isSetHisWarrantUserName()) {
        oprot.writeString(struct.hisWarrantUserName);
      }
      if (struct.isSetInterviewFile()) {
        struct.interviewFile.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizInterviewInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.pid = iprot.readI32();
        struct.setPidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.projectId = iprot.readI32();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interviewId = iprot.readI32();
        struct.setInterviewIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.interviewTime = iprot.readString();
        struct.setInterviewTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.interviewPlace = iprot.readString();
        struct.setInterviewPlaceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notarizationType = iprot.readString();
        struct.setNotarizationTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.receiveTime = iprot.readString();
        struct.setReceiveTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.notarizationId = iprot.readI32();
        struct.setNotarizationIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.handingTime = iprot.readString();
        struct.setHandingTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.mortgageName = iprot.readString();
        struct.setMortgageNameIsSet(true);
      }
      if (incoming.get(10)) {
        struct.mortgageCode = iprot.readString();
        struct.setMortgageCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.mortgageTime = iprot.readString();
        struct.setMortgageTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mortgageUser = iprot.readI32();
        struct.setMortgageUserIsSet(true);
      }
      if (incoming.get(13)) {
        struct.mortgageHandTime = iprot.readString();
        struct.setMortgageHandTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.hisWarrant = iprot.readString();
        struct.setHisWarrantIsSet(true);
      }
      if (incoming.get(15)) {
        struct.hisWarrantTime = iprot.readString();
        struct.setHisWarrantTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.hisWarrantUser = iprot.readI32();
        struct.setHisWarrantUserIsSet(true);
      }
      if (incoming.get(17)) {
        struct.interviewStatus = iprot.readI32();
        struct.setInterviewStatusIsSet(true);
      }
      if (incoming.get(18)) {
        struct.notarizationStatus = iprot.readI32();
        struct.setNotarizationStatusIsSet(true);
      }
      if (incoming.get(19)) {
        struct.mortgageStatus = iprot.readI32();
        struct.setMortgageStatusIsSet(true);
      }
      if (incoming.get(20)) {
        struct.createDate = iprot.readString();
        struct.setCreateDateIsSet(true);
      }
      if (incoming.get(21)) {
        struct.createrId = iprot.readI32();
        struct.setCreaterIdIsSet(true);
      }
      if (incoming.get(22)) {
        struct.updateId = iprot.readI32();
        struct.setUpdateIdIsSet(true);
      }
      if (incoming.get(23)) {
        struct.updateDate = iprot.readString();
        struct.setUpdateDateIsSet(true);
      }
      if (incoming.get(24)) {
        struct.interviewer = iprot.readString();
        struct.setInterviewerIsSet(true);
      }
      if (incoming.get(25)) {
        struct.notarizator = iprot.readString();
        struct.setNotarizatorIsSet(true);
      }
      if (incoming.get(26)) {
        struct.mortgator = iprot.readString();
        struct.setMortgatorIsSet(true);
      }
      if (incoming.get(27)) {
        struct.hisWarrantUserName = iprot.readString();
        struct.setHisWarrantUserNameIsSet(true);
      }
      if (incoming.get(28)) {
        struct.interviewFile = new BizInterviewFile();
        struct.interviewFile.read(iprot);
        struct.setInterviewFileIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.customer;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * pengchuntao ,财务信息，填写企业财务状况 ，首页面
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-25")
public class FinancialPositionDTO implements org.apache.thrift.TBase<FinancialPositionDTO, FinancialPositionDTO._Fields>, java.io.Serializable, Cloneable, Comparable<FinancialPositionDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FinancialPositionDTO");

  private static final org.apache.thrift.protocol.TField INDEX_CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("indexCategory", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENT_ANNUAL_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("currentAnnualReport", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_YEAR_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastYearReport", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_TWO_YEARS_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTwoYearsReport", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LAST_THREE_YEARS_REPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastThreeYearsReport", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FinancialPositionDTOStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FinancialPositionDTOTupleSchemeFactory());
  }

  public String indexCategory; // required
  public String indexName; // required
  public String currentAnnualReport; // required
  public String lastYearReport; // required
  public String lastTwoYearsReport; // required
  public String lastThreeYearsReport; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX_CATEGORY((short)1, "indexCategory"),
    INDEX_NAME((short)2, "indexName"),
    CURRENT_ANNUAL_REPORT((short)3, "currentAnnualReport"),
    LAST_YEAR_REPORT((short)4, "lastYearReport"),
    LAST_TWO_YEARS_REPORT((short)5, "lastTwoYearsReport"),
    LAST_THREE_YEARS_REPORT((short)6, "lastThreeYearsReport");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX_CATEGORY
          return INDEX_CATEGORY;
        case 2: // INDEX_NAME
          return INDEX_NAME;
        case 3: // CURRENT_ANNUAL_REPORT
          return CURRENT_ANNUAL_REPORT;
        case 4: // LAST_YEAR_REPORT
          return LAST_YEAR_REPORT;
        case 5: // LAST_TWO_YEARS_REPORT
          return LAST_TWO_YEARS_REPORT;
        case 6: // LAST_THREE_YEARS_REPORT
          return LAST_THREE_YEARS_REPORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX_CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("indexCategory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_ANNUAL_REPORT, new org.apache.thrift.meta_data.FieldMetaData("currentAnnualReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_YEAR_REPORT, new org.apache.thrift.meta_data.FieldMetaData("lastYearReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_TWO_YEARS_REPORT, new org.apache.thrift.meta_data.FieldMetaData("lastTwoYearsReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_THREE_YEARS_REPORT, new org.apache.thrift.meta_data.FieldMetaData("lastThreeYearsReport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FinancialPositionDTO.class, metaDataMap);
  }

  public FinancialPositionDTO() {
  }

  public FinancialPositionDTO(
    String indexCategory,
    String indexName,
    String currentAnnualReport,
    String lastYearReport,
    String lastTwoYearsReport,
    String lastThreeYearsReport)
  {
    this();
    this.indexCategory = indexCategory;
    this.indexName = indexName;
    this.currentAnnualReport = currentAnnualReport;
    this.lastYearReport = lastYearReport;
    this.lastTwoYearsReport = lastTwoYearsReport;
    this.lastThreeYearsReport = lastThreeYearsReport;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FinancialPositionDTO(FinancialPositionDTO other) {
    if (other.isSetIndexCategory()) {
      this.indexCategory = other.indexCategory;
    }
    if (other.isSetIndexName()) {
      this.indexName = other.indexName;
    }
    if (other.isSetCurrentAnnualReport()) {
      this.currentAnnualReport = other.currentAnnualReport;
    }
    if (other.isSetLastYearReport()) {
      this.lastYearReport = other.lastYearReport;
    }
    if (other.isSetLastTwoYearsReport()) {
      this.lastTwoYearsReport = other.lastTwoYearsReport;
    }
    if (other.isSetLastThreeYearsReport()) {
      this.lastThreeYearsReport = other.lastThreeYearsReport;
    }
  }

  public FinancialPositionDTO deepCopy() {
    return new FinancialPositionDTO(this);
  }

  @Override
  public void clear() {
    this.indexCategory = null;
    this.indexName = null;
    this.currentAnnualReport = null;
    this.lastYearReport = null;
    this.lastTwoYearsReport = null;
    this.lastThreeYearsReport = null;
  }

  public String getIndexCategory() {
    return this.indexCategory;
  }

  public FinancialPositionDTO setIndexCategory(String indexCategory) {
    this.indexCategory = indexCategory;
    return this;
  }

  public void unsetIndexCategory() {
    this.indexCategory = null;
  }

  /** Returns true if field indexCategory is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexCategory() {
    return this.indexCategory != null;
  }

  public void setIndexCategoryIsSet(boolean value) {
    if (!value) {
      this.indexCategory = null;
    }
  }

  public String getIndexName() {
    return this.indexName;
  }

  public FinancialPositionDTO setIndexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  public void unsetIndexName() {
    this.indexName = null;
  }

  /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
  public boolean isSetIndexName() {
    return this.indexName != null;
  }

  public void setIndexNameIsSet(boolean value) {
    if (!value) {
      this.indexName = null;
    }
  }

  public String getCurrentAnnualReport() {
    return this.currentAnnualReport;
  }

  public FinancialPositionDTO setCurrentAnnualReport(String currentAnnualReport) {
    this.currentAnnualReport = currentAnnualReport;
    return this;
  }

  public void unsetCurrentAnnualReport() {
    this.currentAnnualReport = null;
  }

  /** Returns true if field currentAnnualReport is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentAnnualReport() {
    return this.currentAnnualReport != null;
  }

  public void setCurrentAnnualReportIsSet(boolean value) {
    if (!value) {
      this.currentAnnualReport = null;
    }
  }

  public String getLastYearReport() {
    return this.lastYearReport;
  }

  public FinancialPositionDTO setLastYearReport(String lastYearReport) {
    this.lastYearReport = lastYearReport;
    return this;
  }

  public void unsetLastYearReport() {
    this.lastYearReport = null;
  }

  /** Returns true if field lastYearReport is set (has been assigned a value) and false otherwise */
  public boolean isSetLastYearReport() {
    return this.lastYearReport != null;
  }

  public void setLastYearReportIsSet(boolean value) {
    if (!value) {
      this.lastYearReport = null;
    }
  }

  public String getLastTwoYearsReport() {
    return this.lastTwoYearsReport;
  }

  public FinancialPositionDTO setLastTwoYearsReport(String lastTwoYearsReport) {
    this.lastTwoYearsReport = lastTwoYearsReport;
    return this;
  }

  public void unsetLastTwoYearsReport() {
    this.lastTwoYearsReport = null;
  }

  /** Returns true if field lastTwoYearsReport is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTwoYearsReport() {
    return this.lastTwoYearsReport != null;
  }

  public void setLastTwoYearsReportIsSet(boolean value) {
    if (!value) {
      this.lastTwoYearsReport = null;
    }
  }

  public String getLastThreeYearsReport() {
    return this.lastThreeYearsReport;
  }

  public FinancialPositionDTO setLastThreeYearsReport(String lastThreeYearsReport) {
    this.lastThreeYearsReport = lastThreeYearsReport;
    return this;
  }

  public void unsetLastThreeYearsReport() {
    this.lastThreeYearsReport = null;
  }

  /** Returns true if field lastThreeYearsReport is set (has been assigned a value) and false otherwise */
  public boolean isSetLastThreeYearsReport() {
    return this.lastThreeYearsReport != null;
  }

  public void setLastThreeYearsReportIsSet(boolean value) {
    if (!value) {
      this.lastThreeYearsReport = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX_CATEGORY:
      if (value == null) {
        unsetIndexCategory();
      } else {
        setIndexCategory((String)value);
      }
      break;

    case INDEX_NAME:
      if (value == null) {
        unsetIndexName();
      } else {
        setIndexName((String)value);
      }
      break;

    case CURRENT_ANNUAL_REPORT:
      if (value == null) {
        unsetCurrentAnnualReport();
      } else {
        setCurrentAnnualReport((String)value);
      }
      break;

    case LAST_YEAR_REPORT:
      if (value == null) {
        unsetLastYearReport();
      } else {
        setLastYearReport((String)value);
      }
      break;

    case LAST_TWO_YEARS_REPORT:
      if (value == null) {
        unsetLastTwoYearsReport();
      } else {
        setLastTwoYearsReport((String)value);
      }
      break;

    case LAST_THREE_YEARS_REPORT:
      if (value == null) {
        unsetLastThreeYearsReport();
      } else {
        setLastThreeYearsReport((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX_CATEGORY:
      return getIndexCategory();

    case INDEX_NAME:
      return getIndexName();

    case CURRENT_ANNUAL_REPORT:
      return getCurrentAnnualReport();

    case LAST_YEAR_REPORT:
      return getLastYearReport();

    case LAST_TWO_YEARS_REPORT:
      return getLastTwoYearsReport();

    case LAST_THREE_YEARS_REPORT:
      return getLastThreeYearsReport();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX_CATEGORY:
      return isSetIndexCategory();
    case INDEX_NAME:
      return isSetIndexName();
    case CURRENT_ANNUAL_REPORT:
      return isSetCurrentAnnualReport();
    case LAST_YEAR_REPORT:
      return isSetLastYearReport();
    case LAST_TWO_YEARS_REPORT:
      return isSetLastTwoYearsReport();
    case LAST_THREE_YEARS_REPORT:
      return isSetLastThreeYearsReport();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FinancialPositionDTO)
      return this.equals((FinancialPositionDTO)that);
    return false;
  }

  public boolean equals(FinancialPositionDTO that) {
    if (that == null)
      return false;

    boolean this_present_indexCategory = true && this.isSetIndexCategory();
    boolean that_present_indexCategory = true && that.isSetIndexCategory();
    if (this_present_indexCategory || that_present_indexCategory) {
      if (!(this_present_indexCategory && that_present_indexCategory))
        return false;
      if (!this.indexCategory.equals(that.indexCategory))
        return false;
    }

    boolean this_present_indexName = true && this.isSetIndexName();
    boolean that_present_indexName = true && that.isSetIndexName();
    if (this_present_indexName || that_present_indexName) {
      if (!(this_present_indexName && that_present_indexName))
        return false;
      if (!this.indexName.equals(that.indexName))
        return false;
    }

    boolean this_present_currentAnnualReport = true && this.isSetCurrentAnnualReport();
    boolean that_present_currentAnnualReport = true && that.isSetCurrentAnnualReport();
    if (this_present_currentAnnualReport || that_present_currentAnnualReport) {
      if (!(this_present_currentAnnualReport && that_present_currentAnnualReport))
        return false;
      if (!this.currentAnnualReport.equals(that.currentAnnualReport))
        return false;
    }

    boolean this_present_lastYearReport = true && this.isSetLastYearReport();
    boolean that_present_lastYearReport = true && that.isSetLastYearReport();
    if (this_present_lastYearReport || that_present_lastYearReport) {
      if (!(this_present_lastYearReport && that_present_lastYearReport))
        return false;
      if (!this.lastYearReport.equals(that.lastYearReport))
        return false;
    }

    boolean this_present_lastTwoYearsReport = true && this.isSetLastTwoYearsReport();
    boolean that_present_lastTwoYearsReport = true && that.isSetLastTwoYearsReport();
    if (this_present_lastTwoYearsReport || that_present_lastTwoYearsReport) {
      if (!(this_present_lastTwoYearsReport && that_present_lastTwoYearsReport))
        return false;
      if (!this.lastTwoYearsReport.equals(that.lastTwoYearsReport))
        return false;
    }

    boolean this_present_lastThreeYearsReport = true && this.isSetLastThreeYearsReport();
    boolean that_present_lastThreeYearsReport = true && that.isSetLastThreeYearsReport();
    if (this_present_lastThreeYearsReport || that_present_lastThreeYearsReport) {
      if (!(this_present_lastThreeYearsReport && that_present_lastThreeYearsReport))
        return false;
      if (!this.lastThreeYearsReport.equals(that.lastThreeYearsReport))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_indexCategory = true && (isSetIndexCategory());
    list.add(present_indexCategory);
    if (present_indexCategory)
      list.add(indexCategory);

    boolean present_indexName = true && (isSetIndexName());
    list.add(present_indexName);
    if (present_indexName)
      list.add(indexName);

    boolean present_currentAnnualReport = true && (isSetCurrentAnnualReport());
    list.add(present_currentAnnualReport);
    if (present_currentAnnualReport)
      list.add(currentAnnualReport);

    boolean present_lastYearReport = true && (isSetLastYearReport());
    list.add(present_lastYearReport);
    if (present_lastYearReport)
      list.add(lastYearReport);

    boolean present_lastTwoYearsReport = true && (isSetLastTwoYearsReport());
    list.add(present_lastTwoYearsReport);
    if (present_lastTwoYearsReport)
      list.add(lastTwoYearsReport);

    boolean present_lastThreeYearsReport = true && (isSetLastThreeYearsReport());
    list.add(present_lastThreeYearsReport);
    if (present_lastThreeYearsReport)
      list.add(lastThreeYearsReport);

    return list.hashCode();
  }

  @Override
  public int compareTo(FinancialPositionDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIndexCategory()).compareTo(other.isSetIndexCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexCategory, other.indexCategory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndexName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentAnnualReport()).compareTo(other.isSetCurrentAnnualReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentAnnualReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentAnnualReport, other.currentAnnualReport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastYearReport()).compareTo(other.isSetLastYearReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastYearReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastYearReport, other.lastYearReport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTwoYearsReport()).compareTo(other.isSetLastTwoYearsReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTwoYearsReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTwoYearsReport, other.lastTwoYearsReport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastThreeYearsReport()).compareTo(other.isSetLastThreeYearsReport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastThreeYearsReport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastThreeYearsReport, other.lastThreeYearsReport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FinancialPositionDTO(");
    boolean first = true;

    sb.append("indexCategory:");
    if (this.indexCategory == null) {
      sb.append("null");
    } else {
      sb.append(this.indexCategory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("indexName:");
    if (this.indexName == null) {
      sb.append("null");
    } else {
      sb.append(this.indexName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentAnnualReport:");
    if (this.currentAnnualReport == null) {
      sb.append("null");
    } else {
      sb.append(this.currentAnnualReport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastYearReport:");
    if (this.lastYearReport == null) {
      sb.append("null");
    } else {
      sb.append(this.lastYearReport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastTwoYearsReport:");
    if (this.lastTwoYearsReport == null) {
      sb.append("null");
    } else {
      sb.append(this.lastTwoYearsReport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastThreeYearsReport:");
    if (this.lastThreeYearsReport == null) {
      sb.append("null");
    } else {
      sb.append(this.lastThreeYearsReport);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FinancialPositionDTOStandardSchemeFactory implements SchemeFactory {
    public FinancialPositionDTOStandardScheme getScheme() {
      return new FinancialPositionDTOStandardScheme();
    }
  }

  private static class FinancialPositionDTOStandardScheme extends StandardScheme<FinancialPositionDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FinancialPositionDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX_CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexCategory = iprot.readString();
              struct.setIndexCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INDEX_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.indexName = iprot.readString();
              struct.setIndexNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENT_ANNUAL_REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentAnnualReport = iprot.readString();
              struct.setCurrentAnnualReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_YEAR_REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastYearReport = iprot.readString();
              struct.setLastYearReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_TWO_YEARS_REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastTwoYearsReport = iprot.readString();
              struct.setLastTwoYearsReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_THREE_YEARS_REPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastThreeYearsReport = iprot.readString();
              struct.setLastThreeYearsReportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FinancialPositionDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.indexCategory != null) {
        oprot.writeFieldBegin(INDEX_CATEGORY_FIELD_DESC);
        oprot.writeString(struct.indexCategory);
        oprot.writeFieldEnd();
      }
      if (struct.indexName != null) {
        oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
        oprot.writeString(struct.indexName);
        oprot.writeFieldEnd();
      }
      if (struct.currentAnnualReport != null) {
        oprot.writeFieldBegin(CURRENT_ANNUAL_REPORT_FIELD_DESC);
        oprot.writeString(struct.currentAnnualReport);
        oprot.writeFieldEnd();
      }
      if (struct.lastYearReport != null) {
        oprot.writeFieldBegin(LAST_YEAR_REPORT_FIELD_DESC);
        oprot.writeString(struct.lastYearReport);
        oprot.writeFieldEnd();
      }
      if (struct.lastTwoYearsReport != null) {
        oprot.writeFieldBegin(LAST_TWO_YEARS_REPORT_FIELD_DESC);
        oprot.writeString(struct.lastTwoYearsReport);
        oprot.writeFieldEnd();
      }
      if (struct.lastThreeYearsReport != null) {
        oprot.writeFieldBegin(LAST_THREE_YEARS_REPORT_FIELD_DESC);
        oprot.writeString(struct.lastThreeYearsReport);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FinancialPositionDTOTupleSchemeFactory implements SchemeFactory {
    public FinancialPositionDTOTupleScheme getScheme() {
      return new FinancialPositionDTOTupleScheme();
    }
  }

  private static class FinancialPositionDTOTupleScheme extends TupleScheme<FinancialPositionDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FinancialPositionDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndexCategory()) {
        optionals.set(0);
      }
      if (struct.isSetIndexName()) {
        optionals.set(1);
      }
      if (struct.isSetCurrentAnnualReport()) {
        optionals.set(2);
      }
      if (struct.isSetLastYearReport()) {
        optionals.set(3);
      }
      if (struct.isSetLastTwoYearsReport()) {
        optionals.set(4);
      }
      if (struct.isSetLastThreeYearsReport()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetIndexCategory()) {
        oprot.writeString(struct.indexCategory);
      }
      if (struct.isSetIndexName()) {
        oprot.writeString(struct.indexName);
      }
      if (struct.isSetCurrentAnnualReport()) {
        oprot.writeString(struct.currentAnnualReport);
      }
      if (struct.isSetLastYearReport()) {
        oprot.writeString(struct.lastYearReport);
      }
      if (struct.isSetLastTwoYearsReport()) {
        oprot.writeString(struct.lastTwoYearsReport);
      }
      if (struct.isSetLastThreeYearsReport()) {
        oprot.writeString(struct.lastThreeYearsReport);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FinancialPositionDTO struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.indexCategory = iprot.readString();
        struct.setIndexCategoryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.indexName = iprot.readString();
        struct.setIndexNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currentAnnualReport = iprot.readString();
        struct.setCurrentAnnualReportIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastYearReport = iprot.readString();
        struct.setLastYearReportIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastTwoYearsReport = iprot.readString();
        struct.setLastTwoYearsReportIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastThreeYearsReport = iprot.readString();
        struct.setLastThreeYearsReportIsSet(true);
      }
    }
  }

}


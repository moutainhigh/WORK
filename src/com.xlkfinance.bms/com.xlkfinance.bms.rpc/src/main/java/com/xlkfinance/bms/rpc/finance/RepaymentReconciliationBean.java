/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xlkfinance.bms.rpc.finance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-7")
public class RepaymentReconciliationBean implements org.apache.thrift.TBase<RepaymentReconciliationBean, RepaymentReconciliationBean._Fields>, java.io.Serializable, Cloneable, Comparable<RepaymentReconciliationBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RepaymentReconciliationBean");

  private static final org.apache.thrift.protocol.TField REPAYMENT_RECONCILIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("repaymentReconciliation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DETAI_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("detaiList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RECONCILIATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("reconciliationType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RepaymentReconciliationBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RepaymentReconciliationBeanTupleSchemeFactory());
  }

  public RepaymentReconciliationDTO repaymentReconciliation; // required
  public List<RepaymentReconciliationDetailDTO> detaiList; // required
  public int reconciliationType; // required
  public int refId; // required
  public int type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REPAYMENT_RECONCILIATION((short)1, "repaymentReconciliation"),
    DETAI_LIST((short)2, "detaiList"),
    RECONCILIATION_TYPE((short)3, "reconciliationType"),
    REF_ID((short)4, "refId"),
    TYPE((short)5, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REPAYMENT_RECONCILIATION
          return REPAYMENT_RECONCILIATION;
        case 2: // DETAI_LIST
          return DETAI_LIST;
        case 3: // RECONCILIATION_TYPE
          return RECONCILIATION_TYPE;
        case 4: // REF_ID
          return REF_ID;
        case 5: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECONCILIATIONTYPE_ISSET_ID = 0;
  private static final int __REFID_ISSET_ID = 1;
  private static final int __TYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REPAYMENT_RECONCILIATION, new org.apache.thrift.meta_data.FieldMetaData("repaymentReconciliation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentReconciliationDTO.class)));
    tmpMap.put(_Fields.DETAI_LIST, new org.apache.thrift.meta_data.FieldMetaData("detaiList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RepaymentReconciliationDetailDTO.class))));
    tmpMap.put(_Fields.RECONCILIATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("reconciliationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RepaymentReconciliationBean.class, metaDataMap);
  }

  public RepaymentReconciliationBean() {
  }

  public RepaymentReconciliationBean(
    RepaymentReconciliationDTO repaymentReconciliation,
    List<RepaymentReconciliationDetailDTO> detaiList,
    int reconciliationType,
    int refId,
    int type)
  {
    this();
    this.repaymentReconciliation = repaymentReconciliation;
    this.detaiList = detaiList;
    this.reconciliationType = reconciliationType;
    setReconciliationTypeIsSet(true);
    this.refId = refId;
    setRefIdIsSet(true);
    this.type = type;
    setTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RepaymentReconciliationBean(RepaymentReconciliationBean other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRepaymentReconciliation()) {
      this.repaymentReconciliation = new RepaymentReconciliationDTO(other.repaymentReconciliation);
    }
    if (other.isSetDetaiList()) {
      List<RepaymentReconciliationDetailDTO> __this__detaiList = new ArrayList<RepaymentReconciliationDetailDTO>(other.detaiList.size());
      for (RepaymentReconciliationDetailDTO other_element : other.detaiList) {
        __this__detaiList.add(new RepaymentReconciliationDetailDTO(other_element));
      }
      this.detaiList = __this__detaiList;
    }
    this.reconciliationType = other.reconciliationType;
    this.refId = other.refId;
    this.type = other.type;
  }

  public RepaymentReconciliationBean deepCopy() {
    return new RepaymentReconciliationBean(this);
  }

  @Override
  public void clear() {
    this.repaymentReconciliation = null;
    this.detaiList = null;
    setReconciliationTypeIsSet(false);
    this.reconciliationType = 0;
    setRefIdIsSet(false);
    this.refId = 0;
    setTypeIsSet(false);
    this.type = 0;
  }

  public RepaymentReconciliationDTO getRepaymentReconciliation() {
    return this.repaymentReconciliation;
  }

  public RepaymentReconciliationBean setRepaymentReconciliation(RepaymentReconciliationDTO repaymentReconciliation) {
    this.repaymentReconciliation = repaymentReconciliation;
    return this;
  }

  public void unsetRepaymentReconciliation() {
    this.repaymentReconciliation = null;
  }

  /** Returns true if field repaymentReconciliation is set (has been assigned a value) and false otherwise */
  public boolean isSetRepaymentReconciliation() {
    return this.repaymentReconciliation != null;
  }

  public void setRepaymentReconciliationIsSet(boolean value) {
    if (!value) {
      this.repaymentReconciliation = null;
    }
  }

  public int getDetaiListSize() {
    return (this.detaiList == null) ? 0 : this.detaiList.size();
  }

  public java.util.Iterator<RepaymentReconciliationDetailDTO> getDetaiListIterator() {
    return (this.detaiList == null) ? null : this.detaiList.iterator();
  }

  public void addToDetaiList(RepaymentReconciliationDetailDTO elem) {
    if (this.detaiList == null) {
      this.detaiList = new ArrayList<RepaymentReconciliationDetailDTO>();
    }
    this.detaiList.add(elem);
  }

  public List<RepaymentReconciliationDetailDTO> getDetaiList() {
    return this.detaiList;
  }

  public RepaymentReconciliationBean setDetaiList(List<RepaymentReconciliationDetailDTO> detaiList) {
    this.detaiList = detaiList;
    return this;
  }

  public void unsetDetaiList() {
    this.detaiList = null;
  }

  /** Returns true if field detaiList is set (has been assigned a value) and false otherwise */
  public boolean isSetDetaiList() {
    return this.detaiList != null;
  }

  public void setDetaiListIsSet(boolean value) {
    if (!value) {
      this.detaiList = null;
    }
  }

  public int getReconciliationType() {
    return this.reconciliationType;
  }

  public RepaymentReconciliationBean setReconciliationType(int reconciliationType) {
    this.reconciliationType = reconciliationType;
    setReconciliationTypeIsSet(true);
    return this;
  }

  public void unsetReconciliationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECONCILIATIONTYPE_ISSET_ID);
  }

  /** Returns true if field reconciliationType is set (has been assigned a value) and false otherwise */
  public boolean isSetReconciliationType() {
    return EncodingUtils.testBit(__isset_bitfield, __RECONCILIATIONTYPE_ISSET_ID);
  }

  public void setReconciliationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECONCILIATIONTYPE_ISSET_ID, value);
  }

  public int getRefId() {
    return this.refId;
  }

  public RepaymentReconciliationBean setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public int getType() {
    return this.type;
  }

  public RepaymentReconciliationBean setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REPAYMENT_RECONCILIATION:
      if (value == null) {
        unsetRepaymentReconciliation();
      } else {
        setRepaymentReconciliation((RepaymentReconciliationDTO)value);
      }
      break;

    case DETAI_LIST:
      if (value == null) {
        unsetDetaiList();
      } else {
        setDetaiList((List<RepaymentReconciliationDetailDTO>)value);
      }
      break;

    case RECONCILIATION_TYPE:
      if (value == null) {
        unsetReconciliationType();
      } else {
        setReconciliationType((Integer)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REPAYMENT_RECONCILIATION:
      return getRepaymentReconciliation();

    case DETAI_LIST:
      return getDetaiList();

    case RECONCILIATION_TYPE:
      return Integer.valueOf(getReconciliationType());

    case REF_ID:
      return Integer.valueOf(getRefId());

    case TYPE:
      return Integer.valueOf(getType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REPAYMENT_RECONCILIATION:
      return isSetRepaymentReconciliation();
    case DETAI_LIST:
      return isSetDetaiList();
    case RECONCILIATION_TYPE:
      return isSetReconciliationType();
    case REF_ID:
      return isSetRefId();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RepaymentReconciliationBean)
      return this.equals((RepaymentReconciliationBean)that);
    return false;
  }

  public boolean equals(RepaymentReconciliationBean that) {
    if (that == null)
      return false;

    boolean this_present_repaymentReconciliation = true && this.isSetRepaymentReconciliation();
    boolean that_present_repaymentReconciliation = true && that.isSetRepaymentReconciliation();
    if (this_present_repaymentReconciliation || that_present_repaymentReconciliation) {
      if (!(this_present_repaymentReconciliation && that_present_repaymentReconciliation))
        return false;
      if (!this.repaymentReconciliation.equals(that.repaymentReconciliation))
        return false;
    }

    boolean this_present_detaiList = true && this.isSetDetaiList();
    boolean that_present_detaiList = true && that.isSetDetaiList();
    if (this_present_detaiList || that_present_detaiList) {
      if (!(this_present_detaiList && that_present_detaiList))
        return false;
      if (!this.detaiList.equals(that.detaiList))
        return false;
    }

    boolean this_present_reconciliationType = true;
    boolean that_present_reconciliationType = true;
    if (this_present_reconciliationType || that_present_reconciliationType) {
      if (!(this_present_reconciliationType && that_present_reconciliationType))
        return false;
      if (this.reconciliationType != that.reconciliationType)
        return false;
    }

    boolean this_present_refId = true;
    boolean that_present_refId = true;
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_repaymentReconciliation = true && (isSetRepaymentReconciliation());
    list.add(present_repaymentReconciliation);
    if (present_repaymentReconciliation)
      list.add(repaymentReconciliation);

    boolean present_detaiList = true && (isSetDetaiList());
    list.add(present_detaiList);
    if (present_detaiList)
      list.add(detaiList);

    boolean present_reconciliationType = true;
    list.add(present_reconciliationType);
    if (present_reconciliationType)
      list.add(reconciliationType);

    boolean present_refId = true;
    list.add(present_refId);
    if (present_refId)
      list.add(refId);

    boolean present_type = true;
    list.add(present_type);
    if (present_type)
      list.add(type);

    return list.hashCode();
  }

  @Override
  public int compareTo(RepaymentReconciliationBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRepaymentReconciliation()).compareTo(other.isSetRepaymentReconciliation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepaymentReconciliation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repaymentReconciliation, other.repaymentReconciliation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetaiList()).compareTo(other.isSetDetaiList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetaiList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detaiList, other.detaiList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReconciliationType()).compareTo(other.isSetReconciliationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconciliationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconciliationType, other.reconciliationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RepaymentReconciliationBean(");
    boolean first = true;

    sb.append("repaymentReconciliation:");
    if (this.repaymentReconciliation == null) {
      sb.append("null");
    } else {
      sb.append(this.repaymentReconciliation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detaiList:");
    if (this.detaiList == null) {
      sb.append("null");
    } else {
      sb.append(this.detaiList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconciliationType:");
    sb.append(this.reconciliationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refId:");
    sb.append(this.refId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (repaymentReconciliation != null) {
      repaymentReconciliation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RepaymentReconciliationBeanStandardSchemeFactory implements SchemeFactory {
    public RepaymentReconciliationBeanStandardScheme getScheme() {
      return new RepaymentReconciliationBeanStandardScheme();
    }
  }

  private static class RepaymentReconciliationBeanStandardScheme extends StandardScheme<RepaymentReconciliationBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RepaymentReconciliationBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REPAYMENT_RECONCILIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.repaymentReconciliation = new RepaymentReconciliationDTO();
              struct.repaymentReconciliation.read(iprot);
              struct.setRepaymentReconciliationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETAI_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.detaiList = new ArrayList<RepaymentReconciliationDetailDTO>(_list0.size);
                RepaymentReconciliationDetailDTO _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new RepaymentReconciliationDetailDTO();
                  _elem1.read(iprot);
                  struct.detaiList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDetaiListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECONCILIATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconciliationType = iprot.readI32();
              struct.setReconciliationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RepaymentReconciliationBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.repaymentReconciliation != null) {
        oprot.writeFieldBegin(REPAYMENT_RECONCILIATION_FIELD_DESC);
        struct.repaymentReconciliation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.detaiList != null) {
        oprot.writeFieldBegin(DETAI_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.detaiList.size()));
          for (RepaymentReconciliationDetailDTO _iter3 : struct.detaiList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECONCILIATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.reconciliationType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REF_ID_FIELD_DESC);
      oprot.writeI32(struct.refId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RepaymentReconciliationBeanTupleSchemeFactory implements SchemeFactory {
    public RepaymentReconciliationBeanTupleScheme getScheme() {
      return new RepaymentReconciliationBeanTupleScheme();
    }
  }

  private static class RepaymentReconciliationBeanTupleScheme extends TupleScheme<RepaymentReconciliationBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RepaymentReconciliationBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRepaymentReconciliation()) {
        optionals.set(0);
      }
      if (struct.isSetDetaiList()) {
        optionals.set(1);
      }
      if (struct.isSetReconciliationType()) {
        optionals.set(2);
      }
      if (struct.isSetRefId()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetRepaymentReconciliation()) {
        struct.repaymentReconciliation.write(oprot);
      }
      if (struct.isSetDetaiList()) {
        {
          oprot.writeI32(struct.detaiList.size());
          for (RepaymentReconciliationDetailDTO _iter4 : struct.detaiList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetReconciliationType()) {
        oprot.writeI32(struct.reconciliationType);
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RepaymentReconciliationBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.repaymentReconciliation = new RepaymentReconciliationDTO();
        struct.repaymentReconciliation.read(iprot);
        struct.setRepaymentReconciliationIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.detaiList = new ArrayList<RepaymentReconciliationDetailDTO>(_list5.size);
          RepaymentReconciliationDetailDTO _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new RepaymentReconciliationDetailDTO();
            _elem6.read(iprot);
            struct.detaiList.add(_elem6);
          }
        }
        struct.setDetaiListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reconciliationType = iprot.readI32();
        struct.setReconciliationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
    }
  }

}

